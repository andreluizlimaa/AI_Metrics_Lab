Pergunta,Resposta
Qual a diferença entre `null` e `undefined` em JavaScript?,"`null` é um valor de atribuição que representa a ausência intencional de um valor. `undefined` significa que uma variável foi declarada, mas não foi atribuído nenhum valor a ela.

**2.**"
O que é o operador `typeof` e qual é seu uso?,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando. É usado para verificar o tipo de uma variável ou expressão.

**3.**"
"Explique o conceito de ""hoisting"" em JavaScript.","Hoisting é um comportamento onde as declarações de variáveis (com `var`) e funções são movidas para o topo do seu escopo antes da execução do código. Isso permite que você use variáveis e funções antes de declará-las textualmente no seu código, embora com algumas nuances para `var`.

**4.**"
Qual a diferença entre `==` e `===` em JavaScript?,"`==` é o operador de igualdade abstrata, que realiza a conversão de tipo antes da comparação. `===` é o operador de igualdade estrita, que não realiza a conversão de tipo e compara tanto o valor quanto o tipo.

**5.**"
O que são closures em JavaScript?,"Closures são funções que lembram do ambiente lexical em que foram criadas, mesmo quando são executadas fora desse ambiente. Elas permitem que uma função acesse variáveis do escopo externo, mesmo após a função externa ter retornado.

**6.**"
"Como você declara uma variável em JavaScript usando `let`, `const` e `var`? Quais são as diferenças?","`var` é a forma antiga de declarar variáveis, com escopo de função ou global. `let` e `const` foram introduzidos no ES6 e têm escopo de bloco. `let` permite reatribuição, enquanto `const` declara uma constante, cujo valor não pode ser reatribuído após a inicialização.

**7.**"
O que é o objeto `arguments` em JavaScript?,"O objeto `arguments` é um objeto semelhante a um array que está disponível dentro de funções. Ele contém os argumentos passados para a função, independentemente de quantos parâmetros a função tenha definido.

**8.**"
"Explique o conceito de ""escopo"" em JavaScript.","Escopo define a visibilidade e acessibilidade de variáveis e funções em diferentes partes do código. Existem escopo global, escopo de função (com `var`) e escopo de bloco (com `let` e `const`).

**9.**"
O que é uma função anônima em JavaScript?,"Uma função anônima é uma função que não tem um nome identificador. Ela é frequentemente usada em expressões de função e como callbacks.

**10.**"
Como criar um objeto em JavaScript?,"Objetos podem ser criados usando a notação literal de objeto `{}` ou usando o construtor `new Object()`. Também podem ser criados usando classes (introduzidas no ES6).

**11.**"
O que é o `this` em JavaScript?,"`this` refere-se ao objeto no qual a função está sendo executada. Seu valor depende de como a função é chamada.

**12.**"
"O que são ""callbacks"" em JavaScript?","Callbacks são funções passadas como argumentos para outras funções, que são então executadas dentro da função principal, geralmente após a conclusão de alguma operação.

**13.**"
O que é o método `bind()` em JavaScript e qual é seu uso?,"`bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido. É usado para fixar o valor de `this` em uma função.

**14.**"
Qual a diferença entre `apply()` e `call()` em JavaScript?,"Ambos `apply()` e `call()` são usados para chamar uma função com um valor específico para `this`. A diferença é que `call()` aceita argumentos individualmente, enquanto `apply()` aceita argumentos como um array.

**15.**"
O que é o método `map()` em JavaScript e qual é seu uso?,"`map()` é um método de array que cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.

**16.**"
O que é o método `filter()` em JavaScript e qual é seu uso?,"`filter()` é um método de array que cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.

**17.**"
O que é o método `reduce()` em JavaScript e qual é seu uso?,"`reduce()` é um método de array que executa uma função ""reducer"" (fornecida por você) em cada elemento do array, resultando em um único valor de retorno.

**18.**"
Como você itera sobre as propriedades de um objeto em JavaScript?,"Você pode usar um loop `for...in` para iterar sobre as propriedades enumeráveis de um objeto.

**19.**"
O que é o operador ternário em JavaScript?,"O operador ternário é uma forma abreviada de escrever uma instrução `if...else`. Sua sintaxe é `condição ? expressãoSeVerdadeira : expressãoSeFalsa`.

**20.**"
O que é o método `parseInt()` em JavaScript e qual é seu uso?,"`parseInt()` analisa uma string e retorna um inteiro. Opcionalmente, pode receber um segundo argumento que especifica a base numérica.

**21.**"
O que é o método `parseFloat()` em JavaScript e qual é seu uso?,"`parseFloat()` analisa uma string e retorna um número de ponto flutuante.

**22.**"
Explique o que é a coerção de tipo em JavaScript.,"Coerção de tipo é a conversão automática de um tipo de dado para outro pelo JavaScript. Isso pode acontecer durante operações matemáticas, comparações, ou outras situações.

**23.**"
O que são Template Literals (Template Strings) em JavaScript?,"Template literals são strings delimitadas por backticks (``), que permitem a interpolação de variáveis e expressões dentro da string usando `${}`.

**24.**"
O que são Arrow Functions em JavaScript?,"Arrow functions são uma sintaxe mais concisa para escrever funções anônimas. Elas também têm um comportamento diferente em relação ao `this`.

**25.**"
Como você lida com erros em JavaScript usando `try...catch`?,"O bloco `try` contém o código que pode lançar uma exceção. O bloco `catch` captura a exceção se ela for lançada e permite que você a trate.

**26.**"
O que é o operador `instanceof` em JavaScript?,"O operador `instanceof` verifica se um objeto é uma instância de uma determinada classe ou construtor.

**27.**"
O que é o método `hasOwnProperty()` em JavaScript?,"O método `hasOwnProperty()` retorna um booleano indicando se o objeto possui a propriedade especificada como uma propriedade direta (não herdada) do objeto.

**28.**"
O que é o JSON em JavaScript?,"JSON (JavaScript Object Notation) é um formato leve de troca de dados. É baseado em um subconjunto da linguagem JavaScript, mas é usado independentemente da linguagem.

**29.**"
Como você converte um objeto JavaScript em uma string JSON?,"Você pode usar o método `JSON.stringify()` para converter um objeto JavaScript em uma string JSON.

**30.**"
Como você converte uma string JSON em um objeto JavaScript?,"Você pode usar o método `JSON.parse()` para converter uma string JSON em um objeto JavaScript.

**31.**"
"Explique o conceito de ""protótipo"" em JavaScript.","Em JavaScript, cada objeto tem um protótipo. Quando você tenta acessar uma propriedade de um objeto que não existe diretamente, o JavaScript procura no protótipo do objeto e, em seguida, no protótipo do protótipo, e assim por diante, até encontrar a propriedade ou atingir o fim da cadeia de protótipos.

**32.**"
O que é a herança prototípica em JavaScript?,"Herança prototípica é um mecanismo em JavaScript onde objetos herdam propriedades e métodos de seus protótipos.

**33.**"
O que é o método `Object.create()` em JavaScript?,"`Object.create()` cria um novo objeto com o protótipo especificado e propriedades opcionais.

**34.**"
O que é uma classe em JavaScript (ES6)?,"Classes em JavaScript (introduzidas no ES6) são um açúcar sintático sobre a herança prototípica. Elas fornecem uma maneira mais clara e concisa de criar e herdar objetos.

**35.**"
Como você define um construtor em uma classe JavaScript?,"O construtor é definido usando o método `constructor()` dentro da classe. Ele é executado quando um novo objeto é criado a partir da classe.

**36.**"
Como você herda de outra classe em JavaScript usando `extends`?,"A palavra-chave `extends` é usada para criar uma classe filha (subclasse) que herda propriedades e métodos de uma classe pai (superclasse).

**37.**"
O que é o método `super()` em classes JavaScript?,"`super()` é usado dentro do construtor de uma classe filha para chamar o construtor da classe pai e inicializar as propriedades herdadas.

**38.**"
O que são getters e setters em classes JavaScript?,"Getters e setters são métodos especiais que permitem controlar o acesso e a modificação das propriedades de um objeto. Eles são definidos usando as palavras-chave `get` e `set`.

**39.**"
O que são métodos estáticos em classes JavaScript?,"Métodos estáticos são métodos que pertencem à classe em si, em vez de pertencer a uma instância da classe. Eles são definidos usando a palavra-chave `static`.

**40.**"
O que são generators em JavaScript?,"Generators são funções que podem ser pausadas e retomadas, permitindo que você produza uma sequência de valores ao longo do tempo. Eles são definidos usando a palavra-chave `function*`.

**41.**"
O que é a palavra-chave `yield` em generators JavaScript?,"A palavra-chave `yield` é usada dentro de uma função generator para pausar a execução e retornar um valor.

**42.**"
O que são iterators em JavaScript?,"Iterators são objetos que fornecem uma maneira de acessar sequencialmente os elementos de uma coleção (como um array ou um objeto).

**43.**"
O que é o protocolo iterable em JavaScript?,"O protocolo iterable define como um objeto pode ser iterado usando um loop `for...of`. Um objeto é iterável se ele tiver um método com a chave `Symbol.iterator` que retorna um objeto iterator.

**44.**"
O que é o loop `for...of` em JavaScript?,"O loop `for...of` é usado para iterar sobre valores iteráveis, como arrays, strings, mapas e conjuntos.

**45.**"
O que é um Set em JavaScript?,"Um Set é uma coleção de valores únicos. Ele permite armazenar qualquer tipo de valor, seja primitivo ou objeto.

**46.**"
O que é um Map em JavaScript?,"Um Map é uma coleção de pares chave-valor, onde as chaves podem ser de qualquer tipo de dado.

**47.**"
Qual a diferença entre um objeto JavaScript comum e um Map?,"Em um objeto JavaScript comum, as chaves são sempre strings ou Symbols. Em um Map, as chaves podem ser de qualquer tipo de dado. Além disso, Maps preservam a ordem de inserção.

**48.**"
O que são Promises em JavaScript?,"Promises são objetos que representam a conclusão (ou falha) eventual de uma operação assíncrona e seu valor resultante.

**49.**"
Quais são os estados de uma Promise?,"Uma Promise pode estar em um dos três estados: pendente (pending), resolvida (fulfilled) ou rejeitada (rejected).

**50.**"
"O que são os métodos `.then()`, `.catch()` e `.finally()` em Promises?","`.then()` é usado para lidar com o resultado de uma Promise resolvida. `.catch()` é usado para lidar com o erro de uma Promise rejeitada. `.finally()` é executado independentemente de a Promise ser resolvida ou rejeitada.

**51.**"
O que são `async` e `await` em JavaScript?,"`async` e `await` são palavras-chave que facilitam o trabalho com Promises, tornando o código assíncrono mais legível e semelhante ao código síncrono. `async` define uma função assíncrona, e `await` pausa a execução da função até que uma Promise seja resolvida.

**52.**"
Como você lança um erro personalizado em JavaScript?,"Você pode usar a palavra-chave `throw` seguida por um objeto de erro, como `new Error(""Mensagem de erro"")`.

**53.**"
"O que é o modo estrito (`""use strict""`) em JavaScript?","O modo estrito é uma forma de impor regras mais rigorosas no código JavaScript, ajudando a evitar erros comuns e a melhorar a segurança.

**54.**"
O que é o método `Object.freeze()` em JavaScript?,"`Object.freeze()` congela um objeto, impedindo que novas propriedades sejam adicionadas, removidas ou modificadas.

**55.**"
O que é o método `Object.seal()` em JavaScript?,"`Object.seal()` sela um objeto, impedindo que novas propriedades sejam adicionadas ou removidas, mas permite que os valores das propriedades existentes sejam modificados.

**56.**"
O que são WeakSets em JavaScript?,"WeakSets são coleções de objetos onde cada objeto na WeakSet é mantido ""fracamente"". Isso significa que, se não houver outras referências para um objeto na WeakSet, ele pode ser coletado pelo coletor de lixo (garbage collector). WeakSets não podem ser iterados.

**57.**"
O que são WeakMaps em JavaScript?,"WeakMaps são coleções de pares chave-valor onde as chaves são objetos e os valores podem ser de qualquer tipo. Assim como nos WeakSets, as chaves são mantidas ""fracamente"", permitindo que sejam coletadas pelo coletor de lixo se não houver outras referências. WeakMaps não podem ser iterados.

**58.**"
O que é o conceito de imutabilidade em JavaScript?,"Imutabilidade significa que, uma vez que um objeto é criado, seu estado não pode ser alterado.  Em JavaScript, isso geralmente é alcançado criando novas cópias de objetos em vez de modificá-los diretamente.

**59.**"
Como você cria uma cópia superficial de um objeto em JavaScript?,"Você pode criar uma cópia superficial usando o operador spread (`...`) ou o método `Object.assign()`.

**60.**"
Como você cria uma cópia profunda de um objeto em JavaScript?,"Para uma cópia profunda, você pode usar `JSON.parse(JSON.stringify(objeto))` (com limitações para funções e objetos complexos) ou bibliotecas especializadas.

**61.**"
"O que são ""destructuring assignments"" em JavaScript?","Destructuring assignments são uma forma concisa de extrair valores de objetos ou arrays e atribuí-los a variáveis.

**62.**"
O que é o operador spread (`...`) em JavaScript?,"O operador spread pode ser usado para expandir um array ou objeto em elementos individuais.

**63.**"
O que são modules em JavaScript (ES6)?,"Modules são uma forma de organizar o código em unidades separadas e reutilizáveis. Eles permitem que você exporte e importe variáveis, funções e classes entre diferentes arquivos.

**64.**"
Como você exporta e importa módulos em JavaScript?,"Você pode usar as palavras-chave `export` para tornar variáveis, funções ou classes disponíveis para outros módulos e `import` para importar esses elementos em outro módulo.

**65.**"
Qual a diferença entre `export default` e `export` em JavaScript?,"`export default` define uma única exportação padrão para um módulo, enquanto `export` permite exportar múltiplas variáveis, funções ou classes com seus nomes.

**66.**"
O que são Higher-Order Functions em JavaScript?,"Higher-Order Functions são funções que recebem outras funções como argumentos ou retornam outras funções como resultados.

**67.**"
O que é currying em JavaScript?,"Currying é uma técnica que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.

**68.**"
O que é composição de funções em JavaScript?,"Composição de funções é o processo de combinar duas ou mais funções para produzir uma nova função.

**69.**"
O que são Immediately Invoked Function Expressions (IIFE) em JavaScript?,"IIFE são funções que são executadas assim que são definidas. Elas são usadas para criar um escopo privado e evitar a poluição do escopo global.

**70.**"
O que é o operador `??` (Nullish Coalescing Operator) em JavaScript?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo.

**71.**"
O que é o operador `?.` (Optional Chaining Operator) em JavaScript?,"O operador `?.` permite acessar propriedades de um objeto sem causar um erro se uma propriedade intermediária for `null` ou `undefined`. Ele retorna `undefined` nesse caso.

**72.**"
O que é o método `Object.entries()` em JavaScript?,"`Object.entries()` retorna um array de pares chave-valor do objeto.

**73.**"
O que é o método `Object.keys()` em JavaScript?,"`Object.keys()` retorna um array com as chaves do objeto.

**74.**"
O que é o método `Object.values()` em JavaScript?,"`Object.values()` retorna um array com os valores do objeto.

**75.**"
O que são regular expressions (regex) em JavaScript?,"Regular expressions são padrões usados para corresponder combinações de caracteres em strings.

**76.**"
Como você cria uma regular expression em JavaScript?,"Você pode criar uma regular expression usando a notação literal `/padrão/` ou usando o construtor `new RegExp('padrão')`.

**77.**"
Quais são alguns dos flags comuns usados em regular expressions JavaScript?,"Alguns flags comuns incluem `i` (ignorar maiúsculas e minúsculas), `g` (corresponder globalmente) e `m` (multi-linha).

**78.**"
O que são grupos de captura em regular expressions?,"Grupos de captura são partes do padrão de uma regular expression que são delimitadas por parênteses `()`. Eles permitem que você extraia partes específicas da string correspondida.

**79.**"
O que é backtracking em regular expressions?,"Backtracking é o processo pelo qual o motor da regular expression retrocede em uma string para tentar encontrar uma correspondência. Pode ser ineficiente em certos casos.

**80.**"
O que é o método `String.prototype.match()` em JavaScript?,"`match()` retorna um array contendo os resultados da correspondência de uma string com uma regular expression.

**81.**"
O que é o método `String.prototype.replace()` em JavaScript?,"`replace()` substitui uma parte de uma string por outra string ou pelo resultado de uma função.

**82.**"
O que é o método `String.prototype.search()` em JavaScript?,"`search()` retorna o índice da primeira ocorrência de um valor em uma string.

**83.**"
O que é o método `String.prototype.split()` em JavaScript?,"`split()` divide uma string em um array de substrings.

**84.**"
Como você formata datas em JavaScript?,"Você pode usar os métodos do objeto `Date` (como `getFullYear()`, `getMonth()`, `getDate()`) ou usar `Intl.DateTimeFormat` para formatação mais avançada e localizada.

**85.**"
Como você obtém a data e hora atual em JavaScript?,"Você pode criar um novo objeto `Date` usando `new Date()`.

**86.**"
Como você mede o tempo de execução de um trecho de código em JavaScript?,"Você pode usar `console.time('label')` e `console.timeEnd('label')` para medir o tempo decorrido entre os dois pontos.

**87.**"
O que são Web Workers em JavaScript?,"Web Workers permitem executar scripts JavaScript em threads de fundo, sem bloquear a thread principal da interface do usuário.

**88.**"
Como você comunica entre um Web Worker e a thread principal?,"Você pode usar o método `postMessage()` para enviar mensagens entre o Web Worker e a thread principal, e o evento `onmessage` para receber mensagens.

**89.**"
O que é o objeto `console` em JavaScript e quais são seus métodos comuns?,"O objeto `console` fornece acesso ao console de depuração do navegador ou ambiente de execução. Métodos comuns incluem `console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, e `console.timeEnd()`.

**90.**"
O que é o método `Array.isArray()` em JavaScript?,"`Array.isArray()` retorna `true` se um valor é um array, caso contrário, retorna `false`.

**91.**"
O que são bitwise operators em JavaScript?,"Bitwise operators realizam operações em nível de bits em números inteiros. Exemplos incluem `&` (AND), `|` (OR), `^` (XOR), `~` (NOT), `<<` (left shift), `>>` (right shift), e `>>>` (unsigned right shift).

**92.**"
O que é o método `String.fromCharCode()` em JavaScript?,"`String.fromCharCode()` retorna uma string criada a partir de uma sequência de valores Unicode.

**93.**"
O que é o método `String.prototype.charCodeAt()` em JavaScript?,"`charCodeAt()` retorna o valor Unicode de um caractere em uma string.

**94.**"
O que é o operador `void` em JavaScript?,"O operador `void` avalia uma expressão e retorna `undefined`. É frequentemente usado para evitar que o resultado de uma expressão seja exibido no navegador.

**95.**"
Como você verifica se uma variável é um número em JavaScript?,"Você pode usar `typeof valor === 'number'` (mas isso inclui `NaN` e `Infinity`). Para ser mais preciso, você pode usar `Number.isFinite(valor)`.

**96.**"
O que é `NaN` em JavaScript?,"`NaN` (Not-a-Number) é um valor que representa um resultado numérico indefinido ou não representável.

**97.**"
Como você verifica se um valor é `NaN` em JavaScript?,"Você deve usar `Number.isNaN(valor)` em vez de `valor === NaN`, porque `NaN` nunca é igual a si mesmo.

**98.**"
O que é o método `Number.isInteger()` em JavaScript?,"`Number.isInteger()` retorna `true` se um valor é um inteiro, caso contrário, retorna `false`.

**99.**"
O que é o objeto `Math` em JavaScript e quais são algumas de suas propriedades e métodos?,"O objeto `Math` fornece funções matemáticas e constantes. Algumas propriedades incluem `Math.PI`, `Math.E`, e métodos como `Math.round()`, `Math.floor()`, `Math.ceil()`, `Math.random()`, `Math.abs()`, `Math.pow()`, e `Math.sqrt()`.

**100.**"
Como você gera um número aleatório entre 0 e 1 em JavaScript?,"Você pode usar `Math.random()`.

**101.**"
Como você arredonda um número para o inteiro mais próximo em JavaScript?,"Você pode usar `Math.round()`.

**102.**"
Como você arredonda um número para o inteiro menor mais próximo em JavaScript?,"Você pode usar `Math.floor()`.

**103.**"
Como você arredonda um número para o inteiro maior mais próximo em JavaScript?,"Você pode usar `Math.ceil()`.

**104.**"
Como você calcula a raiz quadrada de um número em JavaScript?,"Você pode usar `Math.sqrt()`.

**105.**"
Como você eleva um número a uma potência em JavaScript?,"Você pode usar `Math.pow(base, expoente)` ou o operador `**` (exponenciação).

**106.**"
Como você obtém o valor absoluto de um número em JavaScript?,"Você pode usar `Math.abs()`.

**107.**"
O que são TypedArrays em JavaScript?,"TypedArrays fornecem um mecanismo para acessar dados binários brutos de forma eficiente. Eles são usados para manipular dados como imagens, áudio e vídeo.

**108.**"
Quais são alguns exemplos de TypedArrays em JavaScript?,"Exemplos incluem `Int8Array`, `Uint8Array`, `Int16Array`, `Uint16Array`, `Int32Array`, `Uint32Array`, `Float32Array`, e `Float64Array`.

**109.**"
O que é um ArrayBuffer em JavaScript?,"Um ArrayBuffer é um objeto que representa um buffer de dados binários genérico e de comprimento fixo.

**110.**"
O que é uma DataView em JavaScript?,"Uma DataView fornece uma interface de baixo nível para ler e escrever dados em um ArrayBuffer, permitindo que você especifique o formato dos dados (como inteiro de 8 bits, ponto flutuante de 32 bits, etc.).

**111.**"
O que é o método `Array.from()` em JavaScript?,"`Array.from()` cria um novo array a partir de um objeto iterable ou semelhante a um array.

**112.**"
O que é o método `Array.of()` em JavaScript?,"`Array.of()` cria um novo array com um número variável de argumentos, independentemente do número ou do tipo dos argumentos.

**113.**"
O que é o método `Array.prototype.includes()` em JavaScript?,"`includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado.

**114.**"
O que é o método `Array.prototype.find()` em JavaScript?,"`find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`.

**115.**"
O que é o método `Array.prototype.findIndex()` em JavaScript?,"`findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1.

**116.**"
O que é o método `Array.prototype.some()` em JavaScript?,"`some()` testa se pelo menos um elemento no array passa no teste implementado pela função fornecida. Retorna `true` se, no array, encontra um elemento para o qual a função fornecida retorna `true`; caso contrário, retorna `false`.

**117.**"
O que é o método `Array.prototype.every()` em JavaScript?,"`every()` testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna `true` se todos os elementos no array passam no teste fornecido; caso contrário, retorna `false`.

**118.**"
O que é o método `Array.prototype.flat()` em JavaScript?,"`flat()` cria um novo array com todos os elementos de sub-arrays concatenados nele recursivamente até a profundidade especificada.

**119.**"
O que é o método `Array.prototype.flatMap()` em JavaScript?,"`flatMap()` mapeia cada elemento usando uma função de mapeamento e, em seguida, nivela o resultado em um novo array. É idêntico a um `map()` seguido por um `flat()` de profundidade 1.

**120.**"
O que são Proxy objects em JavaScript?,"Proxy objects permitem interceptar e personalizar operações fundamentais em objetos, como leitura de propriedades, escrita de propriedades, criação de objetos e muito mais.

**121.**"
Quais são alguns usos comuns para Proxy objects?,"Usos comuns incluem validação, logging, rastreamento, virtualização e revogação de acesso.

**122.**"
O que é o objeto `Reflect` em JavaScript?,"O objeto `Reflect` fornece métodos para interceptar operações JavaScript. Ele fornece métodos que são os mesmos que os operadores JavaScript (como `Reflect.get()`, `Reflect.set()`, `Reflect.apply()`).

**123.**"
O que é tail call optimization (TCO) em JavaScript?,"Tail call optimization é uma otimização que permite que uma chamada de função no final de outra função (uma ""tail call"") seja executada sem adicionar uma nova entrada no stack de chamadas. Isso pode evitar estouros de pilha (stack overflow) em recursão. No entanto, o suporte a TCO em JavaScript é inconsistente entre os diferentes engines.

**124.**"
O que é memoization em JavaScript?,"Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras e retorna o resultado armazenado em cache quando as mesmas entradas ocorrem novamente.

**125.**"
O que são decorators em JavaScript (proposta)?,"Decorators são uma forma de modificar ou estender o comportamento de classes, métodos, propriedades ou parâmetros. Eles são uma proposta para JavaScript e ainda não são totalmente suportados em todos os ambientes.

**126.**"
O que é a diferença entre `Array.prototype.forEach` e um loop `for` tradicional?,"`forEach` é um método de array projetado para iterar sobre cada elemento, enquanto o loop `for` tradicional oferece mais controle sobre a iteração, permitindo interromper o loop com `break` ou pular iterações com `continue`. `forEach` não permite essas operações diretamente.

**127.**"
O que é a diferença entre um laço `while` e um laço `do...while`?,"O loop `while` avalia a condição antes de executar o bloco de código, enquanto o loop `do...while` executa o bloco de código pelo menos uma vez antes de avaliar a condição.

**128.**"
Como você remove duplicatas de um array em JavaScript?,"Você pode usar `[...new Set(array)]` para remover duplicatas.

**129.**"
O que é o operador `in` em JavaScript?,"O operador `in` retorna `true` se uma propriedade especificada existe no objeto.

**130.**"
Como você verifica se uma string começa com uma determinada substring em JavaScript?,"Você pode usar o método `String.prototype.startsWith()`.

**131.**"
Como você verifica se uma string termina com uma determinada substring em JavaScript?,"Você pode usar o método `String.prototype.endsWith()`.

**132.**"
Como você inclui um arquivo JavaScript externo em um arquivo HTML?,"Você usa a tag `<script src=""caminho/do/arquivo.js""></script>` no seu HTML.

**133.**"
Qual a importância de colocar a tag `<script>` no final do `<body>` em um documento HTML?,"Colocar a tag `<script>` no final do `<body>` garante que o HTML seja completamente carregado e renderizado antes que o JavaScript seja executado, melhorando o desempenho percebido da página.

**134.**"
O que é a diferença entre usar aspas simples e aspas duplas para definir strings em JavaScript?,"Tecnicamente, não há diferença funcional entre aspas simples e aspas duplas em JavaScript. A escolha é uma questão de estilo pessoal ou convenção da equipe.

**135.**"
Como você comenta uma linha de código em JavaScript?,"Você usa `//` para comentar uma única linha.

**136.**"
Como você comenta um bloco de código em JavaScript?,"Você usa `/* ... */` para comentar um bloco de código.

**137.**"
O que é minificação de código JavaScript?,"Minificação é o processo de remover espaços em branco, comentários e outras informações desnecessárias do código JavaScript para reduzir o tamanho do arquivo, melhorando o tempo de carregamento da página.

**138.**"
Por que você minificaria o código JavaScript?,"Para melhorar o desempenho do site, reduzindo o tempo de carregamento dos scripts.

**139.**"
O que são linters em JavaScript?,"Linters são ferramentas que analisam o código JavaScript para identificar erros de sintaxe, problemas de estilo e outras potenciais inconsistências, ajudando a manter a qualidade e consistência do código.

**140.**"
Qual a diferença entre declaração de função e expressão de função em JavaScript?,"Uma declaração de função é definida usando a palavra-chave `function` seguida por um nome, enquanto uma expressão de função é uma função anônima atribuída a uma variável. As declarações de função são ""hoisted"", enquanto as expressões de função não são.

**141.**"
"O que é ""code smell"" em JavaScript?","Um ""code smell"" é um padrão no código que sugere um problema mais profundo. Não é necessariamente um erro, mas indica uma área que pode precisar de"
Qual a diferença entre `undefined` e `null` em JavaScript?,"`undefined` significa que uma variável foi declarada, mas não recebeu um valor. `null` é um valor de atribuição que representa a ausência intencional de um valor de objeto ou variável.

**2.**"
O que é hoisting em JavaScript e como ele funciona?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seu escopo antes da execução do código. No entanto, apenas a declaração é movida, não a inicialização (para variáveis).

**3.**"
Explique o que é closure em JavaScript.,"Closure é a capacidade de uma função de lembrar e acessar seu escopo léxico circundante, mesmo quando a função é executada fora desse escopo. Isso permite que a função acesse variáveis que estavam em seu escopo original.

**4.**"
O que são template literals em JavaScript e como eles são usados?,"Template literals são strings delimitadas por acentos graves (`` ` ``) que permitem a incorporação de expressões. Eles são usados para criar strings mais legíveis e dinâmicas, permitindo interpolação de strings e strings de várias linhas.

**8.**"
"Explique o conceito de ""truthy"" e ""falsy"" em JavaScript.","""Truthy"" e ""falsy"" são valores que são avaliados como `true` ou `false` quando usados em um contexto booleano (como em uma instrução `if`).  Valores falsy incluem `false`, `0`, `""""`, `null`, `undefined` e `NaN`. Todos os outros valores são truthy.

**9.**"
O que é o operador ternário em JavaScript e como ele é usado?,"O operador ternário é uma forma abreviada de escrever uma instrução `if...else`. Ele tem a sintaxe: `condição ? expressão_se_verdadeira : expressão_se_falsa`.

**10.**"
Como você cria um novo objeto em JavaScript?,"Você pode criar um novo objeto usando a notação literal de objeto (`{}`) ou usando o construtor `new Object()`.

**11.**"
Como você verifica se uma variável é um array em JavaScript?,"Você pode usar `Array.isArray(variavel)` para verificar se uma variável é um array.

**13.**"
O que são funções de primeira classe em JavaScript?,"Funções de primeira classe significa que as funções podem ser tratadas como qualquer outro tipo de dado. Elas podem ser atribuídas a variáveis, passadas como argumentos para outras funções e retornadas de outras funções.

**14.**"
Explique o que é uma função anônima em JavaScript.,"Uma função anônima é uma função que não tem um nome. Geralmente, é usada como um argumento para outra função ou atribuída a uma variável.

**15.**"
O que é o método `map()` em arrays e como ele funciona?,"O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.

**16.**"
Qual a finalidade do método `filter()` em arrays?,"O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.

**17.**"
O que faz o método `reduce()` em arrays?,"O método `reduce()` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.

**18.**"
Como você clona um objeto em JavaScript?,"Você pode clonar um objeto superficialmente usando `Object.assign({}, objetoOriginal)` ou o operador spread `{...objetoOriginal}`. Para clonar profundamente um objeto (incluindo objetos aninhados), você pode usar `JSON.parse(JSON.stringify(objetoOriginal))`, mas isso não funciona com funções ou tipos de dados complexos.

**19.**"
O que é JSON e como ele é usado em JavaScript?,"JSON (JavaScript Object Notation) é um formato de dados leve usado para troca de dados. Em JavaScript, é usado para serializar e desserializar objetos para transmitir dados através da rede.

**20.**"
O que é o método `bind()` em JavaScript?,"O método `bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido e uma sequência específica de argumentos precedendo quaisquer outros argumentos fornecidos quando a nova função é chamada.

**21.**"
Explique o que é recursão em JavaScript.,"Recursão é uma técnica de programação onde uma função chama a si mesma dentro de seu próprio corpo. É útil para resolver problemas que podem ser divididos em subproblemas menores do mesmo tipo.

**22.**"
"Qual a diferença entre `let`, `const` e `var` na declaração de variáveis?","`var` tem escopo de função ou global. `let` tem escopo de bloco e permite reatribuição. `const` também tem escopo de bloco, mas exige inicialização e não permite reatribuição após a inicialização.

**23.**"
O que é o operador `typeof` em JavaScript?,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando.

**24.**"
Como você manipula erros em JavaScript?,"Você pode manipular erros usando blocos `try...catch`. O código que pode lançar uma exceção é colocado dentro do bloco `try`, e o código para lidar com a exceção é colocado dentro do bloco `catch`.

**25.**"
O que é o método `padStart()` e `padEnd()` em strings?,"`padStart()` preenche o início de uma string com um caractere especificado até atingir um comprimento determinado. `padEnd()` faz o mesmo, mas preenche o final da string.

**26.**"
O que são promises em JavaScript e como elas são usadas?,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas têm três estados: pendente, cumprida e rejeitada. Elas são usadas para lidar com operações assíncronas de forma mais limpa e legível do que callbacks.

**27.**"
Como você usa `async/await` em JavaScript?,"`async` é usado para declarar uma função assíncrona, e `await` é usado dentro de uma função `async` para pausar a execução até que uma promise seja resolvida.

**28.**"
O que é o operador spread (...) em JavaScript?,"O operador spread permite que um iterável (como um array ou string) seja expandido em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados. Também pode ser usado para clonar objetos superficialmente.

**29.**"
Explique o que é destructuring em JavaScript.,"Destructuring é uma forma de extrair valores de objetos e arrays e atribuí-los a variáveis de forma concisa.

**30.**"
O que são arrow functions em JavaScript?,"Arrow functions são uma sintaxe mais curta para escrever funções em JavaScript. Elas não têm seu próprio `this`, `arguments`, `super` ou `new.target`.

**31.**"
Como você cria um módulo em JavaScript?,"Em JavaScript moderno (ES Modules), você pode criar um módulo usando as palavras-chave `export` e `import`.

**32.**"
Qual a finalidade do método `forEach()` em arrays?,"O método `forEach()` executa uma função fornecida uma vez para cada elemento no array. Diferente de `map()`, ele não retorna um novo array.

**33.**"
"O que é o conceito de ""immutability"" em JavaScript e como ele é alcançado?","Imutabilidade significa que o estado de um objeto não pode ser alterado após sua criação. Pode ser alcançado evitando mutações diretas, usando métodos que retornam novos objetos (como `map`, `filter`, `slice`) e utilizando bibliotecas que facilitam a imutabilidade.

**34.**"
Explique o que é um iterador em JavaScript.,"Um iterador é um objeto que define uma sequência e retorna um valor por vez ao usar o método `next()`. Ele possui uma propriedade `done` que indica se a iteração está completa.

**36.**"
Como você cria uma classe em JavaScript?,"Você pode criar uma classe usando a palavra-chave `class`. Classes são um modelo para criar objetos.

**37.**"
O que é herança em JavaScript?,"Herança é um mecanismo que permite que uma classe (subclasse/classe filha) herde propriedades e métodos de outra classe (superclasse/classe pai).

**38.**"
O que é polimorfismo em JavaScript?,"Polimorfismo significa ""muitas formas"". Em JavaScript, refere-se à capacidade de um objeto assumir muitas formas. Por exemplo, um método pode se comportar de maneira diferente dependendo da classe em que é chamado.

**39.**"
O que é encapsulamento em JavaScript?,"Encapsulamento é o agrupamento de dados (atributos) e os métodos que operam nesses dados (comportamentos) dentro de uma unidade, protegendo os dados de acesso externo direto.

**40.**"
O que são getters e setters em JavaScript?,"Getters são métodos que permitem acessar propriedades de um objeto. Setters são métodos que permitem definir valores para propriedades de um objeto. Eles fornecem uma forma de controlar o acesso e a modificação de propriedades.

**41.**"
O que é o protótipo em JavaScript?,"Em JavaScript, cada objeto tem um protótipo, que é outro objeto do qual herda propriedades e métodos.

**47.**"
O que é a cadeia de protótipos em JavaScript?,"A cadeia de protótipos é um mecanismo pelo qual um objeto herda propriedades de seu protótipo, que por sua vez pode ter seu próprio protótipo, criando uma cadeia de herança.

**48.**"
Como você define propriedades em um protótipo em JavaScript?,"Você pode definir propriedades em um protótipo atribuindo-as a `Objeto.prototype`. Por exemplo, `Array.prototype.minhaPropriedade = 'valor';`

**49.**"
Qual a diferença entre propriedades próprias e propriedades herdadas em JavaScript?,"Propriedades próprias são propriedades que são definidas diretamente no objeto, enquanto propriedades herdadas são propriedades que o objeto herda de seu protótipo.

**51.**"
O que é a propriedade `constructor` em JavaScript?,"A propriedade `constructor` é uma propriedade de um protótipo de objeto que se refere à função que foi usada para construir o objeto.

**52.**"
Como você estende classes nativas em JavaScript?,"Você pode estender classes nativas, como `Array`, `String` ou `Date`, criando uma nova classe que herda da classe nativa e adicionando novas propriedades e métodos ao protótipo da nova classe.

**53.**"
O que é o método `call()` em JavaScript?,"O método `call()` chama uma função com um determinado valor `this` e argumentos fornecidos individualmente.

**56.**"
O que é o método `apply()` em JavaScript?,"O método `apply()` chama uma função com um determinado valor `this` e argumentos fornecidos como um array.

**57.**"
Qual a diferença entre `call()` e `apply()` em JavaScript?,"Ambos `call()` e `apply()` chamam uma função com um determinado valor `this`. A diferença é que `call()` recebe argumentos individualmente, enquanto `apply()` recebe argumentos como um array.

**58.**"
O que é o objeto global em JavaScript?,"O objeto global é um objeto que sempre existe no escopo global. Em navegadores, é o objeto `window`. Em Node.js, é o objeto `global`.

**59.**"
O que é o método `eval()` em JavaScript?,"O método `eval()` avalia uma string como código JavaScript. Seu uso é geralmente desencorajado por questões de segurança e desempenho.

**60.**"
O que são strict mode em JavaScript?,"Strict mode é uma forma de executar JavaScript de forma mais ""segura"". Ele impõe regras mais rigorosas, como proibir o uso de variáveis não declaradas e lançar erros para algumas práticas consideradas ""ruins"".

**61.**"
Como você habilita strict mode em JavaScript?,"Você habilita strict mode adicionando a string `""use strict"";` no início de um script ou função.

**62.**"
O que é o método `parseInt()` em JavaScript?,"O método `parseInt()` analisa uma string e retorna um número inteiro.

**63.**"
O que é o método `parseFloat()` em JavaScript?,"O método `parseFloat()` analisa uma string e retorna um número de ponto flutuante.

**64.**"
Qual a diferença entre `parseInt()` e `parseFloat()` em JavaScript?,"`parseInt()` retorna um número inteiro, enquanto `parseFloat()` retorna um número de ponto flutuante.

**65.**"
O que é o objeto `Math` em JavaScript?,"O objeto `Math` é um objeto embutido que fornece propriedades e métodos para funções matemáticas.

**66.**"
Como você gera um número aleatório em JavaScript?,"Você pode gerar um número aleatório usando o método `Math.random()`, que retorna um número de ponto flutuante pseudoaleatório entre 0 (inclusive) e 1 (exclusivo).

**67.**"
Como você arredonda um número para cima em JavaScript?,"Você pode usar o método `Math.ceil()` para arredondar um número para cima para o inteiro mais próximo.

**69.**"
Como você arredonda um número para baixo em JavaScript?,"Você pode usar o método `Math.floor()` para arredondar um número para baixo para o inteiro mais próximo.

**70.**"
O que é o objeto `Date` em JavaScript?,"O objeto `Date` é um objeto embutido que permite trabalhar com datas e horas.

**71.**"
Como você obtém a data atual em JavaScript?,"Você pode obter a data atual criando uma nova instância do objeto `Date`: `new Date()`.

**72.**"
Como você formata uma data em JavaScript?,"Você pode formatar uma data usando métodos do objeto `Date`, como `toLocaleDateString()`, `toLocaleTimeString()` e `toISOString()`, ou usando bibliotecas de formatação de data.

**73.**"
O que é o objeto `RegExp` em JavaScript?,"O objeto `RegExp` representa expressões regulares, que são padrões usados para corresponder a combinações de caracteres em strings.

**74.**"
Como você cria uma expressão regular em JavaScript?,"Você pode criar uma expressão regular usando literais de expressão regular (entre barras `/`) ou usando o construtor `new RegExp()`.

**75.**"
O que são flags em expressões regulares em JavaScript?,"Flags são modificadores que afetam a pesquisa da expressão regular. Exemplos incluem `i` (ignorar maiúsculas/minúsculas), `g` (global – encontrar todas as correspondências) e `m` (multilinhas).

**76.**"
O que é o método `test()` em expressões regulares em JavaScript?,"O método `test()` executa uma pesquisa por uma correspondência entre uma expressão regular e uma string. Ele retorna `true` se houver uma correspondência e `false` caso contrário.

**77.**"
O que é o método `exec()` em expressões regulares em JavaScript?,"O método `exec()` executa uma pesquisa por uma correspondência em uma string especificada. Retorna um array com informações sobre a correspondência ou `null` se não houver correspondência.

**78.**"
O que é o método `match()` em strings em JavaScript?,"O método `match()` recupera as correspondências de uma string contra uma expressão regular.

**79.**"
O que é o método `replace()` em strings em JavaScript?,"O método `replace()` substitui parte de uma string por outra string ou por uma função.

**80.**"
O que é o método `search()` em strings em JavaScript?,"O método `search()` executa uma pesquisa por uma correspondência entre uma expressão regular e uma string. Ele retorna o índice da primeira correspondência ou -1 se não houver correspondência.

**81.**"
O que é o método `split()` em strings em JavaScript?,"O método `split()` divide uma string em um array de substrings, usando um separador especificado.

**82.**"
O que é o método `substring()` em strings em JavaScript?,"O método `substring()` retorna uma parte de uma string entre os índices inicial e final especificados.

**83.**"
O que é o método `slice()` em strings em JavaScript?,"O método `slice()` retorna uma seção de uma string, começando em um índice especificado e terminando em outro.

**84.**"
Qual a diferença entre `substring()` e `slice()` em strings em JavaScript?,"Ambos `substring()` e `slice()` extraem uma parte de uma string. Uma diferença é que `substring()` troca os argumentos se o índice inicial for maior que o índice final, enquanto `slice()` retorna uma string vazia. `slice()` também aceita índices negativos, que indicam posições a partir do final da string.

**85.**"
O que é o método `toUpperCase()` em strings em JavaScript?,"O método `toUpperCase()` converte uma string para letras maiúsculas.

**86.**"
O que é o método `toLowerCase()` em strings em JavaScript?,"O método `toLowerCase()` converte uma string para letras minúsculas.

**87.**"
O que é o método `trim()` em strings em JavaScript?,"O método `trim()` remove espaços em branco do início e do fim de uma string.

**88.**"
O que são template strings tagged em JavaScript?,"Template strings tagged permitem que você processe template literals com uma função. A função recebe o array de strings literais e os valores das expressões interpoladas como argumentos.

**89.**"
O que é o método `Object.getPrototypeOf()` em JavaScript?,"O método `Object.getPrototypeOf()` retorna o protótipo de um objeto.

**90.**"
O que é o método `Object.setPrototypeOf()` em JavaScript?,"O método `Object.setPrototypeOf()` define o protótipo (ou seja, o objeto interno [[Prototype]]) de um objeto especificado para outro objeto ou `null`.

**91.**"
O que é o método `concat()` em arrays em JavaScript?,"O método `concat()` junta dois ou mais arrays e retorna um novo array.

**95.**"
O que é o método `join()` em arrays em JavaScript?,"O método `join()` junta todos os elementos de um array em uma string.

**96.**"
O que é o método `push()` em arrays em JavaScript?,"O método `push()` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.

**97.**"
O que é o método `pop()` em arrays em JavaScript?,"O método `pop()` remove o último elemento de um array e retorna esse elemento.

**98.**"
O que é o método `shift()` em arrays em JavaScript?,"O método `shift()` remove o primeiro elemento de um array e retorna esse elemento.

**99.**"
O que é o método `unshift()` em arrays em JavaScript?,"O método `unshift()` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.

**100.**"
O que é o método `splice()` em arrays em JavaScript?,"O método `splice()` altera o conteúdo de um array, removendo ou substituindo elementos existentes e/ou adicionando novos elementos no local.

**101.**"
O que é o método `sort()` em arrays em JavaScript?,"O método `sort()` ordena os elementos de um array no local e retorna o array.

**102.**"
O que é o método `reverse()` em arrays em JavaScript?,"O método `reverse()` inverte a ordem dos elementos em um array.

**103.**"
O que é o método `indexOf()` em arrays em JavaScript?,"O método `indexOf()` retorna o primeiro índice em que um determinado elemento pode ser encontrado no array ou -1 se não estiver presente.

**104.**"
O que é o método `lastIndexOf()` em arrays em JavaScript?,"O método `lastIndexOf()` retorna o último índice em que um determinado elemento pode ser encontrado no array ou -1 se não estiver presente.

**105.**"
O que é o método `includes()` em arrays em JavaScript?,"O método `includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado.

**106.**"
O que é o método `find()` em arrays em JavaScript?,"O método `find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`.

**107.**"
O que é o método `findIndex()` em arrays em JavaScript?,"O método `findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1.

**108.**"
O que é o método `every()` em arrays em JavaScript?,"O método `every()` testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna um valor booleano.

**109.**"
O que é o método `some()` em arrays em JavaScript?,"O método `some()` testa se pelo menos um elemento no array passa no teste implementado pela função fornecida. Retorna `true` se, no array, ele encontra um elemento para o qual a função fornecida retorna `true`; caso contrário, retorna `false`. Não modifica o array.

**110.**"
O que é o método `flat()` em arrays em JavaScript?,"O método `flat()` cria um novo array com todos os sub-arrays concatenados recursivamente até a profundidade especificada.

**111.**"
O que é o método `flatMap()` em arrays em JavaScript?,"O método `flatMap()` primeiro mapeia cada elemento usando uma função de mapeamento, então nivela o resultado em um novo array. É idêntico a um `map()` seguido por um `flat()` de profundidade 1, mas `flatMap()` é frequentemente bastante útil, pois é mais eficiente do que simplesmente fazer os dois separadamente.

**112.**"
Como você comenta várias linhas de código em JavaScript?,"Você pode comentar várias linhas de código usando `/*` para iniciar o comentário e `*/` para terminá-lo.

**113.**"
Qual a diferença entre expressões e declarações em JavaScript?,"Uma declaração cria uma nova variável, função ou classe e associa um nome a ela. Uma expressão produz um valor. Expressões podem ser avaliadas para produzir um valor.

**114.**"
O que são operadores de atribuição compostos em JavaScript?,"Operadores de atribuição compostos combinam uma operação com uma atribuição. Por exemplo, `+=`, `-=`, `*=`, `/=`, `%=`.

**115.**"
O que são operadores bitwise em JavaScript?,"Operadores bitwise realizam operações em nível de bit em números inteiros. Exemplos incluem `&` (AND), `|` (OR), `^` (XOR), `~` (NOT), `<<` (left shift), `>>` (right shift), `>>>` (unsigned right shift).

**116.**"
O que são operadores lógicos em JavaScript?,"Operadores lógicos realizam operações lógicas booleanas. Exemplos incluem `&&` (AND lógico), `||` (OR lógico) e `!` (NOT lógico).

**117.**"
Qual a precedência dos operadores em JavaScript?,"A precedência dos operadores define a ordem em que os operadores são avaliados em uma expressão. Operadores com maior precedência são avaliados primeiro.

**118.**"
O que é associatividade de operadores em JavaScript?,"A associatividade define como os operadores da mesma precedência são agrupados em uma expressão. Pode ser da esquerda para a direita ou da direita para a esquerda.

**119.**"
O que são funções puras em JavaScript?,"Uma função pura é uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais.

**120.**"
O que são efeitos colaterais em JavaScript?,"Efeitos colaterais são alterações no estado fora do escopo da função, como modificar variáveis globais, alterar o DOM ou fazer solicitações de rede.

**121.**"
O que é curry em JavaScript?,"Curry é uma técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.

**122.**"
"O que é a estratégia de avaliação ""lazy evaluation"" em JavaScript?","""Lazy evaluation"" (avaliação preguiçosa) é uma estratégia de avaliação que atrasa a avaliação de uma expressão até que seu valor seja necessário. JavaScript não é inerentemente preguiçoso, mas certas técnicas podem simular esse comportamento.

**123.**"
O que é a técnica de memoização em JavaScript?,"Memoização é uma técnica de otimização onde os resultados de chamadas de função caras são armazenados em cache e reutilizados quando a mesma entrada ocorre novamente.

**124.**"
O que são IIFEs (Immediately Invoked Function Expressions) em JavaScript?,"IIFEs são funções que são executadas assim que são definidas. São usadas para criar escopos isolados e evitar conflitos de nomes no escopo global.

**125.**"
Como você impede que um script JavaScript seja executado até que o DOM seja totalmente carregado?,"Você pode usar o evento `DOMContentLoaded` para garantir que o script seja executado somente após o DOM ser carregado.

**126.**"
O que são eventos em JavaScript?,"Eventos são ações ou ocorrências que acontecem no navegador, como um clique do mouse, o carregamento de uma página ou o envio de um formulário.

**127.**"
Como você adiciona um ouvinte de evento em JavaScript?,"Você pode adicionar um ouvinte de evento usando o método `addEventListener()` no objeto que representa o elemento HTML.

**128.**"
O que é o objeto `event` em JavaScript?,"O objeto `event` é um objeto que é passado para a função de callback quando um evento é disparado. Ele contém informações sobre o evento, como o elemento que disparou o evento, o tipo de evento e as coordenadas do mouse.

**129.**"
O que é o método `preventDefault()` em JavaScript?,"O método `preventDefault()` impede o comportamento padrão de um evento. Por exemplo, impede que um link seja seguido ou que um formulário seja enviado.

**130.**"
O que é o método `stopPropagation()` em JavaScript?,"O método `stopPropagation()` impede que um evento se propague para elementos pai no DOM.

**131.**"
O que é event bubbling em JavaScript?,"Event bubbling é um processo em que um evento que é disparado em um elemento se propaga para seus elementos pai no DOM.

**132.**"
O que é event capturing em JavaScript?,"Event capturing é um processo em que um evento é primeiro capturado pelo elemento mais externo no DOM e, em seguida, se propaga para o elemento alvo.

**133.**"
O que é o método `setTimeout()` em JavaScript?,"O método `setTimeout()` executa uma função após um determinado período de tempo.

**134.**"
O que é o método `setInterval()` em JavaScript?,"O método `setInterval()` executa uma função repetidamente em intervalos regulares.

**135.**"
Como você para um `setTimeout()` ou `setInterval()` em JavaScript?,"Você pode parar um `setTimeout()` usando `clearTimeout()` e um `setInterval()` usando `clearInterval()`, passando o ID retornado por `setTimeout()` ou `setInterval()`.

**136.**"
"O que é o conceito de ""debouncing"" em JavaScript?","Debouncing é uma técnica para limitar a taxa na qual uma função é executada. É útil para evitar que uma função seja executada repetidamente em resposta a eventos frequentes, como redimensionamento da janela ou entrada do usuário.

**137.**"
"O que é o conceito de ""throttling"" em JavaScript?","Throttling é uma técnica para limitar a taxa na qual uma função é executada, garantindo que a função seja executada no máximo uma vez em um determinado período de tempo.

**138.**"
O que é o objeto `console` em JavaScript?,"O objeto `console` fornece acesso ao console de depuração do navegador. Ele é usado para registrar mensagens, avisos e erros no console.

**139.**"
O que são callbacks em JavaScript?,"Callbacks são funções que são passadas como argumentos para outras funções e são executadas após a conclusão de uma operação assíncrona.

**140.**"
O que é o padrão módulo em JavaScript?,"O padrão módulo é um padrão de design que permite encapsular código em unidades reutilizáveis e evitar conflitos de nomes no escopo global.

**141.**"
O que é o padrão revelador de módulo em JavaScript?,"O padrão revelador de módulo é uma variação do padrão módulo em que as variáveis privadas e as funções internas são mantidas ocultas, enquanto um conjunto selecionado de funções públicas é revelado.

**142.**"
O que são web workers em JavaScript?,"Web workers permitem que você execute scripts JavaScript em segundo plano, sem bloquear a thread principal do navegador.

**143.**"
O que é o operador `typeof` e como ele é usado?,"`typeof` é um operador unário que retorna uma string indicando o tipo de dado de um operando. Ele é usado para determinar o tipo de uma variável ou expressão, retornando valores como ""number"", ""string"", ""boolean"", ""object"", ""function"", ""undefined"" ou ""symbol""."
Como declarar uma variável em JavaScript?,"Variáveis são declaradas usando as palavras-chave `var`, `let` ou `const`.  `var` tem escopo de função ou global, `let` tem escopo de bloco, e `const` também tem escopo de bloco e declara uma variável constante cujo valor não pode ser reatribuído."
O que é hoisting em JavaScript?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do escopo antes da execução do código. No entanto, apenas a declaração é movida, não a inicialização. Isso significa que variáveis declaradas com `var` podem ser acessadas antes de sua declaração no código, mas retornarão `undefined`. Variáveis declaradas com `let` e `const` não são inicializadas até sua declaração, resultando em um erro se acessadas antes (temporal dead zone)."
O que é uma função anônima?,"Uma função anônima é uma função que não tem um nome identificador. Geralmente, são usadas como expressões, como callbacks ou em IIFEs (Immediately Invoked Function Expressions)."
O que é uma IIFE (Immediately Invoked Function Expression)?,Uma IIFE é uma função anônima que é executada imediatamente após ser definida. Sua principal utilidade é criar um escopo privado para evitar conflitos com variáveis globais. Exemplo: `(function() { /* seu código aqui */ })();`
Como passar parâmetros para uma função em JavaScript?,"Os parâmetros são especificados dentro dos parênteses da definição da função e separados por vírgulas. Ao chamar a função, os valores (argumentos) correspondentes são passados na mesma ordem."
O que é um closure em JavaScript?,Um closure é a capacidade de uma função de lembrar e acessar variáveis de seu escopo léxico (o escopo em que a função foi definida) mesmo quando a função é executada fora desse escopo.
O que são template literals em JavaScript?,Template literals são strings delimitadas por backticks (`). Eles permitem a interpolação de variáveis e expressões dentro da string usando a sintaxe `${expressão}` e suportam strings de múltiplas linhas sem a necessidade de concatenação.
Como converter uma string para um número em JavaScript?,"Utilize `parseInt()` para converter para um inteiro, `parseFloat()` para converter para um número de ponto flutuante, ou o operador unário `+`. Exemplo: `parseInt(""10"")`, `parseFloat(""3.14"")`, `+""5""`."
Como converter um número para uma string em JavaScript?,"Utilize o método `toString()` do objeto `Number` ou a concatenação com uma string vazia. Exemplo: `(10).toString()`, `10 + """"`."
O que é um array em JavaScript?,"Um array é uma estrutura de dados que armazena uma coleção ordenada de elementos. Os elementos podem ser de qualquer tipo de dado e são acessados por seus índices, que começam em 0."
Como adicionar um elemento ao final de um array em JavaScript?,Use o método `push()`. Exemplo: `meuArray.push(elemento);`
Como remover o último elemento de um array em JavaScript?,Use o método `pop()`. Exemplo: `meuArray.pop();`
Como remover o primeiro elemento de um array em JavaScript?,Use o método `shift()`. Exemplo: `meuArray.shift();`
Como adicionar um elemento ao início de um array em JavaScript?,Use o método `unshift()`. Exemplo: `meuArray.unshift(elemento);`
O que é o método `splice()` em arrays?,"`splice()` modifica o conteúdo de um array removendo, substituindo ou adicionando elementos. Ele recebe como argumentos o índice inicial, o número de elementos a serem removidos e, opcionalmente, os elementos a serem adicionados."
O que é o método `slice()` em arrays?,`slice()` retorna uma cópia de uma porção do array. Ele recebe como argumentos o índice inicial e o índice final (não incluso) da porção a ser copiada.
O que é o método `concat()` em arrays?,`concat()` retorna um novo array contendo a junção de dois ou mais arrays.
O que é o método `join()` em arrays?,"`join()` retorna uma string contendo todos os elementos do array concatenados, separados por um separador especificado (ou vírgula por padrão)."
O que é o método `reverse()` em arrays?,`reverse()` inverte a ordem dos elementos do array.
O que é o método `sort()` em arrays?,"`sort()` ordena os elementos do array. Por padrão, ele ordena como strings, então é importante fornecer uma função de comparação para ordenar números corretamente."
O que é um loop `for` em JavaScript?,"Um loop `for` é uma estrutura de controle que repete um bloco de código um número específico de vezes. Ele consiste em uma inicialização, uma condição e uma expressão de incremento/decremento."
O que é um loop `while` em JavaScript?,Um loop `while` repete um bloco de código enquanto uma condição for verdadeira.
O que é um loop `do...while` em JavaScript?,Um loop `do...while` repete um bloco de código pelo menos uma vez e continua repetindo enquanto uma condição for verdadeira. A condição é verificada após a execução do bloco de código.
O que é o statement `break` em JavaScript?,"`break` é usado para sair de um loop ( `for`, `while`, `do...while` ) ou de um statement `switch`."
O que é o statement `continue` em JavaScript?,`continue` é usado para pular a iteração atual de um loop e passar para a próxima iteração.
O que é um statement `switch` em JavaScript?,Um `switch` statement executa um bloco de código diferente dependendo do valor de uma expressão.
O que é um operador ternário em JavaScript?,Um operador ternário é uma forma concisa de escrever um `if...else` statement. Ele tem a forma `condição ? expressão_se_verdadeiro : expressão_se_falso`.
O que são funções de primeira classe (first-class functions) em JavaScript?,"Funções de primeira classe significa que as funções podem ser tratadas como qualquer outra variável. Elas podem ser atribuídas a variáveis, passadas como argumentos para outras funções e retornadas como valores de outras funções."
O que são funções de ordem superior (higher-order functions) em JavaScript?,Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam outras funções como resultados.
O que é o método `map()` em arrays?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em arrays?,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em arrays?,"`reduce()` executa uma função redutora (fornecida) em cada elemento do array, resultando em um único valor de retorno."
O que é destructuring em JavaScript?,Destructuring é uma expressão JavaScript que permite extrair dados de arrays ou objetos para variáveis separadas.
O que são promises em JavaScript?,"Promises representam o resultado eventual de uma operação assíncrona. Elas podem estar em um dos três estados: pending (pendente), fulfilled (cumprida) ou rejected (rejeitada)."
O que são as palavras-chave `async` e `await` em JavaScript?,"`async` é usada para declarar uma função assíncrona, que sempre retorna uma Promise. `await` é usado dentro de uma função `async` para pausar a execução da função até que uma Promise seja resolvida ou rejeitada."
Como limpar um timeout ou interval em JavaScript?,Use `clearTimeout()` para limpar um timeout agendado com `setTimeout()` e `clearInterval()` para limpar um interval agendado com `setInterval()`.
O que é o objeto `JSON` em JavaScript?,`JSON` (JavaScript Object Notation) é um formato de dados leve e fácil de ler/escrever para humanos e fácil de interpretar/gerar para máquinas. É usado para transmitir dados entre um servidor e um navegador.
Como converter um objeto JavaScript para JSON?,Use o método `JSON.stringify()`.
Como converter uma string JSON para um objeto JavaScript?,Use o método `JSON.parse()`.
O que é o objeto `window` em JavaScript?,"O objeto `window` representa a janela do navegador. É o objeto global no ambiente do navegador e contém propriedades e métodos relacionados à janela do navegador, como `document`, `location`, `history`."
O que é o objeto `document` em JavaScript?,"O objeto `document` representa o documento HTML carregado na janela do navegador. Ele fornece acesso à estrutura e ao conteúdo do documento, permitindo que o JavaScript manipule o DOM (Document Object Model)."
O que é o DOM (Document Object Model)?,"O DOM é uma representação em árvore da estrutura de um documento HTML ou XML. Ele permite que o JavaScript acesse e manipule o conteúdo, a estrutura e o estilo do documento."
Como selecionar um elemento HTML pelo ID em JavaScript?,"Use o método `document.getElementById(""idDoElemento"")`."
Como selecionar elementos HTML por classe em JavaScript?,"Use o método `document.getElementsByClassName(""nomeDaClasse"")`. Ele retorna um HTMLCollection."
Como selecionar elementos HTML por tag name em JavaScript?,"Use o método `document.getElementsByTagName(""nomeDaTag"")`. Ele retorna um HTMLCollection."
O que é um event listener em JavaScript?,"Um event listener é uma função que é executada em resposta a um evento específico (como um clique do mouse, uma tecla pressionada, etc.)."
Como adicionar um event listener a um elemento HTML em JavaScript?,"Use o método `addEventListener()`. Exemplo: `elemento.addEventListener(""click"", minhaFuncao);`"
Como prevenir o comportamento padrão de um evento em JavaScript?,Use o método `preventDefault()` do objeto `event`. Exemplo: `event.preventDefault();`
O que é bubbling de eventos em JavaScript?,Bubbling é o processo em que um evento disparado em um elemento se propaga para seus elementos pai na árvore DOM.
O que é capturing de eventos em JavaScript?,"Capturing é o processo em que um evento se propaga do elemento raiz da árvore DOM para o elemento alvo, antes do bubbling."
O que é o método `stopPropagation()` do objeto `event`?,`stopPropagation()` impede que o evento se propague para outros elementos na árvore DOM (evitando bubbling ou capturing).
O que é o método `getAttribute()` em JavaScript?,`getAttribute()` retorna o valor de um atributo especificado em um elemento HTML.
O que é o método `setAttribute()` em JavaScript?,`setAttribute()` define o valor de um atributo especificado em um elemento HTML.
O que é o atributo `innerHTML` em JavaScript?,`innerHTML` obtém ou define o conteúdo HTML interno de um elemento.
O que é o atributo `textContent` em JavaScript?,"`textContent` obtém ou define o texto contido dentro de um elemento, sem interpretar HTML."
O que é o objeto `location` em JavaScript?,O objeto `location` contém informações sobre o URL atual e fornece métodos para redirecionar o navegador para um novo URL.
Como redirecionar o navegador para uma nova página usando JavaScript?,"Use `window.location.href = ""URL_da_nova_pagina"";`."
Quais são alguns métodos comuns do objeto `console`?,"`console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`."
O que é strict mode em JavaScript?,"Strict mode é uma maneira de ativar uma versão restrita do JavaScript. Ele ajuda a prevenir erros comuns e a tornar o código mais seguro. É ativado adicionando a string `""use strict"";` no início de um script ou função."
O que é o operador `delete` em JavaScript?,O operador `delete` é usado para remover uma propriedade de um objeto.
O que são expressões regulares em JavaScript?,Expressões regulares (regex) são padrões usados para corresponder combinações de caracteres em strings.
Como criar uma expressão regular em JavaScript?,"Expressões regulares podem ser criadas usando a notação literal ( `/padrão/` ) ou usando o construtor `new RegExp(""padrão"")`."
O que é o método `test()` de uma expressão regular?,"`test()` retorna `true` se a expressão regular encontra uma correspondência na string fornecida, e `false` caso contrário."
O que é o método `exec()` de uma expressão regular?,`exec()` executa a busca por uma correspondência na string fornecida. Retorna um array com informações sobre a correspondência ou `null` se nenhuma correspondência for encontrada.
O que é o método `match()` de uma string?,`match()` retorna um array contendo os resultados da correspondência de uma string com uma expressão regular. Retorna `null` se nenhuma correspondência for encontrada.
O que é o método `replace()` de uma string?,`replace()` retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por um substituto.
O que é o método `search()` de uma string?,`search()` retorna o índice da primeira correspondência de uma string com uma expressão regular. Retorna -1 se nenhuma correspondência for encontrada.
O que é o método `split()` de uma string?,"`split()` divide uma string em um array de substrings, usando um separador especificado."
O que é o método `trim()` de uma string?,`trim()` remove os espaços em branco do início e do fim de uma string.
O que é o método `toUpperCase()` de uma string?,`toUpperCase()` converte uma string para letras maiúsculas.
O que é o método `toLowerCase()` de uma string?,`toLowerCase()` converte uma string para letras minúsculas.
O que é o método `substring()` de uma string?,`substring()` retorna uma parte de uma string entre dois índices especificados.
O que é o método `substr()` de uma string?,"`substr()` retorna uma parte de uma string, começando em um índice especificado e com um comprimento especificado."
O que é o método `charAt()` de uma string?,`charAt()` retorna o caractere em um índice especificado em uma string.
O que é o método `charCodeAt()` de uma string?,`charCodeAt()` retorna o código Unicode do caractere em um índice especificado em uma string.
"Qual é a diferença entre `var`, `let` e `const` em relação ao escopo?","`var` tem escopo de função ou global, enquanto `let` e `const` têm escopo de bloco."
Qual é a diferença entre `let` e `const` em relação à reatribuição?,"Variáveis declaradas com `let` podem ser reatribuídas, enquanto variáveis declaradas com `const` não podem."
O que é o padrão de design Module em JavaScript?,O padrão Module é uma forma de encapsular código em unidades reutilizáveis. Ele usa closures para criar escopos privados e expor apenas as partes necessárias do módulo.
O que é o padrão Revealing Module em JavaScript?,O padrão Revealing Module é uma variação do padrão Module em que todas as variáveis e funções são definidas no escopo privado do módulo e apenas um objeto com as funções públicas é retornado.
O que é partial application em JavaScript?,Partial application é uma técnica de criar uma nova função pré-configurando alguns dos argumentos de uma função existente.
O que é o padrão Observer em JavaScript?,"O padrão Observer define uma dependência um-para-muitos entre objetos, de forma que quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
O que é o padrão Singleton em JavaScript?,O padrão Singleton garante que uma classe tenha apenas uma instância e fornece um ponto de acesso global para ela.
O que é o padrão Factory em JavaScript?,O padrão Factory fornece uma interface para criar objetos sem especificar suas classes concretas.
O que é o padrão Prototype em JavaScript?,"O padrão Prototype permite criar novos objetos copiando um objeto existente, chamado protótipo."
O que é o padrão Iterator em JavaScript?,O padrão Iterator fornece uma maneira de acessar sequencialmente os elementos de um objeto agregado sem expor sua representação subjacente.
O que é o padrão Decorator em JavaScript?,"O padrão Decorator permite adicionar novas funcionalidades a um objeto existente dinamicamente, sem modificar sua estrutura."
O que são Generators em JavaScript?,Generators são um tipo especial de função que pode pausar sua execução e retomá-la mais tarde. Eles usam a palavra-chave `yield` para retornar valores.
O que é o operador `yield` em JavaScript?,`yield` pausa a execução de uma função generator e retorna um valor para o chamador.
O que é um iterador em JavaScript?,Um iterador é um objeto que define uma sequência e um valor de retorno ao final dessa sequência. Ele implementa um método `next()` que retorna um objeto com duas propriedades: `value` (o próximo valor na sequência) e `done` (um booleano indicando se a sequência terminou).
O que são iterables em JavaScript?,"Um iterable é um objeto que pode ser iterado, ou seja, seus elementos podem ser acessados sequencialmente. Eles implementam o método `Symbol.iterator` que retorna um iterador."
O que é o operador `for...of` em JavaScript?,"`for...of` cria um loop iterando sobre objetos iteráveis (arrays, strings, maps, sets, etc.), invocando um hook de iteração personalizado com instruções a serem executadas para o valor de cada propriedade distinta."
O que é o objeto `Map` em JavaScript?,`Map` é uma coleção de pares chave-valor onde as chaves podem ser de qualquer tipo de dado.
O que é o objeto `Set` em JavaScript?,"`Set` é uma coleção de valores únicos, onde cada valor só pode ocorrer uma vez."
O que é o operador `??` (nullish coalescing operator) em JavaScript?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo."
O que é o operador `?.` (optional chaining operator) em JavaScript?,"O operador `?.` permite acessar propriedades aninhadas de um objeto sem precisar verificar explicitamente se cada nível da cadeia existe. Se uma propriedade na cadeia for `null` ou `undefined`, o operador retorna `undefined` em vez de lançar um erro."
O que é o método `Object.assign()` em JavaScript?,`Object.assign()` copia os valores de todas as propriedades enumeráveis próprias de um ou mais objetos de origem para um objeto de destino. Ele retorna o objeto de destino.
O que é o método `Object.defineProperty()` em JavaScript?,`Object.defineProperty()` define uma nova propriedade diretamente em um objeto ou modifica uma propriedade existente de um objeto e retorna o objeto.
O que são propriedades acessoras (getters e setters) em JavaScript?,"Propriedades acessoras são métodos que permitem acessar ou modificar o valor de uma propriedade de um objeto de forma controlada. Getters são usados para ler o valor de uma propriedade, e setters são usados para definir o valor de uma propriedade."
O que é o protocolo URL em JavaScript?,"Em JavaScript, o protocolo URL é a primeira parte de uma URL, indicando o método utilizado para acessar o recurso. Exemplos comuns incluem `http://`, `https://`, `ftp://`, e `mailto:`."
Como criar uma função construtora em JavaScript?,Uma função construtora é uma função que é usada com o operador `new` para criar novos objetos. Ela normalmente define propriedades e métodos que serão compartilhados por todas as instâncias do objeto. Exemplo: `function Pessoa(nome) { this.nome = nome; }`
Como herdar propriedades e métodos de outro objeto em JavaScript usando protótipos?,"Você pode definir o protótipo de um objeto para ser outro objeto usando `Object.setPrototypeOf(objetoFilho, objetoPai.prototype)`."
O que é o atributo `length` de uma string?,O atributo `length` retorna o número de caracteres em uma string.
O que são tagged templates em JavaScript?,Tagged templates permitem que você processe template literals com uma função. A função recebe um array de strings literais e um array de valores interpolados.
O que é o símbolo `Symbol` em JavaScript?,`Symbol` é um tipo de dado primitivo que representa um identificador único. Eles são frequentemente usados para adicionar propriedades únicas a objetos que não entrarão em conflito com outras propriedades.
O que é o atributo `prototype` em JavaScript?,Toda função em JavaScript tem uma propriedade `prototype`. Esta propriedade é um objeto cujo protótipo é atribuído ao `__proto__` de cada objeto criado com essa função como construtor (usando `new`).
O que é o método `instanceof` em JavaScript?,O operador `instanceof` testa se a propriedade `prototype` de um construtor aparece em algum lugar na cadeia de protótipos de um objeto.
Como criar uma classe em JavaScript (ES6+)?,Classes são criadas usando a palavra-chave `class`. Elas fornecem uma sintaxe mais clara e orientada a objetos para criar objetos e herdar propriedades e métodos.
O que são construtores em classes JavaScript?,Construtores são métodos especiais dentro de uma classe que são executados quando um novo objeto da classe é criado. Eles são usados para inicializar as propriedades do objeto.
O que é a palavra-chave `super` em classes JavaScript?,`super` é usado dentro de uma classe filha para chamar o construtor da classe pai e acessar propriedades e métodos da classe pai.
Como funciona a herança de classes em JavaScript (ES6+)?,A herança é implementada usando a palavra-chave `extends`. Uma classe filha pode herdar propriedades e métodos de uma classe pai.
O que são módulos ES6 (ES Modules) em JavaScript?,ES Modules são um sistema de módulos nativo do JavaScript que permite organizar o código em arquivos separados e importá-los e exportá-los conforme necessário.
Como exportar um módulo em JavaScript (ES6+)?,"Use a palavra-chave `export` para exportar variáveis, funções ou classes de um módulo."
Como importar um módulo em JavaScript (ES6+)?,"Use a palavra-chave `import` para importar variáveis, funções ou classes de um módulo."
Qual a diferença entre exportações nomeadas e exportações padrão em ES Modules?,"Exportações nomeadas permitem exportar vários valores de um módulo, cada um com um nome específico. Exportações padrão permitem exportar um único valor como o valor padrão do módulo."
O que é o objeto `Proxy` em JavaScript?,"O objeto `Proxy` permite criar um proxy para outro objeto, que pode interceptar e customizar operações como leitura de propriedades, atribuição, enumeração, e chamadas de função."
O que são Reflect API em JavaScript?,Reflect API é um objeto embutido que fornece métodos interceptáveis para operações do JavaScript. Eles são projetados para serem usados em conjunto com o objeto `Proxy`.
Como funciona o Garbage Collection em JavaScript?,O Garbage Collection é o processo automático de liberação de memória que não está mais sendo usada por um programa. O JavaScript usa um algoritmo de Garbage Collection para identificar e liberar automaticamente a memória ocupada por objetos que não são mais referenciados.
O que são Memory Leaks em JavaScript e como evitá-los?,"Memory Leaks ocorrem quando um programa não libera memória que não está mais sendo usada, levando a um aumento gradual no uso de memória. Eles podem ser evitados removendo referências desnecessárias a objetos, fechando event listeners e usando estruturas de dados apropriadas."
O que é a Temporal Dead Zone (TDZ) em JavaScript?,"A Temporal Dead Zone (TDZ) é a área de um bloco de código onde uma variável declarada com `let` ou `const` existe, mas não pode ser acessada até que sua declaração seja alcançada. Acessar uma variável dentro da TDZ resulta em um erro."
O que é o padrão de design Composite em JavaScript?,"O padrão Composite permite tratar objetos individuais e composições de objetos de forma uniforme. Ele cria uma estrutura de árvore onde os nós podem ser objetos individuais ou outros objetos compostos.

Espero que esta lista abrangente seja útil!"
"O que é o ""hoisting"" em JavaScript e como ele afeta variáveis e funções?","Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com valor `undefined`, enquanto funções declaradas com a palavra-chave `function` são hoisted completamente, permitindo que sejam usadas antes de serem declaradas no código. Variáveis com `let` e `const` são hoisted, mas não inicializadas, resultando em um erro se forem acessadas antes da declaração."
Explique o que é o `this` em JavaScript.,"`this` se refere ao objeto no qual a função está sendo executada. Seu valor depende de como a função é chamada. Em um método de objeto, `this` se refere ao objeto. Em uma função solta, em modo não estrito, `this` se refere ao objeto global (window no navegador, global no Node.js). Com `call`, `apply` e `bind`, `this` pode ser explicitamente definido."
O que é o prototype em JavaScript e como ele é usado para herança?,"Cada objeto em JavaScript tem um prototype. Quando uma propriedade é acessada em um objeto, o JavaScript primeiro procura na própria propriedade do objeto. Se não encontrar, procura no prototype do objeto. Se ainda não encontrar, procura no prototype do prototype, e assim por diante, até atingir o prototype final, que é `null`. Isso permite herança por meio da cadeia de protótipos."
"Explique o conceito de ""event loop"" em JavaScript.","O event loop é um mecanismo que permite que o JavaScript execute tarefas assíncronas sem bloquear o thread principal. Ele monitora a pilha de chamadas e a fila de mensagens, movendo tarefas da fila para a pilha quando a pilha está vazia."
Como você lidaria com erros em JavaScript?,"Usando blocos `try...catch` para capturar exceções. Além disso, pode-se usar o método `.catch()` em Promises para lidar com erros assíncronos."
O que é JSON?,"JSON (JavaScript Object Notation) é um formato de dados leve, usado para transmitir dados entre um servidor e um navegador. É baseado em um subconjunto da linguagem JavaScript."
"Qual a diferença entre `let`, `const` e `var` ao declarar variáveis?","`var` tem escopo de função ou global. `let` e `const` têm escopo de bloco. `let` permite reatribuição, enquanto `const` cria uma referência constante à variável (o valor em si pode ser mutável, se for um objeto)."
"Explique o conceito de ""currying"" em JavaScript.",Currying é a técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada vez.
O que é a cadeia de escopo em JavaScript?,A cadeia de escopo é o conjunto de escopos acessíveis a uma função no momento em que é executada. Ela é determinada pela ordem em que as funções são aninhadas.
O que é o DOM?,"O DOM (Document Object Model) é uma representação em árvore da estrutura de um documento HTML ou XML. Ele permite que o JavaScript acesse e manipule o conteúdo, a estrutura e o estilo do documento."
Como você seleciona um elemento HTML usando JavaScript?,"Usando métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()` ou `document.querySelector()` e `document.querySelectorAll()`."
Como você modifica o conteúdo de um elemento HTML usando JavaScript?,"Através das propriedades `innerHTML`, `textContent` ou `innerText` do elemento."
Como você adiciona um novo elemento HTML ao DOM usando JavaScript?,"Criando o elemento com `document.createElement()`, definindo suas propriedades e anexando-o ao DOM usando métodos como `appendChild()`, `insertBefore()`, etc."
Como você remove um elemento HTML do DOM usando JavaScript?,"Usando o método `removeChild()` no elemento pai do nó que se deseja remover, ou o método `remove()` no próprio elemento a ser removido."
Como você adiciona um event listener a um elemento HTML usando JavaScript?,Usando o método `addEventListener()` do elemento.
Quais são alguns eventos comuns do DOM em JavaScript?,"`click`, `mouseover`, `mouseout`, `keydown`, `keyup`, `submit`, `load`, `DOMContentLoaded`, etc."
O que é event bubbling?,"Event bubbling é quando um evento acionado em um elemento se propaga para cima na árvore DOM, acionando os event listeners nos elementos pais."
O que é event capturing?,"Event capturing é o oposto de event bubbling. O evento é capturado primeiro pelo elemento mais externo e, em seguida, propaga-se para os elementos internos até atingir o elemento alvo."
Como você previne o comportamento padrão de um evento em JavaScript?,Usando o método `preventDefault()` do objeto de evento.
Como você interrompe a propagação de um evento em JavaScript?,Usando o método `stopPropagation()` do objeto de evento.
Como você converte um valor para um booleano em JavaScript?,Usando a função `Boolean()` ou o operador de negação dupla `!!`.
O que são truthy e falsy values em JavaScript?,"Valores truthy são valores que são avaliados como `true` em um contexto booleano. Valores falsy são valores que são avaliados como `false`. Exemplos de falsy values são: `0`, `null`, `undefined`, `NaN`, `""""` (string vazia) e `false`."
Como você arredonda um número em JavaScript?,"Usando os métodos `Math.round()`, `Math.ceil()` ou `Math.floor()`."
O que é o método `map()` em JavaScript?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em JavaScript?,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em JavaScript?,`reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o método `forEach()` em JavaScript?,"`forEach()` executa uma função fornecida uma vez para cada elemento do array. Ao contrário de `map`, ele não retorna um novo array."
O que é o método `sort()` em JavaScript?,"`sort()` ordena os elementos de um array no local e retorna o array. Por padrão, a ordenação é alfabética (conversão para string e comparação dos valores Unicode)."
Como você clona um array em JavaScript?,"Usando o operador spread (`...`), o método `slice()`, ou `Array.from()`."
Como você junta elementos de um array em uma string em JavaScript?,Usando o método `join()`.
Como você divide uma string em um array em JavaScript?,Usando o método `split()`.
O que é o método `test()` de uma expressão regular em JavaScript?,`test()` executa uma pesquisa por uma correspondência entre uma expressão regular e uma string especificada. Retorna `true` ou `false`.
O que é o método `exec()` de uma expressão regular em JavaScript?,`exec()` executa uma pesquisa por uma correspondência em uma string especificada. Retorna um array com as informações da correspondência ou `null` se não houver correspondência.
O que são grupos de captura em expressões regulares?,São partes de uma expressão regular dentro de parênteses que permitem capturar e referenciar as partes correspondentes da string.
O que são quantificadores em expressões regulares?,"Símbolos que especificam quantas vezes um caractere ou grupo deve ocorrer na string para corresponder ao padrão (ex: `*`, `+`, `?`, `{n}`, `{n,}`, `{n,m}`)."
O que são classes de caracteres em expressões regulares?,"Representam conjuntos de caracteres que podem corresponder em uma determinada posição (ex: `\d` para dígitos, `\w` para caracteres alfanuméricos, `\s` para espaços em branco)."
O que são âncoras em expressões regulares?,"Símbolos que especificam uma posição na string onde a correspondência deve ocorrer (ex: `^` para o início da string, `$` para o final da string)."
O que é o método `match()` de uma string em JavaScript?,`match()` recupera as correspondências de uma string em relação a uma expressão regular.
O que é o método `replace()` de uma string em JavaScript?,`replace()` retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por um substituto.
O que é o método `search()` de uma string em JavaScript?,"`search()` executa uma pesquisa por uma correspondência entre uma expressão regular e esta String objeto. Retorna o índice da primeira correspondência na string, ou -1 se nenhuma correspondência for encontrada."
O que é o método `substring()` de uma string em JavaScript?,`substring()` retorna a parte da string entre os índices inicial e final fornecidos.
O que é o método `slice()` de uma string em JavaScript?,`slice()` extrai uma seção de uma string e retorna uma nova string. Aceita índices negativos.
O que é o método `toUpperCase()` de uma string em JavaScript?,`toUpperCase()` retorna a string convertida para maiúsculas.
O que é o método `toLowerCase()` de uma string em JavaScript?,`toLowerCase()` retorna a string convertida para minúsculas.
O que é o método `trim()` de uma string em JavaScript?,`trim()` remove espaços em branco do início e do fim de uma string.
Como você verifica o tipo de uma variável em JavaScript?,Usando o operador `typeof`.
Quais são os tipos de dados primitivos em JavaScript?,"`string`, `number`, `boolean`, `null`, `undefined`, `symbol` e `bigint`."
O que é o tipo de dado `symbol` em JavaScript?,`symbol` é um tipo de dado primitivo cujas instâncias são únicas e imutáveis. São frequentemente usados como chaves de propriedades de objetos para evitar conflitos de nomes.
O que é o tipo de dado `bigint` em JavaScript?,`bigint` é um tipo de dado numérico que pode representar inteiros com precisão arbitrária.
O que é coerção de tipo em JavaScript?,É a conversão automática de um tipo de dado para outro pelo JavaScript durante a execução do código.
Como você previne a coerção de tipo indesejada em JavaScript?,Usando o operador de igualdade estrita (`===`) e o operador de desigualdade estrita (`!==`).
O que é um bloco de código em JavaScript?,É um grupo de zero ou mais instruções delimitadas por chaves `{}`.
"O que é o modo estrito (""strict mode"") em JavaScript?","É uma forma de executar o JavaScript de forma mais ""segura"". Ele impõe regras mais rígidas e ajuda a prevenir erros comuns. É ativado adicionando a string `""use strict"";` no início de um script ou função."
Quais são algumas das restrições impostas pelo modo estrito em JavaScript?,"Variáveis devem ser declaradas antes de serem usadas, a atribuição a propriedades somente leitura resulta em erro, o uso de `with` é proibido, etc."
O que é programação orientada a objetos em JavaScript?,É um paradigma de programação que usa objetos para organizar e estruturar o código.
O que são classes em JavaScript (ES6)?,São modelos para criar objetos. Elas fornecem uma sintaxe mais clara e concisa para definir propriedades e métodos de objetos.
O que é um construtor em uma classe JavaScript?,É um método especial dentro de uma classe que é chamado quando um novo objeto da classe é criado. É usado para inicializar as propriedades do objeto.
O que é herança em JavaScript (classes)?,É um mecanismo que permite que uma classe (subclasse) herde propriedades e métodos de outra classe (superclasse).
Como você implementa herança em JavaScript usando classes?,Usando a palavra-chave `extends` na declaração da classe.
O que é o método `super()` em JavaScript (classes)?,É usado dentro de uma subclasse para chamar o construtor da superclasse.
O que é polimorfismo em programação orientada a objetos?,É a capacidade de objetos de diferentes classes responderem ao mesmo método de forma diferente.
O que é encapsulamento em programação orientada a objetos?,É a prática de agrupar dados (propriedades) e métodos que operam nesses dados dentro de uma unidade (objeto).
O que é a palavra-chave `static` em classes JavaScript?,"É usada para definir métodos e propriedades que pertencem à classe em si, em vez de pertencerem a instâncias da classe."
O que são módulos em JavaScript?,São unidades independentes de código que podem ser reutilizadas em diferentes partes de uma aplicação.
Como você importa um módulo em JavaScript?,Usando a palavra-chave `import`.
Como você exporta um módulo em JavaScript?,Usando a palavra-chave `export`.
Qual a diferença entre `export default` e `export` nomeado?,`export default` permite exportar um único valor padrão de um módulo. `export` nomeado permite exportar múltiplos valores com nomes específicos.
O que é o método `concat()` em JavaScript?,`concat()` retorna um novo array contendo todos os arrays concatenados com o array no qual foi chamado.
O que é o método `reverse()` em JavaScript?,"`reverse()` inverte a ordem dos elementos em um array no local. O primeiro elemento do array se torna o último, e o último elemento se torna o primeiro."
O que é o método `push()` em JavaScript?,`push()` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
O que é o método `pop()` em JavaScript?,`pop()` remove o último elemento de um array e retorna esse elemento.
O que é o método `shift()` em JavaScript?,`shift()` remove o primeiro elemento de um array e retorna esse elemento.
O que é o método `unshift()` em JavaScript?,`unshift()` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
O que é o método `splice()` em JavaScript?,"`splice()` altera o conteúdo de um array, adicionando novos elementos enquanto remove elementos antigos."
O que é a recursão em JavaScript?,É uma técnica de programação em que uma função chama a si mesma para resolver um problema.
Quais são os perigos da recursão excessiva em JavaScript?,"Pode levar a um estouro da pilha de chamadas (stack overflow), o que causa um erro e interrompe a execução do programa."
O que é a otimização de cauda de recursão (Tail Call Optimization - TCO)?,É uma otimização que alguns engines JavaScript implementam para evitar o estouro da pilha de chamadas em funções recursivas que fazem a chamada recursiva como a última operação. JavaScript não tem garantia de TCO.
O que é a desserialização em JavaScript?,É o processo de converter uma string JSON em um objeto JavaScript.
Como você desserializa uma string JSON em JavaScript?,Usando o método `JSON.parse()`.
O que é a serialização em JavaScript?,É o processo de converter um objeto JavaScript em uma string JSON.
Como você serializa um objeto JavaScript em JSON?,Usando o método `JSON.stringify()`.
O que é o tratamento de erros síncrono em JavaScript?,"É o tratamento de erros que ocorrem durante a execução de código síncrono, normalmente usando blocos `try...catch`."
O que é o tratamento de erros assíncrono em JavaScript?,"É o tratamento de erros que ocorrem durante a execução de código assíncrono, normalmente usando callbacks com um padrão de primeiro argumento como erro, ou usando `Promises` com `.catch()`, ou com `async/await` usando `try...catch`."
"O que é o ""callback hell"" em JavaScript?","É um padrão de código onde múltiplas funções assíncronas são aninhadas umas dentro das outras, tornando o código difícil de ler e manter."
"Como você evita o ""callback hell"" em JavaScript?","Usando `Promises`, `async/await` ou modularizando o código em funções menores."
O que é a palavra-chave `async` em JavaScript?,É usada para marcar uma função como assíncrona. Funções assíncronas retornam implicitamente uma `Promise`.
O que é a palavra-chave `await` em JavaScript?,É usada dentro de uma função assíncrona para pausar a execução da função até que uma `Promise` seja resolvida ou rejeitada.
Qual a diferença entre `async/await` e `Promises`?,"`async/await` é uma sintaxe mais moderna e legível para trabalhar com `Promises`. Na prática, `async/await` simplifica a sintaxe e torna o código assíncrono mais parecido com o código síncrono."
O que é um módulo CommonJS?,É um sistema de módulos usado principalmente no Node.js.  Módulos são carregados usando `require()` e exportados usando `module.exports`.
O que é o sistema de módulos ES (ES Modules)?,"É o sistema de módulos padrão do JavaScript, introduzido no ES6. Módulos são importados usando `import` e exportados usando `export`."
Qual a diferença entre o sistema de módulos CommonJS e o ES Modules?,"CommonJS é síncrono, enquanto ES Modules são assíncronos. ES Modules permitem análise estática para otimizações. CommonJS usa `require()` e `module.exports`, enquanto ES Modules usam `import` e `export`."
O que é o escopo léxico em JavaScript?,Significa que o escopo de uma variável é determinado pela sua posição no código fonte. Uma função interna tem acesso às variáveis declaradas em seu escopo local e nos escopos das funções externas que a envolvem.
O que é um closure com um loop em JavaScript?,"Um erro comum é criar closures dentro de loops, onde cada closure compartilha a mesma variável de contador do loop. Isso pode levar a resultados inesperados. Para corrigir isso, pode-se usar uma IIFE ou `let` (que cria um novo escopo para cada iteração do loop)."
Como você cria um generator em JavaScript?,Usando a palavra-chave `function*`.
O que é a palavra-chave `yield` em JavaScript?,É usada dentro de um generator para pausar a execução e retornar um valor.
Como você itera sobre os valores de um generator em JavaScript?,Usando um loop `for...of` ou chamando o método `next()` do generator.
O que é programação funcional em JavaScript?,"É um paradigma de programação que enfatiza o uso de funções puras, imutabilidade e evitar efeitos colaterais."
O que é uma função pura em JavaScript?,É uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais (não modifica o estado externo).
O que é imutabilidade em programação funcional?,"É a prática de não modificar dados existentes. Em vez disso, cria-se novas cópias dos dados com as alterações desejadas."
O que é a composição de funções em JavaScript?,É o processo de combinar duas ou mais funções para criar uma nova função.
O que é memorização em JavaScript?,É uma técnica de otimização que armazena em cache os resultados de chamadas de função caras e retorna o resultado em cache quando as mesmas entradas ocorrem novamente.
O que é um promise all?,"O `Promise.all()` recebe um array de Promises como entrada, e retorna uma única Promise que resolve para um array de valores das Promises de entrada que foram resolvidas. Se qualquer uma das Promises de entrada for rejeitada, a Promise retornada por `Promise.all()` será imediatamente rejeitada com o motivo da primeira Promise a ser rejeitada."
Qual a diferença entre `Array.prototype.forEach()` e `Array.prototype.map()`?,"`forEach()` itera sobre os elementos de um array e executa uma função para cada elemento, mas não retorna um novo array. `map()` itera sobre os elementos de um array, aplica uma função a cada elemento e retorna um novo array com os resultados."
O que é desestruturação em JavaScript (destructuring)?,É uma expressão JavaScript que possibilita descompactar valores de arrays ou propriedades de objetos em variáveis distintas.
Como você usa a desestruturação em JavaScript com arrays?,"`const [a, b] = [1, 2]; // a = 1, b = 2`"
Como você usa a desestruturação em JavaScript com objetos?,"`const { name, age } = { name: 'João', age: 30 }; // name = 'João', age = 30`"
Como você usa a desestruturação com valores padrão em JavaScript?,"`const { x = 0, y = 0 } = { y: 5 }; // x = 0, y = 5`"
O que é um set em JavaScript?,É uma coleção de valores únicos. Um valor pode ocorrer apenas uma vez em um Set.
O que é um map em JavaScript?,"É uma coleção de pares chave-valor, onde tanto as chaves quanto os valores podem ser de qualquer tipo de dado."
Qual a diferença entre um objeto e um map em JavaScript?,"As chaves de um objeto devem ser strings ou símbolos, enquanto as chaves de um map podem ser de qualquer tipo de dado. Um map mantém a ordem de inserção das chaves, enquanto a ordem das propriedades de um objeto não é garantida."
O que é uma WeakMap em JavaScript?,"É um tipo especial de Map onde as chaves são objetos e as referências para esses objetos são mantidas de forma ""fraca"". Isso significa que se não houver outras referências para o objeto chave, o objeto pode ser coletado pelo coletor de lixo (garbage collector)."
O que é uma WeakSet em JavaScript?,"É semelhante a um WeakMap, mas armazena coleções de objetos (não valores)."
Qual a utilidade de WeakMap e WeakSet?,São úteis para associar dados a objetos sem impedir que esses objetos sejam coletados pelo coletor de lixo. Isso é especialmente útil em cenários onde você precisa armazenar informações adicionais sobre objetos gerenciados por outras partes do seu código.
Qual a diferença entre `||` (operador OR) e `??` (nullish coalescing operator) em JavaScript?,"`||` retorna o operando do lado direito se o operando do lado esquerdo for ""falsy"" (ex: `0`, `""""`, `false`, `null`, `undefined`, `NaN`), enquanto `??` retorna o operando do lado direito apenas se o operando do lado esquerdo for `null` ou `undefined`."
O que é o operador de encadeamento opcional `?.` (optional chaining operator) em JavaScript?,"Permite acessar propriedades de um objeto, mesmo que uma propriedade intermediária na cadeia seja `null` ou `undefined`, sem lançar um erro. Retorna `undefined` nesses casos."
O que são tags template em JavaScript?,Permitem que você use uma função para analisar template literals. A função recebe o template literal como um array de strings e as expressões interpoladas como argumentos separados.
Qual a diferença entre `Object.freeze()` e `Object.seal()`?,"`Object.freeze()` torna o objeto completamente imutável (não é possível adicionar, remover ou modificar propriedades), enquanto `Object.seal()` impede a adição ou remoção de propriedades, mas permite a modificação de propriedades existentes."
O que são Proxies em JavaScript?,"Proxies permitem interceptar e personalizar operações fundamentais em objetos (ex: leitura de propriedades, escrita de propriedades, construção de objetos)."
Quais são alguns usos para Proxies?,"Validação de propriedades, registro de acesso a propriedades, virtualização de objetos, etc."
O que é Reflection em JavaScript?,Reflection é um conjunto de APIs que fornecem métodos para interceptar e modificar operações internas da linguagem. Os métodos em `Reflect` correspondem aos operadores da linguagem (ex: `Reflect.get()` corresponde ao operador `.` para acesso a propriedades).
Qual a relação entre Proxies e Reflection?,"Proxies usam Reflection para delegar operações para o objeto alvo.  Um handler de Proxy pode interceptar uma operação e, em seguida, usar um método de `Reflect` para realizar a operação original no objeto alvo."
O que é a API Fetch em JavaScript?,É uma interface para buscar recursos de rede de forma assíncrona. É uma alternativa mais moderna e flexível ao `XMLHttpRequest`.
O que é CORS (Cross-Origin Resource Sharing)?,É um mecanismo que permite ou restringe requisições HTTP entre diferentes origens (domínios). É uma medida de segurança implementada pelos navegadores.
Como declarar uma variável em JavaScript usando a palavra-chave `const`?,"`const minhaVariavel = ""valor"";`  A palavra-chave `const` declara uma variável cujo valor não pode ser reatribuído após a inicialização.

**3.**"
O que é coerção de tipo (type coercion) em JavaScript?,"É a conversão automática de um tipo de dado para outro durante uma operação. Por exemplo, ao somar uma string com um número, JavaScript pode tentar converter a string em um número.

**4.**"
Como verificar se um valor é um array em JavaScript?,"Use `Array.isArray(meuValor)`. Retorna `true` se `meuValor` for um array e `false` caso contrário.

**6.**"
Como converter uma string em um número em JavaScript?,"Use `parseInt(minhaString)` (para inteiros) ou `parseFloat(minhaString)` (para números de ponto flutuante).

**9.**"
O que são template literals (template strings) em JavaScript?,"São strings delimitadas por crases (``), que permitem a interpolação de expressões JavaScript usando `${}`.

**10.**"
Como acessar uma propriedade de um objeto em JavaScript?,"Use a notação de ponto ( `meuObjeto.chave1` ) ou a notação de colchetes ( `meuObjeto[""chave1""]` ).

**12.**"
O que é o método `shift()` em arrays?,"Remove o primeiro elemento de um array e o retorna.

**18.**"
O que é o método `unshift()` em arrays?,"Adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.

**19.**"
Como clonar um array em JavaScript?,"Use o operador spread: `const novoArray = [...arrayOriginal];` ou o método `slice()`: `const novoArray = arrayOriginal.slice();`

**20.**"
Qual a diferença entre `let` e `var` em JavaScript?,"`var` tem escopo de função ou global, enquanto `let` tem escopo de bloco. `let` também não permite redeclaração dentro do mesmo escopo.

**23.**"
Como criar uma função em JavaScript?,"Use a palavra-chave `function`: `function minhaFuncao(parametro) { // código }` ou a sintaxe de arrow function: `const minhaFuncao = (parametro) => { // código }`.

**25.**"
O que é o objeto `arguments` dentro de uma função?,"É um objeto semelhante a um array que contém todos os argumentos passados para a função, independentemente de quantos parâmetros a função foi definida para receber.  Não disponível em arrow functions.

**27.**"
Como retornar um valor de uma função em JavaScript?,"Use a palavra-chave `return` seguida do valor a ser retornado.

**28.**"
O que é recursão em JavaScript?,"É quando uma função chama a si mesma dentro de sua própria definição.

**29.**"
Como gerar um número aleatório entre 0 e 1 em JavaScript?,"Use `Math.random()`.

**31.**"
Como arredondar um número para o inteiro mais próximo em JavaScript?,"Use `Math.round(numero)`.

**32.**"
Como encontrar o maior número em um array em JavaScript?,"Use `Math.max(...meuArray)`.

**33.**"
Como obter a data e hora atuais em JavaScript?,"Use `new Date()`.

**35.**"
Como obter o ano de uma data em JavaScript?,"Use `meuObjetoDate.getFullYear()`.

**36.**"
Como obter o mês de uma data em JavaScript?,"Use `meuObjetoDate.getMonth()`.  (Lembre-se que o mês começa em 0, então Janeiro é 0, Fevereiro é 1, etc.)

**37.**"
O que é o objeto `String` em JavaScript?,"É um objeto nativo que representa uma sequência de caracteres.

**38.**"
Como obter o comprimento de uma string em JavaScript?,"Use `minhaString.length`.

**39.**"
Como converter uma string para maiúsculas em JavaScript?,"Use `minhaString.toUpperCase()`.

**40.**"
Como converter uma string para minúsculas em JavaScript?,"Use `minhaString.toLowerCase()`.

**41.**"
Como encontrar a posição de uma substring dentro de uma string em JavaScript?,"Use `minhaString.indexOf(""substring"")`.

**42.**"
Como extrair uma substring de uma string em JavaScript?,"Use `minhaString.substring(inicio, fim)` ou `minhaString.slice(inicio, fim)`.

**43.**"
O que é o método `split()` em strings?,"Divide uma string em um array de substrings, com base em um separador especificado.

**44.**"
O que é o método `replace()` em strings?,"Substitui uma substring em uma string por outra substring.

**45.**"
Como testar se uma string corresponde a uma expressão regular em JavaScript?,"Use o método `test()` da expressão regular: `/padrão/.test(minhaString)`.

**48.**"
O que é o tipo de dado `Symbol` em JavaScript (ES6)?,"É um tipo de dado primitivo que representa um identificador único.

**51.**"
O que é o operador `!` em JavaScript?,"É o operador de negação lógica. Inverte o valor booleano de um operando.

**52.**"
O que são operadores de incremento e decremento em JavaScript?,"São operadores que incrementam ou decrementam o valor de uma variável em 1. Ex: `++`, `--`.

**54.**"
Qual a diferença entre `i++` e `++i` em JavaScript?,"`i++` retorna o valor de `i` antes de incrementá-lo, enquanto `++i` retorna o valor de `i` após incrementá-lo.

**55.**"
O que é o operador `&&` em JavaScript?,"É o operador lógico ""E"" (AND). Retorna `true` se ambos os operandos forem `true`.

**57.**"
O que é o operador `||` em JavaScript?,"É o operador lógico ""OU"" (OR). Retorna `true` se pelo menos um dos operandos for `true`.

**58.**"
O que é a precedência de operadores em JavaScript?,"É a ordem em que os operadores são avaliados em uma expressão.

**59.**"
Como forçar a ordem de avaliação de operadores em JavaScript?,"Use parênteses `()`.

**60.**"
O que é uma instrução `if` em JavaScript?,"Executa um bloco de código se uma condição for verdadeira.

**62.**"
O que é uma instrução `else` em JavaScript?,"Executa um bloco de código se a condição da instrução `if` for falsa.

**63.**"
O que é uma instrução `else if` em JavaScript?,"Permite verificar múltiplas condições em uma sequência de `if` statements.

**64.**"
O que é uma instrução `switch` em JavaScript?,"Permite executar diferentes blocos de código com base no valor de uma expressão.

**65.**"
O que é uma instrução `break` em JavaScript?,"Termina a execução de um loop ou instrução `switch`.

**66.**"
O que é uma instrução `continue` em JavaScript?,"Interrompe a iteração atual de um loop e passa para a próxima iteração.

**67.**"
O que é o loop `for...in` em JavaScript?,"Itera sobre as propriedades enumeráveis de um objeto.

**71.**"
O que é o loop `for...of` em JavaScript (ES6)?,"Itera sobre os valores de um objeto iterável (array, string, Map, Set, etc.).

**72.**"
Como selecionar elementos HTML por nome de classe em JavaScript?,"Use `document.getElementsByClassName(""minhaClasse"")`.

**77.**"
Como selecionar elementos HTML por nome de tag em JavaScript?,"Use `document.getElementsByTagName(""minhaTag"")`.

**78.**"
Como alterar o conteúdo de um elemento HTML em JavaScript?,"Use a propriedade `textContent` ou `innerHTML`.

**79.**"
Como alterar os atributos de um elemento HTML em JavaScript?,"Use o método `setAttribute(""nomeDoAtributo"", ""novoValor"")`.

**80.**"
Como adicionar um novo elemento HTML ao DOM em JavaScript?,"Crie o elemento com `document.createElement(""tag"")`, configure suas propriedades e adicione-o ao DOM usando `appendChild()` ou `insertBefore()`.

**81.**"
Como remover um elemento HTML do DOM em JavaScript?,"Use o método `removeChild()` do elemento pai.

**82.**"
O que é o objeto `event` passado para um event listener?,"Contém informações sobre o evento que ocorreu (ex: qual elemento foi clicado, qual tecla foi pressionada).

**85.**"
O que é o método `stopPropagation()` em eventos?,"Impede que o evento se propague para elementos pai na árvore DOM.

**87.**"
"O que é o conceito de ""event bubbling"" em JavaScript?","É a ordem em que os eventos se propagam para cima na árvore DOM, do elemento alvo até o elemento raiz.

**88.**"
"O que é o conceito de ""event capturing"" em JavaScript?","É a ordem em que os eventos se propagam para baixo na árvore DOM, do elemento raiz até o elemento alvo. (Menos comum que bubbling).

**89.**"
Como o valor de `this` é determinado em uma função normal?,"Se a função for chamada como um método de um objeto, `this` se refere ao objeto. Se a função for chamada no escopo global, `this` se refere ao objeto global (window no navegador, global no Node.js).

**91.**"
Como o valor de `this` é determinado em uma arrow function?,"Arrow functions não têm seu próprio `this`. Elas herdam o valor de `this` do contexto léxico circundante.

**92.**"
"O que são métodos `call()`, `apply()` e `bind()` em JavaScript?","São métodos que permitem controlar o valor de `this` ao chamar uma função.

**93.**"
O que faz o método `bind()` em JavaScript?,"Cria uma nova função com o valor de `this` já definido, que não pode ser alterado posteriormente.

**95.**"
O que são objetos em JavaScript?,"São coleções de pares chave-valor. As chaves são strings (ou Symbols), e os valores podem ser de qualquer tipo de dado.

**96.**"
O que são protótipos em JavaScript?,"É um objeto associado a cada função e objeto em JavaScript. Permite a herança de propriedades e métodos.

**97.**"
Como herdar propriedades e métodos de um protótipo em JavaScript?,"Definindo o protótipo de um objeto como o protótipo do objeto pai.

**98.**"
O que é a cadeia de protótipos (prototype chain) em JavaScript?,"É a sequência de protótipos que são percorridos quando se tenta acessar uma propriedade ou método de um objeto.

**99.**"
O que é JSON (JavaScript Object Notation)?,"É um formato de dados leve e fácil de ler e escrever, usado para transmitir dados entre um servidor e um aplicativo web.

**101.**"
Como converter um objeto JavaScript em uma string JSON?,"Use `JSON.stringify(meuObjeto)`.

**102.**"
Como converter uma string JSON em um objeto JavaScript?,"Use `JSON.parse(minhaStringJSON)`.

**103.**"
O que são promessas (Promises) em JavaScript?,"São objetos que representam o resultado eventual (completo ou falho) de uma operação assíncrona.

**104.**"
Quais são os três estados possíveis de uma promessa em JavaScript?,"Pending (pendente), Fulfilled (cumprida) e Rejected (rejeitada).

**105.**"
Como criar uma promessa em JavaScript?,"Use o construtor `new Promise((resolve, reject) => { ... });`.

**106.**"
Como lidar com o resultado de uma promessa cumprida em JavaScript?,"Use o método `then(funcaoCallback)`.

**107.**"
Como lidar com o resultado de uma promessa rejeitada em JavaScript?,"Use o método `catch(funcaoCallback)`.

**108.**"
O que é o método `finally()` em promessas JavaScript?,"É executado independentemente da promessa ser cumprida ou rejeitada.

**109.**"
O que são funções `async` em JavaScript?,"São funções que permitem usar a palavra-chave `await` para pausar a execução da função até que uma promessa seja resolvida.

**110.**"
Como lidar com erros em funções `async` em JavaScript?,"Use blocos `try...catch`.

**112.**"
O que são módulos em JavaScript (ES6)?,"São arquivos de código que exportam e importam funcionalidades para reutilização.

**113.**"
Como exportar funcionalidades de um módulo em JavaScript?,"Use as palavras-chave `export` (named exports) ou `export default` (default export).

**114.**"
Como importar funcionalidades de um módulo em JavaScript?,"Use a palavra-chave `import`.

**115.**"
Qual a diferença entre named exports e default export em JavaScript?,"Named exports permitem exportar múltiplos valores de um módulo, enquanto default export permite exportar apenas um valor (geralmente uma função ou classe).

**116.**"
O que é destructuring em JavaScript (ES6)?,"É uma forma de extrair valores de objetos ou arrays e atribuí-los a variáveis.

**117.**"
Como usar destructuring com objetos em JavaScript?,"`const { propriedade1, propriedade2 } = meuObjeto;`

**118.**"
Como usar destructuring com arrays em JavaScript?,"`const [elemento1, elemento2] = meuArray;`

**119.**"
O que são parâmetros padrão em funções JavaScript (ES6)?,"São valores padrão que são atribuídos a parâmetros de função se nenhum valor for fornecido ao chamar a função.

**120.**"
Como definir um parâmetro padrão em uma função JavaScript?,"`function minhaFuncao(parametro = valorPadrao) { ... }`

**121.**"
O que é um Map em JavaScript (ES6)?,"É uma coleção de pares chave-valor, onde as chaves podem ser de qualquer tipo de dado (diferente de objetos, onde as chaves devem ser strings ou Symbols).

**122.**"
Como adicionar um elemento a um Map em JavaScript?,"Use o método `set(chave, valor)`.

**123.**"
Como obter um valor de um Map em JavaScript?,"Use o método `get(chave)`.

**124.**"
O que é um Set em JavaScript (ES6)?,"É uma coleção de valores únicos.

**125.**"
Como adicionar um elemento a um Set em JavaScript?,"Use o método `add(valor)`.

**126.**"
Como verificar se um valor existe em um Set em JavaScript?,"Use o método `has(valor)`.

**127.**"
O que são iterators em JavaScript (ES6)?,"São objetos que definem uma sequência de valores e fornecem um método `next()` para acessar o próximo valor da sequência.

**128.**"
O que são generators em JavaScript (ES6)?,"São funções que podem ser pausadas e retomadas, permitindo produzir uma sequência de valores sob demanda.

**129.**"
Como criar um generator em JavaScript?,"Use a palavra-chave `function*`.

**130.**"
O que são WeakMaps em JavaScript (ES6)?,"São Maps onde as chaves devem ser objetos e são mantidas fracamente (weakly referenced). Isso significa que se o objeto chave não for mais referenciado em nenhum outro lugar, ele pode ser coletado pelo garbage collector, e a entrada correspondente no WeakMap será removida.

**132.**"
O que são WeakSets em JavaScript (ES6)?,"São Sets que armazenam objetos fracamente referenciados.

**133.**"
O que é template literal tagged em JavaScript?,"É uma função que recebe um template literal como argumento e permite processar a string e as expressões interpoladas antes de retornar o resultado final.

**134.**"
O que é o operador nullish coalescing (??) em JavaScript?,"Retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo.

**135.**"
O que é o operador optional chaining (?.) em JavaScript?,"Permite acessar propriedades aninhadas de um objeto sem ter que verificar explicitamente se cada nível existe, evitando erros se uma propriedade for `null` ou `undefined`.

**136.**"
Como definir uma classe em JavaScript?,"Use a palavra-chave `class`.

**138.**"
O que é o construtor em uma classe JavaScript?,"É um método especial que é chamado quando um novo objeto da classe é criado.

**139.**"
Como criar um objeto a partir de uma classe em JavaScript?,"Use a palavra-chave `new`.

**140.**"
O que é herança em classes JavaScript?,"É a capacidade de uma classe (subclasse) herdar propriedades e métodos de outra classe (superclasse).

**142.**"
Como usar herança em classes JavaScript?,"Use a palavra-chave `extends`.

**143.**"
O que é o Garbage Collection em JavaScript?,"É um processo automático que libera a memória que não está mais sendo usada pelo programa.

**145.**"
O que é 'use strict' em JavaScript?,"É uma diretiva que habilita o modo estrito, tornando o código mais seguro e menos propenso a erros, lançando exceções para práticas consideradas ruins.

**146.**"
O que são generators assíncronos em JavaScript?,"Permitem gerar valores de forma assíncrona, combinando a funcionalidade de generators com `async/await`.

**147.**"
Como usar o operador `in` para verificar se uma propriedade existe em um objeto?,"`propriedade in objeto`.

**149.**"
O que são Mixins em Javascript?,"São classes ou objetos que contêm métodos que podem ser adicionados a outras classes para estender sua funcionalidade, permitindo reutilização de código sem herança direta.

**150.**"
O que é programação orientada a protótipos em JavaScript?,"É um paradigma de programação onde a herança ocorre através da duplicação de objetos existentes (protótipos), em vez de classes. Novos objetos herdam propriedades e comportamentos de seus protótipos."
O que é hoisting em JavaScript e como ele afeta a declaração de variáveis e funções?,"Hoisting é um comportamento em JavaScript onde declarações de variáveis (usando `var`) e funções são movidas para o topo de seu escopo antes da execução do código. Variáveis declaradas com `var` são ""hoisted"" com o valor `undefined`, enquanto funções declaradas como declarações de função são completamente ""hoisted"". Variáveis declaradas com `let` e `const` também sofrem hoisting, mas não são inicializadas e tentar acessá-las antes da declaração resulta em um `ReferenceError`."
Explique o conceito de protótipos em JavaScript.,"Em JavaScript, cada objeto tem um protótipo. O protótipo é outro objeto do qual o objeto herda propriedades e métodos. Quando tentamos acessar uma propriedade que não existe diretamente no objeto, o JavaScript procura no protótipo do objeto e, recursivamente, nos protótipos dos protótipos."
Como você pode criar um objeto em JavaScript?,"Você pode criar um objeto em JavaScript usando a notação literal de objeto (`{}`) ou usando o construtor `new Object()`. Além disso, você pode usar classes (introduzidas no ES6) para criar objetos."
Como você altera o conteúdo de um elemento HTML usando JavaScript?,"Você pode alterar o conteúdo de um elemento HTML usando propriedades como `innerHTML`, `textContent` ou `innerText`."
Como você adiciona um event listener a um elemento HTML?,"Você pode adicionar um event listener a um elemento HTML usando o método `addEventListener()`. Por exemplo: `elemento.addEventListener('click', minhaFuncao);`"
O que são funções de ordem superior em JavaScript?,Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam funções como resultado.
Explique o uso do `map()` em arrays JavaScript.,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
Explique o uso do `filter()` em arrays JavaScript.,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
Explique o uso do `reduce()` em arrays JavaScript.,O método `reduce()` aplica uma função contra um acumulador e cada valor do array (da esquerda para a direita) para reduzi-lo a um único valor.
Qual a diferença entre `async` e `await` em JavaScript?,`async` é uma palavra-chave usada para declarar uma função assíncrona. `await` é usado dentro de uma função `async` para pausar a execução da função até que uma promise seja resolvida ou rejeitada.
O que são arrow functions em JavaScript (ES6)?,Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas têm uma sintaxe mais curta e não possuem seu próprio `this`.
O que é o operador spread (...) em JavaScript (ES6)?,O operador spread permite expandir um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados.
Como você pode verificar se uma variável é um array em JavaScript?,Você pode usar `Array.isArray(variavel)` para verificar se uma variável é um array.
Qual a diferença entre `let` e `const` em JavaScript (ES6)?,`let` declara uma variável que pode ser reatribuída. `const` declara uma variável que não pode ser reatribuída após a inicialização.
Como você converte um objeto JavaScript em JSON?,Você pode usar `JSON.stringify(objeto)` para converter um objeto JavaScript em uma string JSON.
O que é um loop `for...in` em JavaScript?,O loop `for...in` itera sobre as propriedades enumeráveis de um objeto.
O que é um loop `for...of` em JavaScript (ES6)?,"O loop `for...of` itera sobre os valores de um objeto iterável, como um array, string, map, set, etc."
Como você pode lidar com erros em JavaScript?,Você pode usar blocos `try...catch` para capturar e tratar erros em JavaScript.
O que é o objeto `Error` em JavaScript?,O objeto `Error` é um objeto padrão que representa erros que ocorrem durante a execução do código.
O que é `throw` em JavaScript?,A declaração `throw` lança uma exceção (um erro). Você pode usar `throw` para gerar erros personalizados.
O que é o modelo de eventos de bubbling em JavaScript?,"O bubbling é um modelo de propagação de eventos em que um evento acionado em um elemento dispara os manipuladores de eventos de seus elementos ancestrais (pai, avô, etc.) na árvore DOM."
O que é o modelo de eventos de capturing em JavaScript?,"O capturing é um modelo de propagação de eventos no qual o evento é primeiro capturado pelo elemento mais externo e propagado para dentro, até atingir o elemento de destino."
O que é a diferença entre `setTimeout()` e `setInterval()` em JavaScript?,`setTimeout()` executa uma função uma vez após um determinado atraso. `setInterval()` executa uma função repetidamente em intervalos de tempo regulares.
Como você pode limpar um timeout em JavaScript?,Você pode limpar um timeout usando o método `clearTimeout(idDoTimeout)`.
Como você pode limpar um interval em JavaScript?,Você pode limpar um interval usando o método `clearInterval(idDoInterval)`.
O que são template literals em JavaScript (ES6)?,Template literals são strings que permitem expressões embutidas. Eles são delimitados por backticks (`).
O que é o operador de coalescência nula (??) em JavaScript?,"O operador de coalescência nula (??) retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`, caso contrário, retorna o operando da esquerda."
O que é o encadeamento opcional (?.) em JavaScript?,"O encadeamento opcional (?.) permite acessar propriedades de um objeto que pode ser nulo ou indefinido sem causar um erro. Se a propriedade anterior for nula ou indefinida, a expressão retorna `undefined` em vez de lançar um erro."
"Qual a diferença entre `call()`, `apply()` e `bind()` em JavaScript?","`call()` e `apply()` são usados para invocar uma função com um determinado valor `this`. `call()` aceita argumentos individualmente, enquanto `apply()` aceita um array de argumentos. `bind()` cria uma nova função com o valor `this` especificado, mas não a invoca imediatamente."
O que são iterators e iterables em JavaScript (ES6)?,Um iterable é um objeto que pode ser iterado (usado em um loop `for...of`). Um iterator é um objeto que define como iterar sobre um iterable.
Como você pode copiar um objeto em JavaScript?,"Você pode usar o operador spread (`...`) para fazer uma cópia superficial (shallow copy) de um objeto. Para uma cópia profunda (deep copy), você pode usar `JSON.parse(JSON.stringify(objeto))`, mas isso não funciona para objetos com funções ou outros tipos não serializáveis em JSON.  Para casos complexos, bibliotecas especializadas são recomendadas."
Qual a diferença entre `let` e `var` no contexto de escopo de bloco?,"Variáveis declaradas com `var` têm escopo de função (ou escopo global se declaradas fora de uma função), enquanto variáveis declaradas com `let` têm escopo de bloco (limitado ao bloco de código em que são declaradas)."
Como você pode usar a API `localStorage` em JavaScript?,"A API `localStorage` permite armazenar dados no navegador do usuário de forma persistente. Você pode usar métodos como `localStorage.setItem()`, `localStorage.getItem()`, `localStorage.removeItem()` e `localStorage.clear()`."
Como você pode usar a API `sessionStorage` em JavaScript?,"A API `sessionStorage` é semelhante à `localStorage`, mas os dados são armazenados apenas durante a sessão do navegador e são perdidos quando a guia ou janela é fechada."
O que é o Regex (Expressões Regulares) em JavaScript?,Regex é uma sequência de caracteres que define um padrão de busca. É usada para corresponder e manipular texto.
O que são os métodos `test()` e `exec()` em Regex no JavaScript?,"O método `test()` retorna `true` se a expressão regular encontrar uma correspondência na string, caso contrário, retorna `false`. O método `exec()` retorna um array com a correspondência (e grupos de captura) ou `null` se não houver correspondência."
O que são grupos de captura em Regex no JavaScript?,Grupos de captura são partes da expressão regular delimitadas por parênteses `()`. Eles permitem extrair partes específicas da string que correspondem ao padrão.
O que são quantificadores em Regex no JavaScript?,"Quantificadores especificam quantas ocorrências de um caractere, grupo ou classe de caracteres devem estar presentes para que haja uma correspondência. Exemplos: `*` (zero ou mais), `+` (um ou mais), `?` (zero ou um), `{n}` (exatamente n), `{n,}` (n ou mais), `{n,m}` (entre n e m)."
O que são classes de caracteres em Regex no JavaScript?,"Classes de caracteres definem um conjunto de caracteres que podem corresponder. Exemplos: `[abc]` (qualquer um dos caracteres a, b ou c), `[^abc]` (qualquer caractere que não seja a, b ou c), `[a-z]` (qualquer letra minúscula), `\d` (qualquer dígito), `\w` (qualquer caractere alfanumérico ou underscore)."
O que são âncoras em Regex no JavaScript?,"Âncoras especificam uma posição na string onde a correspondência deve ocorrer. Exemplos: `^` (início da string), `$` (fim da string), `\b` (fronteira de palavra)."
Como você pode substituir partes de uma string usando Regex em JavaScript?,"Você pode usar o método `replace()` de uma string, passando uma expressão regular como primeiro argumento e a string de substituição como segundo argumento."
"O que é a diferença entre correspondência ""greedy"" e ""lazy"" em Regex no JavaScript?","Por padrão, quantificadores são ""greedy"", o que significa que eles tentam corresponder à maior quantidade possível de texto. Quantificadores ""lazy"" (seguidos por um `?`) tentam corresponder à menor quantidade possível de texto."
Como você pode lidar com erros CORS em JavaScript?,"Para lidar com erros CORS, o servidor deve configurar os cabeçalhos HTTP apropriados (especialmente o `Access-Control-Allow-Origin`) para permitir que o domínio de origem faça a requisição."
O que é XSS (Cross-Site Scripting)?,XSS é uma vulnerabilidade de segurança que permite que atacantes injetem scripts maliciosos em páginas web visualizadas por outros usuários.
Como você pode prevenir ataques XSS em JavaScript?,"Para prevenir ataques XSS, você deve escapar a entrada do usuário antes de exibi-la na página, usar Content Security Policy (CSP) e evitar usar `innerHTML` para inserir conteúdo gerado pelo usuário."
O que é um ataque CSRF (Cross-Site Request Forgery)?,CSRF é um ataque que força um usuário autenticado a executar ações indesejadas em um aplicativo web.
Como você pode prevenir ataques CSRF em JavaScript?,"Para prevenir ataques CSRF, você pode usar tokens CSRF (um token único gerado pelo servidor e incluído em cada formulário) ou SameSite cookies."
O que é o padrão de projeto Singleton em JavaScript?,O padrão Singleton garante que uma classe tenha apenas uma instância e fornece um ponto de acesso global a ela.
O que é o padrão de projeto Factory em JavaScript?,O padrão Factory fornece uma interface para criar objetos sem especificar suas classes concretas.
O que é o padrão de projeto Observer em JavaScript?,"O padrão Observer define uma dependência um-para-muitos entre objetos, de modo que, quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
O que é o padrão de projeto Module em JavaScript?,"O padrão Module encapsula variáveis e funções privadas dentro de um escopo, expondo apenas uma interface pública."
O que são IIFE (Immediately Invoked Function Expressions) em JavaScript?,IIFE são funções que são executadas imediatamente após sua criação. Elas são usadas para criar escopos privados e evitar conflitos de nomes.
O que é a diferença entre `Array.prototype.forEach()` e um loop `for` tradicional em JavaScript?,"`forEach()` é um método de array que executa uma função para cada elemento do array. Um loop `for` oferece mais controle, permitindo interromper ou continuar o loop, o que não é possível diretamente com `forEach()`."
O que é a diferença entre `Array.prototype.slice()` e `Array.prototype.splice()` em JavaScript?,"`slice()` retorna uma cópia de uma parte do array sem modificar o array original. `splice()` altera o array original, removendo ou substituindo elementos e/ou adicionando novos elementos."
O que é a diferença entre `encodeURI()` e `encodeURIComponent()` em JavaScript?,"`encodeURI()` codifica URIs, mas não codifica certos caracteres como `/`, `?`, `:`, `@`, `&`, `=`, `+`, `$`, e `#`. `encodeURIComponent()` codifica todos esses caracteres, tornando-o adequado para codificar partes de uma URI, como parâmetros de consulta."
O que são descriptors de propriedades em JavaScript?,"Descriptors de propriedades definem as características de uma propriedade de um objeto, como sua capacidade de ser escrita (`writable`), enumerada (`enumerable`) e configurada (`configurable`)."
Como você pode definir um descriptor de propriedade em JavaScript?,Você pode usar o método `Object.defineProperty()` para definir um descriptor de propriedade.
O que é a diferença entre `hasOwnProperty()` e `in` em JavaScript?,`hasOwnProperty()` retorna `true` se o objeto tiver a propriedade especificada como uma propriedade direta (não herdada). `in` retorna `true` se o objeto tiver a propriedade especificada como uma propriedade direta ou herdada.
O que são Symbols em JavaScript (ES6)?,Symbols são um tipo de dado primitivo que representa um identificador único e imutável. Eles são frequentemente usados como chaves de propriedades de objetos para evitar conflitos de nomes.
O que é a diferença entre uma string e um objeto String em JavaScript?,"Uma string é um tipo de dado primitivo. Um objeto String é uma instância da classe String. Embora as strings primitivas tenham acesso a métodos da classe String, elas não são objetos."
O que é type coercion em JavaScript?,"Type coercion é a conversão automática de um tipo de dado para outro (por exemplo, de string para número) pelo JavaScript. Isso pode levar a resultados inesperados em comparações e operações."
O que é o método `Number.isNaN()` em JavaScript (ES6)?,"`Number.isNaN()` determina se um valor é `NaN` (Not-a-Number). Ao contrário da função global `isNaN()`, `Number.isNaN()` não força o argumento a ser um número, tornando-o mais preciso."
O que é o método `isFinite()` em JavaScript?,"A função `isFinite()` determina se um valor é um número finito. Ao contrário do `Number.isFinite()`, a função global `isFinite()` converte o argumento para um número antes de testá-lo."
O que são tagged template literals em JavaScript (ES6)?,Tagged template literals são uma forma mais avançada de template literals que permitem que você processe o template literal com uma função tag.
O que é a diferença entre `null` e `undefined` em JavaScript? (Repetição proposital para reforçar e variar a formulação),"`null` é uma atribuição, indicando que uma variável intencionalmente não possui valor. `undefined` indica que uma variável foi declarada, mas ainda não foi atribuído nenhum valor."
Qual a importância de usar ponto e vírgula (`;`) no final das declarações em JavaScript?,"Embora o JavaScript tenha ASI (Automatic Semicolon Insertion), a inserção automática de ponto e vírgula, é uma boa prática incluí-los explicitamente para evitar comportamentos inesperados e garantir a consistência do código. Em alguns casos, a falta de ponto e vírgula pode levar a erros sutis e difíceis de depurar."
O que são os metacaracteres em Regex no JavaScript?,"Metacaracteres são caracteres com significados especiais em expressões regulares. Alguns exemplos incluem: `.` (qualquer caractere, exceto nova linha), `^` (início da string), `$` (fim da string), `*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `[]` (conjunto de caracteres), `()` (grupo de captura), `\` (escape)."
Qual a diferença entre `map` e `forEach` ao iterar sobre um array?,"`map` retorna um novo array com os resultados da aplicação de uma função a cada elemento do array original. `forEach`, por outro lado, executa uma função para cada elemento do array, mas não retorna um novo array (retorna `undefined`). `forEach` é geralmente usado para efeitos colaterais (side effects) como modificar o array original ou realizar ações de I/O, enquanto `map` é usado para transformar os elementos do array."
O que significa imutabilidade em JavaScript e como você pode alcançá-la?,"Imutabilidade significa que um objeto ou valor não pode ser modificado após sua criação. Em JavaScript, você pode alcançar imutabilidade usando `const` para variáveis (mas isso impede apenas a reatribuição, não a modificação do objeto), `Object.freeze()`, ou usando bibliotecas como Immutable.js que fornecem estruturas de dados imutáveis."
Explique o conceito de pure functions em JavaScript.,Uma pure function (função pura) é uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais (não modifica o estado externo). Pure functions são mais fáceis de testar e prever.
O que é o princípio DRY (Don't Repeat Yourself) e como ele se aplica ao JavaScript?,"DRY é um princípio de desenvolvimento de software que afirma que ""cada parte do conhecimento deve ter uma representação única, inequívoca e confiável dentro de um sistema."" Em JavaScript, isso significa evitar código duplicado, criar funções reutilizáveis e usar abstrações para reduzir a redundância."
Explique a diferença entre programação imperativa e declarativa e como o JavaScript suporta ambos os paradigmas.,"Programação imperativa se concentra em *como* realizar uma tarefa, especificando cada etapa em detalhes. Programação declarativa se concentra em *o que* deve ser realizado, sem especificar como. JavaScript suporta ambos os paradigmas. Loops `for` e manipulação direta do DOM são exemplos de programação imperativa, enquanto o uso de `map`, `filter`, `reduce` e frameworks como React são exemplos de programação declarativa."
O que é debouncing em JavaScript e qual o seu caso de uso?,"Debouncing é uma técnica para limitar a taxa na qual uma função é executada. Ele agrupa várias chamadas de função em uma única chamada após um período de tempo. Um caso de uso comum é em campos de busca, onde você não quer fazer uma requisição ao servidor a cada tecla digitada, mas apenas após o usuário parar de digitar por um tempo."
O que é throttling em JavaScript e qual o seu caso de uso?,"Throttling é uma técnica para limitar a taxa máxima na qual uma função é executada. Ele garante que a função seja executada no máximo uma vez em um determinado período de tempo. Um caso de uso comum é em eventos de scroll, onde você não quer executar uma função intensiva a cada evento de scroll, mas apenas a cada, digamos, 100 milissegundos."
Como funciona a garbage collection em JavaScript?,"Garbage collection é o processo automático de liberar memória que não está mais sendo usada por um programa. Em JavaScript, o garbage collector geralmente usa o algoritmo de ""marcação e varredura"" (mark-and-sweep), onde ele identifica quais objetos não são mais acessíveis (marcados) e então libera a memória ocupada por esses objetos (varridos)."
O que são web sockets?,WebSockets fornecem canais de comunicação full-duplex sobre uma única conexão TCP. Eles permitem comunicação em tempo real entre um cliente e um servidor.
Explique o conceito de event delegation em JavaScript.,"Event delegation é uma técnica onde, em vez de adicionar event listeners a cada elemento individual, você adiciona um único event listener a um elemento pai. Quando um evento ocorre em um elemento filho, ele ""bolhas"" (bubbles) para cima no DOM e o event listener no pai pode detectar o evento e agir com base no elemento filho que o acionou. Isso pode melhorar o desempenho, especialmente com muitos elementos."
O que é a diferença entre usar `const` para declarar um array ou objeto e usar `Object.freeze()`?,"Usar `const` impede apenas que a *variável* seja reatribuída a um novo array ou objeto. Os elementos dentro do array ou as propriedades do objeto ainda podem ser modificados. `Object.freeze()` impede a modificação do *objeto* em si, tornando-o imutável."
O que é a propriedade `name` de uma função em JavaScript?,"A propriedade `name` de uma função retorna o nome da função, ou uma string vazia se a função for anônima."
"O que é o operador vírgula (`,`) em JavaScript?",O operador vírgula avalia ambos os operandos (da esquerda para a direita) e retorna o valor do último operando. É frequentemente usado em loops `for` ou em expressões onde várias operações precisam ser executadas em uma única linha.
O que é o método `String.prototype.trim()` em JavaScript?,O método `trim()` remove espaços em branco do início e do fim de uma string.
O que é o método `String.prototype.padStart()` e `String.prototype.padEnd()` em JavaScript (ES2017)?,"`padStart()` preenche o início de uma string com um caractere especificado até atingir um comprimento determinado. `padEnd()` faz o mesmo, mas preenche o final da string."
O que são Number Separators (separadores numéricos) em JavaScript?,Number Separators permitem usar underscores (_) para melhorar a legibilidade de números literais. Exemplo: `1_000_000` é equivalente a `1000000`.
O que é o operador ** em JavaScript?,"O operador `**` é o operador de exponenciação. Ele eleva o primeiro operando à potência do segundo operando. Exemplo: `2 ** 3` é equivalente a `Math.pow(2, 3)`."
O que é o método `Array.prototype.flat()` em JavaScript (ES2019)?,O método `flat()` cria um novo array com todos os elementos de sub-arrays concatenados recursivamente até uma profundidade especificada.
O que é o método `Array.prototype.flatMap()` em JavaScript (ES2019)?,"O método `flatMap()` primeiro mapeia cada elemento usando uma função e então achata o resultado em um novo array. Ele é semanticamente equivalente a um `map()` seguido por um `flat()` de profundidade 1, mas é mais eficiente."
O que é `BigInt` em JavaScript (ES2020)?,`BigInt` é um tipo de dado numérico que pode representar inteiros com precisão arbitrária. É usado para representar números maiores que o limite máximo de `Number.MAX_SAFE_INTEGER`.
O que é o método `String.prototype.replaceAll()` em JavaScript (ES2021)?,"O método `replaceAll()` substitui todas as ocorrências de uma substring em uma string por outra substring. Diferente do `replace()`, que só substitui a primeira ocorrência (a menos que usado com uma expressão regular com o flag `g`)."
O que são Private Class Fields em JavaScript?,Private Class Fields são propriedades de classes que só podem ser acessadas de dentro da classe onde foram declaradas. São declaradas com o prefixo `#`.
O que é um WeakMap em JavaScript?,"Um WeakMap é uma coleção de pares chave/valor onde as chaves devem ser objetos e os objetos são mantidos ""fracamente"". Isso significa que se a chave (o objeto) não for mais acessível em nenhum outro lugar, o garbage collector pode liberar a memória ocupada por esse objeto, e o par chave/valor correspondente no WeakMap será removido automaticamente."
O que é um WeakSet em JavaScript?,"Um WeakSet é uma coleção de objetos mantidos ""fracamente"". Similar ao WeakMap, se um objeto não for mais acessível em nenhum outro lugar, o garbage collector pode liberar a memória ocupada por esse objeto, e ele será removido automaticamente do WeakSet."
Qual a utilidade de usar um WeakMap ou WeakSet?,WeakMaps e WeakSets são úteis para armazenar metadados associados a objetos sem impedir que esses objetos sejam coletados pelo garbage collector. Isso é especialmente útil em cenários como armazenar informações de estado sobre elementos DOM.
Explique o conceito de short-circuit evaluation em JavaScript.,"Short-circuit evaluation (avaliação de curto-circuito) é um comportamento em JavaScript onde a avaliação de uma expressão lógica para assim que o resultado final for determinado. Por exemplo, em `A && B`, se `A` for `false`, `B` não será avaliado porque o resultado final será sempre `false`. Em `A || B`, se `A` for `true`, `B` não será avaliado porque o resultado final será sempre `true`."
"O que é ""Temporal Dead Zone"" (TDZ) em JavaScript e como ela se relaciona com `let` e `const`?","A ""Temporal Dead Zone"" (TDZ) é a área de um escopo onde uma variável declarada com `let` ou `const` existe, mas não pode ser acessada antes de sua declaração real no código. Tentar acessar uma variável dentro da TDZ resulta em um `ReferenceError`. Isso ajuda a evitar comportamentos inesperados e promove um código mais claro."
O que são Mixins em JavaScript?,"Mixins são uma forma de reutilizar código em JavaScript, permitindo que você ""misture"" funcionalidades de vários objetos em um único objeto. Eles geralmente são implementados copiando propriedades e métodos de um objeto mixin para outro objeto."
O que são Proxies em JavaScript (ES6)?,"Proxies permitem interceptar e personalizar operações fundamentais em objetos, como leitura, escrita, enumeração e invocação de funções. Eles fornecem uma maneira de criar metadados e comportamentos personalizados para objetos."
O que são Reflect em JavaScript (ES6)?,O objeto `Reflect` fornece métodos para interceptar operações JavaScript. Cada método de `Reflect` corresponde a um operador ou método interno da linguagem. Os métodos de `Reflect` podem ser usados em conjunto com `Proxy` para criar comportamentos personalizados para objetos.
O que é um mock em testes de JavaScript?,Um mock é uma simulação de um objeto ou função real usado em testes. Mocks permitem isolar a unidade que está
O que é hoisting em JavaScript e como ele afeta variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seu escopo antes da execução do código.  Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto funções declaradas com a palavra-chave `function` são hoisted com a sua definição completa. Variáveis `let` e `const` também sofrem hoisting, mas não são inicializadas, resultando em um erro se forem acessadas antes de sua declaração."
Como você cria um objeto em JavaScript usando a notação literal?,"Você pode criar um objeto usando a notação literal com chaves `{}` e pares chave-valor separados por dois pontos `:`. Por exemplo: `const pessoa = { nome: ""João"", idade: 30 };`"
Explique o conceito de prototipagem em JavaScript.,"Em JavaScript, cada objeto tem um protótipo, que é outro objeto do qual herda propriedades e métodos. Quando uma propriedade é acessada em um objeto e não é encontrada diretamente, o JavaScript procura no protótipo do objeto e, se necessário, no protótipo do protótipo, e assim por diante, até encontrar a propriedade ou chegar ao protótipo `null`."
O que é uma função construtora em JavaScript?,"Uma função construtora é uma função usada para criar objetos. Quando uma função é chamada com a palavra-chave `new`, ela atua como uma função construtora.  Dentro da função construtora, `this` se refere ao novo objeto que está sendo criado."
O que é o DOM em JavaScript?,"DOM significa Document Object Model. É uma representação em forma de árvore da estrutura de um documento HTML ou XML, permitindo que o JavaScript interaja com os elementos da página web, modificando seu conteúdo, estilo e estrutura."
Como selecionar um elemento HTML usando JavaScript?,"Você pode selecionar elementos HTML usando métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`, `document.querySelector()` (seleciona o primeiro elemento que corresponde ao seletor CSS) e `document.querySelectorAll()` (seleciona todos os elementos que correspondem ao seletor CSS)."
Como adicionar um evento a um elemento HTML usando JavaScript?,"Você pode adicionar um evento a um elemento HTML usando o método `addEventListener()`. Por exemplo: `elemento.addEventListener('click', minhaFuncao);`"
O que é o operador spread em JavaScript?,"O operador spread (`...`) permite expandir um array ou objeto em elementos individuais. Ele é usado para copiar arrays ou objetos, combinar arrays ou objetos, ou passar argumentos para uma função."
O que é o operador rest em JavaScript?,O operador rest (`...`) permite coletar múltiplos argumentos em uma função em um array. Ele também pode ser usado para coletar as propriedades restantes de um objeto durante a desestruturação.
Como você lida com erros em JavaScript?,"Você pode lidar com erros usando blocos `try...catch`. O código que pode gerar um erro é colocado dentro do bloco `try`, e o código que lida com o erro é colocado dentro do bloco `catch`."
O que é o método `JSON.stringify()` em JavaScript?,O método `JSON.stringify()` converte um valor JavaScript (objeto ou array) em uma string JSON.
O que é o método `JSON.parse()` em JavaScript?,O método `JSON.parse()` analisa uma string JSON e constrói o valor ou o objeto JavaScript descrito pela string.
Como você importa e exporta módulos em JavaScript (ES Modules)?,Você pode exportar funcionalidades de um módulo usando as palavras-chave `export` e importar funcionalidades de outro módulo usando a palavra-chave `import`. Exemplo: `export default minhaFuncao;` e `import minhaFuncao from './meuModulo.js';`
O que é o `use strict` em JavaScript?,"`""use strict"";` é uma diretiva que ativa o modo estrito em JavaScript. O modo estrito impõe regras mais rigorosas e ajuda a evitar erros comuns."
O que é o evento `DOMContentLoaded` em JavaScript?,"O evento `DOMContentLoaded` é disparado quando o documento HTML inicial foi completamente carregado e analisado, sem esperar que stylesheets, imagens e subframes terminem de carregar."
O que é o evento `load` em JavaScript?,"O evento `load` é disparado quando todo o documento HTML, incluindo stylesheets, imagens e subframes, foi completamente carregado."
O que é o conceito de event bubbling em JavaScript?,"Event bubbling é o processo em que um evento disparado em um elemento se propaga para seus elementos pai na árvore DOM, disparando o mesmo evento nesses elementos pai."
O que é o conceito de event capturing em JavaScript?,"Event capturing é o processo oposto ao event bubbling, onde o evento é capturado pelo elemento raiz da árvore DOM e se propaga para baixo até o elemento alvo."
Como você para um `setInterval()` em JavaScript?,"Você pode parar um `setInterval()` usando o método `clearInterval()`, passando o ID retornado pelo `setInterval()` como argumento."
O que são cookies em JavaScript?,"Cookies são pequenos arquivos de texto que são armazenados no computador do usuário pelo navegador da web. Eles são usados para armazenar informações sobre o usuário, como preferências de idioma ou informações de login."
Como você acessa e manipula cookies em JavaScript?,Você pode acessar e manipular cookies usando a propriedade `document.cookie`.
O que é o objeto `localStorage` em JavaScript?,"`localStorage` é uma API de armazenamento web que permite armazenar dados no navegador do usuário de forma persistente, mesmo após o fechamento do navegador."
O que é o objeto `sessionStorage` em JavaScript?,`sessionStorage` é uma API de armazenamento web que permite armazenar dados no navegador do usuário apenas durante a sessão atual do navegador. Os dados são perdidos quando o navegador é fechado.
Qual a diferença entre `localStorage` e `sessionStorage` em JavaScript?,"A principal diferença é que os dados armazenados em `localStorage` são persistentes e permanecem disponíveis mesmo após o fechamento do navegador, enquanto os dados armazenados em `sessionStorage` são perdidos quando o navegador é fechado."
O que é um array associativo em JavaScript?,"JavaScript não possui arrays associativos como em outras linguagens. Em vez disso, você usa objetos para criar estruturas de dados que mapeiam chaves para valores."
O que é o método `slice()` em JavaScript?,O método `slice()` retorna uma cópia de uma parte de um array em um novo array.
O que é o método `join()` em JavaScript?,O método `join()` junta todos os elementos de um array em uma string.
Como você ordena um array de números corretamente em JavaScript?,"Você pode ordenar um array de números corretamente usando o método `sort()` com uma função de comparação: `numeros.sort((a, b) => a - b);`"
O que é o método `includes()` em JavaScript?,"O método `includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado."
O que é o método `indexOf()` em JavaScript?,"O método `indexOf()` retorna o primeiro índice em que um determinado elemento pode ser encontrado no array, ou -1 se não estiver presente."
O que é o método `lastIndexOf()` em JavaScript?,"O método `lastIndexOf()` retorna o último índice em que um determinado elemento pode ser encontrado no array, ou -1 se não estiver presente."
O que é o método `find()` em JavaScript?,"O método `find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
O que é o método `findIndex()` em JavaScript?,"O método `findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1."
O que é o método `every()` em JavaScript?,O método `every()` testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna um valor booleano.
O que é o método `some()` em JavaScript?,O método `some()` testa se pelo menos um elemento no array passa no teste implementado pela função fornecida. Retorna um valor booleano.
Como você gera um número aleatório inteiro dentro de um intervalo específico em JavaScript?,Você pode gerar um número aleatório inteiro dentro de um intervalo específico usando a seguinte fórmula: `Math.floor(Math.random() * (max - min + 1)) + min;`
O que é o operador de coalescência nula (`??`) em JavaScript?,"O operador de coalescência nula (`??`) retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Caso contrário, retorna o operando do lado esquerdo."
O que é o encadeamento opcional (`?.`) em JavaScript?,"O operador de encadeamento opcional (`?.`) permite acessar propriedades de objetos que podem ser `null` ou `undefined` sem causar um erro. Se a propriedade existir, ele retorna o valor da propriedade; caso contrário, retorna `undefined`."
O que é o operador de atribuição de coalescência nula (`??=`) em JavaScript?,O operador de atribuição de coalescência nula (`??=`) atribui o valor do lado direito ao lado esquerdo somente se o lado esquerdo for `null` ou `undefined`.
O que é o método `isNaN()` em JavaScript?,O método `isNaN()` determina se um valor é `NaN` (Not-a-Number).
Como você converte uma string para um número em JavaScript?,Você pode usar as funções `parseInt()` (converte para inteiro) ou `parseFloat()` (converte para número de ponto flutuante) para converter uma string para um número. O operador unário `+` também pode ser usado: `+string`.
Como você verifica se uma variável foi declarada em JavaScript?,A melhor forma é verificar se `typeof variável !== 'undefined'`. Tentar acessar uma variável não declarada diretamente resultará em um erro.
O que são iteradores em JavaScript?,Iteradores são objetos que definem uma sequência e retornam um valor por vez quando o método `next()` é chamado. Eles fornecem uma maneira padrão de percorrer diferentes tipos de dados.
O que são geradores em JavaScript?,"Geradores são funções especiais que podem ser pausadas e retomadas, permitindo que produzam múltiplos valores ao longo do tempo. Eles são definidos usando a palavra-chave `function*` e a palavra-chave `yield`."
O que é o método `Symbol` em JavaScript?,`Symbol` é um tipo de dado primitivo que representa um identificador único. Símbolos são frequentemente usados como chaves de propriedade para evitar conflitos de nomes.
O que é o atributo `data-*` em HTML e como acessá-lo em JavaScript?,`data-*` são atributos personalizados que podem ser adicionados a elementos HTML para armazenar dados adicionais. Eles podem ser acessados em JavaScript usando a propriedade `dataset` do elemento. Exemplo: `elemento.dataset.meuDado`.
O que é o Garbage Collector em JavaScript?,"O Garbage Collector (GC) é um processo automático que o JavaScript utiliza para gerenciar a alocação de memória. Ele identifica e libera a memória que não está mais sendo utilizada pelo programa, evitando vazamentos de memória."
O que é o padrão de projeto Módulo (Module Pattern) em JavaScript?,"O padrão de projeto Módulo é uma técnica para criar módulos reutilizáveis em JavaScript, usando closures para encapsular variáveis e funções privadas."
Explique o conceito de Imutabilidade em JavaScript.,"Imutabilidade significa que, após a criação de um objeto ou valor, seu estado não pode ser alterado.  Em JavaScript, tipos primitivos são imutáveis.  Para objetos e arrays, imutabilidade requer o uso de técnicas para evitar modificações diretas."
Como se implementa imutabilidade em arrays e objetos em JavaScript?,"Para arrays, usa-se métodos não mutáveis como `slice()`, `concat()`, `filter()`, `map()`, e o spread operator (`...`). Para objetos, usa-se `Object.assign()` ou o spread operator para criar cópias com alterações."
Qual o uso do método `trim()` em JavaScript?,O método `trim()` remove os espaços em branco do início e do final de uma string.
Qual a diferença entre as funções `encodeURI()` e `encodeURIComponent()` em JavaScript?,"`encodeURI()` codifica uma URI completa, enquanto `encodeURIComponent()` codifica um componente da URI. `encodeURIComponent()` codifica mais caracteres do que `encodeURI()`."
O que é um polyfill em JavaScript?,"Um polyfill é um código (geralmente JavaScript) que fornece a funcionalidade que você, como desenvolvedor, espera que o navegador forneça nativamente. Ele é usado para fornecer suporte a recursos mais recentes em navegadores mais antigos."
O que é transpilação em JavaScript?,"Transpilação é o processo de converter código-fonte de uma versão de JavaScript (ou uma linguagem que se compila para JavaScript) para outra versão de JavaScript, geralmente para garantir compatibilidade com navegadores mais antigos."
Explique o funcionamento do evento `requestAnimationFrame()` em JavaScript.,"`requestAnimationFrame()` agenda uma função para ser chamada antes do próximo repaint do navegador. É usado para animações suaves e eficientes, pois o navegador otimiza as chamadas para corresponder à taxa de atualização da tela."
O que é um Service Worker em JavaScript?,"Um Service Worker é um script que roda em segundo plano, separado da página da web, e pode interceptar e manipular solicitações de rede, cache recursos e fornecer funcionalidades offline. É fundamental para Progressive Web Apps (PWAs)."
O que é o objeto Proxy em JavaScript?,"O objeto `Proxy` permite criar um objeto que intercepta e personaliza operações fundamentais (por exemplo, leitura de propriedades, atribuição, enumeração, invocação de função, etc.)."
Qual a finalidade do método `Object.defineProperty()` em JavaScript?,"O método `Object.defineProperty()` define uma nova propriedade diretamente em um objeto ou modifica uma propriedade existente em um objeto, e retorna o objeto. Permite um controle preciso sobre as características da propriedade (configurável, enumerável, gravável, valor)."
O que é o padrão de projeto Revealing Module em JavaScript?,"Similar ao Module Pattern, mas com a diferença de que todas as propriedades e métodos privados são definidos no escopo do módulo, mas apenas um subconjunto deles é retornado como interface pública. Isso facilita a leitura e manutenção do código.

Espero que esta lista seja útil!  Cobre uma ampla gama de tópicos essenciais do JavaScript."
O que são closures em JavaScript e qual a sua importância?,"Closures são a capacidade de uma função lembrar e acessar seu escopo léxico mesmo quando executada fora desse escopo. São importantes para encapsulamento de dados, criação de funções privadas e gerenciamento de estado."
Explique o conceito de hoisting em JavaScript.,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis (com `var`) e funções para o topo de seu escopo antes da execução do código. No entanto, apenas a declaração é movida, a inicialização permanece onde está. Variáveis declaradas com `let` e `const` também são hoisted, mas não são inicializadas, resultando em um erro se forem acessadas antes da declaração."
O que é o objeto `arguments` em JavaScript e como ele funciona?,"`arguments` é um objeto semelhante a um array que está disponível dentro de funções que não são funções de seta (arrow functions). Ele contém todos os argumentos passados para a função, independentemente dos parâmetros definidos na sua declaração."
Descreva o que são Immediately Invoked Function Expressions (IIFE).,IIFE (Immediately Invoked Function Expression) é uma função JavaScript que é executada assim que é definida. A sintaxe é geralmente `(function() { ... })();` ou `( () => { ... } )();`. São úteis para criar escopos privados e evitar poluição do escopo global.
O que são template literals em JavaScript e qual a sua vantagem?,Template literals são strings delimitadas por crases (``). Permitem a interpolação de variáveis e expressões dentro da string usando `${expressao}`.  A vantagem é a legibilidade e facilidade de uso em comparação com a concatenação tradicional de strings.
"Explique o conceito de ""truthy"" e ""falsy"" values em JavaScript.","Em JavaScript, um valor ""truthy"" é um valor que é avaliado como verdadeiro em um contexto booleano. Um valor ""falsy"" é um valor que é avaliado como falso em um contexto booleano. Exemplos de valores ""falsy"" são: `false`, `0`, `""""`, `null`, `undefined`, `NaN`. Todos os outros valores são ""truthy""."
O que é a palavra-chave `this` em JavaScript e como ela funciona?,"A palavra-chave `this` refere-se ao contexto de execução da função. Seu valor depende de como a função é chamada. Em funções globais, `this` geralmente se refere ao objeto global (window no navegador, global no Node.js). Em métodos de objetos, `this` se refere ao objeto que chamou o método. O comportamento de `this` pode ser alterado usando `call`, `apply` e `bind`."
O que são higher-order functions em JavaScript?,Higher-order functions são funções que recebem outras funções como argumentos ou retornam funções como resultados. Permitem a abstração e reutilização de código.
"Explique a diferença entre `map`, `filter` e `reduce` em arrays JavaScript.",`map` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. `filter` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. `reduce` aplica uma função contra um acumulador e cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o operador spread (`...`) em JavaScript e para que serve?,"O operador spread (`...`) expande um iterável (como um array ou string) em locais onde múltiplos argumentos (para chamadas de função) ou múltiplos elementos (para literals de array) são esperados. Ele serve para clonar arrays/objetos, combinar arrays/objetos e passar argumentos variáveis para funções."
Explique o que são Promises em JavaScript e como elas são usadas para lidar com operações assíncronas.,"Promises são objetos que representam a eventual conclusão (ou falha) de uma operação assíncrona e seu valor resultante.  Elas têm três estados: pendente, resolvida (fulfilled) ou rejeitada (rejected). Promises usam os métodos `then` (para lidar com a resolução) e `catch` (para lidar com a rejeição) para gerenciar o resultado assíncrono."
O que são async/await em JavaScript e como eles simplificam o tratamento de Promises?,"`async` e `await` são sintaxes que facilitam o trabalho com Promises.  `async` declara uma função assíncrona, permitindo o uso de `await` dentro dela. `await` pausa a execução da função até que a Promise seja resolvida ou rejeitada, retornando o resultado da Promise. Eles tornam o código assíncrono mais legível e semelhante ao código síncrono."
"O que é a diferença entre `var`, `let` e `const` para declarar variáveis em JavaScript?","`var` tem escopo de função ou escopo global, permitindo o hoisting e a redeclaração dentro do mesmo escopo. `let` e `const` têm escopo de bloco, não permitem hoisting (embora sejam ""hoisted"" de maneira diferente), e `const` exige uma inicialização e não permite reatribuição após a inicialização."
Qual a diferença entre `Array.isArray()` e `instanceof Array` em JavaScript?,"`Array.isArray()` é o método preferido para verificar se uma variável é um array, pois funciona corretamente em diferentes contextos de execução (como iframes). `instanceof Array` pode falhar se o array foi criado em um contexto diferente."
Explique o que é o Prototype em JavaScript.,"Em JavaScript, cada objeto possui um Prototype. O Prototype é um outro objeto do qual o objeto herda propriedades e métodos. Isso permite a herança prototípica."
O que são getters e setters em JavaScript e como são usados?,Getters e setters são métodos especiais que permitem controlar o acesso a propriedades de um objeto. Um getter é usado para obter o valor de uma propriedade e um setter é usado para definir o valor de uma propriedade. Eles permitem a validação e o controle sobre o acesso e a modificação de propriedades.
Como você pode clonar um objeto em JavaScript? Quais as diferenças entre shallow copy e deep copy?,"Você pode clonar um objeto usando `Object.assign({}, obj)` (shallow copy) ou o operador spread `{...obj}` (shallow copy).  Shallow copy cria uma nova referência de objeto, mas as propriedades que são objetos ou arrays ainda apontam para os mesmos objetos/arrays originais. Deep copy cria uma nova cópia de todos os objetos e sub-objetos, garantindo que não haja referências compartilhadas. JSON.parse(JSON.stringify(obj)) é uma forma de deep copy, mas tem limitações."
O que é JSON em JavaScript e como ele é usado?,"JSON (JavaScript Object Notation) é um formato de dados leve e fácil de entender, usado para transmitir dados entre um servidor e uma aplicação web. Em JavaScript, `JSON.stringify()` é usado para converter um objeto JavaScript em uma string JSON, e `JSON.parse()` é usado para converter uma string JSON em um objeto JavaScript."
O que é o método `bind()` em JavaScript e como ele é usado?,"`bind()` cria uma nova função que, quando chamada, tem sua palavra-chave `this` definida para o valor fornecido. Ele é usado para fixar o valor de `this` em uma função, independentemente de como ela é chamada."
Explique o conceito de event loop em JavaScript.,"O event loop é um mecanismo que permite que o JavaScript execute operações assíncronas sem bloquear o thread principal. Ele monitora a pilha de chamadas e a fila de tarefas, movendo tarefas da fila para a pilha quando a pilha está vazia."
O que são callbacks em JavaScript e qual o problema associado a eles (callback hell)?,"Callbacks são funções passadas como argumentos para outras funções e executadas após a conclusão da operação principal. Callback hell é o problema de aninhamento excessivo de callbacks, tornando o código difícil de ler e manter."
O que são generators em JavaScript e como eles funcionam?,Generators são funções especiais que podem ser pausadas e retomadas durante a execução. Elas usam a palavra-chave `yield` para pausar e retornar um valor. Generators retornam um objeto iterator que pode ser usado para iterar sobre os valores produzidos pela função.
O que são iterators e iterables em JavaScript?,"Um iterator é um objeto que define uma sequência e, ao terminar, retorna um valor. Um iterable é um objeto que pode retornar um iterator (por exemplo, arrays, strings, maps, sets). Iteráveis implementam o método `Symbol.iterator`."
Como você pode iterar sobre as propriedades de um objeto em JavaScript?,Você pode iterar sobre as propriedades de um objeto usando um loop `for...in` ou `Object.keys(obj)` (retorna um array com as chaves do objeto) combinado com um loop `for...of` ou `forEach`.
O que é a diferença entre `forEach()` e `map()` em JavaScript?,"Ambos iteram sobre um array, mas `forEach()` executa uma função para cada elemento sem retornar nada (retorna `undefined`), enquanto `map()` cria um novo array com os resultados da aplicação da função a cada elemento do array original."
Como você pode verificar se um objeto tem uma determinada propriedade em JavaScript?,"Você pode usar o operador `in`, o método `hasOwnProperty()` ou o operador `?.` (optional chaining) para verificar se um objeto tem uma propriedade. `in` verifica se a propriedade existe no objeto ou em seu protótipo. `hasOwnProperty()` verifica se a propriedade existe diretamente no objeto e não é herdada. Optional chaining permite acessar propriedades aninhadas sem causar um erro se uma propriedade intermediária não existir."
O que é a diferença entre `substring()` e `slice()` em JavaScript?,"Ambos extraem uma parte de uma string, mas `substring()` trata os argumentos como índices iniciais e finais, enquanto `slice()` pode aceitar índices negativos (contando a partir do final da string). Se o segundo argumento de `substring()` for menor que o primeiro, eles serão trocados. `slice()` retorna uma string vazia se o índice de início for maior que o índice de término."
O que são tagged template literals em JavaScript?,"Tagged template literals são uma forma mais avançada de template literals onde você pode usar uma função (a ""tag"") para processar o template literal antes que ele seja avaliado. A função recebe um array de strings literais e um array de valores interpolados."
Como você pode lidar com erros em JavaScript usando `try...catch`?,"`try...catch` é uma estrutura de controle que permite capturar e lidar com exceções que ocorrem durante a execução do código. O código que pode lançar uma exceção é colocado dentro do bloco `try`, e o código que lida com a exceção é colocado dentro do bloco `catch`."
O que é o bloco `finally` em uma estrutura `try...catch...finally`?,"O bloco `finally` é executado sempre, independentemente de uma exceção ter sido lançada ou não no bloco `try`. Ele é usado para realizar tarefas de limpeza, como fechar conexões de banco de dados ou liberar recursos."
O que é o objeto `Error` em JavaScript e quais propriedades ele possui?,"`Error` é um objeto JavaScript que representa um erro. Ele tem propriedades como `name` (o nome do erro), `message` (uma mensagem descritiva do erro) e `stack` (o rastreamento da pilha de chamadas que levou ao erro)."
O que são erros do tipo `TypeError` em JavaScript?,"`TypeError` é um tipo de erro que ocorre quando uma operação é executada em um valor de tipo inesperado. Por exemplo, chamar um método em um valor que não é uma função."
O que são erros do tipo `ReferenceError` em JavaScript?,`ReferenceError` é um tipo de erro que ocorre quando você tenta usar uma variável que não foi declarada ou que está fora do escopo.
"O que é o modo estrito (`""use strict""`) em JavaScript e quais benefícios ele oferece?","`""use strict""` é um pragma que habilita o modo estrito em um script ou função. Ele impõe regras mais rigorosas, como proibir o uso de variáveis não declaradas, tornando o código mais seguro e menos propenso a erros."
O que é o método `Object.defineProperty()` em JavaScript e como ele é usado?,"`Object.defineProperty()` permite definir ou modificar uma propriedade diretamente em um objeto e definir suas características (por exemplo, se ela é enumerável, configurável ou gravável)."
O que é o método `valueOf()` em JavaScript?,`valueOf()` é um método que retorna o valor primitivo de um objeto. Ele é usado internamente pelo JavaScript quando um objeto precisa ser convertido em um valor primitivo.
O que é o método `toString()` em JavaScript?,`toString()` é um método que retorna uma representação de string de um objeto. Ele é usado internamente pelo JavaScript quando um objeto precisa ser convertido em uma string.
O que é o método `encodeURIComponent()` em JavaScript?,"`encodeURIComponent()` codifica um componente URI substituindo cada instância de certos caracteres por uma, duas, três ou quatro sequências de escape representando a codificação UTF-8 do caractere."
O que é o método `decodeURIComponent()` em JavaScript?,`decodeURIComponent()` decodifica um componente URI anteriormente criado por `encodeURIComponent()`.
O que são objetos Blob em JavaScript?,"Um objeto Blob (Binary Large Object) representa dados brutos imutáveis, como imagens, áudio e vídeo. Ele pode ser usado para manipular e transmitir dados binários."
O que são Data URLs em JavaScript?,"Data URLs permitem incorporar dados diretamente em um documento HTML ou CSS usando o esquema `data:`. Por exemplo, você pode incorporar uma imagem diretamente no HTML usando um Data URL."
O que é LocalStorage em JavaScript?,LocalStorage é uma API do navegador que permite armazenar dados persistentes no navegador do usuário. Os dados são armazenados como pares chave-valor e permanecem disponíveis mesmo após o navegador ser fechado e reaberto.
O que é SessionStorage em JavaScript?,"SessionStorage é semelhante ao LocalStorage, mas os dados são armazenados apenas durante a sessão do navegador. Os dados são perdidos quando o navegador é fechado."
O que é a API Geolocation em JavaScript?,"A API Geolocation permite que os sites e aplicativos web acessem a localização geográfica do usuário, com a permissão do usuário."
O que são os métodos `every()` e `some()` em arrays JavaScript?,`every()` verifica se todos os elementos em um array passam em um teste fornecido por uma função. `some()` verifica se pelo menos um elemento em um array passa em um teste fornecido por uma função.
O que são default parameters em JavaScript?,Default parameters permitem definir valores padrão para parâmetros de função caso nenhum valor seja passado ou se `undefined` for passado como argumento.
O que é rest parameter em JavaScript?,"Rest parameter permite representar um número indefinido de argumentos como um array. Ele é usado com a sintaxe `...` (por exemplo, `function foo(...args) {}`)."
O que são arrow functions em JavaScript e quais são as diferenças em relação às funções regulares?,"Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas têm algumas diferenças em relação às funções regulares, como o comportamento de `this` (arrow functions não têm seu próprio `this`, herdam o `this` do escopo circundante) e a ausência do objeto `arguments`."
O que são classes em JavaScript e como elas funcionam?,Classes em JavaScript são uma forma de definir moldes para criar objetos. Elas são uma abstração sobre a herança prototípica e fornecem uma sintaxe mais clara para definir propriedades e métodos.
O que é herança em JavaScript e como ela é implementada usando classes?,"Herança é um mecanismo que permite que uma classe herde propriedades e métodos de outra classe (a classe pai). Em JavaScript, a herança é implementada usando a palavra-chave `extends` para indicar a classe pai."
O que é o método `Symbol()` em JavaScript?,`Symbol()` cria um valor único e imutável que pode ser usado como chave de propriedade de objeto. Símbolos são frequentemente usados para criar propriedades privadas ou para evitar colisões de nomes de propriedades.
O que é o tipo de dado `BigInt` em JavaScript?,"`BigInt` é um tipo de dado que permite representar números inteiros com precisão arbitrária, além dos limites do tipo `Number`."
O que são WeakMap e WeakSet em JavaScript?,"`WeakMap` e `WeakSet` são coleções que armazenam referências ""fracas"" a objetos. Isso significa que se um objeto armazenado em um `WeakMap` ou `WeakSet` não for mais referenciado por nenhum outro objeto, ele poderá ser coletado pelo coletor de lixo."
O que é o método `padStart()` e `padEnd()` em JavaScript?,"`padStart()` e `padEnd()` são métodos de string que preenchem uma string com um caractere especificado até um determinado comprimento. `padStart()` preenche a string no início, enquanto `padEnd()` preenche a string no final."
O que é internationalization (i18n) em JavaScript?,Internationalization (i18n) é o processo de projetar e desenvolver aplicativos para que possam ser adaptados a diferentes idiomas e regiões sem a necessidade de engenharia adicional.
O que é localization (l10n) em JavaScript?,"Localization (l10n) é o processo de adaptar um aplicativo internacionalizado para uma localidade específica, traduzindo texto, formatando datas, números e moedas, e ajustando outros aspectos culturais."
O que é a API Intl em JavaScript?,"A API Intl fornece objetos para formatação sensível ao idioma de datas, horas, números e moedas, bem como para comparação de strings sensível ao idioma."
O que é Unicode em JavaScript?,Unicode é um padrão para codificar caracteres que permite representar praticamente todos os caracteres usados em todas as línguas escritas. JavaScript usa Unicode internamente para representar strings.
Como você pode usar expressões regulares em JavaScript?,Você pode usar expressões regulares em JavaScript usando o objeto `RegExp` ou literais de expressão regular (envolvidos em barras `/`). Expressões regulares são usadas para corresponder padrões em strings.
O que são grupos de captura em expressões regulares em JavaScript?,Grupos de captura são partes de uma expressão regular que são colocadas entre parênteses. Eles permitem extrair partes específicas da string correspondida.
O que são lookahead e lookbehind em expressões regulares em JavaScript?,"Lookahead e lookbehind são asserções que permitem corresponder um padrão com base em outro padrão que o precede ou o segue, sem incluir o padrão de lookahead/lookbehind na correspondência."
O que é a diferença entre `global` e `sticky` flags em expressões regulares em JavaScript?,A flag `global` (`g`) faz com que a expressão regular corresponda todas as ocorrências do padrão na string. A flag `sticky` (`y`) faz com que a expressão regular corresponda apenas a partir da posição atual na string.
Como você pode substituir todas as ocorrências de uma substring em uma string em JavaScript?,Você pode substituir todas as ocorrências de uma substring usando o método `replace()` com uma expressão regular com a flag `global` (`g`).
O que é optional chaining (`?.`) em JavaScript?,O optional chaining (`?.`) permite acessar propriedades aninhadas de um objeto sem causar um erro se uma propriedade intermediária não existir. Ele retorna `undefined` se uma propriedade não existir.
O que é Dynamic Import em JavaScript?,Dynamic Import (usando `import()`) permite carregar módulos JavaScript de forma assíncrona e sob demanda. Ele retorna uma Promise que é resolvida com o módulo importado.
O que são Reflect objects em JavaScript?,O objeto `Reflect` fornece métodos que são correspondentes às operações básicas da linguagem JavaScript. Eles podem ser usados para personalizar o comportamento padrão das operações.
O que é a diferença entre `setTimeout` e `setInterval` em JavaScript?,"`setTimeout` executa uma função uma vez após um atraso especificado. `setInterval` executa uma função repetidamente em intervalos regulares, até que seja interrompido usando `clearInterval`."
Como você pode cancelar um `setTimeout` em JavaScript?,"Você pode cancelar um `setTimeout` usando a função `clearTimeout()`, passando o ID do timeout como argumento."
Como você pode cancelar um `setInterval` em JavaScript?,"Você pode cancelar um `setInterval` usando a função `clearInterval()`, passando o ID do intervalo como argumento."
O que é requestAnimationFrame em JavaScript?,`requestAnimationFrame` é uma função do navegador que agenda uma função para ser executada antes da próxima repintura do navegador. É usado para animações suaves e eficientes.
O que é a API Canvas em JavaScript?,"A API Canvas fornece uma maneira de desenhar gráficos 2D usando JavaScript. Ela permite criar formas, imagens, texto e animações dinâmicas."
O que é SVG (Scalable Vector Graphics) em JavaScript?,SVG é um formato baseado em XML para descrever gráficos vetoriais. Você pode manipular elementos SVG usando JavaScript para criar gráficos interativos e dinâmicos.
O que são WebSockets em JavaScript?,WebSockets fornecem um canal de comunicação bidirecional full-duplex sobre uma única conexão TCP. Eles permitem a comunicação em tempo real entre um cliente e um servidor.
O que é Server-Sent Events (SSE) em JavaScript?,Server-Sent Events (SSE) permitem que um servidor envie atualizações para um cliente por meio de uma única conexão HTTP. É usado para transmitir dados em tempo real de um servidor para um cliente.
O que são IndexedDB em JavaScript?,IndexedDB é um banco de dados NoSQL orientado a objetos embutido no navegador. Ele permite armazenar grandes quantidades de dados estruturados e realizar consultas complexas.
O que é WebAssembly (Wasm) em JavaScript?,"WebAssembly (Wasm) é um formato binário para código executável que pode ser executado em navegadores web. Ele permite executar código de alto desempenho, como jogos e aplicativos gráficos intensivos, diretamente no navegador."
O que é polyfill em JavaScript?,Polyfill é um código que fornece funcionalidade moderna em navegadores mais antigos que não a suportam nativamente. Ele permite usar recursos mais recentes do JavaScript sem se preocupar com a compatibilidade com navegadores antigos.
O que são Linters em JavaScript?,"Linters são ferramentas que analisam o código JavaScript para identificar erros de sintaxe, erros de estilo e possíveis problemas de qualidade. Eles ajudam a manter o código limpo, consistente e livre de erros."
O que são bundlers em JavaScript?,"Bundlers são ferramentas que combinam vários arquivos JavaScript em um único arquivo (ou em alguns arquivos menores). Eles são usados para otimizar o carregamento de aplicativos web, reduzindo o número de requisições HTTP."
O que é minificação em JavaScript?,Minificação é o processo de remover caracteres desnecessários (como espaços em branco e comentários) do código JavaScript para reduzir o tamanho do arquivo. Isso ajuda a acelerar o carregamento de aplicativos web.
O que é ofuscação em JavaScript?,"Ofuscação é o processo de tornar o código JavaScript mais difícil de entender para proteger contra engenharia reversa. Ele envolve a renomeação de variáveis e funções, a remoção de comentários e a alteração da estrutura do código."
O que são testes unitários em JavaScript?,Testes unitários são testes automatizados que verificam se cada unidade individual de código (como uma função ou classe) funciona corretamente. Eles ajudam a garantir a qualidade e a confiabilidade do código.
O que são testes de integração em JavaScript?,Testes de integração verificam se diferentes partes do aplicativo funcionam corretamente juntas. Eles ajudam a garantir que as diferentes unidades de código se integrem bem e que o aplicativo funcione como um todo.
O que são testes end-to-end (E2E) em JavaScript?,Testes end-to-end (E2E) simulam o comportamento do usuário real para testar o aplicativo do início ao fim. Eles verificam se o aplicativo funciona corretamente em um ambiente real e se atende aos requisitos do usuário.
O que é TDD (Test-Driven Development) em JavaScript?,TDD (Test-Driven Development) é uma metodologia de desenvolvimento de software em que os testes são escritos antes do código. Isso ajuda a garantir que o código atenda aos requisitos e que seja fácil de testar.
O que é BDD (Behavior-Driven Development) em JavaScript?,BDD (Behavior-Driven Development) é uma metodologia de desenvolvimento de software que se concentra em definir o comportamento do aplicativo em termos de casos de uso. Os testes são escritos em uma linguagem natural que descreve o comportamento esperado do aplicativo.
O que é CI/CD (Continuous Integration/Continuous Delivery) em JavaScript?,"CI/CD (Continuous Integration/Continuous Delivery) é um conjunto de práticas de desenvolvimento de software que automatizam o processo de integração, teste e entrega de código. Isso permite que as equipes de desenvolvimento entreguem software de forma mais rápida e confiável."
O que são Git hooks em JavaScript?,"Git hooks são scripts que são executados automaticamente pelo Git antes ou depois de certos eventos, como commit, push ou receive. Eles podem ser usados para automatizar tarefas como verificação de estilo de código, execução de testes ou implantação de código."
O que é a diferença entre stateful e stateless components?,"Componentes stateful mantém o seu próprio estado, que pode mudar ao longo do tempo, enquanto componentes stateless apenas exibem dados recebidos como props e não gerenciam o próprio estado."
Qual é a diferença entre component composition e inheritance?,"Component composition envolve a criação de componentes maiores a partir de componentes menores, combinando sua funcionalidade, enquanto inheritance (herança) permite que uma classe herde propriedades e métodos de outra classe. Composition é geralmente preferível em React."
O que são pure functions?,Pure functions são funções que sempre retornam o mesmo resultado para as mesmas entradas e não têm efeitos colaterais.
O que é immutability?,"Immutability é o conceito de que os dados não devem ser modificados depois de criados. Em vez disso, novas cópias dos dados devem ser criadas com as alterações desejadas."
Qual é a diferença entre um controlled component e um uncontrolled component?,"Em um controlled component, os valores dos elementos de formulário são controlados pelo estado do componente React. Em um uncontrolled component, os valores dos elementos de formulário são armazenados diretamente no DOM e podem ser acessados usando refs."
O que é Higher Order Component (HOC)?,Um Higher Order Component (HOC) é uma função que recebe um componente como argumento e retorna um novo componente com funcionalidades adicionais.
O que são render props?,Render props são uma técnica para compartilhar código entre componentes React usando uma propriedade cujo valor é uma função.
O que é a Context API?,"A Context API permite que os componentes React acessem dados que são compartilhados por muitos componentes, sem precisar passar props manualmente em todos os níveis da árvore de componentes."
O que são Refs em JavaScript?,Refs permitem acessar diretamente um elemento DOM ou uma instância de um componente React em seu código.
O que são Events em JavaScript?,"Events são ações ou ocorrências que acontecem no sistema que você está programando, que o sistema informa para que você possa responder a eles de alguma forma, se desejar."
O que são Event Listeners em JavaScript?,Event Listeners esperam por um evento e respondem a ele.
O que é Event Bubbling e Event Capturing em JavaScript?,"Event Bubbling ocorre quando um evento é disparado em um elemento DOM aninhado, e o evento se propaga para cima na árvore DOM, disparando os manipuladores de eventos nos elementos pais. Event Capturing é o oposto de Event Bubbling."
O que é Event Delegation em JavaScript?,"Event Delegation é uma técnica em que, em vez de anexar ouvintes de evento a cada elemento individual, você anexa um único ouvinte de evento a um elemento pai."
O que é o padrão revealing module?,É um padrão de design em JavaScript que permite a criação de módulos com propriedades e métodos privados e públicos.
O que é Shadow DOM?,O Shadow DOM permite encapsular o código de um componente para que ele seja independente de outros componentes na página.
O que é Custom Elements?,Custom Elements permitem que você crie novos elementos HTML personalizados.
O que é o padrão de design singleton?,O padrão de design singleton é um padrão de design que garante que apenas uma instância de uma classe seja criada.
O que é hoisting em JavaScript e como funciona?,Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do seu escopo antes da execução do código. A declaração da variável (mas não sua inicialização) é movida para o topo.
Explique a diferença entre `==` e `===` em JavaScript.,"`==` (igualdade abstrata) compara dois valores após realizar a conversão de tipo, se necessário. `===` (igualdade estrita) compara dois valores sem conversão de tipo, retornando verdadeiro apenas se os valores e os tipos forem iguais."
Como você pode evitar a mutação direta de um objeto em JavaScript?,"Usando métodos como `Object.assign({}, obj)` para criar uma cópia superficial ou o operador spread `...obj` para criar um novo objeto com as mesmas propriedades. Para cópias profundas, considere `JSON.parse(JSON.stringify(obj))` ou bibliotecas especializadas."
O que é o conceito de closure em JavaScript?,"Um closure é a combinação de uma função e o ambiente léxico (escopo) em que essa função foi declarada. Isso permite que uma função acesse variáveis do escopo externo, mesmo depois que a função externa já tiver terminado de executar."
"Descreva o que é ""event bubbling"" e ""event capturing"" no DOM.","*Event Bubbling:* Quando um evento é disparado em um elemento, ele sobe pela árvore do DOM, disparando os mesmos eventos em seus elementos pais. *Event Capturing:* O evento desce pela árvore do DOM até chegar no elemento alvo.  É o oposto do bubbling."
Como você pode interromper a propagação de um evento em JavaScript?,Usando o método `event.stopPropagation()` dentro do manipulador de eventos. Isso impede que o evento se propague para elementos pais.
O que é o `this` em JavaScript e como seu valor é determinado?,"`this` refere-se ao objeto em contexto na execução atual. Seu valor é determinado pela forma como a função é chamada: implicitamente (como um método de um objeto), explicitamente (com `call`, `apply` ou `bind`) ou globalmente (no escopo global)."
"Explique a diferença entre `call`, `apply` e `bind` em JavaScript.","*`call` e `apply`:* Permitem invocar uma função com um determinado valor de `this` e argumentos. `call` recebe argumentos separados por vírgulas, enquanto `apply` recebe um array de argumentos. *`bind`:* Cria uma nova função que, quando chamada, terá o valor de `this` definido para o valor passado para `bind`."
"O que são Promises em JavaScript e como elas resolvem o ""callback hell""?","Promises são objetos que representam o resultado eventual (bem-sucedido ou com falha) de uma operação assíncrona.  Elas resolvem o ""callback hell"" permitindo encadear operações assíncronas de forma mais legível e organizada usando `.then()` e `.catch()`."
Como você lida com erros em Promises?,Usando o método `.catch()` no final da cadeia de Promises. Ele captura qualquer erro que ocorra em qualquer Promise na cadeia.
O que são async/await em JavaScript e como eles se relacionam com Promises?,`async/await` são açúcar sintático sobre Promises que tornam o código assíncrono mais fácil de ler e escrever. A palavra-chave `async` declara uma função assíncrona e `await` pausa a execução da função até que uma Promise seja resolvida.
O que é o operador `...` (spread operator) em JavaScript e como ele pode ser usado?,"O operador spread expande um iterável (como um array ou string) em elementos individuais. Ele pode ser usado para copiar arrays, combinar arrays, passar argumentos para funções e criar cópias superficiais de objetos."
O que é destructuring em JavaScript e como ele pode ser usado?,Destructuring é uma forma de extrair valores de objetos ou arrays e atribuí-los a variáveis de forma concisa.
"Qual a diferença entre `let`, `const` e `var` para declaração de variáveis?",*`var`:* Tem escopo de função ou global. Sofre hoisting. *`let`:* Tem escopo de bloco. Não sofre hoisting (temporal dead zone). *`const`:* Tem escopo de bloco. Não sofre hoisting. Deve ser inicializada na declaração e não pode ser reatribuída.
O que são arrow functions em JavaScript e qual a principal diferença em relação às funções tradicionais?,Arrow functions são uma sintaxe mais curta para escrever funções. A principal diferença é que arrow functions não têm seu próprio `this`. Eles herdam o `this` do escopo circundante.
Explique o conceito de Currying em JavaScript.,"Currying é uma técnica onde uma função que recebe múltiplos argumentos é transformada em uma sequência de funções que recebem um único argumento cada, retornando a próxima função na sequência até que todos os argumentos tenham sido fornecidos."
O que são Generators em JavaScript e como eles funcionam?,Generators são funções que podem ser pausadas e retomadas durante a execução. Elas usam a palavra-chave `yield` para pausar e retornar um valor.
O que são Iterators em JavaScript e como eles funcionam?,Iterators são objetos que definem uma sequência e um método para acessar cada item na sequência um por vez. Eles possuem um método `next()` que retorna um objeto com as propriedades `value` (o próximo valor na sequência) e `done` (um booleano indicando se a sequência terminou).
O que é o padrão Module em JavaScript e como ele pode ser implementado?,O padrão Module é uma forma de encapsular código para evitar conflitos de nomes e promover a reutilização. Pode ser implementado usando IIFE (Immediately Invoked Function Expression) ou com a sintaxe `import` e `export`.
Explique o que é o Shadow DOM.,"Shadow DOM permite encapsular uma árvore DOM dentro de um componente web, isolando-o do resto do documento. Isso evita conflitos de estilo e script."
O que são Web Components?,"Web Components são um conjunto de tecnologias que permitem criar elementos HTML personalizados e reutilizáveis. Eles incluem Custom Elements, Shadow DOM e HTML Templates."
O que são Custom Elements em Web Components?,Custom Elements permitem definir seus próprios elementos HTML personalizados com comportamentos específicos. Eles são criados estendendo a classe `HTMLElement`.
Como você define atributos personalizados em Web Components?,Definindo uma propriedade `observedAttributes` estática na classe do Custom Element e implementando o método `attributeChangedCallback`.
O que é um Proxy em JavaScript e como ele pode ser usado?,"Um Proxy é um objeto que permite interceptar e customizar operações fundamentais em um objeto alvo (como leitura, escrita, deleção de propriedades). Ele pode ser usado para validação, logging, virtualização e muito mais."
O que é Reflection em JavaScript e como ela se relaciona com Proxies?,"Reflection é uma API que fornece métodos para realizar operações fundamentais em objetos, como `Reflect.get`, `Reflect.set`, `Reflect.apply`, etc. Proxies usam Reflection para delegar as operações interceptadas ao objeto alvo."
O que são WeakMap e WeakSet em JavaScript e qual a diferença para Map e Set?,"WeakMap e WeakSet são versões de Map e Set que armazenam referências ""fracas"" aos seus elementos/chaves. Isso significa que, se não houver outras referências aos objetos armazenados em um WeakMap ou WeakSet, eles podem ser coletados pelo garbage collector, mesmo que ainda estejam presentes no WeakMap/WeakSet."
Como você pode clonar um array em JavaScript?,"Usando o operador spread: `[...array]`, o método `slice()`: `array.slice()` ou `Array.from(array)`."
Como você pode remover duplicatas de um array em JavaScript?,Usando `[...new Set(array)]` ou usando `filter` com `indexOf`.
O que é o método `reduce()` em arrays JavaScript?,O método `reduce()` aplica uma função (reducer) a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
O que são Expressões Regulares (Regular Expressions) em JavaScript?,"Expressões regulares são padrões usados para combinar combinações de caracteres em strings. Elas são usadas para pesquisa, substituição e validação de texto."
Quais são alguns dos métodos de string comuns que usam expressões regulares?,"`match()`, `replace()`, `search()`, `split()`."
O que é o método `localStorage` em JavaScript?,`localStorage` é uma API do navegador que permite armazenar dados no navegador do usuário de forma persistente (mesmo após o navegador ser fechado e reaberto).
O que é o método `sessionStorage` em JavaScript?,"`sessionStorage` é similar a `localStorage`, mas os dados são armazenados apenas durante a sessão do navegador (são apagados quando o navegador é fechado)."
"O que é o conceito de ""Event Delegation"" em JavaScript?",Event Delegation é uma técnica onde um manipulador de eventos é anexado a um elemento pai em vez de a cada elemento filho individual. Isso é útil quando os elementos filhos são adicionados dinamicamente.
Como você pode cancelar um `setTimeout()` ou `setInterval()`?,Usando `clearTimeout()` para cancelar um `setTimeout()` e `clearInterval()` para cancelar um `setInterval()`.
Como você seleciona um elemento HTML no DOM usando JavaScript?,"Usando métodos como `document.getElementById()`, `document.querySelector()`, `document.querySelectorAll()`."
Como você altera o texto de um elemento HTML usando JavaScript?,Usando a propriedade `textContent` ou `innerText`.
Como você altera o atributo de um elemento HTML usando JavaScript?,"Usando o método `setAttribute()` ou acessando diretamente a propriedade do elemento (por exemplo, `element.src = ""image.jpg""`)."
Como você adiciona um evento a um elemento HTML usando JavaScript?,Usando o método `addEventListener()`.
O que é o objeto `event` que é passado para um manipulador de eventos?,"O objeto `event` contém informações sobre o evento que foi disparado, como o tipo de evento, o elemento alvo e as coordenadas do mouse."
O que é um callback function em JavaScript?,Uma callback function é uma função que é passada como um argumento para outra função e é executada após a conclusão de alguma operação.
O que é a técnica de Debouncing em JavaScript?,Debouncing garante que uma função seja executada apenas após um certo período de inatividade. Útil para evitar chamadas excessivas em eventos como `keyup`.
O que é Throttling em JavaScript?,"Throttling garante que uma função seja executada no máximo uma vez dentro de um determinado período. Diferente de Debouncing, Throttling garante a execução em intervalos regulares."
O que é a função `eval()` em JavaScript e por que ela geralmente é evitada?,`eval()` avalia uma string como código JavaScript. Ela é geralmente evitada porque pode ser insegura (pode executar código malicioso) e pode ser mais lenta do que outras abordagens.
O que são strict mode em JavaScript e como habilitá-lo?,"Strict mode é uma forma de executar JavaScript com um conjunto mais restritivo de regras, tornando o código mais seguro e detectando erros potenciais. É habilitado adicionando a string `""use strict"";` no início de um script ou função."
Explique o conceito de prototypes em JavaScript.,"Em JavaScript, os objetos herdam propriedades de um ""protótipo"". Todo objeto tem um protótipo, que é outro objeto. Quando você tenta acessar uma propriedade em um objeto que não existe diretamente nesse objeto, o JavaScript procura no protótipo do objeto, e assim por diante, até chegar ao protótipo `null`."
Como você cria herança em JavaScript usando prototypes?,Definindo o protótipo de um objeto para uma instância de outro objeto ou usando `Object.create()`.
O que é a palavra-chave `class` em JavaScript?,A palavra-chave `class` introduz uma sintaxe mais clara para criar objetos e lidar com herança em JavaScript. É açúcar sintático sobre o sistema de protótipos.
Como você cria herança entre classes em JavaScript?,Usando a palavra-chave `extends`.
Como você define métodos estáticos em classes JavaScript?,Usando a palavra-chave `static` antes da definição do método.
O que é Polimorfismo em JavaScript?,"Polimorfismo é a capacidade de um objeto assumir muitas formas. Em JavaScript, isso é geralmente implementado através de herança ou interfaces (embora JavaScript não tenha interfaces explícitas)."
O que são Generics em TypeScript e como eles podem ser simulados em JavaScript?,"Generics permitem escrever código que pode trabalhar com diferentes tipos sem precisar especificar o tipo exato antecipadamente. Em JavaScript puro, você não tem generics nativos, mas pode usar convenções de nomenclatura ou padrões de design para simular um comportamento similar."
O que são decorators em JavaScript (ainda que não totalmente implementados nativamente)?,"Decorators são uma proposta de sintaxe para modificar ou anotar classes, métodos, propriedades ou parâmetros. Eles são uma forma de adicionar metadados ou alterar o comportamento de uma classe/método/propriedade de forma declarativa. Eles ainda não são nativos em JavaScript, mas estão em estágio de proposta e podem ser transpiled com ferramentas como o Babel."
O que é Type Coercion em JavaScript?,Type Coercion é a conversão automática de um valor de um tipo de dado para outro (como de string para número) pelo JavaScript durante as operações. Isso pode levar a resultados inesperados se não for compreendido.
O que são os tipos primitivos em JavaScript?,"Os tipos primitivos em JavaScript são: `string`, `number`, `boolean`, `null`, `undefined`, `symbol` e `bigint`."
O que é um Symbol em JavaScript?,Um Symbol é um tipo de dado primitivo que representa um identificador único e imutável. Symbols são frequentemente usados como chaves de propriedade de objeto para evitar conflitos de nomes.
O que é um BigInt em JavaScript?,"BigInt é um tipo de dado primitivo que permite representar inteiros de precisão arbitrária, ou seja, inteiros que são maiores que o limite de `Number.MAX_SAFE_INTEGER`."
O que é Garbage Collection em JavaScript e como funciona?,"Garbage Collection é o processo automático de gerenciamento de memória em JavaScript, onde o motor JavaScript automaticamente libera a memória que não está mais sendo usada pelo programa."
O que é a stack (pilha) e o heap em JavaScript?,A stack é usada para armazenar valores primitivos e referências para objetos. O heap é usado para armazenar objetos (incluindo arrays e funções).
"O que é o ""event loop"" em JavaScript e como ele funciona?","O event loop é um mecanismo que permite que o JavaScript execute operações assíncronas sem bloquear a thread principal. Ele monitora a pilha de chamadas (stack) e a fila de tarefas (task queue), movendo tarefas da fila para a pilha quando a pilha está vazia."
O que é o método `requestAnimationFrame()` em JavaScript?,`requestAnimationFrame()` agenda uma função para ser executada antes da próxima repintura do navegador. É usado para criar animações suaves e eficientes.
Como você pode cancelar uma requisição Fetch em JavaScript?,"Usando um `AbortController` e um sinal associado à requisição Fetch. Quando você chama `abort()` no `AbortController`, a requisição Fetch é cancelada."
O que é a diferença entre o uso de `map` vs `forEach` em arrays?,"`map` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array que o chamou. `forEach` executa uma dada função uma vez para cada elemento do array, sem retornar um novo array."
Explique o que é o método `Object.entries()` em JavaScript.,"O método `Object.entries()` retorna um array de arrays, onde cada array interno contém o par [chave, valor] de cada propriedade enumerável do objeto."
Como você pode converter um NodeList para um Array em JavaScript?,Usando `Array.from(nodeList)` ou `[...nodeList]` (spread operator).
Qual a diferença entre `querySelector` e `querySelectorAll`?,"`querySelector` retorna o primeiro elemento dentro do documento que corresponde ao seletor especificado, ou `null` se nenhum elemento for encontrado. `querySelectorAll` retorna um NodeList estático contendo todos os elementos que correspondem ao seletor."
"O que são ""named exports"" e ""default exports"" em JavaScript (ES Modules)?","*Named Exports:* Permitem exportar múltiplos valores (variáveis, funções, classes) de um módulo, cada um com seu próprio nome. *Default Exports:* Permitem exportar um único valor de um módulo como o export padrão."
Como você pode criar uma cópia profunda (deep copy) de um objeto em JavaScript?,"Uma forma é usando `JSON.parse(JSON.stringify(object))`. No entanto, isso não funciona para funções ou objetos com referências circulares. Bibliotecas como Lodash também oferecem funções de deep copy."
Explique o que são Template Literals tagged.,"São template literals prefixados por uma função. A função recebe um array com as strings literais e um array com os valores das expressões interpoladas, permitindo manipular a string de forma personalizada."
"O que é a ""Same-Origin Policy"" em JavaScript e por que ela é importante?",É uma restrição de segurança imposta pelos navegadores que impede que um script originário de um domínio acesse recursos de outro domínio. Isso é importante para proteger contra ataques como Cross-Site Scripting (XSS).
Como você pode contornar a Same-Origin Policy em JavaScript (CORS)?,"Usando Cross-Origin Resource Sharing (CORS), que permite que o servidor especifique quais domínios estão autorizados a acessar seus recursos."
O que é o `use strict` mode em JavaScript?,"`use strict` ativa um modo restrito em JavaScript, que impõe regras mais rígidas para o código."
Qual a diferença entre `Function.prototype.bind` e arrow functions em relação ao `this`?,"`Function.prototype.bind` cria uma nova função onde `this` é permanentemente definido para o valor fornecido. Arrow functions não têm seu próprio `this`, elas herdam o `this` do escopo léxico circundante."
Explique o conceito de Closures em JavaScript.,"Um closure é a combinação de uma função e o ambiente léxico (escopo) em que essa função foi declarada. Isso permite que a função acesse variáveis do escopo externo, mesmo depois que a função externa já tiver terminado de executar."
Como você pode detectar o tipo de dado de uma variável em JavaScript?,"Usando o operador `typeof`. No entanto, `typeof null` retorna ""object"" (uma peculiaridade do JavaScript), e para verificar se uma variável é um array, é melhor usar `Array.isArray()`."
"O que é o conceito de ""Prototype Chain"" em JavaScript?","É o mecanismo pelo qual os objetos herdam propriedades de seus protótipos, que por sua vez também têm protótipos, formando uma cadeia até o protótipo `null`."
O que é o atributo `contentEditable` em HTML e como ele pode ser usado com JavaScript?,O atributo `contentEditable` permite que um elemento HTML seja editável diretamente no navegador. JavaScript pode ser usado para manipular o conteúdo e o comportamento de elementos com `contentEditable`.
O que é o padrão Publish-Subscribe (PubSub) em JavaScript?,Um padrão de design onde os objetos (publishers) emitem eventos (publicações) que são recebidos por outros objetos (subscribers) que se inscreveram para receber esses eventos.
O que é a diferença entre eventos síncronos e assíncronos em JavaScript?,"Eventos síncronos são processados imediatamente na ordem em que ocorrem. Eventos assíncronos são adicionados a uma fila e processados posteriormente, permitindo que o código continue a ser executado sem esperar que o evento seja concluído."
O que são cookies em JavaScript e como eles podem ser usados?,"Cookies são pequenos arquivos de texto que os sites podem armazenar no navegador do usuário. Eles são usados para armazenar informações sobre o usuário, como preferências, informações de login e rastreamento de atividade. JavaScript pode ser usado para ler e escrever cookies."
Como você pode impedir que o envio padrão de um formulário HTML ocorra em JavaScript?,Chamando `event.preventDefault()` no manipulador de eventos do envio do formulário.
O que é a diferença entre `attribute` e `property` no contexto do DOM?,*Attribute:* Definido no HTML. Inicializa as propriedades do DOM. *Property:* Definida no objeto DOM. Pode mudar dinamicamente via JavaScript.
O que são módulos ES (ES Modules) em JavaScript?,"São a forma nativa de modularizar código em JavaScript, usando as palavras-chave `import` e `export`."
Qual a utilidade do operador `void` em JavaScript?,"`void` avalia uma expressão e retorna `undefined`. É usado principalmente para evitar que uma expressão retorne um valor indesejado, especialmente em funções executadas em manipuladores de eventos."
"O que é ""tree shaking"" e como ele se relaciona com JavaScript?","Tree shaking é um processo de otimização que remove código não utilizado de um pacote JavaScript. Isso é possível com módulos ES, onde os import e exports são analisados para determinar quais partes do código são realmente usadas."
O que são Web Workers e qual a sua utilidade?,"Web Workers permitem executar scripts JavaScript em threads de segundo plano, sem bloquear a thread principal da interface do usuário. São úteis para realizar tarefas pesadas computacionalmente, como processamento de imagem ou cálculos complexos."
O que é o Service Worker e qual o seu propósito?,"Service Workers são scripts que rodam em background e atuam como proxies entre o navegador e a rede. Eles permitem implementar funcionalidades como notificações push, cache offline e background sync."
Explique o conceito de Code Splitting em JavaScript.,"É uma técnica para dividir o código JavaScript em partes menores (chunks) que podem ser carregadas sob demanda, melhorando o desempenho inicial do site."
O que são as Data Attributes (data-*) em HTML e como acessá-las em JavaScript?,São atributos personalizados que podem ser adicionados a elementos HTML para armazenar dados adicionais. Eles são acessados em JavaScript usando a propriedade `dataset` do elemento.
O que é o atributo `nonce` em tags `<script>` e `<style>` e para que serve?,"O atributo `nonce` (Number Used Once) é um valor criptográfico usado para permitir que um script ou estilo seja executado apenas se corresponder ao valor configurado no servidor, prevenindo ataques XSS."
O que são Intersection Observers e como eles podem ser usados?,"Intersection Observers permitem observar quando um elemento HTML entra ou sai da viewport ou cruza com outro elemento. São úteis para implementar lazy loading, animações baseadas em scroll e rastreamento de visibilidade."
O que é a API WebSockets e para que serve?,"WebSockets fornecem um canal de comunicação full-duplex entre o navegador e o servidor, permitindo a troca de dados em tempo real."
O que é o objeto `Intl` em JavaScript e para que ele serve?,"`Intl` é um objeto nativo do JavaScript que fornece APIs para internacionalização, como formatação de datas, números e moedas de acordo com diferentes localidades."
O que é a API WebAssembly (Wasm) e como ela se relaciona com JavaScript?,"WebAssembly é um formato binário de código de baixo nível para execução em navegadores. Ele permite executar código em alta performance, e pode ser usado em conjunto com JavaScript para otimizar partes críticas de uma aplicação web."
O que é a API Streams em JavaScript?,"A API Streams fornece uma maneira de processar dados de forma assíncrona e eficiente, dividindo-os em pedaços (chunks). Ela é útil para lidar com grandes quantidades de dados, como arquivos ou streams de vídeo."
O que são OffscreenCanvas e qual o seu uso?,"OffscreenCanvas permite renderizar elementos Canvas fora da thread principal, evitando bloqueios na interface do usuário e melhorando o desempenho."
Explique o conceito de Atomics em JavaScript.,Atomics são operações que garantem que a leitura ou escrita de um valor na memória seja atômica (indivisível) e sincronizada entre diferentes threads (como Web Workers). Eles são usados para construir aplicações multithreaded seguras.
O que são WeakRefs e FinalizationRegistry em JavaScript?,"*WeakRefs:* Permitem manter uma referência fraca a um objeto, o que significa que o objeto pode ser coletado pelo garbage collector mesmo que a referência fraca ainda exista. *FinalizationRegistry:* Permite registrar uma função para ser executada quando um objeto referenciado por um WeakRef for coletado pelo garbage collector. São usados para lidar com recursos de forma mais precisa e evitar vazamentos de memória.

Espero que esta lista seja útil! Tentei evitar a repetição e focar em aspectos distintos de JavaScript."
"O que é ""hoisting"" em JavaScript e como ele afeta variáveis e funções?","Hoisting é o comportamento do JavaScript de mover declarações de variáveis (usando `var`) e funções para o topo de seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto funções declaradas com a palavra-chave `function` são hoisted completamente."
Qual é o propósito da palavra-chave `this` em JavaScript?,"`this` se refere ao contexto de execução atual. Seu valor depende de como a função é chamada. Em métodos de objeto, `this` se refere ao objeto; em funções soltas (não métodos), `this` no modo não-strict se refere ao objeto global (window em navegadores), e no modo strict, `this` é `undefined`."
Descreva o que são arrow functions e quais são as suas principais diferenças em relação às funções tradicionais?,Arrow functions (funções de seta) são uma sintaxe mais curta para escrever funções. Elas diferem das funções tradicionais no contexto do `this` (arrow functions herdam o `this` do escopo circundante) e não possuem o objeto `arguments`. Também não podem ser usadas como construtoras (não podem ser usadas com `new`).
O que é o operador `typeof` em JavaScript e quais são os valores que ele pode retornar?,"`typeof` é um operador que retorna uma string indicando o tipo de dado de um operando. Os valores possíveis incluem ""undefined"", ""boolean"", ""number"", ""string"", ""symbol"", ""function"" e ""object"".  Note que `typeof null` retorna ""object"", o que é considerado um bug histórico."
Explique o que são template literals em JavaScript.,Template literals são strings delimitadas por acentos graves (`` ` ``) que permitem a interpolação de expressões. Eles podem conter placeholders que são substituídos por seus valores.  Usando `${expressao}` dentro da string.
O que é o método `preventDefault()` e quando ele é usado?,"`preventDefault()` é um método usado em objetos de evento para impedir o comportamento padrão associado ao evento. Por exemplo, em um evento de envio de formulário, ele pode impedir o envio do formulário."
O que são eventos em JavaScript e como você adiciona um ouvinte de eventos a um elemento?,"Eventos são ações ou ocorrências que acontecem no navegador (por exemplo, clique, mouseover, envio de formulário). Um ouvinte de eventos é uma função que é executada quando um evento específico ocorre em um elemento. Você pode adicionar um ouvinte de eventos usando `addEventListener()` ou atribuindo uma função a uma propriedade `on<event>` do elemento."
Explique o que são Promises em JavaScript.,"Promises representam o resultado eventual de uma operação assíncrona. Elas podem estar em um dos três estados: pendente (pending), resolvida (fulfilled) ou rejeitada (rejected). Elas ajudam a lidar com operações assíncronas de forma mais organizada do que callbacks tradicionais."
"O que são os métodos `then()`, `catch()` e `finally()` em Promises?","* `then()` é usado para lidar com o resultado de uma Promise resolvida.
    * `catch()` é usado para lidar com o resultado de uma Promise rejeitada.
    * `finally()` é executado independentemente de a Promise ser resolvida ou rejeitada."
Explique o que é `async/await` em JavaScript.,`async/await` é uma sintaxe para trabalhar com Promises de forma mais síncrona e legível. Uma função `async` retorna implicitamente uma Promise. `await` dentro de uma função `async` pausa a execução da função até que a Promise seja resolvida.
O que é JSON e como você converte um objeto JavaScript em JSON e vice-versa?,JSON (JavaScript Object Notation) é um formato de dados leve para troca de dados. Você pode converter um objeto JavaScript em JSON usando `JSON.stringify()` e converter JSON em um objeto JavaScript usando `JSON.parse()`.
"Qual a diferença entre `var`, `let` e `const` ao declarar variáveis?","* `var` tem escopo de função ou global.
    * `let` tem escopo de bloco.
    * `const` também tem escopo de bloco e deve ser inicializada na declaração. Variáveis `const` não podem ser reatribuídas, mas se forem objetos ou arrays, seu conteúdo pode ser modificado."
Explique o que é o DOM (Document Object Model).,"O DOM é uma representação estruturada em árvore de um documento HTML ou XML. Ele permite que o JavaScript acesse e manipule o conteúdo, a estrutura e o estilo do documento."
Como você adiciona ou remove classes CSS de um elemento HTML usando JavaScript?,"Você pode adicionar ou remover classes CSS de um elemento HTML usando a propriedade `classList` e seus métodos `add()`, `remove()` e `toggle()`."
O que é um módulo em JavaScript?,Um módulo é um arquivo JavaScript que encapsula um bloco de código para que ele possa ser reutilizado e importado em outros arquivos.
Como você importa e exporta módulos em JavaScript?,Você pode exportar módulos usando `export` (named exports ou default exports) e importá-los usando `import`.
Qual a diferença entre `setTimeout()` e `setInterval()`?,"`setTimeout()` executa uma função uma vez após um atraso, enquanto `setInterval()` executa uma função repetidamente em intervalos regulares."
Como você interrompe um `setTimeout()` ou `setInterval()`?,Você pode interromper um `setTimeout()` usando `clearTimeout()` e um `setInterval()` usando `clearInterval()`.
Qual a diferença entre `parseInt()` e `parseFloat()`?,"`parseInt()` retorna um número inteiro, enquanto `parseFloat()` retorna um número de ponto flutuante."
O que é o método `Number.isNaN()` em JavaScript?,`Number.isNaN()` verifica se um valor é `NaN` sem tentar convertê-lo em um número primeiro. É a forma recomendada de verificar se um valor é `NaN`.
Qual a diferença entre `isNaN()` e `Number.isNaN()`?,"`isNaN()` tenta converter o valor em um número antes de verificar se é `NaN`, enquanto `Number.isNaN()` verifica diretamente se o valor é `NaN` sem conversão."
O que é o método `encodeURI()` em JavaScript?,"`encodeURI()` codifica um URI substituindo cada instância de determinados caracteres por sequências de escape. Ele não codifica caracteres que têm um significado especial em URIs, como `/`, `?`, `:` e `#`."
O que é o método `decodeURI()` em JavaScript?,`decodeURI()` decodifica um URI que foi previamente codificado por `encodeURI()`.
Qual a diferença entre `encodeURIComponent()` e `encodeURI()`?,"`encodeURIComponent()` codifica mais caracteres do que `encodeURI()`. Ele é usado para codificar componentes individuais de um URI, enquanto `encodeURI()` é usado para codificar um URI completo."
O que é o método `eval()` em JavaScript e por que geralmente é desencorajado?,`eval()` avalia uma string como código JavaScript. É geralmente desencorajado porque pode ser perigoso para a segurança (permitindo a execução de código malicioso) e pode ser lento (porque o interpretador JavaScript precisa compilar o código em tempo de execução).
Explique o conceito de escopo em JavaScript.,"Escopo define a acessibilidade (visibilidade) das variáveis. Em JavaScript, existem escopo global, escopo de função e escopo de bloco (introduzido com `let` e `const`)."
"O que é o ""use strict"" em JavaScript?","""use strict"" é um pragma (diretiva) que habilita o modo estrito no JavaScript. O modo estrito impõe regras mais rígidas e ajuda a prevenir erros comuns."
O que são os métodos `test()` e `exec()` em expressões regulares?,"* `test()` retorna `true` se a expressão regular encontrar uma correspondência na string, e `false` caso contrário.
    * `exec()` retorna um array com informações sobre a correspondência ou `null` se não houver correspondência."
"O que são os métodos `match()`, `replace()` e `search()` em strings?","* `match()` retorna um array contendo as correspondências de uma string com uma expressão regular.
    * `replace()` retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por uma substituição.
    * `search()` retorna o índice da primeira correspondência de um padrão em uma string."
O que é o padrão de módulo revelador (revealing module pattern) em JavaScript?,"É um padrão de design que permite encapsular variáveis e funções privadas dentro de um módulo, expondo apenas um conjunto de funções públicas através de um objeto retornado."
O que é o método `getTime()` do objeto `Date`?,`getTime()` retorna o número de milissegundos decorridos desde 1º de janeiro de 1970 00:00:00 UTC para uma determinada data.
Como você compara duas datas em JavaScript?,"Você pode comparar duas datas usando seus valores numéricos obtidos com `getTime()` ou usando os operadores de comparação (`>`, `<`, `>=`, `<=`) diretamente nos objetos `Date`."
"O que são os métodos `Math.random()`, `Math.floor()`, `Math.ceil()` e `Math.round()`?","* `Math.random()` retorna um número pseudoaleatório entre 0 (inclusive) e 1 (exclusivo).
    * `Math.floor()` retorna o maior inteiro menor ou igual a um determinado número.
    * `Math.ceil()` retorna o menor inteiro maior ou igual a um determinado número.
    * `Math.round()` retorna o valor de um número arredondado para o inteiro mais próximo."
Como você gera um número inteiro aleatório entre um intervalo específico em JavaScript?,"Você pode usar a seguinte fórmula: `Math.floor(Math.random() * (max - min + 1)) + min`, onde `min` é o valor mínimo e `max` é o valor máximo."
O que é o prototype em JavaScript?,"Cada objeto em JavaScript tem um prototype, que é outro objeto do qual ele herda propriedades e métodos."
Como você acessa o prototype de um objeto em JavaScript?,Você pode acessar o prototype de um objeto usando `Object.getPrototypeOf(obj)` ou usando a propriedade `__proto__` (embora esta última seja desencorajada em código de produção).
O que é herança prototipal em JavaScript?,Herança prototipal é um mecanismo em JavaScript onde objetos herdam propriedades e métodos de seus prototypes. Uma cadeia de prototypes é percorrida até que a propriedade ou método seja encontrado.
Como você cria um objeto com um prototype específico em JavaScript?,Você pode criar um objeto com um prototype específico usando `Object.create(prototype)`.
O que é o tipo de dado Symbol em JavaScript?,`Symbol` é um tipo de dado primitivo introduzido no ES6 que representa um identificador único e imutável.
Como você cria um Symbol em JavaScript?,Você cria um Symbol chamando a função `Symbol()` (opcionalmente com uma descrição).
Qual é o propósito dos Symbols em JavaScript?,"Symbols são usados para criar propriedades únicas em objetos que não colidem com outras propriedades. Eles também são usados para definir comportamentos internos de objetos (por exemplo, iteradores)."
Como você define um generator em JavaScript?,Você define um generator usando a palavra-chave `function*`.
O que é o método `yield` em generators?,`yield` é usado para pausar a execução de um generator e retornar um valor. A execução do generator pode ser retomada posteriormente com o método `next()`.
Qual a diferença entre o loop `for...of` e o loop `for...in`?,"O loop `for...of` itera sobre os valores de um objeto iterável, enquanto o loop `for...in` itera sobre as chaves de um objeto."
O que são Maps em JavaScript?,Maps são coleções de pares chave-valor onde as chaves podem ser de qualquer tipo de dado (incluindo objetos). Maps lembram a ordem de inserção das chaves.
O que são Sets em JavaScript?,Sets são coleções de valores únicos. Sets lembram a ordem de inserção dos valores.
Como você adiciona um elemento a um Set em JavaScript?,Você adiciona um elemento a um Set usando o método `add()`.
Como você verifica se um elemento está presente em um Set em JavaScript?,Você verifica se um elemento está presente em um Set usando o método `has()`.
Como você remove um elemento de um Set em JavaScript?,Você remove um elemento de um Set usando o método `delete()`.
O que é garbage collection em JavaScript?,Garbage collection é um processo automático que libera memória que não está mais sendo usada por um programa. O JavaScript usa um garbage collector para gerenciar a alocação e liberação de memória.
O que é hoisting de funções (function hoisting) em JavaScript?,Hoisting de funções significa que a declaração de uma função (declarada usando a palavra-chave `function`) é movida para o topo de seu escopo antes da execução do código. Isso permite que você chame a função antes de sua declaração no código.
O que é o spread operator em objetos JavaScript?,"O spread operator permite que você crie cópias rasas (shallow copies) de objetos ou combine múltiplos objetos em um novo objeto. Por exemplo: `const newObj = {...obj1, ...obj2};`"
O que são default parameters em funções JavaScript?,"Default parameters permitem que você especifique um valor padrão para um parâmetro de função se nenhum valor for passado quando a função é chamada. Por exemplo: `function greet(name = ""Guest"") { ... }`"
O que é a propriedade `length` de uma string em JavaScript?,A propriedade `length` retorna o número de caracteres em uma string.
Qual a diferença entre `substring()` e `slice()` em strings JavaScript?,"`slice()` aceita índices negativos (contando a partir do final da string), enquanto `substring()` trata índices negativos como 0."
O que é o método `split()` de uma string em JavaScript?,"O método `split()` divide uma string em um array de substrings, usando um separador especificado."
O que é o método `join()` de um array em JavaScript?,"O método `join()` junta todos os elementos de um array em uma string, usando um separador especificado."
O que é o método `push()` de um array em JavaScript?,O método `push()` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
O que é o método `pop()` de um array em JavaScript?,O método `pop()` remove o último elemento de um array e retorna esse elemento.
O que é o método `shift()` de um array em JavaScript?,O método `shift()` remove o primeiro elemento de um array e retorna esse elemento.
O que é o método `unshift()` de um array em JavaScript?,O método `unshift()` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
O que é o método `splice()` de um array em JavaScript?,O método `splice()` altera o conteúdo de um array removendo ou substituindo elementos existentes e/ou adicionando novos elementos no local.
O que é o método `concat()` de um array em JavaScript?,O método `concat()` retorna um novo array contendo a união de dois ou mais arrays.
O que é o método `reverse()` de um array em JavaScript?,O método `reverse()` inverte a ordem dos elementos em um array no local.
O que é o método `sort()` de um array em JavaScript?,"O método `sort()` ordena os elementos de um array no local e retorna o array ordenado. Por padrão, a ordenação é alfabética e por ordem crescente."
O que é a função `isNaN()` em JavaScript?,A função `isNaN()` determina se um valor é NaN (Not-a-Number). Note que ela tenta converter o argumento para um número antes do teste.
O que é um callback em JavaScript?,"Um callback é uma função passada como argumento para outra função, que é executada após alguma operação ser completada. Callbacks são frequentemente usados em operações assíncronas."
O que é a diferença entre programação síncrona e assíncrona em JavaScript?,"Em programação síncrona, as tarefas são executadas uma após a outra, bloqueando a execução até que cada tarefa seja concluída. Em programação assíncrona, múltiplas tarefas podem ser iniciadas sem esperar que a anterior termine, permitindo que o programa continue executando outras tarefas enquanto as operações assíncronas são processadas em segundo plano."
O que é um evento de propagação (event bubbling) em JavaScript?,"É o processo em que um evento disparado em um elemento do DOM se propaga para seus elementos pais na hierarquia do DOM, permitindo que os manipuladores de eventos associados a esses elementos pais também sejam executados."
"O que é o conceito de ""captura de evento"" (event capturing) em JavaScript?","Captura de evento é o processo oposto ao bubbling. Nesse caso, o evento é primeiro capturado pelo elemento ancestral mais externo e, em seguida, propagado para o elemento alvo."
Como você para a propagação de um evento em JavaScript?,Você pode parar a propagação de um evento chamando o método `stopPropagation()` no objeto de evento dentro do manipulador de eventos.
O que é event delegation em JavaScript?,É uma técnica em que você adiciona um único manipulador de eventos a um elemento ancestral em vez de adicionar manipuladores de eventos individuais a múltiplos elementos filhos. O manipulador de eventos no ancestral pode então determinar qual elemento filho disparou o evento e agir de acordo.
"O que é um ""memory leak"" (vazamento de memória) em JavaScript e como você pode evitá-los?","Um memory leak ocorre quando a memória que foi alocada por um programa não é liberada corretamente, levando ao consumo crescente de memória ao longo do tempo. Para evitá-los, certifique-se de remover referências desnecessárias a objetos, desalocar manipuladores de eventos, e usar técnicas de gerenciamento de memória eficientes."
"O que é o ""shadow DOM"" em JavaScript?","Shadow DOM é um padrão que fornece encapsulamento para componentes web, permitindo que eles tenham seu próprio DOM, estilos e comportamentos que são isolados do resto do documento."
"O que é o ""template element"" (`<template>`) em HTML e como ele é usado com JavaScript?",O elemento `<template>` permite armazenar trechos de HTML que não são renderizados inicialmente na página. O JavaScript pode ser usado para clonar e inserir o conteúdo do template no DOM quando necessário.
O que é o método `cloneNode()` em JavaScript?,O método `cloneNode()` cria uma cópia de um nó do DOM. Você pode especificar se quer uma cópia superficial (apenas o nó em si) ou uma cópia profunda (o nó e todos os seus descendentes).
"O que são os ""Web Workers"" em JavaScript?","Web Workers permitem que você execute scripts JavaScript em threads de fundo, separados da thread principal da interface do usuário. Isso pode melhorar o desempenho de aplicativos web, evitando o bloqueio da thread principal durante operações intensivas."
Como você se comunica entre o script principal e um Web Worker?,A comunicação entre o script principal e um Web Worker é feita por meio do método `postMessage()` e do evento `message`.
"O que são ""Service Workers"" em JavaScript?","Service Workers são scripts JavaScript que rodam em segundo plano no navegador, permitindo funcionalidades como notificações push, caching offline e sincronização em segundo plano. Eles atuam como um proxy entre o navegador e a rede."
O que é o objeto `navigator` em JavaScript?,"O objeto `navigator` contém informações sobre o navegador do usuário, como o nome do navegador, a versão, o sistema operacional e o suporte a determinados recursos."
Explique o conceito de closures em JavaScript.,"Um closure é a combinação de uma função e o ambiente léxico em que essa função foi declarada. Isso significa que a função interna tem acesso às variáveis da função externa, mesmo depois que a função externa foi executada."
Como funciona o operador `typeof` em JavaScript? Quais tipos ele pode retornar?,"`typeof` retorna uma string indicando o tipo de dado de um operando. Pode retornar: `""undefined""`, `""object""`, `""boolean""`, `""number""`, `""bigint""`, `""string""`, `""symbol""`, e `""function""`."
O que são template literals em JavaScript e como são usados?,Template literals são strings que permitem expressões embutidas. São delimitadas por backticks (`) e podem conter placeholders ( `${expressão}` ). São usados para interpolação de strings e strings multilinha.
Explique o que é o objeto `arguments` em JavaScript.,O objeto `arguments` é um objeto semelhante a um array disponível dentro de funções (exceto arrow functions) que contém os valores dos argumentos passados para essa função.
O que é o método `map()` em arrays JavaScript e como ele funciona?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele transforma cada elemento.
Explique o que é o método `filter()` em arrays JavaScript.,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em arrays JavaScript e como ele é usado?,`reduce()` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o operador spread (`...`) em JavaScript e como ele pode ser usado?,"O operador spread expande um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados.  Pode ser usado para copiar arrays, concatenar arrays, passar argumentos para funções, etc."
O que são as palavras-chave `async` e `await` em JavaScript e como elas se relacionam com Promises?,"`async` define uma função assíncrona, que sempre retorna uma Promise. `await` é usado dentro de funções `async` para pausar a execução até que uma Promise seja resolvida (ou rejeitada).  Simplificam o tratamento de Promises."
O que é o método `forEach()` em arrays JavaScript?,"`forEach()` executa uma função fornecida uma vez para cada elemento do array. Diferente de `map()`, ele não retorna um novo array."
O que são arrow functions em JavaScript e como elas diferem das funções tradicionais?,Arrow functions são uma forma mais concisa de escrever funções. Diferem das funções tradicionais principalmente no que diz respeito ao contexto de `this` (arrow functions herdam o `this` do escopo circundante) e na ausência do objeto `arguments`.
O que é destructuring em JavaScript e como pode ser usado com objetos e arrays?,Destructuring é uma expressão JavaScript que permite desempacotar valores de arrays ou propriedades de objetos em variáveis distintas.
Explique o conceito de `this` em JavaScript e como seu valor é determinado.,"`this` se refere ao objeto ""proprietário"" da função que está sendo executada. Seu valor é determinado de maneiras diferentes dependendo de como a função é chamada: globalmente, como método de um objeto, usando `call`, `apply` ou `bind`, ou como um construtor."
O que é o operador ternário em JavaScript e como ele funciona?,O operador ternário é uma forma concisa de escrever uma instrução `if...else`.  Sintaxe: `condição ? expressão_se_verdadeiro : expressão_se_falso;`
O que são Generators em JavaScript e como eles são usados?,"Generators são funções que podem ser pausadas e retomadas, permitindo que você produza múltiplos valores ao longo do tempo.  Usam a palavra-chave `yield`."
"O que é o conceito de ""truthy"" e ""falsy"" em JavaScript?","""Truthy"" e ""falsy"" são valores que são avaliados como `true` ou `false` em um contexto booleano.  Valores ""falsy"" incluem `false`, `0`, `""""`, `null`, `undefined` e `NaN`. Todos os outros valores são ""truthy""."
O que é o método `Object.keys()` em JavaScript e o que ele retorna?,`Object.keys()` retorna um array com os nomes das propriedades enumeráveis do próprio objeto (não herdadas).
Explique o que é o método `Object.values()` em JavaScript.,`Object.values()` retorna um array com os valores das propriedades enumeráveis do próprio objeto (não herdadas).
O que é o método `Object.entries()` em JavaScript e o que ele retorna?,"`Object.entries()` retorna um array de arrays, onde cada array interno contém o nome da propriedade e o valor correspondente de um objeto."
Qual a diferença entre `slice()` e `splice()` em arrays JavaScript?,"`slice()` retorna uma cópia de uma parte do array, sem modificar o array original. `splice()` modifica o array original removendo, substituindo ou adicionando elementos."
O que é o método `concat()` em arrays JavaScript e como ele é usado?,"`concat()` é usado para unir dois ou mais arrays. Este método não altera os arrays existentes, mas retorna um novo array, que contém os valores dos arrays unidos."
O que é o método `includes()` em arrays JavaScript?,"`includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado."
O que é o método `findIndex()` em arrays JavaScript?,"`findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1."
O que é o método `find()` em arrays JavaScript?,"`find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
O que são objetos literais em JavaScript?,Objetos literais são uma forma de criar objetos em JavaScript usando a sintaxe `{ chave: valor }`.
Explique o conceito de prototype em JavaScript.,"Em JavaScript, cada objeto tem um protótipo, que é outro objeto do qual ele herda propriedades e métodos. É a base da herança prototípica."
O que é herança em classes JavaScript e como é implementada?,Herança permite que uma classe (subclasse ou classe filha) herde propriedades e métodos de outra classe (superclasse ou classe pai). É implementada usando a palavra-chave `extends`.
O que é o método `super()` em classes JavaScript e como ele é usado?,`super()` é usado dentro de uma subclasse para chamar o construtor da superclasse ou para acessar métodos da superclasse.
"O que é o conceito de ""modules"" em JavaScript (ES Modules)?",Módulos são arquivos de JavaScript que exportam e importam funcionalidades. Eles ajudam a organizar o código em unidades reutilizáveis e evitam conflitos de nomes.
O que é o objeto `Math` em JavaScript e alguns de seus métodos mais comuns?,"`Math` é um objeto embutido que fornece funções matemáticas e constantes. Métodos comuns incluem `Math.random()`, `Math.round()`, `Math.ceil()`, `Math.floor()`, `Math.max()`, `Math.min()`."
Como você gera um número aleatório entre um intervalo específico em JavaScript?,Você pode usar a seguinte fórmula: `Math.floor(Math.random() * (max - min + 1)) + min;`
O que são expressões regulares (RegEx) em JavaScript e para que são usadas?,"Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings. São usadas para busca, substituição e validação de texto."
Quais são alguns dos metacaracteres mais comuns em expressões regulares?,"Alguns metacaracteres comuns incluem `.` (qualquer caractere), `*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `^` (início da string), `$` (fim da string), `[]` (conjunto de caracteres), `()` (grupo de captura)."
O que é o método `test()` em expressões regulares e como ele é usado?,"`test()` executa uma pesquisa por uma correspondência entre uma expressão regular e uma string. Retorna `true` se a expressão regular encontrar uma correspondência na string, caso contrário, retorna `false`."
O que é o método `exec()` em expressões regulares e como ele é usado?,`exec()` executa uma pesquisa por uma correspondência em uma string especificada. Retorna um array com informações sobre a correspondência ou `null` se nenhuma correspondência for encontrada.
O que é o método `String.prototype.replace()` em JavaScript e como ele pode ser usado com expressões regulares?,`replace()` substitui uma parte de uma string por outra string. Pode usar uma string simples ou uma expressão regular como padrão de busca.
O que são callbacks em JavaScript e como eles são usados?,Um callback é uma função que é passada como argumento para outra função e é executada após a conclusão de alguma operação. São comuns em operações assíncronas.
O que é o método `setTimeout()` em JavaScript e como ele funciona?,`setTimeout()` agenda a execução de uma função após um determinado período de tempo (em milissegundos).
O que é o método `setInterval()` em JavaScript e como ele funciona?,`setInterval()` repete a execução de uma função em intervalos regulares (em milissegundos).
Como você limpa um intervalo definido com `setInterval()` em JavaScript?,Você usa o método `clearInterval()` e passa o ID do intervalo retornado por `setInterval()` como argumento.
Como você limpa um timeout definido com `setTimeout()` em JavaScript?,Você usa o método `clearTimeout()` e passa o ID do timeout retornado por `setTimeout()` como argumento.
O que é o modelo de eventos do DOM?,É a forma como os eventos são propagados através da árvore do DOM. Existem duas fases principais: capturing e bubbling.
"Explique a fase de ""capturing"" no modelo de eventos do DOM.","Na fase de capturing, o evento viaja do elemento raiz do documento até o elemento alvo."
"Explique a fase de ""bubbling"" no modelo de eventos do DOM.","Na fase de bubbling, o evento viaja do elemento alvo até o elemento raiz do documento."
O que é o método `addEventListener()` em JavaScript e como ele é usado?,"`addEventListener()` anexa um manipulador de eventos a um elemento.  Ele recebe o tipo de evento, a função manipuladora e uma opção (geralmente para controlar a fase de captura)."
O que é o método `removeEventListener()` em JavaScript e como ele é usado?,"`removeEventListener()` remove um manipulador de eventos anexado com `addEventListener()`.  É importante passar os mesmos argumentos (tipo de evento, função manipuladora e opção) que foram usados para adicionar o evento."
O que é o objeto `event` em JavaScript e quais informações ele contém?,"O objeto `event` é passado para a função manipuladora de eventos e contém informações sobre o evento que ocorreu (por exemplo, o elemento alvo, o tipo de evento, coordenadas do mouse)."
O que é o método `preventDefault()` no objeto `event`?,"`preventDefault()` impede o comportamento padrão de um evento (por exemplo, impedir que um link redirecione para outra página ou que um formulário seja enviado)."
O que é o método `stopPropagation()` no objeto `event`?,`stopPropagation()` impede que o evento se propague para os elementos pai na árvore do DOM (impede o bubbling e o capturing).
O que é o objeto `target` no objeto `event`?,O `target` é uma propriedade do objeto `event` que se refere ao elemento que disparou o evento.
O que é o objeto `currentTarget` no objeto `event`?,O `currentTarget` é uma propriedade do objeto `event` que se refere ao elemento ao qual o manipulador de eventos está anexado.  Pode ser diferente do `target` durante o bubbling ou capturing.
Como você seleciona um elemento no DOM usando JavaScript?,"Você pode usar métodos como `document.getElementById()`, `document.querySelector()`, `document.querySelectorAll()`."
Qual a diferença entre `document.querySelector()` e `document.querySelectorAll()`?,`document.querySelector()` retorna o primeiro elemento que corresponde ao seletor CSS especificado. `document.querySelectorAll()` retorna um NodeList contendo todos os elementos que correspondem ao seletor CSS especificado.
"Qual a diferença entre `textContent`, `innerHTML` e `innerText` ao modificar o conteúdo de um elemento?","`textContent` retorna o texto de um elemento e seus descendentes, incluindo tags `<script>` e `<style>`. `innerHTML` retorna o código HTML interno do elemento. `innerText` retorna o texto renderizado de um elemento, ignorando tags HTML e formatando o texto conforme exibido na tela."
Como você modifica os atributos de um elemento HTML usando JavaScript?,Você pode usar os métodos `setAttribute()` para definir o valor de um atributo e `getAttribute()` para obter o valor de um atributo.
Como você modifica as classes CSS de um elemento HTML usando JavaScript?,"Você pode usar a propriedade `classList` do elemento, que fornece métodos como `add()`, `remove()`, `toggle()` e `contains()` para manipular as classes CSS."
O que são cookies em JavaScript e como eles são usados?,"Cookies são pequenos arquivos de texto que são armazenados no computador do usuário por um site. Eles são usados para armazenar informações sobre o usuário (por exemplo, preferências, dados de login)."
Como você define um cookie em JavaScript?,Você pode definir um cookie atribuindo um valor à propriedade `document.cookie`.
Como você lê um cookie em JavaScript?,"Você pode ler todos os cookies acessando a propriedade `document.cookie`, que retorna uma string contendo todos os cookies separados por ponto e vírgula."
Como você exclui um cookie em JavaScript?,Você pode excluir um cookie definindo sua data de expiração para uma data no passado.
O que é o Local Storage em JavaScript e como ele é usado?,"Local Storage é um mecanismo de armazenamento web que permite armazenar dados no navegador do usuário de forma persistente (ou seja, os dados permanecem mesmo após o fechamento do navegador)."
O que é o Session Storage em JavaScript e como ele é usado?,"Session Storage é semelhante ao Local Storage, mas os dados são armazenados apenas durante a sessão do navegador (ou seja, os dados são perdidos quando o navegador é fechado)."
Quais são os métodos para interagir com o Local Storage e o Session Storage?,"Os métodos são: `setItem()` (para definir um valor), `getItem()` (para obter um valor), `removeItem()` (para remover um valor) e `clear()` (para limpar todo o armazenamento)."
Qual a diferença entre Local Storage e Session Storage?,"Local Storage armazena dados de forma persistente, enquanto Session Storage armazena dados apenas durante a sessão do navegador."
O que é o método `JSON.stringify()` em JavaScript e como ele é usado?,`JSON.stringify()` converte um objeto JavaScript em uma string JSON. É usado para serializar dados antes de enviá-los para um servidor ou armazená-los no Local Storage.
O que é o método `JSON.parse()` em JavaScript e como ele é usado?,`JSON.parse()` converte uma string JSON em um objeto JavaScript. É usado para desserializar dados recebidos de um servidor ou recuperados do Local Storage.
O que são erros em JavaScript e como eles são tratados?,Erros são problemas que ocorrem durante a execução do código. Eles podem ser tratados usando blocos `try...catch`.
Explique como o bloco `try...catch` funciona em JavaScript.,"O código dentro do bloco `try` é executado. Se um erro ocorrer, a execução é interrompida e o controle é transferido para o bloco `catch`, que manipula o erro."
O que é o bloco `finally` em um bloco `try...catch...finally`?,"O bloco `finally` é executado sempre, independentemente de um erro ter ocorrido ou não no bloco `try`. Geralmente é usado para limpar recursos (por exemplo, fechar arquivos)."
Quais são alguns dos tipos de erro comuns em JavaScript?,"Alguns tipos de erro comuns incluem `TypeError`, `ReferenceError`, `SyntaxError`, `RangeError`, `URIError`."
Como você lança um erro manualmente em JavaScript?,Você pode usar a palavra-chave `throw` para lançar um erro. Você pode lançar um objeto `Error` ou qualquer outro valor.
"O que é o modo estrito (`""use strict"";`) em JavaScript e quais seus benefícios?","O modo estrito é uma forma de aplicar uma semântica mais restritiva ao JavaScript. Seus benefícios incluem: evita o uso de variáveis não declaradas, impede a atribuição a propriedades somente leitura, torna erros silenciosos em erros explícitos e desativa recursos que são considerados problemáticos."
O que é a diferença entre programação imperativa e programação declarativa?,"A programação imperativa foca em *como* realizar uma tarefa, especificando cada passo. A programação declarativa foca em *o que* realizar, expressando a lógica sem detalhar o fluxo de controle."
Dê um exemplo de programação imperativa e declarativa para filtrar números pares de um array.,"*   **Imperativo:**
    ```javascript
    const numeros = [1, 2, 3, 4, 5, 6];
    const pares = [];
    for (let i = 0; i < numeros.length; i++) {
      if (numeros[i] % 2 === 0) {
        pares.push(numeros[i]);
      }
    }
    ```
*   **Declarativo:**
    ```javascript
    const numeros = [1, 2, 3, 4, 5, 6];
    const pares = numeros.filter(numero => numero % 2 === 0);
    ```"
O que é a API Fetch em JavaScript e para que é utilizada?,A API Fetch fornece uma interface para buscar recursos pela rede. É uma alternativa mais moderna e flexível ao `XMLHttpRequest` para fazer requisições HTTP.
Como você faz uma requisição GET usando a API Fetch?,"```javascript
fetch('url_do_recurso')
  .then(response => response.json()) // ou response.text(), etc.
  .then(data => console.log(data))
  .catch(error => console.error('Erro:', error));
```"
Como você faz uma requisição POST usando a API Fetch?,"```javascript
fetch('url_do_recurso', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({ chave: 'valor' })
})
  .then(response => response.json())
  .then(data => console.log('Sucesso:', data))
  .catch(error => console.error('Erro:', error));
```"
O que é o objeto `URLSearchParams` em JavaScript e como ele é utilizado?,"`URLSearchParams` é uma interface que fornece métodos para trabalhar com a string de consulta de uma URL. Ele permite criar, modificar e acessar facilmente os parâmetros de uma URL."
Como você cria um objeto `URLSearchParams` a partir de uma string de consulta?,"```javascript
const paramsString = 'chave1=valor1&chave2=valor2';
const searchParams = new URLSearchParams(paramsString);
```"
Como você obtém o valor de um parâmetro de consulta usando `URLSearchParams`?,"```javascript
const valor = searchParams.get('chave1'); // Retorna 'valor1'
```"
Como você adiciona um novo parâmetro de consulta usando `URLSearchParams`?,"```javascript
searchParams.append('chave3', 'valor3');
```"
O que é a função `encodeURIComponent()` em JavaScript e quando ela deve ser utilizada?,"A função `encodeURIComponent()` codifica um componente de URI (Uniform Resource Identifier) substituindo cada instância de certos caracteres por uma, duas, três ou quatro sequências de escape representando a codificação UTF-8 do caractere. Deve ser utilizada para garantir que os dados enviados em uma URL sejam válidos e não causem problemas de interpretação."
O que é a função `decodeURIComponent()` em JavaScript?,A função `decodeURIComponent()` decodifica um componente de URI que foi previamente codificado por `encodeURIComponent()`.
"O que são ""service workers"" em JavaScript e qual sua finalidade?","Service workers são scripts que rodam em background, separados da página web, e fornecem funcionalidades como notificações push, cache de conteúdo e suporte para funcionalidades offline. Eles atuam como um proxy entre a aplicação web e a rede."
"O que é o ""event loop"" em JavaScript?","O event loop é um mecanismo que permite ao JavaScript executar operações assíncronas sem bloquear a thread principal. Ele monitora a pilha de chamadas e a fila de tarefas, executando as tarefas da fila quando a pilha está vazia."
"O que é a ""callback queue"" (fila de callbacks) em JavaScript?","A callback queue (também conhecida como task queue) é uma fila que contém os callbacks que estão prontos para serem executados. Esses callbacks são geralmente resultados de eventos, timers ou Promises resolvidas."
"O que é ""currying"" em JavaScript?","Currying é uma técnica onde uma função que recebe múltiplos argumentos é transformada em uma sequência de funções que recebem um único argumento cada. Cada função retorna a próxima função na sequência, até que todos os argumentos tenham sido fornecidos e o resultado final seja calculado."
"Dê um exemplo de ""currying"" em JavaScript.","```javascript
function somar(a) {
  return function(b) {
    return a + b;
  }
}

const somar5 = somar(5);
console.log(somar5(3)); // Output: 8
```"
"O que é ""memoization"" em JavaScript?",Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras e retorna o resultado armazenado quando as mesmas entradas ocorrem novamente. Isso evita o recálculo desnecessário.
"Dê um exemplo de ""memoization"" em JavaScript.","```javascript
function memoize(fn) {
  const cache = {};
  return function(...args) {
    const argsString = JSON.stringify(args);
    if (cache[argsString]) {
      return cache[argsString];
    } else {
      const result = fn(...args);
      cache[argsString] = result;
      return result;
    }
  }
}

function somarLentamente(a, b) {
  // Simula um cálculo demorado
  for (let i = 0; i < 100000000; i++) {
    // Faz algo para gastar tempo
  }
  return a + b;
}

const memoizedSomarLentamente = memoize(somarLentamente);

console.time('Primeira Chamada');
console.log(memoizedSomarLentamente(2, 3)); // Leva tempo para calcular
console.timeEnd('Primeira Chamada');

console.time('Segunda Chamada');
console.log(memoizedSomarLentamente(2, 3)); // Retorna do cache instantaneamente
console.timeEnd('Segunda Chamada');
```"
"O que é a diferença entre ""shallow copy"" (cópia superficial) e ""deep copy"" (cópia profunda) em JavaScript?","Uma ""shallow copy"" cria uma nova referência para os mesmos objetos aninhados do objeto original. Modificar um objeto aninhado na cópia superficial afetará o objeto original, e vice-versa. Uma ""deep copy"" cria cópias completamente independentes de todos os objetos aninhados, de forma que modificar a cópia não afetará o original."
"Como você pode realizar uma ""deep copy"" de um objeto em JavaScript?","Uma forma comum é usar `JSON.parse(JSON.stringify(objeto))`.  No entanto, isso não funciona para objetos que contêm funções, datas ou instâncias de classes personalizadas.  Para casos mais complexos, pode ser necessário usar bibliotecas externas ou implementar uma função de cópia recursiva."
Dê um exemplo de uso do operador `??` em JavaScript.,"```javascript
const valor = null ?? 'Valor Padrão'; // valor será 'Valor Padrão'
const valor2 = 0 ?? 'Valor Padrão';   // valor2 será 0 (ao contrário de || que retornaria 'Valor Padrão')
```"
Dê um exemplo de uso do operador `?.` em JavaScript.,"```javascript
const objeto = {
  prop1: {
    prop2: 'Valor'
  }
};

const valor = objeto?.prop1?.prop2; // valor será 'Valor'

const objeto2 = null;
const valor2 = objeto2?.prop1?.prop2; // valor2 será undefined, sem causar erro
```"
"O que são ""template string tags"" em JavaScript?",Template string tags são funções que podem ser usadas para processar template literals. Elas permitem personalizar a interpolação de strings e realizar transformações específicas nos valores interpolados.
"Dê um exemplo de uso de ""template string tags"" em JavaScript.","```javascript
function formatarMoeda(strings, valor) {
  const moedaFormatada = new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(valor);
  return `${strings[0]}${moedaFormatada}${strings[1]}`;
}

const valorProduto = 1299.99;
const mensagem = formatarMoeda`O preço é: ${valorProduto}.`;
console.log(mensagem); // Output: O preço é: R$ 1.299,99.
```"
"O que é o ""Proxy object"" em JavaScript e para que é utilizado?","O objeto `Proxy` permite interceptar e customizar operações fundamentais em outros objetos (o ""target""). Ele pode ser usado para validação, log, virtualização e outras tarefas de metaprogramação."
"Dê um exemplo de uso do ""Proxy object"" em JavaScript.","```javascript
const target = {
  nome: 'Original'
};

const handler = {
  get: function(target, prop, receiver) {
    console.log(`Acessando a propriedade: ${prop}`);
    return Reflect.get(...arguments);
  },
  set: function(target, prop, value, receiver) {
    console.log(`Definindo a propriedade: ${prop} com o valor: ${value"
O que é coerção de tipo (type coercion) em JavaScript e dê um exemplo.,"Coerção de tipo é a conversão automática de um tipo de dado para outro (por exemplo, de string para número) durante uma operação. Exemplo: `'5' + 2` resulta em `'52'` devido à coerção do número 2 para string."
O que são closures em JavaScript e por que são úteis?,"Closures são funções que ""lembram"" o ambiente (as variáveis) onde foram criadas, mesmo após o ambiente externo ter sido destruído. São úteis para encapsular dados e criar funções com estado."
Como funciona o operador `typeof` em JavaScript?,"`typeof` retorna uma string indicando o tipo de dado de um valor. Exemplo: `typeof 42` retorna `""number""`."
O que são template literals e como são usados?,Template literals são strings delimitadas por backticks (``) que permitem a interpolação de expressões JavaScript usando `${expressão}`. Simplificam a concatenação de strings e a incorporação de variáveis.
O que são arrow functions e quais são suas principais diferenças em relação às funções regulares?,"Arrow functions são uma sintaxe mais curta para funções. Diferenças principais: não possuem seu próprio `this`, `arguments`, `super` ou `new.target`. São sempre anônimas e não podem ser usadas como construtoras."
O que são promises em JavaScript e como elas lidam com operações assíncronas?,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas têm três estados: pendente, resolvida (fulfilled) e rejeitada (rejected). Usam `.then()` para lidar com a resolução e `.catch()` para lidar com a rejeição."
O que é a palavra-chave `async` e `await` e como elas se relacionam com promises?,"`async` é usada para declarar uma função assíncrona, que implicitamente retorna uma promise. `await` é usado dentro de uma função `async` para pausar a execução até que uma promise seja resolvida. Tornam o código assíncrono mais legível e semelhante ao código síncrono."
O que são JSON (JavaScript Object Notation) e como são usados em JavaScript?,"JSON é um formato de dados leve e baseado em texto usado para transmitir dados. Em JavaScript, é usado para representar objetos e arrays. Métodos como `JSON.stringify()` (converte um objeto JavaScript para JSON) e `JSON.parse()` (converte JSON para um objeto JavaScript) são usados para manipular JSON."
O que é o operador `...` (spread operator) em JavaScript?,"O spread operator permite expandir um array ou objeto em elementos individuais. É usado para copiar arrays/objetos, combinar arrays/objetos e passar argumentos para funções."
O que é o método `map()` em JavaScript e como ele é usado?,`map()` é um método de array que cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em JavaScript e como ele é usado?,`filter()` é um método de array que cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em JavaScript e como ele é usado?,`reduce()` é um método de array que aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o método `forEach()` em JavaScript e como ele é usado?,"`forEach()` é um método de array que executa uma função fornecida uma vez para cada elemento do array. Diferente de `map()`, não retorna um novo array."
O que são High-Order Functions (Funções de ordem superior) em JavaScript?,"Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam outras funções como resultado. Exemplos: `map()`, `filter()`, `reduce()`."
O que é herança prototípica em JavaScript?,"É o modelo de herança em JavaScript, onde os objetos herdam propriedades e métodos de outros objetos através da cadeia de protótipos."
O que é o modo estrito (`strict mode`) em JavaScript e quais seus benefícios?,"`strict mode` é uma forma de executar o JavaScript com um conjunto mais restrito de regras. Ajuda a evitar erros comuns, tornando o código mais seguro e fácil de manter. É ativado adicionando `""use strict"";` no início de um script ou função."
O que são expressões regulares (RegEx) em JavaScript e como são usadas?,"Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings. São usadas para validação de dados, busca e substituição de texto."
Quais são algumas flags comuns usadas em expressões regulares?,"`g` (global - encontra todas as correspondências), `i` (case-insensitive - ignora maiúsculas e minúsculas), `m` (multiline - permite correspondências em várias linhas)."
Como funciona o operador ternário em JavaScript?,O operador ternário é uma forma concisa de escrever uma instrução `if...else`. A sintaxe é `condição ? expressão_se_verdadeira : expressão_se_falsa`.
Qual a diferença entre `slice()` e `splice()` em JavaScript?,"`slice()` retorna uma cópia de uma parte de um array, sem modificar o array original. `splice()` modifica o array original removendo, substituindo ou adicionando elementos."
O que é o método `trim()` em JavaScript?,"`trim()` remove espaços em branco (espaços, tabs, quebras de linha) do início e do fim de uma string."
O que é o método `padStart()` em JavaScript?,`padStart()` preenche o início de uma string com um caractere especificado até atingir um determinado comprimento.
O que é o método `padEnd()` em JavaScript?,`padEnd()` preenche o final de uma string com um caractere especificado até atingir um determinado comprimento.
O que é o objeto `Math` em JavaScript e quais são alguns de seus métodos?,"`Math` é um objeto nativo em JavaScript que fornece propriedades e métodos para operações matemáticas. Alguns métodos comuns incluem: `Math.random()`, `Math.floor()`, `Math.ceil()`, `Math.round()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`."
O que é o objeto `Date` em JavaScript e como ele é usado?,"`Date` é um objeto nativo em JavaScript usado para trabalhar com datas e horários. Ele permite criar, formatar e manipular datas."
Como obter a data e hora atual em JavaScript?,Criando uma nova instância do objeto `Date`: `const dataAtual = new Date();`.
Como formatar uma data em JavaScript?,"Usando métodos do objeto `Date` como `toLocaleDateString()`, `toLocaleTimeString()`, `getFullYear()`, `getMonth()`, `getDate()`, `getHours()`, `getMinutes()`, `getSeconds()`."
Como cancelar um `setTimeout()` ou `setInterval()` em JavaScript?,Usando `clearTimeout()` para cancelar um `setTimeout()` e `clearInterval()` para cancelar um `setInterval()`. Ambos recebem o ID retornado por `setTimeout()` ou `setInterval()` como argumento.
O que é o objeto `console` em JavaScript e quais são alguns de seus métodos?,"`console` é um objeto nativo em JavaScript que fornece acesso ao console de depuração do navegador (ou ambiente de execução). Alguns métodos comuns incluem: `console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`."
O que é o método `console.table()` em JavaScript?,`console.table()` exibe dados (arrays ou objetos) como uma tabela no console.
O que é o método `console.time()` e `console.timeEnd()` em JavaScript?,"`console.time()` inicia um cronômetro com um nome especificado, e `console.timeEnd()` para o cronômetro e exibe o tempo decorrido no console. São usados para medir o tempo de execução de um bloco de código."
O que são erros em JavaScript?,"Erros são situações excepcionais que ocorrem durante a execução do código, indicando que algo deu errado."
Quais são os tipos de erros comuns em JavaScript?,"`TypeError`, `ReferenceError`, `SyntaxError`, `RangeError`, `URIError`, `EvalError`."
Como lidar com erros em JavaScript usando `try...catch`?,O bloco `try` contém o código que pode lançar uma exceção. O bloco `catch` contém o código que é executado se uma exceção é lançada no bloco `try`.
O que é o bloco `finally` em um bloco `try...catch`?,"O bloco `finally` contém o código que é sempre executado, independentemente de uma exceção ter sido lançada ou não no bloco `try`. É usado para limpar recursos ou executar código que deve ser executado em todos os casos."
Como lançar um erro manualmente em JavaScript?,"Usando a palavra-chave `throw` seguida por um objeto de erro (por exemplo, `throw new Error('Mensagem de erro');`)."
Como adicionar um ouvinte de evento (event listener) a um elemento HTML usando JavaScript?,"Usando o método `addEventListener(tipoDoEvento, funcaoCallback, useCapture)`."
O que é a fase de bubbling em eventos DOM?,"Na fase de bubbling, um evento que ocorre em um elemento HTML se propaga para cima na árvore DOM, acionando os ouvintes de evento em seus elementos pai."
O que é a fase de capturing em eventos DOM?,"Na fase de capturing, um evento que ocorre em um elemento HTML se propaga para baixo na árvore DOM, acionando os ouvintes de evento em seus elementos pai que foram registrados para capturar o evento."
O que é o objeto `event` em um manipulador de evento (event handler)?,"O objeto `event` contém informações sobre o evento que ocorreu. Ele fornece acesso a propriedades como o tipo de evento, o elemento que disparou o evento e dados específicos do evento."
O que é o método `stopImmediatePropagation()` do objeto `event`?,`stopImmediatePropagation()` impede que o evento se propague para cima na árvore DOM (fase de bubbling) e impede que outros ouvintes de evento no mesmo elemento sejam executados.
O que é delegação de eventos (event delegation)?,Delegação de eventos é uma técnica em que um único ouvinte de evento é anexado a um elemento pai para lidar com eventos que ocorrem em seus elementos filhos. É útil para lidar com muitos elementos filhos ou elementos que são adicionados dinamicamente.
O que são módulos em JavaScript (ESM)?,Módulos são arquivos JavaScript que podem importar e exportar funcionalidades para outros arquivos. Eles ajudam a organizar e reutilizar o código.
Como importar e exportar módulos em JavaScript?,Usando as palavras-chave `import` para importar e `export` para exportar.
Quais são os tipos de exportação em JavaScript?,Exportações nomeadas (named exports) e exportações padrão (default exports).
O que é uma exportação nomeada (named export) em JavaScript?,"Uma exportação nomeada permite exportar várias variáveis, funções ou classes com seus respectivos nomes."
O que é uma exportação padrão (default export) em JavaScript?,"Uma exportação padrão permite exportar um único valor (variável, função, classe) como padrão do módulo."
O que são objetos globais em JavaScript? Dê alguns exemplos.,"Objetos globais são objetos que estão sempre disponíveis em qualquer escopo em um ambiente JavaScript. Exemplos incluem `window` (em navegadores), `global` (em Node.js), `Math`, `JSON`, `console`."
O que é a função `eval()` em JavaScript e por que seu uso é geralmente desaconselhado?,"`eval()` executa uma string como código JavaScript. Seu uso é geralmente desaconselhado porque pode ser inseguro (permitindo a execução de código malicioso), ineficiente e difícil de depurar."
O que são Cookies em JavaScript e como eles são usados?,"Cookies são pequenos arquivos de texto que são armazenados no navegador do usuário por um site. São usados para rastrear informações sobre o usuário, como preferências, informações de login e histórico de navegação."
Como acessar e manipular Cookies em JavaScript?,Usando a propriedade `document.cookie`.
O que é a propriedade `length` de um array em JavaScript?,A propriedade `length` retorna o número de elementos em um array.
Como inverter a ordem dos elementos em um array em JavaScript?,Usando o método `reverse()`.
Como ordenar os elementos de um array em JavaScript?,"Usando o método `sort()`. Por padrão, `sort()` ordena os elementos como strings. Para ordenar números, é necessário fornecer uma função de comparação."
O que é o método `flat()` em JavaScript?,`flat()` cria um novo array com todos os sub-arrays concatenados recursivamente até a profundidade especificada.
O que é o método `flatMap()` em JavaScript?,"`flatMap()` mapeia cada elemento usando uma função de mapeamento e, em seguida, nivela o resultado em um novo array. É equivalente a `map()` seguido por `flat()` com profundidade 1."
O que é o objeto `WeakMap` em JavaScript e como ele difere de um `Map`?,"`WeakMap` é uma coleção de pares chave-valor onde as chaves devem ser objetos e são fracamente referenciadas. Isso significa que se a chave não for referenciada em nenhum outro lugar, ela pode ser coletada pelo garbage collector, e o par chave-valor será removido do `WeakMap`. Diferentemente de `Map`, `WeakMap` não possui os métodos `size`, `keys`, `values` e `entries`, e não é iterável."
O que é o objeto `WeakSet` em JavaScript e como ele difere de um `Set`?,"`WeakSet` é uma coleção de objetos fracamente referenciados. Similar ao `WeakMap`, se um objeto em um `WeakSet` não for referenciado em nenhum outro lugar, ele pode ser coletado pelo garbage collector e removido do `WeakSet`. Diferentemente de `Set`, `WeakSet` não possui a propriedade `size` e não é iterável."
O que é o garbage collection em JavaScript?,"Garbage collection é o processo automático de liberar memória que não está mais sendo usada pelo programa. O garbage collector identifica e remove objetos que não são mais referenciados, liberando a memória que eles ocupavam."
O que são memory leaks em JavaScript e como evitá-los?,"Memory leaks ocorrem quando a memória que não está mais sendo usada não é liberada pelo garbage collector, resultando em um aumento gradual do uso de memória pelo programa. Para evitá-los, é importante remover referências desnecessárias a objetos, evitar variáveis globais excessivas, gerenciar eventos corretamente e evitar closures que retêm referências a objetos grandes."
O que é immutability em JavaScript e por que é importante?,"Immutability significa que um objeto não pode ser modificado após sua criação. Em vez de modificar um objeto existente, uma nova cópia é criada com as alterações. A imutabilidade torna o código mais previsível, fácil de depurar e testar, e ajuda a evitar efeitos colaterais indesejados."
Como criar objetos imutáveis em JavaScript?,"Usando `Object.freeze()`, `Object.seal()`, ou bibliotecas como Immutable.js. O spread operator (...) também pode ser usado para criar cópias superficiais de objetos imutáveis."
Qual a diferença entre `Object.freeze()` e `Object.seal()` em JavaScript?,"`Object.freeze()` torna um objeto completamente imutável: suas propriedades não podem ser adicionadas, removidas ou modificadas. `Object.seal()` impede que novas propriedades sejam adicionadas ou removidas, mas permite que as propriedades existentes sejam modificadas."
O que é type hinting (ou type annotations) em JavaScript e como pode ser implementado?,"Type hinting, também conhecido como type annotations, é a prática de adicionar informações sobre os tipos de dados esperados para variáveis, parâmetros de funções e valores de retorno em JavaScript. JavaScript não tem type hinting nativo, mas pode ser implementado usando JSDoc, TypeScript ou Flow."
O que são JSDoc annotations e como são usadas para type hinting em JavaScript?,JSDoc annotations são comentários especiais no código JavaScript que são usados para documentar o código e fornecer informações sobre os tipos de dados. Eles são lidos por ferramentas de documentação e editores de código para fornecer informações de tipo e auto-complete.
O que é uma variável privada em JavaScript e como ela pode ser implementada?,"Variáveis privadas são variáveis que só podem ser acessadas de dentro da classe ou função onde são definidas. Em JavaScript, a privacidade é geralmente implementada usando closures (para variáveis com escopo de função) ou símbolos (para propriedades de objetos com escopo de classe)."
O que é o padrão de projeto Module Pattern em JavaScript e como ele é usado para criar módulos com variáveis privadas?,O Module Pattern é um padrão de projeto que usa closures para criar módulos com variáveis privadas e métodos públicos. Ele envolve uma função anônima que é executada imediatamente (IIFE - Immediately Invoked Function Expression). A função retorna um objeto com métodos públicos que têm acesso às variáveis privadas dentro do escopo da função.
O que são Symbols em JavaScript e como eles são usados para criar propriedades privadas em objetos?,"Symbols são um tipo de dado primitivo único e imutável que pode ser usado como chaves de propriedades de objetos. Como os Symbols são únicos, eles podem ser usados para criar propriedades privadas em objetos, pois não podem ser acessados ou sobrescritos acidentalmente por outro código."
O que são proxies em JavaScript e como eles podem ser usados?,"Proxies são objetos que permitem interceptar e personalizar operações fundamentais em outros objetos, como acesso a propriedades, atribuições, chamadas de função e construção de novos objetos. Eles podem ser usados para validação de dados, rastreamento de acesso, virtualização de objetos e muito mais."
O que é o padrão de projeto Observer Pattern em JavaScript e como ele é usado?,"O Observer Pattern é um padrão de projeto que define uma dependência um-para-muitos entre objetos, de forma que quando um objeto (o sujeito) muda de estado, todos os seus dependentes (os observadores) são notificados e atualizados automaticamente. É usado para implementar sistemas de eventos, interfaces de usuário dinâmicas e arquiteturas orientadas a eventos."
O que é o padrão de projeto Factory Pattern em JavaScript e como ele é usado?,"O Factory Pattern é um padrão de projeto que fornece uma interface para criar objetos, mas permite que as subclasses decidam qual classe instanciar. É usado para abstrair o processo de criação de objetos e para criar objetos com base em diferentes condições ou configurações."
O que é o padrão de projeto Singleton Pattern em JavaScript e como ele é usado?,"O Singleton Pattern é um padrão de projeto que garante que uma classe tenha apenas uma instância e fornece um ponto de acesso global a essa instância. É usado para controlar o acesso a recursos compartilhados, como configurações, bancos de dados e caches.

Espero que esta lista de perguntas e respostas exclusivas seja útil!"
O que é hoisting em JavaScript e como ele afeta as variáveis declaradas com `let` e `const`?,"Hoisting é o comportamento do JavaScript de mover declarações para o topo do escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com valor `undefined`, enquanto `let` e `const` são hoisted, mas não inicializadas. A tentativa de acessar `let` ou `const` antes da declaração resulta em um `ReferenceError`, a chamada ""Temporal Dead Zone""."
O que é o operador spread (`...`) e como ele pode ser usado com arrays e objetos?,"O operador spread (`...`) expande um iterável (como um array ou string) em elementos individuais ou um objeto em pares chave-valor individuais. Ele pode ser usado para copiar arrays/objetos, concatenar arrays, passar argumentos para funções e criar novos objetos com propriedades adicionais."
Descreva o que são template literals e seus benefícios em relação às strings tradicionais.,Template literals (usando backticks `) permitem a interpolação de variáveis e expressões dentro de strings.  Elas também suportam strings multi-linha sem a necessidade de concatenação. São mais legíveis e evitam erros ao concatenar strings complexas.
O que é o objeto `arguments` em JavaScript e quando ele é útil?,O objeto `arguments` é um objeto semelhante a um array disponível dentro de funções não-arrow que contém todos os argumentos passados para a função. Ele é útil quando o número de argumentos a serem passados para uma função é desconhecido ou variável.  Note que não é um array verdadeiro e não possui todos os métodos de array nativos.
O que é um construtor em JavaScript?,"Um construtor é uma função usada para criar e inicializar objetos. Quando usado com o operador `new`, ele cria uma nova instância de um objeto, define `this` para referenciar o novo objeto e retorna o novo objeto implicitamente (ou explicitamente, se retornado)."
O que é o método `map()` em arrays e qual seu propósito?,"O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele transforma cada elemento do array em outro valor, mantendo a mesma quantidade de elementos."
Descreva o que é o método `filter()` em arrays e como ele funciona.,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. Ele seleciona os elementos que satisfazem uma condição específica.
O que é o método `reduce()` em arrays e como ele pode ser usado?,"O método `reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor. Ele é usado para realizar cálculos cumulativos, como somar todos os elementos de um array."
Explique o que é o DOM (Document Object Model) e qual sua importância em JavaScript.,"O DOM é uma representação em árvore da estrutura de um documento HTML ou XML. O JavaScript usa o DOM para acessar e manipular os elementos, atributos e conteúdo do documento, permitindo a interação dinâmica com a página web."
Como selecionar elementos no DOM usando JavaScript?,"Existem vários métodos para selecionar elementos no DOM, incluindo: `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`, `document.querySelector()` (seleciona o primeiro elemento que corresponde a um seletor CSS) e `document.querySelectorAll()` (seleciona todos os elementos que correspondem a um seletor CSS)."
Como modificar o conteúdo de um elemento HTML usando JavaScript?,"O conteúdo de um elemento HTML pode ser modificado usando propriedades como `textContent` (define ou retorna o conteúdo de texto de um nó e seus descendentes), `innerHTML` (define ou retorna o conteúdo HTML de um elemento) e `outerHTML` (define ou retorna o elemento HTML, incluindo o elemento em si)."
Como adicionar ou remover atributos de um elemento HTML usando JavaScript?,"Atributos podem ser adicionados usando `setAttribute(name, value)` e removidos usando `removeAttribute(name)`. Também pode-se acessar atributos diretamente como propriedades do elemento, como `element.id = ""newId""`."
Como adicionar ou remover classes CSS de um elemento HTML usando JavaScript?,"Classes CSS podem ser adicionadas usando `element.classList.add(className)`, removidas usando `element.classList.remove(className)` e verificadas usando `element.classList.contains(className)`."
O que são eventos em JavaScript e como eles funcionam?,"Eventos são ações ou ocorrências que acontecem no navegador, como cliques, carregamento de páginas, envio de formulários. O JavaScript permite ouvir esses eventos e executar código em resposta a eles (manipuladores de eventos)."
O que é o objeto `event` passado para um manipulador de evento?,"O objeto `event` contém informações sobre o evento que ocorreu, como o elemento que disparou o evento (`event.target`), as coordenadas do mouse (`event.clientX`, `event.clientY`), e o tipo de evento (`event.type`)."
O que é o bubbling de eventos e como ele funciona?,"Bubbling de eventos é o processo em que um evento disparado em um elemento se propaga para seus elementos pais na hierarquia do DOM, acionando os manipuladores de eventos associados a esses elementos pais."
O que é o capturing de eventos e como ele difere do bubbling?,"Capturing de eventos é o processo oposto ao bubbling. O evento é primeiro capturado pelo elemento mais externo e, em seguida, se propaga para os elementos filhos até atingir o elemento alvo. É menos comum que bubbling."
Como parar a propagação de um evento em JavaScript?,A propagação de um evento pode ser interrompida usando o método `event.stopPropagation()`. Isso impede que o evento se propague para os elementos pais na hierarquia do DOM.
O que é o objeto `console` em JavaScript e como ele é usado?,"O objeto `console` fornece acesso ao console de depuração do navegador. Ele é usado para exibir mensagens de log, erros, avisos e outras informações úteis para o desenvolvimento e depuração de código JavaScript. Métodos comuns incluem `console.log()`, `console.error()`, `console.warn()`, `console.table()`."
O que são funções de callback em JavaScript?,"Funções de callback são funções passadas como argumentos para outras funções, para serem executadas em um momento posterior, geralmente após a conclusão de uma operação assíncrona."
Explique o conceito de funções de ordem superior em JavaScript.,"Funções de ordem superior são funções que podem receber outras funções como argumentos ou retornar funções como resultados. Isso permite criar abstrações poderosas e reutilizar código de forma flexível.  Exemplos incluem `map`, `filter` e `reduce`."
O que são promessas em JavaScript e como elas são usadas para lidar com operações assíncronas?,"Promessas são objetos que representam o resultado eventual de uma operação assíncrona. Elas podem estar em um dos três estados: `pendente`, `cumprida` ou `rejeitada`. As promessas facilitam o encadeamento de operações assíncronas e o tratamento de erros de forma mais elegante que callbacks."
"Como usar os métodos `then()`, `catch()` e `finally()` com promessas?",O método `then()` é usado para lidar com o resultado de uma promessa cumprida. O método `catch()` é usado para lidar com erros ou rejeições de uma promessa. O método `finally()` é executado independentemente de a promessa ser cumprida ou rejeitada.
O que é `async/await` em JavaScript e como ele simplifica o tratamento de promessas?,"`async/await` é uma sintaxe que facilita a escrita de código assíncrono em JavaScript. A palavra-chave `async` transforma uma função em uma função assíncrona, e a palavra-chave `await` pausa a execução da função até que uma promessa seja cumprida, retornando o resultado da promessa. Isso torna o código assíncrono mais legível e semelhante ao código síncrono."
Como lidar com erros em funções `async/await`?,"Erros em funções `async/await` podem ser tratados usando blocos `try...catch`. O código que pode gerar um erro é colocado dentro do bloco `try`, e o código para lidar com o erro é colocado dentro do bloco `catch`."
O que é o `JSON` (JavaScript Object Notation) e como ele é usado em JavaScript?,"JSON é um formato de dados leve e fácil de ler usado para representar estruturas de dados simples e objetos em texto. Em JavaScript, JSON é usado para trocar dados entre o servidor e o cliente, geralmente em APIs web."
Como converter um objeto JavaScript em uma string JSON e vice-versa?,"Para converter um objeto JavaScript em uma string JSON, usa-se o método `JSON.stringify(object)`. Para converter uma string JSON em um objeto JavaScript, usa-se o método `JSON.parse(string)`."
O que é o `localStorage` e `sessionStorage` em JavaScript e qual a diferença entre eles?,"`localStorage` e `sessionStorage` são APIs de armazenamento web que permitem armazenar dados localmente no navegador do usuário. `localStorage` armazena os dados indefinidamente, a menos que sejam explicitamente removidos. `sessionStorage` armazena os dados apenas durante a sessão do navegador, e os dados são removidos quando a janela ou aba é fechada."
Como armazenar e recuperar dados do `localStorage` e `sessionStorage`?,"Para armazenar dados, usa-se o método `localStorage.setItem(key, value)` ou `sessionStorage.setItem(key, value)`. Para recuperar dados, usa-se o método `localStorage.getItem(key)` ou `sessionStorage.getItem(key)`."
Como definir e ler cookies em JavaScript?,"Cookies são definidos usando a propriedade `document.cookie`, atribuindo uma string que contém o nome, o valor e outros atributos do cookie.  Cookies são lidos usando a mesma propriedade, que retorna uma string contendo todos os cookies separados por ponto e vírgula. É necessário analisar essa string para obter os valores individuais."
Qual a diferença entre `setInterval()` e `setTimeout()` em JavaScript?,"`setInterval()` executa uma função repetidamente em intervalos de tempo especificados, enquanto `setTimeout()` executa uma função apenas uma vez após um determinado período de tempo."
O que é uma expressão regular (regex) em JavaScript e para que ela é usada?,"Uma expressão regular é um padrão usado para corresponder a combinações de caracteres em strings. Elas são usadas para validar entradas, pesquisar, substituir e extrair texto de strings."
Quais são alguns metacaracteres comuns usados em expressões regulares e o que eles significam?,"Alguns metacaracteres comuns incluem: `.` (qualquer caractere), `*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `^` (início da string), `$` (fim da string), `[]` (conjunto de caracteres), `\d` (dígito), `\w` (caractere alfanumérico)."
Como usar os métodos `test()` e `exec()` com expressões regulares?,"O método `test()` retorna `true` se a expressão regular encontrar uma correspondência na string, e `false` caso contrário. O método `exec()` retorna um array com informações sobre a correspondência ou `null` se não houver correspondência."
O que são grupos de captura em expressões regulares e como eles são usados?,Grupos de captura são partes de uma expressão regular delimitadas por parênteses `()`. Eles permitem extrair partes específicas de uma string que corresponde ao padrão. O resultado dos grupos de captura é retornado pelo método `exec()` no array de resultados.
O que é o modo global (`g`) em expressões regulares e como ele afeta a busca?,"O modo global (`g`) indica que a expressão regular deve encontrar todas as correspondências na string, em vez de parar na primeira correspondência. Sem o modo global, o método `exec()` retorna apenas a primeira correspondência."
O que é o modo case-insensitive (`i`) em expressões regulares e como ele afeta a busca?,O modo case-insensitive (`i`) indica que a expressão regular deve ignorar a diferença entre letras maiúsculas e minúsculas durante a busca.
O que é o método `String.prototype.replace()` e como ele pode ser usado com expressões regulares?,O método `replace()` substitui uma parte de uma string por outra string ou por um valor retornado por uma função. Ele pode ser usado com uma string literal ou com uma expressão regular para encontrar e substituir correspondências.
Explique o conceito de escopo léxico (static scope) em JavaScript.,"Escopo léxico significa que o escopo de uma variável é determinado pela sua posição no código fonte, e não pelo contexto de execução. Isso permite que as funções acessem variáveis definidas em seus escopos pais, mesmo após o escopo pai ter terminado de ser executado (closures)."
"Qual a diferença entre escopo global, escopo de função e escopo de bloco em JavaScript?","Escopo global se refere às variáveis declaradas fora de qualquer função ou bloco, acessíveis de qualquer lugar no código. Escopo de função se refere às variáveis declaradas dentro de uma função, acessíveis apenas dentro dessa função. Escopo de bloco (introduzido com `let` e `const`) se refere às variáveis declaradas dentro de um bloco (delimitado por chaves `{}`), acessíveis apenas dentro desse bloco."
"O que é o modo estrito (`""use strict""`) em JavaScript e quais seus benefícios?","O modo estrito é um recurso do JavaScript que impõe regras mais rígidas para o código, ajudando a prevenir erros comuns e a tornar o código mais seguro e eficiente. Ele é ativado adicionando a string `""use strict""` no início de um arquivo JavaScript ou de uma função."
Quais são algumas das restrições impostas pelo modo estrito?,"Algumas restrições incluem: atribuições a variáveis não declaradas geram erros, atribuições a propriedades somente leitura geram erros, tentativas de deletar variáveis ou funções declaradas com `var` geram erros, o uso de `with` não é permitido, o objeto `this` dentro de funções não ligadas é `undefined`."
O que é uma IIFE (Immediately Invoked Function Expression) em JavaScript e qual seu propósito?,Uma IIFE é uma função anônima que é definida e executada imediatamente. Seu propósito principal é criar um escopo isolado para evitar conflitos de nomes com variáveis globais e proteger o código de interferências externas.
O que é o operador `void` em JavaScript e qual seu propósito?,"O operador `void` avalia uma expressão e retorna `undefined`. Ele é usado para garantir que uma expressão não retorne um valor, por exemplo, ao usar um link que não deve navegar para outra página."
O que são variáveis do tipo Symbol em JavaScript e qual seu propósito?,Symbols são um tipo de dado primitivo que representa um identificador único. Eles são usados para criar propriedades de objeto que são privadas e não podem ser acessadas ou sobrescritas por acidente.
O que são iterators e generators em JavaScript e como eles são usados?,"Iterators são objetos que permitem percorrer uma coleção de dados, um elemento por vez. Generators são funções que podem pausar e retomar sua execução, produzindo uma série de valores ao longo do tempo. Eles são usados para implementar iterators e para lidar com dados assíncronos de forma mais eficiente."
O que é o operador `yield` em JavaScript e como ele é usado em generators?,"O operador `yield` é usado dentro de uma função generator para pausar a execução da função e retornar um valor. Quando a função generator é retomada, a execução continua a partir do ponto onde o `yield` foi encontrado."
O que é um Map em JavaScript e como ele difere de um objeto regular?,"Um Map é uma coleção de pares chave-valor onde as chaves podem ser de qualquer tipo de dado (incluindo objetos e funções), ao contrário de objetos regulares onde as chaves são sempre strings ou Symbols. Maps também mantêm a ordem de inserção das chaves."
O que é um Set em JavaScript e como ele difere de um array?,"Um Set é uma coleção de valores únicos. Ao contrário de um array, um Set não permite valores duplicados. Sets também oferecem métodos mais eficientes para verificar a presença de um valor e para remover valores."
O que é o método `Object.freeze()` em JavaScript e qual seu propósito?,"O método `Object.freeze()` congela um objeto, impedindo que novas propriedades sejam adicionadas, propriedades existentes sejam removidas ou alteradas, e a prototipagem do objeto não pode ser alterada. O objeto congelado permanece imutável."
O que é o método `Object.seal()` em JavaScript e qual seu propósito?,"O método `Object.seal()` sela um objeto, impedindo que novas propriedades sejam adicionadas ou removidas, mas permite que os valores das propriedades existentes sejam alterados, desde que a propriedade seja configurável inicialmente."
O que é o método `Object.assign()` em JavaScript e como ele funciona?,O método `Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto destino. Ele retorna o objeto destino. Ele realiza uma cópia superficial das propriedades.
O que é o método `Object.entries()` em JavaScript e como ele funciona?,"O método `Object.entries()` retorna um array de arrays, onde cada array interno contém um par chave-valor do objeto."
O que é o método `Object.keys()` em JavaScript e como ele funciona?,O método `Object.keys()` retorna um array contendo os nomes de todas as propriedades enumeráveis de um objeto.
O que é o método `Object.values()` em JavaScript e como ele funciona?,O método `Object.values()` retorna um array contendo os valores de todas as propriedades enumeráveis de um objeto.
Explique o conceito de currying em JavaScript.,"Currying é uma técnica em que uma função que recebe múltiplos argumentos é transformada em uma sequência de funções que recebem um único argumento cada vez. Cada função retorna a próxima função na sequência, até que todos os argumentos tenham sido fornecidos, momento em que a função original é executada."
O que é memoization em JavaScript e como ela pode ser usada para otimizar funções?,"Memoization é uma técnica de otimização em que os resultados de uma função são armazenados em cache para que possam ser reutilizados posteriormente, em vez de serem recalculados. Isso é especialmente útil para funções que são chamadas repetidamente com os mesmos argumentos e que são computacionalmente caras."
O que é o operador `in` em JavaScript e como ele é usado?,"O operador `in` verifica se uma propriedade existe em um objeto. Ele retorna `true` se a propriedade existe (seja como propriedade direta ou herdada), e `false` caso contrário."
O que é o operador `instanceof` em JavaScript e como ele é usado?,"O operador `instanceof` verifica se um objeto é uma instância de uma determinada classe ou construtor. Ele retorna `true` se o objeto é uma instância da classe, e `false` caso contrário."
O que é o método `Array.isArray()` em JavaScript e como ele é usado?,"O método `Array.isArray()` verifica se um valor é um array. Ele retorna `true` se o valor é um array, e `false` caso contrário. É uma forma mais confiável de verificar se um valor é um array do que usar `typeof`."
O que é o método `String.prototype.trim()` em JavaScript e como ele é usado?,O método `trim()` remove os espaços em branco do início e do final de uma string. Ele retorna uma nova string com os espaços em branco removidos.
O que é o método `String.prototype.toUpperCase()` em JavaScript e como ele é usado?,O método `toUpperCase()` converte todos os caracteres de uma string para maiúsculas. Ele retorna uma nova string com todos os caracteres em maiúsculas.
O que é o método `String.prototype.toLowerCase()` em JavaScript e como ele é usado?,O método `toLowerCase()` converte todos os caracteres de uma string para minúsculas. Ele retorna uma nova string com todos os caracteres em minúsculas.
O que é o método `String.prototype.substring()` em JavaScript e como ele é usado?,O método `substring()` retorna uma parte de uma string entre dois índices especificados. Ele retorna uma nova string contendo os caracteres entre os índices (exclusivo o caractere no índice final).
O que é o método `String.prototype.slice()` em JavaScript e como ele é usado?,"O método `slice()` retorna uma seção de uma string. É semelhante ao `substring`, mas aceita índices negativos (que contam a partir do final da string)."
Qual a diferença entre `String.prototype.substring()` e `String.prototype.slice()` em JavaScript?,"A principal diferença é que `slice` aceita índices negativos para fatiar a string a partir do final, enquanto `substring` não interpreta índices negativos."
O que é o método `String.prototype.split()` em JavaScript e como ele é usado?,"O método `split()` divide uma string em um array de substrings, com base em um separador especificado. O separador pode ser uma string ou uma expressão regular."
O que é o método `Array.prototype.join()` em JavaScript e como ele é usado?,"O método `join()` junta todos os elementos de um array em uma string, usando um separador especificado. O separador pode ser uma string."
O que é o método `Array.prototype.push()` em JavaScript e como ele é usado?,O método `push()` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
O que é o método `Array.prototype.pop()` em JavaScript e como ele é usado?,O método `pop()` remove o último elemento de um array e retorna esse elemento. Ele modifica o array original.
O que é o método `Array.prototype.shift()` em JavaScript e como ele é usado?,O método `shift()` remove o primeiro elemento de um array e retorna esse elemento. Ele modifica o array original.
O que é o método `Array.prototype.unshift()` em JavaScript e como ele é usado?,O método `unshift()` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array. Ele modifica o array original.
O que é o método `Array.prototype.splice()` em JavaScript e como ele é usado?,O método `splice()` remove ou substitui elementos existentes em um array e/ou adiciona novos elementos no lugar. Ele modifica o array original e retorna um array contendo os elementos removidos.
O que é o método `Array.prototype.concat()` em JavaScript e como ele é usado?,"O método `concat()` cria um novo array contendo os elementos do array no qual foi chamado, seguido pelos elementos de cada um dos outros arrays fornecidos como argumentos. Ele não modifica o array original."
O que é o método `Array.prototype.sort()` em JavaScript e como ele funciona?,"O método `sort()` ordena os elementos de um array no lugar e retorna o array ordenado. Por padrão, ele ordena os elementos como strings, então é necessário fornecer uma função de comparação para ordenar números corretamente."
O que é o método `Array.prototype.reverse()` em JavaScript e como ele é usado?,O método `reverse()` inverte a ordem dos elementos em um array no lugar e retorna o array invertido. Ele modifica o array original.
O que é o método `Array.prototype.indexOf()` em JavaScript e como ele é usado?,"O método `indexOf()` retorna o primeiro índice em que um dado elemento pode ser encontrado no array, ou -1 se ele não estiver presente."
O que é o método `Array.prototype.lastIndexOf()` em JavaScript e como ele é usado?,"O método `lastIndexOf()` retorna o último índice em que um dado elemento pode ser encontrado no array, ou -1 se ele não estiver presente."
O que é o método `Array.prototype.includes()` em JavaScript e como ele é usado?,"O método `includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado."
O que é o método `Math.random()` em JavaScript e como ele é usado?,"O método `Math.random()` retorna um número pseudoaleatório de ponto flutuante, no intervalo de 0 (inclusivo) até, mas não incluindo, 1 (exclusivo)."
O que é o método `Math.floor()` em JavaScript e como ele é usado?,O método `Math.floor()` retorna o maior inteiro que é menor ou igual a um dado número.
O que é o método `Math.ceil()` em JavaScript e como ele é usado?,O método `Math.ceil()` retorna o menor inteiro que é maior ou igual a um dado número.
O que é o método `Math.round()` em JavaScript e como ele é usado?,O método `Math.round()` retorna o valor de um número arredondado para o inteiro mais próximo.
O que é o método `Date.now()` em JavaScript e como ele é usado?,O método `Date.now()` retorna o número de milissegundos decorridos desde 1 de janeiro de 1970 00:00:00 UTC.
Como criar um objeto Date em JavaScript?,"Um objeto Date pode ser criado usando o construtor `new Date()`. Ele pode ser criado sem argumentos (retorna a data e hora atual), com um argumento (um timestamp em milissegundos), ou com múltiplos argumentos (ano, mês, dia, hora, minuto, segundo, milissegundo)."
"Como obter o ano, mês, dia, hora, minuto, segundo e milissegundo de um objeto Date em JavaScript?","Métodos como `getFullYear()`, `getMonth()`, `getDate()`, `getHours()`, `getMinutes()`, `getSeconds()` e `getMilliseconds()` são usados para obter as respectivas partes de um objeto Date."
O que são template strings com tagged templates em JavaScript e como eles são usados?,"Tagged templates são uma forma avançada de template strings onde uma função pode ser usada para processar o template string. A função recebe o array de strings literais e os valores das expressões interpoladas como argumentos, permitindo a manipulação personalizada do template string."
O que são destructuring assignments em JavaScript e como eles são usados?,Destructuring assignments são uma sintaxe que permite extrair valores de objetos ou arrays e atribuí-los a variáveis de forma concisa.
O que são parâmetros rest em JavaScript e como eles são usados?,Parâmetros rest (usando a sintaxe `...args`) permitem que uma função receba um número variável de argumentos como um array. Eles devem ser o último parâmetro na lista de parâmetros da função.
O que são parâmetros default em JavaScript e como eles são usados?,"Parâmetros default permitem especificar um valor padrão para um parâmetro de função, que será usado se o argumento correspondente não for fornecido quando a função for chamada."
O que são computed property names em JavaScript e como eles são usados?,Computed property names permitem usar expressões dentro de colchetes `[]` para definir o nome de uma propriedade de objeto dinamicamente.
O que é uma função generator assíncrona em JavaScript e como ela é usada?,"Uma função generator assíncrona é uma combinação de função assíncrona e função generator. Ela permite produzir valores assíncronos um por um, usando `yield` e `await` dentro da função."
O que é o operador `??` (nullish coalescing operator) em JavaScript e como ele é usado?,"O operador `??` retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`. Ele é diferente do operador `||` que retorna o operando da direita quando o operando da esquerda é falsy (null, undefined, 0, '', false)."
O que é o operador `?.` (optional chaining operator) em JavaScript e como ele é usado?,O operador `?.` permite acessar propriedades de um objeto sem causar um erro se uma propriedade intermediária for `null` ou `undefined`. Ele retorna `undefined` se uma propriedade na cadeia for `null` ou `undefined`.
O que são WeakMaps e WeakSets em JavaScript e como eles diferem de Maps e Sets?,"WeakMaps e WeakSets são versões fracas de Maps e Sets. As chaves de WeakMaps devem ser objetos, e os valores de WeakSets também devem ser objetos. A principal diferença é que as chaves de WeakMaps e os valores de WeakSets não impedem que os objetos sejam coletados pelo coletor de lixo (garbage collector) se não houver outras referências a eles."
O que são Proxies em JavaScript e como eles são usados?,Proxies permitem interceptar e personalizar operações
"O que é ""hoisting"" em JavaScript e como ele funciona?","Hoisting é um comportamento do JavaScript onde declarações de variáveis (com `var`) e funções são movidas para o topo de seu escopo antes da execução do código. No entanto, apenas a declaração é movida, não a inicialização (no caso de `var`)."
Como você impede que um evento padrão do navegador ocorra?,Usando o método `event.preventDefault()` dentro da função que manipula o evento.
O que é o escopo léxico (ou estático) em JavaScript?,O escopo léxico significa que o escopo de uma variável em JavaScript é determinado por sua posição no código fonte.
Qual a finalidade do método `bind()` em JavaScript?,"`bind()` cria uma nova função que, quando chamada, tem sua palavra-chave `this` definida para o valor fornecido."
"O que é uma ""closure"" em JavaScript?","Uma closure é uma função que tem acesso ao escopo de outra função, mesmo após a função externa ter retornado."
"O que é a ""cadeia de protótipos"" em JavaScript?","É o mecanismo pelo qual os objetos JavaScript herdam propriedades de outros objetos. Cada objeto tem um protótipo, e quando uma propriedade não é encontrada no objeto, o JavaScript procura no protótipo e assim por diante."
Como você cria uma cópia superficial (shallow copy) de um objeto em JavaScript?,"Usando `Object.assign({}, objeto)` ou o operador spread `...objeto`."
Como você seleciona um elemento HTML pelo seu ID usando JavaScript?,"Usando `document.getElementById(""idDoElemento"")`."
"O que é um ""template literal"" em JavaScript?","São strings que permitem a incorporação de expressões JavaScript dentro delas, usando a sintaxe `${expressao}`.  São delimitadas por crases (` `)."
Qual a finalidade do método `map()` em arrays?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
"O que é uma função ""arrow"" em JavaScript?","É uma forma mais concisa de escrever funções, com sintaxe mais curta e sem a sua própria palavra-chave `this` (herdando o `this` do contexto circundante)."
Como você converte uma string em um número em JavaScript?,"Usando `parseInt()`, `parseFloat()` ou o operador unário `+`."
O que é JSON e como você o usa em JavaScript?,"JSON (JavaScript Object Notation) é um formato de dados leve, usado para transmitir dados entre um servidor e um cliente. Em JavaScript, você usa `JSON.stringify()` para converter um objeto JavaScript em uma string JSON e `JSON.parse()` para converter uma string JSON de volta em um objeto JavaScript."
O que é o evento `DOMContentLoaded`?,"É um evento disparado quando o HTML inicial foi completamente carregado e analisado, sem esperar que as folhas de estilo, imagens e subframes terminem de carregar."
Qual a diferença entre os métodos `push()` e `unshift()` em arrays?,"`push()` adiciona um ou mais elementos ao final de um array, enquanto `unshift()` adiciona um ou mais elementos ao início do array."
Como você remove um elemento de um array em JavaScript?,"Usando o método `splice(indice, numeroDeElementos)` para remover um elemento em um índice específico ou o método `filter()` para criar um novo array sem o elemento que você deseja remover."
O que é uma função recursiva?,Uma função recursiva é uma função que chama a si mesma dentro de sua definição.
Qual a finalidade do operador ternário em JavaScript?,O operador ternário ( `condicao ? valorSeVerdadeiro : valorSeFalso` ) é uma forma concisa de escrever uma instrução `if...else`.
"O que são ""truthy"" e ""falsy"" values em JavaScript?","São valores que são avaliados como `true` ou `false` em um contexto booleano. Falsy values incluem: `false`, `0`, `""""`, `null`, `undefined`, e `NaN`. Todos os outros valores são truthy."
Como você interrompe a execução de um loop em JavaScript?,Usando a instrução `break`.
Qual a finalidade do método `reduce()` em arrays?,`reduce()` aplica uma função a um acumulador e a cada valor de um array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o método `forEach()` em arrays?,`forEach()` executa uma função fornecida uma vez para cada elemento em um array.
O que é uma Promise em JavaScript?,"Uma Promise é um objeto que representa a eventual conclusão (ou falha) de uma operação assíncrona, e seu valor resultante."
"O que é o padrão de projeto ""Module"" em JavaScript?","É um padrão para organizar o código, encapsulando variáveis e funções dentro de um escopo privado, expondo apenas uma interface pública."
Como você declara uma função anônima em JavaScript?,`function() { // código }` ou `() => { // código }` (arrow function).
"O que é o operador ""rest"" em JavaScript?",O operador rest ( `...` ) permite que uma função aceite um número indefinido de argumentos como um array.
"O que é o operador ""spread"" em JavaScript?",O operador spread ( `...` ) permite expandir um iterável (como um array ou string) em locais onde se espera múltiplos argumentos ou elementos.
Como você converte um objeto em uma string em JavaScript?,Usando `JSON.stringify(objeto)` ou `objeto.toString()`.
O que é o método `includes()` em strings e arrays?,"`includes()` determina se um array inclui um determinado elemento, retornando `true` ou `false`. Funciona de forma semelhante para strings, verificando se uma substring está presente."
Qual a diferença entre `slice()` e `splice()` em arrays?,"`slice()` retorna uma cópia de uma parte do array sem modificar o original, enquanto `splice()` modifica o array original removendo ou substituindo elementos."
O que é o método `find()` em arrays?,"`find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
O que é o método `findIndex()` em arrays?,"`findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1."
Como você verifica se uma propriedade existe em um objeto?,"Usando o operador `in` ( `""propriedade"" in objeto` ) ou o método `hasOwnProperty()` ( `objeto.hasOwnProperty(""propriedade"")` )."
"O que é o ""event bubbling"" em JavaScript?",É o processo no qual um evento acionado em um elemento filho se propaga para seus elementos pais na hierarquia do DOM.
"Como você interrompe o ""event bubbling""?",Usando o método `event.stopPropagation()` dentro do manipulador de eventos.
"O que é ""event capturing""?","É o oposto de ""event bubbling"". Em vez de começar no elemento alvo e subir na árvore DOM, o event capturing começa no elemento raiz e desce até o elemento alvo."
Como você obtém a largura e a altura da janela do navegador em JavaScript?,Usando `window.innerWidth` e `window.innerHeight` (para a área visível) ou `document.documentElement.clientWidth` e `document.documentElement.clientHeight`.
Como você redireciona o usuário para outra página em JavaScript?,"Usando `window.location.href = ""url""`."
Como você imprime mensagens no console do navegador em JavaScript?,"Usando `console.log()`, `console.warn()`, `console.error()`, `console.table()`, etc."
"O que são ""cookies"" em JavaScript?",São pequenos arquivos de texto que os sites armazenam no computador do usuário para lembrar informações sobre ele.
Como você define um cookie usando JavaScript?,"Usando `document.cookie = ""nome=valor; expires=data; path=/"";`."
Como você lê um cookie usando JavaScript?,"Acessando `document.cookie`, que retorna uma string contendo todos os cookies."
O que é o localStorage e sessionStorage?,"São APIs para armazenar dados no navegador do usuário. `localStorage` armazena dados sem data de expiração, enquanto `sessionStorage` armazena dados apenas durante a sessão do navegador."
Como você define um valor no localStorage?,"Usando `localStorage.setItem(""chave"", ""valor"")`."
Como você obtém um valor do localStorage?,"Usando `localStorage.getItem(""chave"")`."
O que é uma expressão regular (regex) em JavaScript?,É um padrão para combinar sequências de caracteres em uma string.
Como você testa se uma string corresponde a uma expressão regular?,"Usando o método `test()` da expressão regular ( `regex.test(""string"")` ) ou o método `search()` da string ( `""string"".search(regex)` )."
"O que são ""capturing groups"" em expressões regulares?","São partes do padrão que são capturadas e podem ser referenciadas posteriormente (por exemplo, para substituição)."
"O que são ""flags"" em expressões regulares?","São modificadores que alteram o comportamento da expressão regular, como `i` (ignorar maiúsculas/minúsculas), `g` (global, encontrar todas as correspondências) e `m` (multiline)."
O que é a função `eval()` em JavaScript?,"É uma função que avalia uma string como código JavaScript. **Evite usá-la**, pois pode ser perigosa em termos de segurança e desempenho."
"O que é ""type coercion"" em JavaScript?",É a conversão automática de um tipo de dado para outro pelo JavaScript.
"O que é o ""strict mode"" em JavaScript?","É um modo que impõe regras mais rígidas ao código JavaScript, ajudando a prevenir erros comuns e melhorar a segurança. Você ativa colocando `""use strict"";` no início do arquivo ou da função."
O que é o método `Object.freeze()`?,Impede que novas propriedades sejam adicionadas e que as propriedades existentes sejam removidas ou alteradas.
O que é o método `Object.seal()`?,"Impede que novas propriedades sejam adicionadas ou removidas, mas permite que os valores das propriedades existentes sejam alterados."
Como você escreve um comentário de uma linha em JavaScript?,Usando `// Este é um comentário de uma linha`.
Como você escreve um comentário de múltiplas linhas em JavaScript?,Usando `/* Este é um comentário de múltiplas linhas */`.
"O que é ""feature detection"" em JavaScript?",É a prática de verificar se o navegador suporta um determinado recurso antes de usá-lo.
O que é o método `isNaN()`?,É uma função que testa se um valor é `NaN` (Not-a-Number).
Qual a diferença entre usar `+` para concatenar strings e template literals?,"O operador `+` requer concatenação explícita, enquanto template literals permitem a incorporação de variáveis diretamente na string usando `${variavel}`, tornando o código mais legível."
Como você arredonda um número para o inteiro inferior em JavaScript?,Usando `Math.floor(numero)`.
Como você arredonda um número para o inteiro superior em JavaScript?,Usando `Math.ceil(numero)`.
"O que é um ""Symbol"" em JavaScript?",É um tipo de dado primitivo que representa um identificador único e imutável.
"O que são ""Iterators"" e ""Iterables"" em JavaScript?","Um ""Iterable"" é um objeto que pode ser iterado (por exemplo, arrays, strings, maps, sets). Um ""Iterator"" é um objeto que define uma sequência e retorna um valor por vez usando o método `next()`."
"O que são ""Generators"" em JavaScript?","São funções que podem ser pausadas e retomadas, permitindo a criação de iterators personalizados."
Como você declara uma função Generator em JavaScript?,Usando a sintaxe `function* nomeDaFuncao() { yield valor; }`.
O que é o método `yield` em funções Generator?,Pausa a execução da função Generator e retorna um valor.
Como você adiciona um elemento a um Set?,Usando o método `add(valor)`.
Como você obtém um valor de um Map?,Usando o método `get(chave)`.
Como você define um valor em um Map?,"Usando o método `set(chave, valor)`."
Como você remove um elemento de um Set?,Usando o método `delete(valor)`.
Como você verifica se um Set contém um determinado valor?,Usando o método `has(valor)`.
Como você verifica se um Map contém uma determinada chave?,Usando o método `has(chave)`.
"O que é ""destructuring"" em JavaScript?",É uma forma de extrair valores de objetos ou arrays e atribuí-los a variáveis.
Como você faz destructuring de um objeto?,"`const { propriedade1, propriedade2 } = objeto;`."
Como você faz destructuring de um array?,"`const [elemento1, elemento2] = array;`."
"O que são ""default parameters"" em funções JavaScript?",São valores padrão atribuídos a parâmetros de função se nenhum valor for fornecido quando a função é chamada.
Como você define um default parameter em uma função JavaScript?,`function minhaFuncao(parametro = valorPadrao) { ... }`.
O que é o método `Object.entries()`?,Retorna um array de pares chave-valor de um determinado objeto.
O que é o método `Object.keys()`?,Retorna um array com as chaves de um determinado objeto.
O que é o método `Object.values()`?,Retorna um array com os valores de um determinado objeto.
Qual a diferença entre o operador `||` (OR) e o operador `??` (Nullish Coalescing)?,"`||` retorna o operando do lado direito se o operando do lado esquerdo for falsy (incluindo `0`, `""""`, `false`), enquanto `??` retorna o operando do lado direito apenas se o operando do lado esquerdo for `null` ou `undefined`."
O que é o operador `?.` (Optional Chaining) em JavaScript?,Permite acessar propriedades de um objeto que podem ser `null` ou `undefined` sem causar um erro. Retorna `undefined` se a propriedade não existir.
O que é o método `padStart()` em strings?,Preenche o início de uma string com um caractere especificado até que atinja um determinado comprimento.
O que é o método `padEnd()` em strings?,Preenche o final de uma string com um caractere especificado até que atinja um determinado comprimento.
Como você formata números em JavaScript?,Usando o método `toLocaleString()` ou `Intl.NumberFormat()`.
O que é o objeto `WeakSet` em JavaScript?,"É uma coleção de objetos fracamente referenciados. Se não houver outras referências a um objeto no `WeakSet`, o garbage collector pode removê-lo."
O que é o objeto `WeakMap` em JavaScript?,"É uma coleção de pares chave-valor onde as chaves são objetos fracamente referenciados. Se não houver outras referências a uma chave, o par chave-valor pode ser removido pelo garbage collector."
O que é o método `requestAnimationFrame()`?,É um método que solicita ao navegador para chamar uma função antes do próximo repaint. Usado para criar animações suaves.
"O que é um ""proxy"" em JavaScript?",Um Proxy é um objeto que permite interceptar e customizar operações fundamentais em outro objeto (o alvo).
Quais são as principais armadilhas (gotchas) em JavaScript que os desenvolvedores devem evitar?,"Algumas armadilhas comuns incluem:  a confusão entre `==` e `===`, o comportamento do `this` em diferentes contextos, o hoisting de variáveis, a falta de tratamento adequado de erros, o uso incorreto de closures,  a mutabilidade de objetos e arrays, e a falta de compreensão de como as Promises funcionam."
"O que é um ""polyfill"" em JavaScript?",Um polyfill é um código que fornece funcionalidade que não está nativamente disponível em navegadores mais antigos. Permite que você use recursos mais modernos mesmo em ambientes que não os suportam.
Como você exporta e importa módulos em JavaScript (usando ES modules)?,"Para exportar: `export { variavel, funcao };` ou `export default funcao;`.  Para importar: `import { variavel, funcao } from './modulo.js';` ou `import funcao from './modulo.js';`."
"O que é ""tree shaking"" e como ele se relaciona com módulos JavaScript?","Tree shaking é um processo usado por bundlers (como Webpack) para remover código não utilizado de seus pacotes JavaScript. Ele se beneficia da estrutura modular do ES modules, onde apenas as partes explicitamente importadas são incluídas no pacote final."
"O que são ""Tagged Templates""?",São uma forma avançada de template literals que permitem que você processe o template literal com uma função.  A função recebe um array com as partes estáticas da string e um array com os valores das expressões.
O que é o método `finally()` em Promises?,"O método `finally()` é chamado quando a promise é resolvida (fulfilled) ou rejeitada. Ele serve para executar código de limpeza, independentemente do resultado da promise."
O que é o padrão Observer?,O padrão Observer é um padrão de design onde um objeto (o Subject) mantém uma lista de seus dependentes (Observers) e notifica-os automaticamente sobre quaisquer mudanças de estado.
"Explique o conceito de ""Memoization"" em JavaScript.","Memoization é uma técnica de otimização onde os resultados de chamadas de função ""caras"" (computacionalmente intensivas) são armazenados em cache e reutilizados quando a mesma entrada ocorre novamente."
Como você pode evitar a mutação direta de objetos e arrays em JavaScript (imutabilidade)?,"Usando técnicas como: `Object.assign({}, objeto)`, o operador spread `...` para cópias superficiais, bibliotecas como Immutable.js, ou criando cópias profundas (deep copies).

Espero que esta lista seja útil!  Avise se precisar de mais alguma coisa."
O que são closures em JavaScript e como eles funcionam?,"Closures são a capacidade de uma função interna de acessar e manipular variáveis do escopo da função externa, mesmo após a função externa ter terminado de executar. Isso acontece porque a função interna ""lembra"" o ambiente léxico em que foi criada.

**2.**"
Como funciona a delegação de eventos em JavaScript?,"Delegação de eventos envolve anexar um ouvinte de evento a um elemento pai, em vez de elementos filhos individuais. Quando um evento ocorre em um elemento filho, ele ""bolha"" para cima no DOM até o elemento pai, onde o ouvinte de evento é acionado.

**4.**"
O que é o hoisting em JavaScript?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis (usando `var`) e funções para o topo de seus respectivos escopos (global ou função) durante a fase de compilação.  A declaração é movida, mas a inicialização não.

**5.**"
Como funciona o método `bind()` em JavaScript?,"`bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido como argumento.  Ele também permite predefinir argumentos para a função.

**8.**"
O que é o uso de `this` em JavaScript?,"`this` refere-se ao objeto no qual a função está sendo executada. Seu valor depende de como a função é chamada. Pode se referir ao objeto global (window em navegadores), a um objeto específico, ou ser definido explicitamente com `call`, `apply` ou `bind`.

**10.**"
Como você pode evitar a poluição do escopo global em JavaScript?,"Usando funções auto-invocadas (IIFE - Immediately Invoked Function Expression), ou módulos, que criam um escopo local para as variáveis e funções.

**11.**"
O que é uma promessa (Promise) em JavaScript?,"Uma Promise é um objeto que representa a eventual conclusão (ou falha) de uma operação assíncrona e seu valor resultante. Ela tem três estados: `pending`, `fulfilled` e `rejected`.

**14.**"
Como você lida com erros em Promises usando `try...catch`?,"`try...catch` não captura erros em promises assíncronas. Erros em Promises são geralmente tratados usando os métodos `.catch()` ou `.then(null, errorHandler)`. `async/await` permite usar `try...catch` para promises.

**15.**"
"Qual a diferença entre `let`, `const` e `var` para declarar variáveis?","`var` tem escopo de função ou global. `let` tem escopo de bloco e permite reatribuição. `const` também tem escopo de bloco, mas não permite reatribuição (o valor não pode ser alterado após a atribuição inicial).

**16.**"
Como funciona o método `map()` em JavaScript?,"`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.

**18.**"
Como funciona o método `reduce()` em JavaScript?,"`reduce()` aplica uma função contra um acumulador e cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.

**20.**"
Como você pode verificar se um valor é um array em JavaScript?,"Usando `Array.isArray(valor)`.

**24.**"
O que é JSON em JavaScript?,"JSON (JavaScript Object Notation) é um formato de dados leve para troca de dados.  Ele é baseado em um subconjunto da linguagem JavaScript e é usado para representar dados estruturados como objetos e arrays.

**26.**"
Como você cria um objeto em JavaScript?,"Você pode criar um objeto usando literais de objeto (`{}`), funções construtoras ou a palavra-chave `class` (introduzida no ES6).

**31.**"
O que é um evento em JavaScript?,"Um evento é uma ação ou ocorrência que acontece no navegador, como um clique do mouse, o carregamento de uma página ou a digitação em um campo de texto.

**42.**"
Como você adiciona um ouvinte de evento a um elemento HTML usando JavaScript?,"Usando o método `element.addEventListener(event, function, useCapture)`.

**43.**"
O que é o objeto `event` em um ouvinte de evento?,"O objeto `event` contém informações sobre o evento que ocorreu, como o tipo de evento, o elemento que o disparou e as coordenadas do mouse.

**44.**"
Como você impede o comportamento padrão de um evento em JavaScript?,"Usando o método `event.preventDefault()`.

**45.**"
Como você interrompe a propagação de um evento no DOM usando JavaScript?,"Usando o método `event.stopPropagation()`.

**46.**"
O que são eventos de mouse em JavaScript?,"Eventos de mouse incluem eventos como `click`, `mousedown`, `mouseup`, `mouseover`, `mouseout`, `mousemove`.

**47.**"
O que são eventos de teclado em JavaScript?,"Eventos de teclado incluem eventos como `keydown`, `keyup`, `keypress`.

**48.**"
O que são eventos de formulário em JavaScript?,"Eventos de formulário incluem eventos como `submit`, `change`, `focus`, `blur`.

**49.**"
O que são eventos de janela em JavaScript?,"Eventos de janela incluem eventos como `load`, `resize`, `scroll`, `unload`.

**50.**"
Como você define um temporizador em JavaScript?,"Usando as funções `setTimeout()` e `setInterval()`.

**54.**"
Como você cancela um temporizador em JavaScript?,"Usando as funções `clearTimeout()` e `clearInterval()`.

**56.**"
O que é o armazenamento local (localStorage) em JavaScript?,"localStorage é um mecanismo de armazenamento web que permite armazenar dados no navegador do usuário de forma persistente (os dados permanecem mesmo após o fechamento do navegador).

**57.**"
O que é o armazenamento de sessão (sessionStorage) em JavaScript?,"sessionStorage é um mecanismo de armazenamento web que permite armazenar dados no navegador do usuário durante a duração da sessão (os dados são perdidos quando o navegador é fechado).

**58.**"
Como você armazena dados no localStorage?,"Usando o método `localStorage.setItem(key, value)`.

**59.**"
Como você recupera dados do localStorage?,"Usando o método `localStorage.getItem(key)`.

**60.**"
O que é o XMLHttpRequest (XHR) em JavaScript?,"XMLHttpRequest é um objeto que permite fazer requisições HTTP do navegador para um servidor sem recarregar a página.

**64.**"
Como você faz uma requisição GET usando XMLHttpRequest?,"Criando um objeto XMLHttpRequest, configurando-o com o método ""GET"" e a URL, e enviando a requisição.

**65.**"
Como você faz uma requisição POST usando XMLHttpRequest?,"Criando um objeto XMLHttpRequest, configurando-o com o método ""POST"" e a URL, definindo o cabeçalho Content-Type, e enviando a requisição com os dados no corpo da requisição.

**66.**"
O que é o estado `readyState` do objeto XMLHttpRequest?,"`readyState` representa o estado da requisição XMLHttpRequest. Os valores possíveis são: 0 (UNSENT), 1 (OPENED), 2 (HEADERS_RECEIVED), 3 (LOADING), 4 (DONE).

**67.**"
O que é o código de status HTTP retornado por uma requisição XMLHttpRequest?,"O código de status HTTP indica o resultado da requisição. Códigos comuns incluem 200 (OK), 404 (Not Found), 500 (Internal Server Error).

**68.**"
O que são as APIs Fetch em JavaScript?,"A Fetch API fornece uma interface para buscar recursos na rede. É uma alternativa mais moderna e poderosa ao XMLHttpRequest.

**69.**"
Como você faz uma requisição GET usando Fetch API?,"Usando a função `fetch(url)`.

**70.**"
Como você faz uma requisição POST usando Fetch API?,"Usando a função `fetch(url, { method: 'POST', body: data })`.

**71.**"
O que é o objeto `Response` retornado pela Fetch API?,"O objeto `Response` contém informações sobre a resposta do servidor, como o status, os cabeçalhos e o corpo da resposta.

**72.**"
Como você processa o corpo da resposta de uma requisição Fetch API?,"Usando métodos como `response.json()`, `response.text()`, `response.blob()`.

**73.**"
O que são async/await em JavaScript?,"`async/await` são palavras-chave que simplificam o trabalho com Promises, tornando o código assíncrono mais fácil de ler e escrever.

**74.**"
Como você declara uma função assíncrona em JavaScript?,"Usando a palavra-chave `async` antes da palavra-chave `function`.

**75.**"
Como você espera a resolução de uma Promise dentro de uma função assíncrona?,"Usando a palavra-chave `await` antes da Promise.

**76.**"
O que é o operador `?.` (optional chaining) em JavaScript?,"O operador optional chaining permite acessar propriedades de um objeto que podem ser nulas ou indefinidas sem causar um erro. Se uma propriedade no caminho for nula ou indefinida, a expressão retorna `undefined` em vez de lançar um erro.

**77.**"
O que é o operador `??` (nullish coalescing) em JavaScript?,"O operador nullish coalescing retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo.

**78.**"
O que são os métodos de array `every()` e `some()` em JavaScript?,"`every()` testa se todos os elementos em um array passam no teste implementado por uma função fornecida. `some()` testa se pelo menos um elemento no array passa no teste implementado por uma função fornecida.

**79.**"
O que são os getters e setters em JavaScript?,"Getters e setters são métodos especiais que permitem controlar o acesso e a modificação das propriedades de um objeto. Getters definem como uma propriedade é lida, e setters definem como uma propriedade é modificada.

**82.**"
Como você define um getter em um objeto JavaScript?,"Usando a palavra-chave `get` seguida do nome da propriedade e um bloco de código.

**83.**"
Como você define um setter em um objeto JavaScript?,"Usando a palavra-chave `set` seguida do nome da propriedade, um parâmetro para o novo valor e um bloco de código.

**84.**"
O que são os iteradores e iteráveis em JavaScript?,"Um iterável é um objeto que pode ser iterado, o que significa que seus elementos podem ser acessados sequencialmente. Um iterador é um objeto que define como iterar sobre um iterável.

**85.**"
Como você cria um iterador personalizado em JavaScript?,"Implementando um método `[Symbol.iterator]()` no objeto que retorna um objeto com um método `next()` que retorna um objeto com as propriedades `value` e `done`.

**86.**"
O que é o laço `for...of` em JavaScript?,"O laço `for...of` itera sobre os valores de um objeto iterável, como um array, string ou Map.

**87.**"
O que é o laço `for...in` em JavaScript?,"O laço `for...in` itera sobre os nomes das propriedades enumeráveis de um objeto.

**88.**"
O que são os objetos Map e Set em JavaScript?,"Map é uma coleção de pares chave-valor onde as chaves podem ser de qualquer tipo de dado. Set é uma coleção de valores únicos.

**89.**"
Qual a diferença entre um objeto Map e um objeto JavaScript regular?,"Map permite chaves de qualquer tipo de dado, mantém a ordem de inserção e tem métodos convenientes para adicionar, remover e verificar a existência de chaves. Objetos JavaScript regulares têm chaves que são strings ou símbolos e não garantem a ordem de inserção.

**90.**"
Como você adiciona um elemento a um objeto Set?,"Usando o método `set.add(value)`.

**91.**"
Como você verifica se um elemento existe em um objeto Set?,"Usando o método `set.has(value)`.

**92.**"
O que são os módulos ES6 em JavaScript?,"Módulos ES6 permitem dividir o código em arquivos separados, tornando-o mais organizado e reutilizável.

**93.**"
Como você importa um módulo ES6 em JavaScript?,"Usando a palavra-chave `import`.

**94.**"
Como você exporta um módulo ES6 em JavaScript?,"Usando a palavra-chave `export`.

**95.**"
Qual a diferença entre `export default` e `export named` em JavaScript?,"`export default` exporta um único valor padrão do módulo. `export named` exporta múltiplos valores com nomes específicos.

**96.**"
O que é o operador rest (`...`) em JavaScript (parâmetros de função)?,"O operador rest permite que uma função receba um número indefinido de argumentos como um array.

**98.**"
Como você faz destructuring de um objeto em JavaScript?,"Usando a sintaxe `{ propriedade1, propriedade2 } = objeto;`.

**100.**"
Como você faz destructuring de um array em JavaScript?,"Usando a sintaxe `[elemento1, elemento2] = array;`.

**101.**"
O que é o objeto `Symbol` em JavaScript?,"`Symbol` é um tipo de dado primitivo que representa um identificador único.

**102.**"
Para que são utilizados Symbols em JavaScript?,"São utilizados para criar propriedades de objetos que são únicas e não entram em conflito com outras propriedades.

**103.**"
Qual a principal vantagem de usar WeakMap e WeakSet em relação a Map e Set?,"Previnem vazamentos de memória, pois permitem que o garbage collector recupere a memória ocupada pelos objetos que não estão mais sendo utilizados.

**105.**"
O que é Tail Call Optimization (TCO)?,"Tail Call Optimization é uma otimização que permite que uma função recursiva chame a si mesma sem aumentar o consumo de memória da pilha de chamadas, desde que a chamada recursiva seja a última operação realizada na função (tail call).  Não é amplamente suportado em JavaScript.

**106.**"
Quais são alguns dos benefícios de usar `use strict`?,"Impede o uso de variáveis não declaradas, lança erros para atribuições a propriedades somente leitura, desabilita o uso de `with`, e torna o `this` undefined em funções chamadas como funções regulares.

**108.**"
Como você cria um módulo usando uma Immediately Invoked Function Expression (IIFE)?,"Envolvendo o código do módulo em uma função anônima que é executada imediatamente, criando um escopo privado para as variáveis e funções internas.

**110.**"
O que é programação orientada a objetos (OOP) em JavaScript?,"É um paradigma de programação que organiza o código em torno de ""objetos"" que combinam dados (propriedades) e comportamento (métodos).

**111.**"
Quais são os pilares da programação orientada a objetos?,"Abstração, Encapsulamento, Herança e Polimorfismo.

**112.**"
O que é encapsulamento em OOP?,"É o princípio de ocultar os detalhes internos de um objeto e expor apenas uma interface pública para interagir com ele.

**113.**"
O que é herança em OOP?,"É o mecanismo pelo qual uma classe (subclasse) herda propriedades e métodos de outra classe (superclasse).

**114.**"
O que é polimorfismo em OOP?,"É a capacidade de um objeto de assumir muitas formas. Por exemplo, um método pode ter diferentes implementações em diferentes classes.

**115.**"
O que é uma classe em JavaScript?,"É um modelo para criar objetos. Ela define as propriedades e métodos que os objetos da classe terão. Foi introduzida no ES6 como uma forma mais clara de implementar herança prototípica.

**116.**"
Como você herda de uma classe em JavaScript?,"Usando a palavra-chave `extends`.

**118.**"
O que é o método `super()` em JavaScript?,"É usado dentro do construtor de uma subclasse para chamar o construtor da superclasse.

**119.**"
O que são métodos estáticos em JavaScript?,"São métodos que pertencem à classe em si, e não às instâncias da classe. Eles são chamados diretamente na classe.

**120.**"
Como você define um método estático em uma classe JavaScript?,"Usando a palavra-chave `static` antes da definição do método.

**121.**"
Como você pode criar objetos imutáveis em JavaScript?,"Usando `Object.freeze()`, ou bibliotecas especializadas para imutabilidade.

**123.**"
O que são os Generators em JavaScript?,"Generators são funções que podem ser pausadas e retomadas, permitindo produzir uma sequência de valores ao longo do tempo.

**124.**"
Como você define uma função Generator em JavaScript?,"Usando o asterisco (`*`) após a palavra-chave `function`.

**125.**"
Como você pausa e retoma a execução de uma função Generator?,"Usando a palavra-chave `yield`.

**126.**"
O que é o método `next()` de um Generator?,"Ele retoma a execução do Generator até o próximo `yield` e retorna um objeto com as propriedades `value` (o valor produzido pelo `yield`) e `done` (um booleano que indica se o Generator terminou).

**127.**"
O que é o objeto global `globalThis` em JavaScript?,"`globalThis` fornece uma maneira padrão de acessar o objeto global em diferentes ambientes (navegador, Node.js, etc.).

**128.**"
O que é o BigInt em JavaScript?,"`BigInt` é um tipo de dado que permite representar inteiros com precisão arbitrária, além do limite do tipo `Number`.

**129.**"
Como você cria um BigInt em JavaScript?,"Adicionando o sufixo `n` a um literal inteiro (ex: `123n`) ou usando a função `BigInt()`.

**130.**"
Como você cria um Proxy object em JavaScript?,"Usando o construtor `new Proxy(target, handler)`, onde `target` é o objeto a ser proxyado e `handler` é um objeto que define os métodos (traps) para interceptar as operações.

**132.**"
"O que são os ""traps"" em um Proxy handler?","São métodos definidos no handler do Proxy que interceptam operações específicas no objeto target, permitindo customizar seu comportamento.

**133.**"
O que é a API Internationalization (Intl) em JavaScript?,"A API Intl fornece funcionalidades para formatar datas, números, moedas e strings de acordo com as convenções de diferentes idiomas e regiões.

**134.**"
Como você formata um número usando a API Intl?,"Usando o construtor `Intl.NumberFormat()` com as opções de localidade e formatação desejadas, e o método `format()` para aplicar a formatação.

**135.**"
Como você formata uma data usando a API Intl?,"Usando o construtor `Intl.DateTimeFormat()` com as opções de localidade e formatação desejadas, e o método `format()` para aplicar a formatação.

**136.**"
O que é a API Web Workers em JavaScript?,"A API Web Workers permite executar scripts JavaScript em threads de segundo plano, sem bloquear a thread principal da interface do usuário.

**137.**"
Como você cria um Web Worker em JavaScript?,"Criando um novo objeto `Worker` com o caminho para o script do worker.

**138.**"
Como você envia mensagens para um Web Worker?,"Usando o método `postMessage()` do objeto Worker.

**139.**"
Como você recebe mensagens de um Web Worker?,"Adicionando um ouvinte de evento para o evento `message` no objeto Worker.

**140.**"
"O que são ReadableStream, WritableStream e TransformStream?","`ReadableStream` representa uma fonte de dados de onde os dados podem ser lidos em chunks. `WritableStream` representa um destino para onde os dados podem ser gravados em chunks. `TransformStream` transforma dados lidos de um `ReadableStream` antes de serem gravados em um `WritableStream`.

**142.**"
Qual é a diferença entre `apply` e `call` em JavaScript?,"Ambos são utilizados para chamar uma função com um valor `this` específico. `apply` recebe os argumentos da função como um array, enquanto `call` recebe os argumentos individualmente.

**145.**"
O que é NaN em JavaScript?,"NaN (Not a Number) é um valor especial do tipo Number que representa um resultado indefinido ou não representável de uma operação matemática.

**147.**"
Como você verifica se um valor é NaN em JavaScript?,"Usando a função `Number.isNaN(value)`.  `isNaN()` é menos precisa, pois tenta converter o valor para um número primeiro.

**148.**"
O que é uma função pura em programação funcional?,"É uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais (não modifica o estado externo).

**150.**"
Como você lida com concorrência em JavaScript?,"JavaScript é inerentemente single-threaded, mas pode simular concorrência usando callbacks, promises, async/await, Web Workers e event loops. Web Workers oferecem paralelismo real, enquanto as outras técnicas permitem realizar operações assíncronas sem bloquear a thread principal."
O que é hoisting em JavaScript e como ele afeta as declarações de variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover as declarações de variáveis e funções para o topo de seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto funções declaradas com a palavra-chave `function` são hoisted com sua definição completa. Variáveis declaradas com `let` e `const` são hoisted, mas não inicializadas, resultando em um erro se forem acessadas antes da declaração."
O que é a closure em JavaScript?,"Uma closure é a capacidade de uma função interna acessar variáveis de seu escopo externo (escopo léxico), mesmo após a função externa ter retornado. A função interna ""lembra"" o ambiente em que foi criada."
Como você pode verificar se um objeto é um array em JavaScript?,Você pode usar `Array.isArray(objeto)` ou `objeto instanceof Array`.
O que é o método `bind()` em JavaScript e qual a sua utilidade?,"O método `bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido. Ele permite definir o contexto (`this`) de uma função explicitamente."
"Explique o conceito de ""event bubbling"" em JavaScript.","Event bubbling é um mecanismo do DOM onde um evento disparado em um elemento filho ""borbulha"" ou propaga para seus elementos pais na árvore DOM."
"O que é ""event capturing"" em JavaScript?","Event capturing é o oposto de bubbling. Um evento é capturado pelo elemento mais externo e então propagado para dentro, até atingir o elemento alvo. É menos comum do que bubbling."
O que é o objeto `this` em JavaScript e como ele é determinado?,"`this` é uma palavra-chave que se refere ao contexto de execução atual. Seu valor é determinado pela forma como a função é chamada: pode referenciar o objeto global (window/global), o objeto que chamou o método ou um objeto explicitamente definido com `call`, `apply` ou `bind`."
Explique a diferença entre `call()` e `apply()` em JavaScript.,"Ambos `call()` e `apply()` são usados para invocar uma função definindo o valor de `this`. A diferença é que `call()` espera os argumentos individualmente, enquanto `apply()` espera um array de argumentos."
O que é a função `setTimeout()` em JavaScript e como ela funciona?,`setTimeout()` agenda a execução de uma função após um determinado período de tempo (em milissegundos). Ele recebe uma função e um tempo como argumentos.
O que é a função `setInterval()` em JavaScript e como ela funciona?,`setInterval()` executa repetidamente uma função em intervalos de tempo especificados (em milissegundos). Ele recebe uma função e um tempo como argumentos.
Como você pode parar um `setInterval()` em JavaScript?,Você pode usar a função `clearInterval()` passando o ID retornado por `setInterval()` como argumento.
Como você pode usar template literals para criar strings multi-linha?,Basta incluir quebras de linha dentro das strings delimitadas por acentos graves.
Como você pode usar destructuring para extrair valores de um array?,"`const [a, b] = [1, 2, 3];`  Neste caso, `a` será 1 e `b` será 2."
Como você pode usar destructuring para extrair propriedades de um objeto?,"`const { nome, idade } = { nome: 'João', idade: 30 };` Neste caso, `nome` será 'João' e `idade` será 30."
Como você pode usar o operador spread para copiar um array?,`const novoArray = [...arrayOriginal];`
Como você pode usar o operador spread para combinar dois objetos?,"`const novoObjeto = {...objeto1, ...objeto2};`"
Como você declara uma arrow function?,`const minhaFuncao = (parametro) => { return parametro * 2; };`
Qual a diferença entre uma função declarada com `function` e uma arrow function no que diz respeito ao `this`?,"Funções declaradas com `function` têm seu próprio `this`, que pode variar dependendo de como a função é chamada. Arrow functions herdam o `this` do contexto léxico onde foram definidas."
Quais os estados possíveis de uma Promise?,"Pendente (pending), Cumprida (fulfilled) e Rejeitada (rejected)."
Como você lida com o sucesso de uma Promise?,Usando o método `.then()`.
Como você lida com a falha de uma Promise?,Usando o método `.catch()`.
O que é a sintaxe `async/await` em JavaScript?,"`async/await` é uma sintaxe mais elegante para trabalhar com Promises. `async` é usado para declarar uma função assíncrona, e `await` é usado para pausar a execução de uma função assíncrona até que uma Promise seja resolvida."
Como você lida com erros em funções `async/await`?,Usando um bloco `try...catch`.
Qual a diferença entre `export default` e `export` (named export)?,"`export default` permite exportar um único valor como padrão do módulo, que pode ser importado com qualquer nome. `export` (named export) permite exportar múltiplos valores com seus nomes específicos, que devem ser importados usando esses mesmos nomes."
O que são atributos de um elemento HTML e como você pode acessá-los e modificá-los usando JavaScript?,Atributos são propriedades que fornecem informações adicionais sobre um elemento HTML. Você pode acessá-los usando métodos como `element.getAttribute()` e `element.setAttribute()`.
"O que são classes CSS e como você pode adicioná-las, removê-las ou verificar sua existência em um elemento HTML usando JavaScript?","Classes CSS são usadas para aplicar estilos a elementos HTML. Você pode manipulá-las usando a propriedade `element.classList` e seus métodos `add()`, `remove()`, `toggle()`, `contains()`."
Como você adiciona um listener de evento a um elemento HTML usando JavaScript?,"Usando o método `element.addEventListener(tipoDeEvento, funcaoDeCallback)`."
O que é a função de callback em um listener de evento?,É a função que será executada quando o evento for disparado.
O que é o objeto `event` que é passado para a função de callback em um listener de evento?,"É um objeto que contém informações sobre o evento que foi disparado, como o elemento que o disparou, as coordenadas do mouse, etc."
Como você pode propagar um evento manualmente em JavaScript?,Usando o método `element.dispatchEvent(event)`.
Quais são os métodos mais comuns do objeto `console`?,"`console.log()`, `console.warn()`, `console.error()`, `console.table()`."
Como você cria um array em JavaScript?,"Usando a sintaxe de literal de array: `const meuArray = [1, 2, 3];` ou usando o construtor `Array`: `const meuArray = new Array(1, 2, 3);`"
Como você acessa um elemento de um array em JavaScript?,"Usando o índice do elemento (a posição do elemento no array), começando do índice 0. Exemplo: `meuArray[0]` acessa o primeiro elemento do array."
Como você adiciona um elemento ao final de um array em JavaScript?,Usando o método `push(elemento)`.
Como você remove o último elemento de um array em JavaScript?,Usando o método `pop()`.
Como você adiciona um elemento ao início de um array em JavaScript?,Usando o método `unshift(elemento)`.
Como você remove o primeiro elemento de um array em JavaScript?,Usando o método `shift()`.
O que é o método `map()` em JavaScript e qual a sua utilidade?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele é usado para transformar os elementos de um array.
O que é o método `filter()` em JavaScript e qual a sua utilidade?,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. Ele é usado para selecionar elementos de um array.
O que é o método `reduce()` em JavaScript e qual a sua utilidade?,`reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o método `forEach()` em JavaScript e qual a sua utilidade?,`forEach()` executa uma função fornecida uma vez para cada elemento de um array. Ele é usado para iterar sobre os elementos de um array.
Qual a diferença entre `map()` e `forEach()` em JavaScript?,"`map()` retorna um novo array com os resultados da função aplicada a cada elemento, enquanto `forEach()` simplesmente executa a função para cada elemento e não retorna nada."
O que é o método `sort()` em JavaScript e como ele funciona?,"`sort()` ordena os elementos de um array no local e retorna o array ordenado. Por padrão, ele ordena os elementos como strings, então pode ser necessário fornecer uma função de comparação para ordenar números corretamente."
O que é o método `slice()` em JavaScript e qual a sua utilidade?,`slice()` retorna uma cópia de uma parte de um array em um novo array. Ele recebe dois argumentos opcionais: o índice inicial e o índice final (não incluso).
O que é o método `splice()` em JavaScript e qual a sua utilidade?,`splice()` altera o conteúdo de um array removendo ou substituindo elementos existentes e/ou adicionando novos elementos no local.
O que é o método `concat()` em JavaScript e qual a sua utilidade?,`concat()` retorna um novo array contendo a junção de dois ou mais arrays.
O que é o método `join()` em JavaScript e qual a sua utilidade?,`join()` junta todos os elementos de um array em uma string. Ele recebe um argumento opcional que é o separador usado entre os elementos.
O que é o método `indexOf()` em JavaScript e qual a sua utilidade?,"`indexOf()` retorna o primeiro índice em que um determinado elemento pode ser encontrado no array, ou -1 se não estiver presente."
O que é o método `includes()` em JavaScript e qual a sua utilidade?,"`includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado."
O que é um objeto em JavaScript?,"Um objeto é uma coleção de propriedades, onde cada propriedade é uma associação entre um nome (ou chave) e um valor."
Como você acessa uma propriedade de um objeto em JavaScript?,Usando a notação de ponto: `meuObjeto.nome` ou usando a notação de colchetes: `meuObjeto['nome']`.
Como você adiciona uma nova propriedade a um objeto em JavaScript?,Usando a notação de ponto ou colchetes: `meuObjeto.sobrenome = 'Silva';` ou `meuObjeto['sobrenome'] = 'Silva';`
Como você remove uma propriedade de um objeto em JavaScript?,Usando o operador `delete`: `delete meuObjeto.sobrenome;`
O que é o método `Object.keys()` em JavaScript e qual a sua utilidade?,`Object.keys()` retorna um array com os nomes das propriedades (chaves) de um objeto.
O que é o método `Object.values()` em JavaScript e qual a sua utilidade?,`Object.values()` retorna um array com os valores das propriedades de um objeto.
O que é o método `Object.entries()` em JavaScript e qual a sua utilidade?,"`Object.entries()` retorna um array de arrays, onde cada subarray contém o nome e o valor de uma propriedade de um objeto (como pares [chave, valor])."
O que é o método `Object.assign()` em JavaScript e qual a sua utilidade?,`Object.assign()` copia os valores de todas as propriedades próprias enumeráveis de um ou mais objetos de origem para um objeto de destino. Ele retorna o objeto de destino.  É usado para combinar ou clonar objetos (cópia superficial).
O que é a iteração em JavaScript?,"Iteração é o processo de percorrer os elementos de uma coleção (como um array, string ou objeto) um por um."
Quais são os tipos de loops mais comuns em JavaScript?,"`for`, `while`, `do...while`, `for...in`, `for...of`."
Qual a diferença entre `for...in` e `for...of` em JavaScript?,"`for...in` itera sobre os *nomes das propriedades* enumeráveis de um objeto. `for...of` itera sobre os *valores* de um objeto iterável (como um array, string, Map, Set, etc.)."
Como você pode interromper um loop em JavaScript?,Usando a declaração `break`.
Como você pode pular para a próxima iteração de um loop em JavaScript?,Usando a declaração `continue`.
Quais são os riscos de usar recursão em JavaScript?,Risco de estouro de pilha (stack overflow) se a função recursiva não tiver uma condição de parada adequada ou se a profundidade da recursão for muito grande.
O que são funções de ordem superior (Higher-Order Functions) em JavaScript?,Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam outras funções como resultados.
Dê exemplos de funções de ordem superior nativas em JavaScript.,"`map()`, `filter()`, `reduce()`, `forEach()`, `sort()`."
Quais são os benefícios de usar funções puras em JavaScript?,"Previsibilidade, testabilidade, facilidade de depuração e otimização."
O que é imutabilidade em JavaScript?,"Imutabilidade é o conceito de que os dados não devem ser modificados após serem criados. Em vez de modificar os dados existentes, você deve criar novas cópias com as alterações desejadas."
Quais são os tipos de erros mais comuns em JavaScript?,"`SyntaxError`, `TypeError`, `ReferenceError`, `RangeError`, `URIError`."
Como você pode criar um erro personalizado em JavaScript?,Criando uma nova classe que herda de `Error`.
Quais são os métodos mais comuns para usar expressões regulares em JavaScript?,"`test()`, `exec()`, `match()`, `search()`, `replace()`, `split()`."
O que são lookaheads e lookbehinds em expressões regulares?,"Lookaheads e lookbehinds são asserções que especificam que um determinado padrão deve (ou não) ocorrer antes ou depois da correspondência, mas não fazem parte da correspondência em si."
O que é o modo global em expressões regulares?,"O modo global (flag `g`) indica que a expressão regular deve encontrar todas as correspondências na string, em vez de parar na primeira."
O que é o modo ignore case em expressões regulares?,O modo ignore case (flag `i`) indica que a expressão regular deve ignorar a diferença entre letras maiúsculas e minúsculas.
O que é o modo multiline em expressões regulares?,"O modo multiline (flag `m`) indica que as âncoras `^` e `$` devem corresponder ao início e ao fim de cada linha na string, em vez de apenas ao início e ao fim da string inteira."
O que é o conceito de coerção de tipo (type coercion) em JavaScript?,Coerção de tipo é o processo de converter automaticamente um valor de um tipo de dado para outro tipo de dado. Isso acontece principalmente durante operações com diferentes tipos de dados (ex: somar um número a uma string).
O que é o que é `use strict` em JavaScript?,`'use strict'` é uma diretiva que ativa o modo estrito do JavaScript.  O modo estrito impõe uma análise mais rigorosa do código e ajuda a evitar erros comuns e comportamentos inseguros.
Quais são alguns dos efeitos de usar o modo estrito em JavaScript?,"Impede o uso de variáveis não declaradas, lança um erro se `this` for indefinido em funções não-método, proíbe a duplicação de nomes de propriedades em objetos literais, entre outros."
Explique como funciona o Garbage Collection (Coleta de Lixo) em JavaScript.,A Coleta de Lixo é um processo automático que o motor JavaScript usa para liberar memória que não está mais sendo usada pelo programa.  Ele identifica objetos que não são mais acessíveis (não têm referências apontando para eles) e libera o espaço de memória que eles ocupavam.
O que é o modelo de eventos de loop (Event Loop) em JavaScript?,"O Event Loop é um mecanismo que permite que o JavaScript execute tarefas assíncronas de forma não bloqueante. Ele monitora a fila de eventos e a pilha de chamadas, transferindo tarefas da fila para a pilha quando a pilha está vazia."
O que é a pilha de chamadas (Call Stack) em JavaScript?,"A pilha de chamadas é uma estrutura de dados que rastreia as funções que foram chamadas em um determinado momento. Quando uma função é chamada, ela é adicionada ao topo da pilha. Quando a função retorna, ela é removida da pilha."
O que é a fila de eventos (Event Queue) em JavaScript?,"A fila de eventos é uma estrutura de dados que armazena os eventos que foram disparados, mas ainda não foram processados. Quando o Event Loop detecta que a pilha de chamadas está vazia, ele pega o próximo evento da fila e o coloca na pilha para ser processado."
O que é o conceito de currying em JavaScript?,Currying é uma técnica que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.  O resultado final é uma função que retorna o mesmo resultado que a função original.
Como você declara uma variável em JavaScript usando `let` e qual a sua principal característica em relação a `var`?,"`let nomeVariavel = valor;`. A principal característica é que `let` tem escopo de bloco, enquanto `var` tem escopo de função ou global."
"O que é hoisting em JavaScript e como ele afeta a declaração de variáveis com `var`, `let` e `const`?","Hoisting é o comportamento do JavaScript de mover declarações para o topo do seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com valor `undefined`, enquanto `let` e `const` são hoisted, mas não inicializadas, resultando em um erro se acessadas antes da declaração."
Explique o que são closures em JavaScript e forneça um exemplo.,"Closures são funções que ""lembram"" o ambiente léxico em que foram criadas, mesmo após esse ambiente ter sido executado. Exemplo:

```javascript
function externa() {
  let valor = 10;
  function interna() {
    console.log(valor);
  }
  return interna;
}

let minhaFuncao = externa();
minhaFuncao(); // Imprime 10, mesmo após externa() ter finalizado.
```"
O que é o operador `typeof` em JavaScript e quais tipos de dados ele pode retornar?,"`typeof` é um operador que retorna uma string indicando o tipo de dado de um operando. Ele pode retornar: `""undefined""`, `""boolean""`, `""number""`, `""string""`, `""bigint""`, `""symbol""`, `""function""` e `""object""`."
Como você cria um objeto em JavaScript usando a sintaxe literal?,"`let meuObjeto = { chave1: valor1, chave2: valor2 };`"
O que é o prototype em JavaScript e como ele funciona?,"Prototype é um mecanismo que permite que objetos JavaScript herdem propriedades e métodos de outros objetos. Cada objeto possui um prototype, e quando uma propriedade é acessada e não encontrada no objeto, a busca continua no seu prototype, e assim por diante, até atingir o `null`."
Qual a diferença entre `Array.forEach()` e `Array.map()` em JavaScript?,"`Array.forEach()` itera sobre os elementos de um array e executa uma função para cada elemento, mas não retorna um novo array. `Array.map()` itera sobre os elementos de um array e executa uma função para cada elemento, retornando um novo array com os resultados da função."
O que é o método `Array.filter()` em JavaScript e como ele funciona?,`Array.filter()` cria um novo array com todos os elementos que passam em um teste implementado por uma função fornecida.
Como você concatena dois ou mais arrays em JavaScript?,"Usando o método `Array.concat()`. Exemplo: `let novoArray = array1.concat(array2, array3);`"
O que é o método `Array.reduce()` em JavaScript e como ele funciona?,"`Array.reduce()` executa uma função reducer (fornecida por você) em cada elemento do array, resultando em um único valor de retorno. Ele recebe um acumulador e o elemento atual como argumentos."
O que é o método `Array.slice()` em JavaScript e como ele é usado?,"`Array.slice()` retorna uma cópia de uma parte do array, desde um índice inicial até um índice final (não incluso). Não modifica o array original."
Como você inverte a ordem dos elementos em um array em JavaScript?,Usando o método `Array.reverse()`.
O que é o método `String.substring()` em JavaScript e como ele é usado?,`String.substring()` retorna uma parte de uma string entre os índices inicial e final especificados. Não modifica a string original.
O que é o método `String.slice()` em JavaScript e qual a diferença dele para `String.substring()`?,"`String.slice()` também retorna uma parte de uma string entre os índices inicial e final especificados. A principal diferença é que `String.slice()` aceita índices negativos, que contam a partir do final da string, enquanto `String.substring()` trata índices negativos como 0."
Como você converte uma string em letras maiúsculas em JavaScript?,Usando o método `String.toUpperCase()`.
Como você converte uma string em letras minúsculas em JavaScript?,Usando o método `String.toLowerCase()`.
O que é o método `String.trim()` em JavaScript e como ele é usado?,`String.trim()` remove os espaços em branco do início e do fim de uma string.
Como você encontra o índice de uma substring dentro de uma string em JavaScript?,"Usando o método `String.indexOf()`. Se a substring não for encontrada, retorna -1."
O que é o método `String.replace()` em JavaScript e como ele funciona?,`String.replace()` substitui a primeira ocorrência de uma substring por outra string. Pode usar expressões regulares para substituir padrões.
Como você divide uma string em um array de substrings em JavaScript?,Usando o método `String.split()`.
O que é o objeto `Math` em JavaScript e quais são alguns de seus métodos comuns?,"`Math` é um objeto embutido que fornece funções matemáticas. Alguns métodos comuns incluem: `Math.random()`, `Math.round()`, `Math.ceil()`, `Math.floor()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`."
Como você gera um número aleatório entre 0 (inclusive) e 1 (exclusivo) em JavaScript?,Usando o método `Math.random()`.
O que são arrow functions em JavaScript e qual a sua principal diferença em relação às funções tradicionais?,Arrow functions são uma sintaxe mais concisa para escrever funções. A principal diferença é que arrow functions não têm seu próprio `this`; elas herdam o `this` do contexto circundante.
O que é o operador spread em JavaScript e como ele é usado?,"O operador spread permite expandir um iterável (como um array ou uma string) em locais onde são esperados zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array). Exemplo: `let novoArray = [...array1, ...array2];`"
O que é destructuring em JavaScript e como ele é usado?,"Destructuring é uma maneira de extrair valores de objetos ou arrays e atribuí-los a variáveis de forma mais concisa. Exemplo: `let { nome, idade } = pessoa;`"
O que são promises em JavaScript e como elas são usadas para lidar com operações assíncronas?,"Promises são objetos que representam o eventual resultado (ou falha) de uma operação assíncrona. Elas têm três estados: pendente (pending), resolvida (fulfilled) e rejeitada (rejected)."
O que são as palavras-chave `async` e `await` em JavaScript e como elas facilitam o trabalho com promises?,"`async` transforma uma função em uma função assíncrona, permitindo o uso de `await` dentro dela. `await` pausa a execução da função até que a promise seja resolvida, e então retorna o valor da promise."
Como você lida com erros em operações assíncronas usando promises?,Usando o método `.catch()` na promise ou usando um bloco `try...catch` dentro de uma função `async`.
O que é o objeto `Date` em JavaScript e como você o usa para trabalhar com datas e horários?,"`Date` é um objeto embutido que representa uma data e hora. Ele fornece métodos para obter e definir componentes de data e hora (ano, mês, dia, hora, minuto, segundo, milissegundo)."
Como você obtém o timestamp atual em JavaScript (em milissegundos)?,Usando `Date.now()`.
O que são expressões regulares em JavaScript e como elas são usadas?,"Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings. Elas são usadas para pesquisa, substituição e validação de texto."
Quais são alguns metacaracteres comuns usados em expressões regulares?,"`.`, `*`, `+`, `?`, `^`, `$`, `[]`, `()`, `\d`, `\w`, `\s`."
Como você usa expressões regulares para verificar se uma string corresponde a um padrão?,Usando o método `String.test(expressaoRegular)` ou `expressaoRegular.test(string)`.
Como você usa expressões regulares para substituir partes de uma string?,"Usando o método `String.replace(expressaoRegular, novaString)`."
O que é o modo global em expressões regulares e como ele afeta o método `String.replace()`?,"O modo global (marcado com o flag `g`) faz com que a expressão regular encontre todas as correspondências na string, em vez de parar na primeira. Com `String.replace()`, o modo global substitui todas as ocorrências correspondentes."
O que são JSON em JavaScript e como ele é usado?,"JSON (JavaScript Object Notation) é um formato de dados leve e legível por humanos, usado para transmitir dados entre um servidor e um aplicativo web. Ele é baseado em um subconjunto da sintaxe JavaScript."
O que é o objeto `window` em JavaScript e qual a sua função?,"O objeto `window` representa a janela do navegador e é o objeto global no ambiente do navegador. Ele fornece acesso a propriedades e métodos relacionados à janela do navegador, como tamanho da janela, histórico, localização, etc."
O que é o objeto `document` em JavaScript e qual a sua função?,O objeto `document` representa o documento HTML (a página web) carregado na janela do navegador. Ele fornece acesso à estrutura do documento (DOM) e permite manipular o conteúdo e a aparência da página.
Como você seleciona um elemento HTML pelo seu ID em JavaScript?,Usando o método `document.getElementById('idDoElemento')`.
Como você seleciona elementos HTML por sua classe em JavaScript?,Usando o método `document.getElementsByClassName('nomeDaClasse')`. Este método retorna um `HTMLCollection`.
Como você seleciona elementos HTML por sua tag em JavaScript?,Usando o método `document.getElementsByTagName('nomeDaTag')`. Este método retorna um `HTMLCollection`.
Qual a diferença entre `HTMLCollection` e `NodeList` em JavaScript?,"`HTMLCollection` é uma coleção de elementos HTML, geralmente retornada por métodos como `getElementsByClassName()` e `getElementsByTagName()`. `NodeList` é uma coleção de nós (elementos, texto, comentários, etc.), geralmente retornada por métodos como `querySelectorAll()`.  `HTMLCollection` é *live*, ou seja, se o DOM mudar, a coleção é automaticamente atualizada. `NodeList` pode ser *live* ou *static*."
Como você adiciona um novo elemento HTML ao DOM em JavaScript?,"Primeiro, crie o elemento usando `document.createElement('tag')`. Em seguida, adicione atributos e conteúdo ao elemento. Finalmente, adicione o elemento ao DOM usando métodos como `appendChild()` ou `insertBefore()`."
Como você remove um elemento HTML do DOM em JavaScript?,"Primeiro, obtenha uma referência ao elemento a ser removido. Em seguida, use o método `parentNode.removeChild(elemento)` para remover o elemento."
Como você altera o conteúdo de um elemento HTML em JavaScript?,Usando a propriedade `textContent` ou `innerHTML` do elemento.
Como você altera os atributos de um elemento HTML em JavaScript?,"Usando os métodos `setAttribute('nomeDoAtributo', 'novoValor')` ou acessando diretamente a propriedade correspondente do elemento (se existir)."
Como você adiciona ou remove classes CSS de um elemento HTML em JavaScript?,"Usando a propriedade `classList` do elemento. Métodos: `classList.add('nomeDaClasse')`, `classList.remove('nomeDaClasse')`, `classList.toggle('nomeDaClasse')`."
Como você define estilos CSS diretamente em um elemento HTML usando JavaScript?,Usando a propriedade `style` do elemento. Exemplo: `elemento.style.color = 'red';`
O que são eventos em JavaScript e como eles são usados?,"Eventos são ações ou ocorrências que acontecem no navegador (ex: clique do mouse, pressionamento de tecla, carregamento de página). Eles são usados para responder às interações do usuário e a outros eventos do sistema."
Como você adiciona um event listener a um elemento HTML em JavaScript?,"Usando o método `addEventListener('tipoDoEvento', funcaoCallback)`."
O que é bubbling de eventos em JavaScript e como ele funciona?,"Bubbling é o processo em que um evento disparado em um elemento se propaga para cima na hierarquia do DOM, acionando os event listeners dos elementos pai."
O que é capturing de eventos em JavaScript e como ele funciona?,"Capturing é o processo oposto ao bubbling. Um evento é primeiro capturado pelo elemento mais externo e então se propaga para baixo na hierarquia do DOM até atingir o elemento alvo. Para usar capturing, você precisa especificar o terceiro argumento de `addEventListener` como `true`."
O que são timers em JavaScript e como eles são usados?,Timers são funções que permitem executar código após um determinado período de tempo ou repetidamente em intervalos regulares.
Como você define um timer que executa uma função uma vez após um determinado atraso em JavaScript?,"Usando a função `setTimeout(funcao, atrasoEmMilissegundos)`."
Como você define um timer que executa uma função repetidamente em intervalos regulares em JavaScript?,"Usando a função `setInterval(funcao, intervaloEmMilissegundos)`."
Como você cancela um timer definido com `setTimeout()` em JavaScript?,Usando a função `clearTimeout(idDoTimer)`.
Como você cancela um timer definido com `setInterval()` em JavaScript?,Usando a função `clearInterval(idDoTimer)`.
O que é strict mode em JavaScript e como ele é ativado?,"Strict mode é um modo restrito de execução do JavaScript que impõe regras mais rigorosas para evitar erros comuns e práticas ruins. Ele é ativado adicionando a diretiva `""use strict"";` no início do script ou da função."
Quais são algumas das restrições impostas pelo strict mode em JavaScript?,"Proíbe o uso de variáveis não declaradas, impede a atribuição a propriedades somente leitura, impede a exclusão de variáveis, etc."
O que são módulos em JavaScript e como eles são usados para organizar o código?,Módulos são unidades de código independentes que encapsulam funcionalidades específicas e podem ser importadas e exportadas para reutilização em outros arquivos.
Como você exporta um valor de um módulo em JavaScript?,Usando a palavra-chave `export`. Existem exports nomeados (`export const nome = valor;`) e exports padrão (`export default valor;`).
Como você importa um valor de um módulo em JavaScript?,Usando a palavra-chave `import`. Exemplo: `import { nome } from './modulo.js';` ou `import valorPadrao from './modulo.js';`.
O que é o objeto `console` em JavaScript e quais são alguns de seus métodos comuns?,"`console` é um objeto que fornece acesso ao console do navegador, usado para exibir mensagens, erros, avisos e outras informações para desenvolvedores. Métodos comuns: `console.log()`, `console.warn()`, `console.error()`, `console.table()`."
Como você exibe um aviso no console do navegador em JavaScript?,Usando o método `console.warn()`.
Como você exibe um erro no console do navegador em JavaScript?,Usando o método `console.error()`.
Como você exibe uma tabela de dados no console do navegador em JavaScript?,Usando o método `console.table()`.
O que é `localStorage` em JavaScript e como ele é usado?,"`localStorage` é um objeto que permite armazenar dados persistentemente no navegador do usuário, mesmo após o fechamento da janela ou aba. Os dados são armazenados como strings."
Como você armazena dados no `localStorage` em JavaScript?,"Usando o método `localStorage.setItem('chave', 'valor')`. O valor deve ser uma string."
Como você recupera dados do `localStorage` em JavaScript?,Usando o método `localStorage.getItem('chave')`. Retorna `null` se a chave não existir.
Como você remove dados do `localStorage` em JavaScript?,Usando o método `localStorage.removeItem('chave')`.
Como você limpa todo o `localStorage` em JavaScript?,Usando o método `localStorage.clear()`.
O que é `sessionStorage` em JavaScript e qual a diferença entre ele e `localStorage`?,"`sessionStorage` é semelhante a `localStorage`, mas os dados armazenados são persistentes apenas durante a sessão do navegador (enquanto a janela ou aba está aberta).  Quando a sessão termina (janela ou aba é fechada), os dados são removidos."
Como você armazena dados no `sessionStorage` em JavaScript?,"Usando o método `sessionStorage.setItem('chave', 'valor')`."
Como você recupera dados do `sessionStorage` em JavaScript?,Usando o método `sessionStorage.getItem('chave')`.
Como você remove dados do `sessionStorage` em JavaScript?,Usando o método `sessionStorage.removeItem('chave')`.
Como você limpa todo o `sessionStorage` em JavaScript?,Usando o método `sessionStorage.clear()`.
O que é o método `call()` em JavaScript e como ele é usado?,`call()` chama uma função com um determinado valor `this` e argumentos fornecidos individualmente.
O que é o método `apply()` em JavaScript e como ele é usado?,`apply()` chama uma função com um determinado valor `this` e argumentos fornecidos como um array.
Qual a diferença fundamental entre `call()` e `apply()` em JavaScript?,"Ambos chamam uma função com um `this` específico, mas `call()` aceita argumentos individualmente, enquanto `apply()` aceita argumentos como um array."
Qual a palavra-chave usada dentro de uma função Generator para retornar um valor?,A palavra-chave `yield`.
Como você itera sobre os valores produzidos por uma função Generator?,Usando um loop `for...of` ou chamando o método `next()` do objeto generator.
O que são iterators em JavaScript e como eles são usados?,"Iterators são objetos que definem uma sequência e um método para acessar cada item na sequência um por vez.  Eles implementam o protocolo iterator, que requer um método `next()` que retorna um objeto com as propriedades `value` e `done`."
O que é currying em JavaScript e como ele é usado?,Currying é uma técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.
O que é memoization em JavaScript e como ele é usado para otimizar o desempenho?,"Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras e retorna o resultado armazenado em cache quando as mesmas entradas ocorrem novamente, em vez de recalcular o resultado."
Como você define métodos em uma classe JavaScript?,Simplesmente definindo a função dentro do corpo da classe.  Não é necessário usar a palavra-chave `function`.
Como você cria uma instância de uma classe JavaScript?,Usando a palavra-chave `new`.  Exemplo: `const meuObjeto = new MinhaClasse();`
O que é herança em JavaScript usando classes e como você a implementa?,Herança permite que uma classe (subclasse) herde propriedades e métodos de outra classe (superclasse). É implementada usando a palavra-chave `extends`.
Como você chama o construtor da superclasse em uma subclasse em JavaScript?,Usando a função `super()` dentro do construtor da subclasse.
Como você acessa métodos da superclasse de dentro de uma subclasse em JavaScript?,Usando a palavra-chave `super`.  Exemplo: `super.meuMetodoDaSuperclasse();`
O que são métodos estáticos em classes JavaScript e como eles são usados?,"Métodos estáticos são métodos que pertencem à classe em si, em vez de instâncias da classe. Eles são definidos usando a palavra-chave `static` e são chamados diretamente na classe. Exemplo: `MinhaClasse.meuMetodoEstatico();`"
O que são getters e setters em classes JavaScript e como eles são usados?,"Getters e setters permitem controlar o acesso a propriedades de um objeto, fornecendo métodos para obter e definir o valor da propriedade. Eles são definidos usando as palavras-chave `get` e `set`."
O que é polimorfismo em programação orientada a objetos e como ele se manifesta em JavaScript?,"Polimorfismo é a capacidade de um objeto assumir muitas formas. Em JavaScript, o polimorfismo pode ser alcançado através de herança e sobrescrita de métodos. Um objeto de uma subclasse pode ser tratado como um objeto de sua superclasse."
O que são weakmaps em JavaScript e como elas diferem dos maps regulares?,"WeakMaps são coleções de pares chave/valor onde as chaves devem ser objetos. Ao contrário dos Maps, as chaves em WeakMaps são mantidas fracamente, o que significa que se não houver outras referências para o objeto chave, ele pode ser coletado pelo garbage collector, e a entrada correspondente no WeakMap será removida. Isso evita vazamentos de memória."
O que são weaksets em JavaScript e como elas diferem dos sets regulares?,"WeakSets são coleções de objetos. Assim como WeakMaps, os objetos em WeakSets são mantidos fracamente, o que significa que se não houver outras referências para o objeto, ele pode ser coletado pelo garbage collector e removido do WeakSet."
O que é tail call optimization (TCO) e como ele funciona em JavaScript (se suportado)?,Tail call optimization (TCO) é uma otimização do compilador que permite que uma chamada de função recursiva no final de outra função seja executada sem adicionar uma nova moldura à pilha de chamadas. Isso pode evitar erros de estouro de pilha para funções recursivas. O suporte para TCO em JavaScript é inconsistente e depende do ambiente de execução.
O que são decorators em JavaScript (proposta em estágio) e como eles são usados?,"Decorators são uma proposta para adicionar metadados e modificar o comportamento de classes, métodos, propriedades e parâmetros em JavaScript. Eles são definidos usando a sintaxe `@decoratorName` e podem ser usados para adicionar funcionalidades como logging, validação e autorização."
O que é o BigInt em JavaScript e qual o seu propósito?,BigInt é um tipo de dado numérico que permite representar inteiros de comprimento arbitrário. Ele é usado para realizar operações com números inteiros que excedem os limites do tipo `Number`.
Quais são algumas limitações ao usar BigInt em JavaScript?,"BigInt não pode ser usado com operadores matemáticos tradicionais com números regulares. Você precisa usar apenas BigInts em operações matemáticas. Além disso, não há suporte para `Math` com BigInts."
O que são Symbols em JavaScript e qual o seu propósito?,Symbols são um tipo de dado primitivo que representa um identificador único. Eles são usados para criar propriedades de objeto que são garantidamente únicas e não entrarão em conflito com outras propriedades.
O que são Symbol.iterator e Symbol.toStringTag em JavaScript?,`Symbol.iterator` é um símbolo bem conhecido que especifica o método padrão para iterar sobre um objeto. `Symbol.toStringTag` é um símbolo bem conhecido que permite personalizar a string retornada pelo método `Object.prototype.toString()` para um objeto.
"O que são os métodos `Object.entries()`, `Object.keys()` e `Object.values()` em JavaScript e como eles são usados?","*   `Object.entries()` retorna um array de pares chave/valor de um objeto.
*   `Object.keys()` retorna um array com as chaves de um objeto.
*   `Object.values()` retorna um array com os valores de um objeto."
O que é a API Fetch em JavaScript e como ela é usada para fazer requisições HTTP?,A Fetch API é uma interface moderna para fazer requisições HTTP em JavaScript. Ela fornece uma maneira mais flexível e poderosa de fazer requisições do que o tradicional `XMLHttpRequest`.
Como você faz uma requisição GET usando a Fetch API em JavaScript?,Usando a função `fetch('url')`. Exemplo: `fetch('https://api.exemplo.com/dados').then(response => response.json()).then(data => console.log(data));`
Como você faz uma requisição POST usando a Fetch API em JavaScript?,"Fornecendo um objeto de opções para a função `fetch()`, incluindo o método como `'POST'` e o corpo da requisição como uma string JSON. Exemplo:

```javascript
fetch('https://api.exemplo.com/dados', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({ chave: 'valor' })
}).then(response => response.json()).then(data => console.log(data));
```"
Como você lida com erros ao usar a Fetch API em JavaScript?,Verificando a propriedade `ok` do objeto `response` e lançando um erro se ela for `false`. Você também pode
