Pergunta,Resposta
O que é hoisting em JavaScript?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seu escopo antes da execução do código.  É importante notar que apenas a *declaração* é movida, não a *inicialização* (atribuição de valor)."
Qual a diferença entre `null` e `undefined` em JavaScript?,"`null` é um valor de atribuição. Representa a ausência intencional de qualquer valor de objeto. `undefined` significa que uma variável foi declarada, mas não atribuída a nenhum valor."
O que é uma closure em JavaScript?,"Uma closure é a combinação de uma função e o ambiente léxico onde essa função foi declarada. Permite que uma função interna acesse variáveis da função externa, mesmo depois que a função externa já foi executada."
O que são template literals (template strings) em JavaScript e como são utilizados?,Template literals são strings que permitem expressões embutidas. São delimitadas com backticks (`) e as expressões são inseridas com `${expression}`.  Facilitam a interpolação de variáveis e strings multilinhas.
Qual a diferença entre `==` e `===` em JavaScript?,`==` é o operador de igualdade abstrata. Ele converte os operandos para o mesmo tipo antes de fazer a comparação. `===` é o operador de igualdade estrita. Ele compara os operandos sem conversão de tipo e retorna `true` apenas se os operandos forem do mesmo tipo e tiverem o mesmo valor.
O que é o objeto `arguments` em JavaScript?,O objeto `arguments` é um objeto array-like disponível dentro de todas as funções não-arrow. Ele contém os valores dos argumentos passados para a função.
O que é o método `bind()` em JavaScript e como ele funciona?,"`bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido. Ele também permite passar argumentos predefinidos para a função original."
"O que é o conceito de ""truthy"" e ""falsy"" em JavaScript?","Em JavaScript, um valor ""truthy"" é um valor que é avaliado como `true` em um contexto booleano. Um valor ""falsy"" é um valor que é avaliado como `false` em um contexto booleano. Exemplos de falsy: `false`, `0`, `""""`, `null`, `undefined`, `NaN`. Todos os outros valores são truthy."
Explique o uso do operador `typeof` em JavaScript.,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando. Por exemplo, `typeof 42` retorna `""number""`."
O que é o objeto `window` em JavaScript?,"Em navegadores, o objeto `window` representa a janela do navegador. É o objeto global mais alto na hierarquia."
O que é o método `apply()` em JavaScript e como ele funciona?,`apply()` chama uma função com um determinado valor `this` e argumentos fornecidos como um array (ou um objeto array-like).
Explique o que é o método `call()` em JavaScript e como ele difere de `apply()`.,"`call()` chama uma função com um determinado valor `this` e argumentos fornecidos individualmente. Diferente de `apply()`, que espera um array de argumentos."
"O que é o conceito de ""currying"" em JavaScript?","Currying é uma técnica em que uma função que recebe múltiplos argumentos é transformada em uma sequência de funções, cada uma recebendo um único argumento."
O que são arrow functions em JavaScript e quais suas características?,"Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas têm uma sintaxe mais curta e não têm seu próprio `this`, `arguments`, `super` ou `new.target`."
O que são iterators em JavaScript?,"Iterators são objetos que definem uma sequência e, ao terminar, retornam um valor. Especificamente, eles implementam um método `next()` que retorna um objeto com duas propriedades: `value` (o próximo valor na sequência) e `done` (um booleano indicando se a sequência terminou)."
O que são generators em JavaScript?,"Generators são funções especiais que podem pausar a execução e retornar um valor, e depois retomar a execução de onde pararam. Eles usam a palavra-chave `yield` para retornar valores."
Explique o uso da palavra-chave `yield` em generators.,"`yield` pausa a execução da função generator e retorna o valor especificado.  Quando o generator é retomado, a execução continua do ponto após o `yield`."
O que é destructuring em JavaScript?,Destructuring é uma expressão JavaScript que torna possível extrair dados de arrays ou objetos em variáveis distintas.
O que são rest parameters em JavaScript?,Rest parameters permitem que uma função aceite um número indefinido de argumentos como um array. Eles são representados por três pontos (`...`) seguidos pelo nome do array.
O que é spread syntax em JavaScript?,Spread syntax permite que um iterável (como um array ou string) seja expandido em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados. É representado por três pontos (`...`).
"Qual a diferença entre `var`, `let` e `const` em JavaScript?","`var` tem escopo de função ou global. `let` tem escopo de bloco. `const` também tem escopo de bloco, mas deve ser inicializada com um valor e não pode ser reatribuída."
O que é um bloco em JavaScript e como é definido?,Um bloco é um grupo de zero ou mais declarações dentro de chaves `{}`. Ele define um escopo para variáveis declaradas com `let` ou `const`.
O que são higher-order functions em JavaScript?,Higher-order functions são funções que recebem outras funções como argumentos ou retornam outras funções como resultados.
O que são callbacks em JavaScript?,Callbacks são funções que são passadas como argumentos para outras funções e são executadas quando um determinado evento ocorre ou uma operação é concluída.
O que é o método `map()` em JavaScript e como ele funciona?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array chamador.
O que é o método `filter()` em JavaScript e como ele funciona?,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em JavaScript e como ele funciona?,`reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o método `forEach()` em JavaScript e como ele funciona?,"`forEach()` executa uma função fornecida uma vez para cada elemento do array. Diferente de `map()`, ele não retorna um novo array."
O que é o método `sort()` em JavaScript e como ele funciona?,"`sort()` ordena os elementos de um array no local e retorna o array. A ordem de classificação padrão é construída com a conversão dos elementos em strings e, em seguida, comparando suas sequências de valores de unidades de código UTF-16."
O que são Promises em JavaScript?,Promises são objetos que representam a eventual conclusão (ou falha) de uma operação assíncrona e seu valor resultante.
Quais os estados possíveis de uma Promise em JavaScript?,"Os estados de uma Promise são: `pending` (pendente), `fulfilled` (realizada) e `rejected` (rejeitada)."
O que são as palavras-chave `async` e `await` em JavaScript?,`async` é usado para declarar uma função assíncrona. `await` é usado dentro de uma função assíncrona para pausar a execução até que uma Promise seja resolvida ou rejeitada.
O que é o método `then()` em JavaScript e como ele é usado com Promises?,`then()` é usado para lidar com o resultado de uma Promise que foi resolvida (fulfilled). Ele recebe uma função de callback que será executada com o valor resultante da Promise.
O que é o método `catch()` em JavaScript e como ele é usado com Promises?,`catch()` é usado para lidar com erros ou rejeições de uma Promise. Ele recebe uma função de callback que será executada se a Promise for rejeitada.
O que é o método `finally()` em JavaScript e como ele é usado com Promises?,"`finally()` permite executar código após uma Promise ser resolvida ou rejeitada, independentemente do resultado."
"O que é o conceito de ""event loop"" em JavaScript?",O event loop é um mecanismo que permite que o JavaScript lide com operações assíncronas sem bloquear o thread principal. Ele monitora a pilha de chamadas e a fila de tarefas e move tarefas da fila para a pilha quando a pilha está vazia.
"O que é o ""call stack"" em JavaScript?",O call stack é uma estrutura de dados que registra onde o programa está durante a execução. Ele rastreia as chamadas de função e garante que as funções sejam executadas na ordem correta.
"O que é o ""task queue"" em JavaScript?",O task queue é uma fila que contém as tarefas assíncronas que estão prontas para serem executadas. Essas tarefas são adicionadas à pilha de chamadas pelo event loop quando a pilha está vazia.
O que são eventos em JavaScript?,"Eventos são ações ou ocorrências que acontecem no navegador, como um clique do mouse, um pressionamento de tecla ou o carregamento de uma página."
Como adicionar um event listener a um elemento em JavaScript?,"Usa-se o método `addEventListener()` do objeto do elemento. Por exemplo: `element.addEventListener('click', function() { ... });`"
O que é o objeto `event` em JavaScript?,O objeto `event` é um objeto que contém informações sobre o evento que ocorreu. Ele é passado como argumento para a função de callback associada ao evento.
O que é event bubbling em JavaScript?,Event bubbling é o processo em que um evento disparado em um elemento filho se propaga para seus elementos pais na árvore DOM.
O que é event capturing em JavaScript?,Event capturing é o oposto de event bubbling.  O evento é primeiro capturado pelo elemento mais externo e propagado para o elemento alvo.
Como prevenir o comportamento padrão de um evento em JavaScript?,Usa-se o método `preventDefault()` do objeto `event`. Por exemplo: `event.preventDefault();`
Como interromper a propagação de um evento em JavaScript?,Usa-se o método `stopPropagation()` do objeto `event`. Por exemplo: `event.stopPropagation();`
O que é o DOM (Document Object Model)?,"O DOM é uma representação estruturada dos elementos HTML em uma página da web como objetos em uma árvore.  Ele permite que o JavaScript acesse e manipule o conteúdo, a estrutura e o estilo da página."
Como selecionar um elemento HTML no DOM usando JavaScript?,"Pode-se usar métodos como `document.getElementById()`, `document.querySelector()`, `document.querySelectorAll()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`."
Como modificar o conteúdo de um elemento HTML no DOM usando JavaScript?,Pode-se usar a propriedade `textContent` ou `innerHTML` do objeto do elemento.
Como adicionar um novo elemento HTML ao DOM usando JavaScript?,"Cria-se o elemento usando `document.createElement()`, define suas propriedades e, em seguida, usa métodos como `appendChild()` ou `insertBefore()` para adicioná-lo ao DOM."
Como remover um elemento HTML do DOM usando JavaScript?,Usa-se o método `removeChild()` do elemento pai.
O que são atributos de um elemento HTML?,"Atributos são propriedades que fornecem informações adicionais sobre um elemento HTML. Por exemplo, o atributo `src` de uma tag `<img>` especifica o caminho da imagem."
Como acessar e modificar os atributos de um elemento HTML usando JavaScript?,Usa-se os métodos `getAttribute()` e `setAttribute()` do objeto do elemento.
O que são classes CSS e como elas são usadas com JavaScript?,"Classes CSS são identificadores que podem ser usados para aplicar estilos a múltiplos elementos HTML. JavaScript pode ser usado para adicionar, remover ou verificar a existência de classes em elementos usando a propriedade `classList`."
Como adicionar uma classe CSS a um elemento HTML usando JavaScript?,Usa-se o método `classList.add()` do objeto do elemento.
Como remover uma classe CSS de um elemento HTML usando JavaScript?,Usa-se o método `classList.remove()` do objeto do elemento.
Como verificar se um elemento HTML possui uma determinada classe CSS usando JavaScript?,Usa-se o método `classList.contains()` do objeto do elemento.
O que é o objeto `console` em JavaScript?,"O objeto `console` fornece acesso ao console de depuração do navegador (ou outro ambiente de execução). Ele é usado para registrar mensagens, avisos e erros."
Quais são alguns dos métodos comuns do objeto `console` em JavaScript?,"Alguns métodos comuns são `console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`."
O que é o operador ternário em JavaScript?,O operador ternário é uma forma concisa de escrever uma instrução `if...else`. Sua sintaxe é `condição ? expressão_se_verdadeira : expressão_se_falsa`.
O que é o operador de coalescência nula (nullish coalescing operator) `??` em JavaScript?,"O operador de coalescência nula retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo."
O que é o operador de encadeamento opcional (optional chaining operator) `?.` em JavaScript?,"O operador de encadeamento opcional permite acessar propriedades aninhadas de um objeto sem verificar explicitamente se cada nível existe. Se uma propriedade no caminho for `null` ou `undefined`, o operador retorna `undefined` em vez de lançar um erro."
O que é o método `Object.keys()` em JavaScript?,`Object.keys()` retorna um array contendo os nomes de todas as propriedades enumeráveis de um determinado objeto.
O que é o método `Object.values()` em JavaScript?,`Object.values()` retorna um array contendo os valores de todas as propriedades enumeráveis de um determinado objeto.
O que é o método `Object.entries()` em JavaScript?,"`Object.entries()` retorna um array de arrays, onde cada subarray contém o nome e o valor de cada propriedade enumerável de um determinado objeto."
O que é o método `Object.assign()` em JavaScript?,`Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto de destino. Ele retorna o objeto de destino.
O que é o método `JSON.stringify()` em JavaScript?,`JSON.stringify()` converte um objeto JavaScript em uma string JSON.
O que é o método `JSON.parse()` em JavaScript?,`JSON.parse()` converte uma string JSON em um objeto JavaScript.
O que são módulos em JavaScript (ES Modules)?,"Módulos permitem dividir o código em arquivos separados, tornando-o mais organizado e reutilizável. Eles usam as palavras-chave `import` e `export` para compartilhar código entre arquivos."
Como exportar uma variável ou função de um módulo em JavaScript?,Usa-se a palavra-chave `export`. Por exemplo: `export const minhaVariavel = 42;` ou `export function minhaFuncao() { ... }`
Como importar uma variável ou função de um módulo em JavaScript?,"Usa-se a palavra-chave `import`. Por exemplo: `import { minhaVariavel, minhaFuncao } from './meuModulo.js';`"
O que é uma exportação padrão (default export) em JavaScript?,Uma exportação padrão permite exportar um único valor de um módulo sem especificar um nome. Por exemplo: `export default minhaFuncao;`
Como importar uma exportação padrão em JavaScript?,Usa-se a palavra-chave `import` sem as chaves. Por exemplo: `import minhaFuncao from './meuModulo.js';`
O que é o objeto `Math` em JavaScript?,O objeto `Math` fornece propriedades e métodos para operações matemáticas.
Quais são alguns métodos comuns do objeto `Math` em JavaScript?,"Alguns métodos comuns são `Math.random()`, `Math.round()`, `Math.ceil()`, `Math.floor()`, `Math.abs()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`."
O que é o objeto `Date` em JavaScript?,O objeto `Date` é usado para trabalhar com datas e horários.
Como criar um novo objeto `Date` em JavaScript?,"Usa-se o construtor `new Date()`. Pode ser criado sem argumentos (data e hora atuais), com um timestamp em milissegundos, com uma string de data ou com argumentos separados para ano, mês, dia, etc."
"Como obter o ano, mês, dia, hora, minuto, segundo e milissegundo de um objeto `Date` em JavaScript?","Usam-se os métodos `getFullYear()`, `getMonth()`, `getDate()`, `getHours()`, `getMinutes()`, `getSeconds()`, `getMilliseconds()`."
Como formatar uma data em JavaScript?,"Pode-se usar os métodos `toLocaleDateString()`, `toLocaleTimeString()` ou `toLocaleString()` para formatar a data e a hora de acordo com a localidade do usuário.  Também se pode usar o método `Intl.DateTimeFormat` para formatação mais avançada."
O que é o método `setTimeout()` em JavaScript?,`setTimeout()` executa uma função ou trecho de código após um determinado período de tempo (em milissegundos).
O que é o método `setInterval()` em JavaScript?,`setInterval()` executa uma função ou trecho de código repetidamente em intervalos regulares (em milissegundos).
Como cancelar um `setTimeout()` em JavaScript?,Usa-se a função `clearTimeout()` passando o ID retornado por `setTimeout()` como argumento.
Como cancelar um `setInterval()` em JavaScript?,Usa-se a função `clearInterval()` passando o ID retornado por `setInterval()` como argumento.
O que são expressões regulares em JavaScript?,Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings.
Como criar uma expressão regular em JavaScript?,Pode-se criar uma expressão regular usando um literal (entre barras `/`) ou usando o construtor `new RegExp()`.
Quais são alguns métodos comuns para trabalhar com expressões regulares em JavaScript?,"Alguns métodos comuns são `test()`, `exec()`, `match()`, `search()`, `replace()`, `split()`."
O que é o método `String.prototype.trim()` em JavaScript?,`trim()` remove os espaços em branco do início e do final de uma string.
O que é o método `String.prototype.toUpperCase()` em JavaScript?,`toUpperCase()` converte todos os caracteres de uma string para maiúsculas.
O que é o método `String.prototype.toLowerCase()` em JavaScript?,`toLowerCase()` converte todos os caracteres de uma string para minúsculas.
O que é o método `String.prototype.substring()` em JavaScript?,`substring()` retorna uma parte da string entre os índices especificados.
O que é o método `String.prototype.slice()` em JavaScript?,"`slice()` extrai uma seção de uma string e retorna uma nova string. É similar a `substring()`, mas aceita índices negativos."
O que é o método `String.prototype.replace()` em JavaScript?,`replace()` retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por um substituto.
O que é o método `String.prototype.split()` em JavaScript?,"`split()` divide uma string em um array de substrings, usando um separador especificado."
O que é o método `Array.prototype.push()` em JavaScript?,`push()` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
O que é o método `Array.prototype.pop()` em JavaScript?,`pop()` remove o último elemento de um array e retorna esse elemento.
O que é o método `Array.prototype.shift()` em JavaScript?,`shift()` remove o primeiro elemento de um array e retorna esse elemento.
O que é o método `Array.prototype.unshift()` em JavaScript?,`unshift()` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
O que é o método `Array.prototype.concat()` em JavaScript?,`concat()` retorna um novo array que é a combinação de dois ou mais arrays.
O que é o método `Array.prototype.join()` em JavaScript?,"`join()` retorna uma nova string concatenando todos os elementos de um array, separados por um separador especificado."
O que é o método `Array.prototype.splice()` em JavaScript?,"`splice()` altera o conteúdo de um array, removendo ou substituindo elementos existentes e/ou adicionando novos elementos no local."
O que é o método `Array.prototype.indexOf()` em JavaScript?,"`indexOf()` retorna o primeiro índice em que um dado elemento pode ser encontrado no array, ou -1 se ele não estiver presente."
O que é o método `Array.prototype.includes()` em JavaScript?,"`includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado."
O que são erros em JavaScript?,"Erros são problemas que ocorrem durante a execução do código, interrompendo o fluxo normal do programa."
Quais são alguns tipos comuns de erros em JavaScript?,"Alguns tipos comuns são `TypeError`, `ReferenceError`, `SyntaxError`, `RangeError`, `URIError`."
Como tratar erros em JavaScript usando `try...catch`?,O bloco `try` contém o código que pode gerar um erro. O bloco `catch` contém o código que é executado se um erro for lançado dentro do bloco `try`.
O que é o bloco `finally` em um bloco `try...catch`?,"O bloco `finally` contém o código que é sempre executado, independentemente de um erro ter sido lançado ou não no bloco `try`."
Como lançar um erro personalizado em JavaScript?,Usa-se a palavra-chave `throw` seguida de um objeto `Error` ou qualquer outro valor.
O que é o modo estrito (strict mode) em JavaScript?,"O modo estrito é uma forma de executar o JavaScript de forma mais ""segura"", aplicando regras mais rigorosas e eliminando alguns comportamentos ""perigosos"" da linguagem."
Como ativar o modo estrito em JavaScript?,"Adiciona-se a string `""use strict"";` no início de um script ou de uma função."
Quais são alguns benefícios de usar o modo estrito em JavaScript?,"O modo estrito ajuda a prevenir erros comuns, torna o código mais fácil de depurar e melhora o desempenho."
O que é o método `Array.isArray()` em JavaScript?,"`Array.isArray()` retorna `true` se um objeto é um array, caso contrário, retorna `false`."
O que é o método `Number.isNaN()` em JavaScript?,`Number.isNaN()` determina se um valor é `NaN` (Not-a-Number). É mais confiável que a função global `isNaN()`.
O que é o método `Number.isFinite()` em JavaScript?,`Number.isFinite()` determina se um valor é um número finito.
O que é o objeto `Map` em JavaScript?,`Map` é uma coleção de pares chave-valor onde as chaves podem ser de qualquer tipo de dado.
O que é o objeto `Set` em JavaScript?,`Set` é uma coleção de valores únicos.
O que é o Garbage Collection em JavaScript?,Garbage Collection é o processo automático de gerenciamento de memória em JavaScript.  O coletor de lixo identifica e libera memória que não está mais sendo usada pelo programa.
O que é o método `encodeURIComponent()` em JavaScript?,"`encodeURIComponent()` codifica um componente URI (Uniform Resource Identifier) substituindo cada instância de certos caracteres por uma, duas, três ou quatro sequências de escape representando a codificação UTF-8 do caractere."
O que é o método `decodeURIComponent()` em JavaScript?,`decodeURIComponent()` decodifica um componente URI (Uniform Resource Identifier) que foi previamente criado por `encodeURIComponent()`
O que é o método `encodeURI()` em JavaScript?,"`encodeURI()` codifica um URI (Uniform Resource Identifier) substituindo cada instância de certos caracteres por uma, duas, três ou quatro sequências de escape representando a codificação UTF-8 do caractere (exceto os caracteres que possuem um significado especial em um URI)."
O que é o método `decodeURI()` em JavaScript?,`decodeURI()` decodifica um URI (Uniform Resource Identifier) que foi previamente criado por `encodeURI()`
O que é JSONP? E por que é usado?,"JSONP (JSON with Padding) é uma técnica para contornar a política de mesma origem (same-origin policy) em navegadores, permitindo que páginas da web obtenham dados de um servidor em um domínio diferente.  Utiliza a tag `<script>` para fazer a requisição. *Nota: É uma técnica mais antiga e menos segura que CORS.*"
O que é CORS? E como funciona?,CORS (Cross-Origin Resource Sharing) é um mecanismo que permite que recursos restritos em uma página da web sejam requisitados de outro domínio fora do domínio do qual o primeiro recurso foi servido.  O servidor responde com cabeçalhos HTTP que indicam se a requisição cross-origin é permitida.
O que é o tipo de dado `Symbol` em JavaScript?,`Symbol` é um tipo de dado primitivo cujas instâncias são únicas e imutáveis. São frequentemente usados como chaves de propriedades de objetos para evitar conflitos de nomes.
O que são WeakMaps em JavaScript?,"WeakMaps são coleções de pares chave-valor onde as chaves devem ser objetos e os objetos são mantidos ""fracos"". Isso significa que se não houver outras referências a esses objetos, o garbage collector pode liberá-los, e suas entradas correspondentes no WeakMap serão removidas automaticamente."
O que são WeakSets em JavaScript?,"WeakSets são coleções de objetos onde os objetos são mantidos ""fracos"". Similar aos WeakMaps, se não houver outras referências a esses objetos, o garbage collector pode liberá-los, e os objetos são removidos do WeakSet automaticamente."
"O que é ""Shadow DOM""?","Shadow DOM é uma tecnologia do navegador que permite encapsular o conteúdo de um componente web, isolando-o do DOM principal. Isso permite que você crie componentes reutilizáveis com seus próprios estilos e scripts, sem se preocupar com conflitos com o restante da página."
Explique o conceito de Imutabilidade em JavaScript.,"Imutabilidade significa que, uma vez que um valor é criado, ele não pode ser alterado. Objetos e arrays em JavaScript são mutáveis por padrão. Para trabalhar com imutabilidade, você pode usar técnicas como `Object.freeze()`, `const` para variáveis de referência ou bibliotecas que fornecem estruturas de dados imutáveis."
O que são funções puras em JavaScript?,Uma função pura é uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais observáveis. Isso significa que ela não modifica o estado externo à função.
O que são Efeitos Colaterais (Side Effects) em JavaScript?,"Efeitos colaterais são alterações de estado ou interações com o mundo externo que ocorrem como resultado da execução de uma função. Exemplos incluem modificar variáveis globais, fazer requisições HTTP, ou interagir diretamente com o DOM."
O que é memoization?,"Memoization é uma técnica de otimização onde os resultados de chamadas de funções caras (computacionalmente) são armazenados em cache e reutilizados quando as mesmas entradas ocorrem novamente, evitando recalcular o resultado."
O que é o padrão de projeto Módulo (Module Pattern) em JavaScript?,O padrão de projeto Módulo é uma forma de encapsular código JavaScript para criar interfaces públicas e manter o estado privado. Ele geralmente usa closures para proteger variáveis internas do acesso externo.
O que é o padrão de projeto Revelador de Módulo (Revealing Module Pattern) em JavaScript?,"O padrão de projeto Revelador de Módulo é uma variação do padrão de projeto Módulo onde você define todas as funções e variáveis privadas dentro do closure e, em seguida, revela seletivamente as funções públicas retornando um objeto com referências a essas funções."
O que é um Polyfill?,Um Polyfill é um trecho de código (geralmente JavaScript) que fornece a funcionalidade que você espera que o navegador forneça nativamente. É usado para fornecer suporte a recursos modernos em navegadores mais antigos que não os implementam.
"Explique a diferença entre ""feature detection"" e ""user agent sniffing"".","""Feature detection"" envolve verificar se um determinado recurso está disponível no navegador antes de usá-lo. ""User agent sniffing"" envolve analisar a string do agente do usuário para identificar o navegador e a versão, o que é menos confiável e mais propenso a erros."
O que é um Service Worker?,"Um Service Worker é um script JavaScript que roda em segundo plano, separado da página da web, interceptando e controlando solicitações de rede, gerenciando cache e enviando notificações push. É uma tecnologia essencial para Progressive Web Apps (PWAs)."
Como verificar se um valor é um objeto em JavaScript (excluindo null)?,Uma maneira é usar `typeof valor === 'object' && valor !== null`.
O que é o operador `in` em JavaScript?,O operador `in` retorna `true` se uma propriedade especificada existe no objeto especificado ou em sua cadeia de protótipos. Por exemplo: `'propriedade' in objeto`.
O que é o `Proxy` object em JavaScript?,"O `Proxy` object permite interceptar e personalizar operações fundamentais em objetos (por exemplo, leitura de propriedades, atribuição, enumeração, chamadas de função). Ele cria um ""proxy"" para outro objeto, permitindo que você controle seu comportamento."
O que é o `Reflect` object em JavaScript?,O `Reflect` object é um objeto embutido que fornece métodos que interceptam operações JavaScript. Ele não é um construtor (você não pode usar `new Reflect()`) e seus métodos são os mesmos que os manipuladores de Proxy.
"Qual a diferença entre ""shallow copy"" e ""deep copy"" de um objeto em JavaScript?","Um ""shallow copy"" cria um novo objeto, mas as propriedades que contêm objetos ou arrays são apenas referências aos mesmos objetos ou arrays originais. Um ""deep copy"" cria um novo objeto e copia todos os objetos e arrays aninhados recursivamente, resultando em objetos totalmente independentes."
"Como criar um ""deep copy"" de um objeto em JavaScript?","Uma maneira comum é usar `JSON.parse(JSON.stringify(objeto))`, mas isso tem limitações (por exemplo, não funciona com funções ou objetos que contêm referências circulares). Outras opções incluem usar bibliotecas especializadas ou implementar uma função de cópia recursiva."
O que é o padrão Observer?,"O padrão Observer define uma dependência um-para-muitos entre objetos, de forma que quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
O que são IIFEs (Immediately Invoked Function Expressions)?,IIFEs são funções JavaScript que são executadas assim que são definidas. Elas são frequentemente usadas para criar escopos privados para evitar conflitos de nomes no escopo global. Um exemplo: `(function() { /* código */ })();`
"Explique o conceito de ""prototype chain"" em JavaScript.","A ""prototype chain"" é um mecanismo em JavaScript onde os objetos herdam propriedades e métodos de seus protótipos. Quando uma propriedade é acessada em um objeto, o JavaScript primeiro procura a propriedade no próprio objeto. Se não for encontrada, ele procura no protótipo do objeto e assim por diante, até atingir o protótipo `null`."
Como criar herança prototipal em JavaScript?,"Isso pode ser feito definindo o protótipo do novo objeto para uma instância do objeto pai. Por exemplo, usando `Object.create(ObjetoPai.prototype)`."
O que é `WeakRef` em JavaScript?,"`WeakRef` é uma maneira de manter uma referência fraca a outro objeto, o que significa que o objeto referenciado não é mantido vivo apenas por causa da referência `WeakRef`. É útil para evitar vazamentos de memória em cenários onde você precisa manter uma referência a um objeto, mas não quer impedir que ele seja coletado pelo garbage collector."
O que é FinalizationRegistry em JavaScript?,`FinalizationRegistry` permite registrar uma função para ser chamada quando um objeto específico é coletado pelo coletor de lixo. É usado em conjunto com `WeakRef` para executar ações de limpeza quando um objeto é liberado da memória.
O que é o Intl.NumberFormat em JavaScript?,"O objeto `Intl.NumberFormat` é um construtor que permite formatar números de acordo com uma localidade específica. Ele permite formatar moedas, porcentagens e números gerais com opções como separadores de milhares, casas decimais e símbolos de moeda.

**Pergunta"
Qual é a diferença entre `null` e `undefined` em JavaScript?,"`null` é um valor de atribuição. Ele representa a ausência intencional de um valor. `undefined` significa que uma variável foi declarada, mas ainda não recebeu um valor."
Como você declara uma constante em JavaScript?,Usando a palavra-chave `const`. Exemplo: `const PI = 3.14159;`
Qual é a diferença entre `==` e `===` em JavaScript?,"`==` compara apenas o valor, realizando conversão de tipo se necessário. `===` compara tanto o valor quanto o tipo, sem conversão de tipo."
Como você itera sobre as propriedades de um objeto em JavaScript?,"Usando o loop `for...in`. Exemplo: `for (let key in obj) { console.log(key, obj[key]); }`"
Como você cria um novo objeto em JavaScript usando a notação literal?,"Usando chaves `{}` e definindo as propriedades com pares chave-valor. Exemplo: `let obj = { nome: ""João"", idade: 30 };`"
Qual é o propósito da palavra-chave `this` em JavaScript?,`this` refere-se ao contexto de execução atual. Seu valor depende de como a função é chamada.
Como você converte uma string para um número em JavaScript?,"Usando `parseInt()` ou `parseFloat()`. Exemplo: `parseInt(""10"");`, `parseFloat(""3.14"");`"
O que é um array em JavaScript?,"Um array é uma coleção ordenada de valores, que podem ser de qualquer tipo de dado."
Como você adiciona um elemento ao final de um array em JavaScript?,"Usando o método `push()`. Exemplo: `array.push(""novo elemento"");`"
Como você remove o último elemento de um array em JavaScript?,Usando o método `pop()`. Exemplo: `array.pop();`
Como você declara uma função anônima em JavaScript?,"Uma função anônima é uma função sem nome. Exemplo: `function() { console.log(""Função anônima""); }`"
O que é o operador `typeof` em JavaScript?,"Retorna uma string indicando o tipo de dado de um operando. Exemplo: `typeof 10; // ""number""`"
Como você cria uma cópia superficial (shallow copy) de um objeto em JavaScript?,Usando o operador spread (`...`) ou o método `Object.assign()`.
O que é o método `map()` em JavaScript?,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em JavaScript?,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em JavaScript?,"O método `reduce()` executa uma função reducer (fornecida por você) em cada elemento do array, resultando em um único valor de retorno."
Como você verifica se uma variável é um array em JavaScript?,"Usando o método `Array.isArray()`. Exemplo: `Array.isArray([1, 2, 3]); // true`"
Qual a diferença entre `let` e `var` em JavaScript?,"`var` tem escopo de função ou global, enquanto `let` tem escopo de bloco. `let` não permite redeclaração dentro do mesmo escopo."
Como você define um valor padrão para um parâmetro de função em JavaScript?,"Usando atribuição dentro da declaração do parâmetro. Exemplo: `function saudacao(nome = ""Visitante"") { ... }`"
O que é template literals em JavaScript?,"São strings que permitem expressões embutidas. Delimitadas por backticks (``). Exemplo: `let nome = ""João""; console.log(`Olá, ${nome}!`);`"
O que é o operador spread (...) em JavaScript?,Permite expandir um iterável (como um array ou objeto) em locais onde múltiplos argumentos (para chamadas de função) ou múltiplos elementos (para literais de array) são esperados.
O que são arrow functions em JavaScript?,"São uma forma mais concisa de escrever funções, especialmente úteis para funções anônimas. Exemplo: `let soma = (a, b) => a + b;`"
Como você impede que um evento padrão ocorra em JavaScript?,Usando o método `preventDefault()` no objeto do evento.
O que é o método `stopPropagation()` em JavaScript?,Impede que um evento se propague para elementos pai na árvore DOM.
Como você seleciona um elemento HTML pelo ID usando JavaScript?,"Usando o método `document.getElementById()`. Exemplo: `document.getElementById(""meuElemento"");`"
Como você seleciona múltiplos elementos HTML por sua classe usando JavaScript?,"Usando o método `document.getElementsByClassName()`. Exemplo: `document.getElementsByClassName(""minhaClasse"");`"
Como você altera o conteúdo de um elemento HTML usando JavaScript?,Alterando a propriedade `innerHTML` ou `textContent` do elemento.
Como você altera o estilo de um elemento HTML usando JavaScript?,"Acessando a propriedade `style` do elemento e modificando suas propriedades. Exemplo: `elemento.style.color = ""red"";`"
Como você adiciona um novo elemento HTML ao DOM usando JavaScript?,"Criando o elemento com `document.createElement()`, definindo suas propriedades e adicionando-o ao DOM com `appendChild()`."
Como você remove um elemento HTML do DOM usando JavaScript?,Usando o método `removeChild()` no elemento pai do elemento que você deseja remover.
Como você adiciona um ouvinte de eventos (event listener) a um elemento HTML usando JavaScript?,"Usando o método `addEventListener()`. Exemplo: `elemento.addEventListener(""click"", minhaFuncao);`"
Quais são os diferentes tipos de eventos que você pode escutar em JavaScript?,"`click`, `mouseover`, `mouseout`, `keydown`, `keyup`, `submit`, `load`, `DOMContentLoaded`, etc."
O que é um evento de bubbling?,É quando um evento disparado em um elemento também dispara nos seus elementos pais na árvore DOM.
O que é um evento de capturing?,É quando um evento é primeiro capturado pelo elemento mais externo na árvore DOM antes de ser disparado no elemento alvo.
Como você cria um timer em JavaScript que executa uma função repetidamente?,Usando o método `setInterval()`.
Como você cria um timer em JavaScript que executa uma função apenas uma vez após um atraso?,Usando o método `setTimeout()`.
O que é JSON (JavaScript Object Notation)?,"É um formato de dados leve e legível por humanos, usado para transmitir dados entre um servidor e um navegador da web."
Como você converte um objeto JavaScript em uma string JSON?,Usando o método `JSON.stringify()`.
Como você converte uma string JSON em um objeto JavaScript?,Usando o método `JSON.parse()`.
Como você cria um objeto `Date` em JavaScript?,Usando o construtor `new Date()`.
Como você formata uma data em JavaScript?,Usando os métodos do objeto `Date` (ex: `toLocaleDateString()`) ou bibliotecas de formatação de data.
Como você gera um número aleatório entre 0 e 1 em JavaScript?,Usando o método `Math.random()`.
Como você arredonda um número para o inteiro mais próximo em JavaScript?,Usando o método `Math.round()`.
O que é o método `padStart()` em JavaScript?,"Preenche o início da string atual com outra string (repetidas vezes, se necessário) para que a string resultante alcance um determinado comprimento."
O que é o método `padEnd()` em JavaScript?,"Preenche o final da string atual com outra string (repetidas vezes, se necessário) para que a string resultante alcance um determinado comprimento."
O que é o operador `??` (nullish coalescing operator) em JavaScript?,"Retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo."
O que é o operador `?.` (optional chaining operator) em JavaScript?,"Permite acessar propriedades aninhadas de um objeto sem ter que verificar explicitamente se cada referência na cadeia é válida. Se uma referência for `null` ou `undefined`, a expressão retorna `undefined` em vez de lançar um erro."
O que são promises em JavaScript?,Promises representam o eventual sucesso (ou falha) de uma operação assíncrona e permitem que você escreva código assíncrono de uma forma mais legível e gerenciável.
Quais são os três estados possíveis de uma promise em JavaScript?,"Pendente (pending), Cumprida (fulfilled) e Rejeitada (rejected)."
Como você cria uma promise em JavaScript?,"Usando o construtor `new Promise((resolve, reject) => { ... });`"
Como você lida com o resultado de uma promise cumprida em JavaScript?,Usando o método `.then()`.
Como você lida com o resultado de uma promise rejeitada em JavaScript?,Usando o método `.catch()`.
O que é `async/await` em JavaScript?,"É uma sintaxe mais elegante para trabalhar com promises, que torna o código assíncrono mais parecido com código síncrono."
Como você declara uma função assíncrona em JavaScript?,Usando a palavra-chave `async` antes da palavra-chave `function`. Exemplo: `async function minhaFuncao() { ... }`
O que faz a palavra-chave `await` em JavaScript?,Pausa a execução da função assíncrona até que a promise seja resolvida (cumprida ou rejeitada).
Qual é o escopo de uma variável declarada com `var` dentro de uma função?,Escopo de função.
Qual é o escopo de uma variável declarada com `let` dentro de um bloco?,Escopo de bloco.
Qual é o escopo de uma variável declarada com `const` dentro de um bloco?,Escopo de bloco.
O que é o objeto `document` em JavaScript?,Representa o documento HTML ou XML carregado na janela do navegador.
O que é o objeto `navigator` em JavaScript?,Contém informações sobre o navegador do usuário.
Como você obtém a largura da janela do navegador em JavaScript?,Usando `window.innerWidth`.
Como você obtém a altura da janela do navegador em JavaScript?,Usando `window.innerHeight`.
Como você redireciona o usuário para outra página usando JavaScript?,"Usando `window.location.href = ""url"";`"
Como você recarrega a página atual usando JavaScript?,Usando `window.location.reload();`
Como você exibe uma mensagem no console usando JavaScript?,Usando `console.log()`.
Como você exibe um aviso no console usando JavaScript?,Usando `console.warn()`.
Como você exibe um erro no console usando JavaScript?,Usando `console.error()`.
O que é um breakpoint em JavaScript?,É um ponto em seu código onde a execução será pausada para que você possa inspecionar o estado do programa.
Como você define um breakpoint no código JavaScript no navegador?,Usando as ferramentas de desenvolvedor do navegador.
O que são cookies em JavaScript?,São pequenos arquivos de texto que os sites armazenam no computador do usuário para lembrar informações sobre ele.
Como você define um cookie usando JavaScript?,Manipulando a propriedade `document.cookie`.
Como você lê um cookie usando JavaScript?,Acessando a propriedade `document.cookie` e analisando a string.
Como você exclui um cookie usando JavaScript?,Definindo o cookie com uma data de expiração no passado.
O que é o armazenamento local (localStorage) em JavaScript?,"É um mecanismo de armazenamento web que permite que você armazene dados localmente no navegador do usuário, sem data de expiração."
Como você armazena um valor no armazenamento local usando JavaScript?,"Usando `localStorage.setItem(""chave"", ""valor"");`"
Como você recupera um valor do armazenamento local usando JavaScript?,"Usando `localStorage.getItem(""chave"");`"
Como você remove um valor do armazenamento local usando JavaScript?,"Usando `localStorage.removeItem(""chave"");`"
O que é o armazenamento de sessão (sessionStorage) em JavaScript?,"É semelhante ao armazenamento local, mas os dados são armazenados apenas durante a sessão do navegador."
Como você armazena um valor no armazenamento de sessão usando JavaScript?,"Usando `sessionStorage.setItem(""chave"", ""valor"");`"
Como você recupera um valor do armazenamento de sessão usando JavaScript?,"Usando `sessionStorage.getItem(""chave"");`"
Como você remove um valor do armazenamento de sessão usando JavaScript?,"Usando `sessionStorage.removeItem(""chave"");`"
O que é o método `forEach()` em JavaScript?,Executa uma função fornecida uma vez para cada elemento em um array.
O que é o método `find()` em JavaScript?,"Retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
O que é o método `findIndex()` em JavaScript?,"Retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `-1`."
O que é o método `some()` em JavaScript?,"Testa se pelo menos um elemento no array passa no teste implementado pela função fornecida. Retorna `true` se, no array, encontra um elemento para o qual a função fornecida retorna `true`; caso contrário, retorna `false`."
O que é o método `every()` em JavaScript?,"Testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna `true` se todos os elementos no array passam no teste implementado; caso contrário, retorna `false`."
O que é um iterador em JavaScript?,"É um objeto que define uma sequência e, ao terminar, retorna um valor. Especificamente, implementa o protocolo Iterator com um método `next()` que retorna um objeto com propriedades `value` e `done`."
O que é um gerador em JavaScript?,"Funções que podem ser pausadas e retomadas, permitindo produzir uma série de valores ao longo do tempo. Utilizam a palavra-chave `yield`."
Como você declara um gerador em JavaScript?,Usando a palavra-chave `function*`. Exemplo: `function* gerador() { yield 1; yield 2; }`
O que é o operador `yield` em JavaScript?,Usado dentro de uma função geradora para pausar a execução e retornar um valor.
O que são módulos em JavaScript?,São arquivos que contêm código JavaScript reutilizável que pode ser importado para outros arquivos.
Como você importa um módulo em JavaScript? (usando ES Modules),Usando a palavra-chave `import`. Exemplo: `import { funcao } from './modulo.js';`
Como você exporta um módulo em JavaScript? (usando ES Modules),Usando a palavra-chave `export`. Exemplo: `export function funcao() { ... }`
O que é uma exportação nomeada (named export) em JavaScript?,"Permite exportar múltiplas variáveis, funções ou classes de um módulo, que são importadas usando chaves. Exemplo: `export { funcao1, funcao2 };`"
Como você habilita o modo estrito em JavaScript?,"Adicionando a string `""use strict"";` no início do arquivo ou da função."
Quais são alguns dos benefícios de usar o modo estrito em JavaScript?,"Impede o uso de variáveis não declaradas, lança erros para atribuições a propriedades não graváveis, impede o uso de palavras reservadas como nomes de variáveis, etc."
O que é o método `bind()` em JavaScript?,"Cria uma nova função que, quando chamada, tem sua palavra-chave `this` definida para o valor fornecido."
O que é o método `call()` em JavaScript?,Chama uma função com um dado valor `this` e argumentos fornecidos individualmente.
O que é o método `apply()` em JavaScript?,Chama uma função com um dado valor `this` e argumentos fornecidos como um array (ou um objeto semelhante a um array).
O que é currying em JavaScript?,É uma técnica que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento.
O que é a diferença entre uma função pura e uma função com efeitos colaterais em JavaScript?,Uma função pura sempre retorna o mesmo resultado para as mesmas entradas e não causa efeitos colaterais (não modifica o estado externo). Uma função com efeitos colaterais pode modificar o estado externo.
O que é a recursão em JavaScript?,É quando uma função chama a si mesma dentro de sua própria definição.
Quais são os perigos de usar recursão sem uma condição de parada adequada em JavaScript?,"Pode levar a um estouro de pilha (stack overflow), causando um erro e travando o programa."
O que é programação orientada a objetos (OOP) em JavaScript?,"É um paradigma de programação que organiza o código em objetos, que são instâncias de classes e contêm dados (atributos) e comportamentos (métodos)."
O que é uma classe em JavaScript?,É um modelo para criar objetos. Define os atributos e métodos que os objetos terão.
Como você define uma classe em JavaScript?,Usando a palavra-chave `class`. Exemplo: `class Pessoa { ... }`
O que é um construtor em uma classe JavaScript?,É um método especial dentro de uma classe que é chamado quando um novo objeto da classe é criado. É usado para inicializar os atributos do objeto.
Como você cria um novo objeto de uma classe JavaScript?,"Usando a palavra-chave `new`. Exemplo: `let pessoa = new Pessoa(""João"", 30);`"
O que é herança em programação orientada a objetos (OOP)?,É um mecanismo que permite que uma classe (subclasse ou classe filha) herde atributos e métodos de outra classe (superclasse ou classe pai).
Como você implementa herança em JavaScript?,Usando a palavra-chave `extends`. Exemplo: `class Estudante extends Pessoa { ... }`
O que é polimorfismo em programação orientada a objetos (OOP)?,"É a capacidade de um objeto assumir muitas formas. Em outras palavras, objetos de diferentes classes podem responder ao mesmo método de maneiras diferentes."
O que é encapsulamento em programação orientada a objetos (OOP)?,É a prática de agrupar dados (atributos) e os métodos que operam nesses dados dentro de uma unidade (classe) e restringir o acesso direto aos dados de fora da unidade.
O que são métodos estáticos em JavaScript?,"São métodos que pertencem à classe em si, e não às instâncias da classe. Eles são chamados diretamente na classe, sem precisar criar um objeto."
Como você define um método estático em JavaScript?,Usando a palavra-chave `static` antes da definição do método. Exemplo: `static metodoEstatico() { ... }`
O que é o método `Object.freeze()` em JavaScript?,"Congela um objeto. Um objeto congelado não pode mais ser alterado; congelar um objeto impede que novas propriedades sejam adicionadas a ele, impede que as propriedades existentes sejam removidas e impede que os valores das propriedades existentes sejam alterados."
O que é o método `Object.seal()` em JavaScript?,"Veda um objeto, impedindo que novas propriedades sejam adicionadas a ele e marcando todas as propriedades existentes como não configuráveis. Os valores das propriedades existentes ainda podem ser alterados, desde que sejam graváveis."
O que é o método `Object.is()` em JavaScript?,"Determina se dois valores são o mesmo valor. Ele se comporta de forma semelhante ao operador de igualdade estrita (`===`), mas trata `NaN` e `-0` de forma diferente."
O que são iterables em JavaScript?,São objetos que podem ser iterados usando um loop `for...of`. Eles possuem um método `Symbol.iterator` que retorna um iterador.
Como você cria um iterable personalizado em JavaScript?,Implementando o método `Symbol.iterator` no objeto.
O que é o método `hasOwnProperty()` em JavaScript?,Retorna um booleano indicando se o objeto tem a propriedade especificada como uma propriedade direta (não herdada).
O que é o conceito de immutabilidade em JavaScript?,"Significa que, uma vez criado, um objeto não pode ser alterado. Em vez de modificar o objeto original, você cria uma nova cópia com as alterações."
Quais são os benefícios de usar objetos imutáveis em JavaScript?,"Melhora a previsibilidade do código, facilita a depuração, e otimiza a detecção de mudanças."
Quais são algumas técnicas para alcançar a imutabilidade em JavaScript?,"Usar `const` para declarar variáveis, evitar métodos que modificam arrays e objetos diretamente (como `push`, `pop`, `splice`), usar métodos que retornam novas cópias (como `map`, `filter`, `slice`, spread operator)."
O que é um proxy em JavaScript?,"Permite interceptar e personalizar operações fundamentais em objetos (como leitura, escrita, enumeração, etc.)."
Como você cria um proxy em JavaScript?,"Usando o construtor `new Proxy(target, handler)`."
O que é o `target` em um proxy JavaScript?,É o objeto que o proxy está virtualizando.
O que é o `handler` em um proxy JavaScript?,É um objeto que contém métodos (chamados traps) que interceptam e personalizam as operações no `target`.
Qual é a principal diferença entre Maps e WeakMaps em JavaScript?,"As chaves em um Map podem ser de qualquer tipo de dado, enquanto as chaves em um WeakMap devem ser objetos. Além disso, as chaves em WeakMaps são fracamente referenciadas, o que significa que podem ser coletadas pelo coletor de lixo se não houver mais referências a elas."
Qual é a principal diferença entre Sets e WeakSets em JavaScript?,"Os valores em um Set podem ser de qualquer tipo de dado, enquanto os valores em um WeakSet devem ser objetos. Além disso, os objetos em WeakSets são fracamente referenciados."
O que é o método `trim()` em JavaScript?,Remove espaços em branco do início e do fim de uma string.
O que é o método `trimStart()` ou `trimLeft()` em JavaScript?,Remove espaços em branco do início de uma string.
O que é o método `trimEnd()` ou `trimRight()` em JavaScript?,Remove espaços em branco do final de uma string.
O que é o método `includes()` em JavaScript?,"Determina se uma string contém outra string especificada. Retorna `true` se a string contém a string especificada, caso contrário, retorna `false`."
O que é o método `startsWith()` em JavaScript?,"Determina se uma string começa com os caracteres de uma string especificada. Retorna `true` se a string começa com os caracteres especificados, caso contrário, retorna `false`."
O que é o método `endsWith()` em JavaScript?,"Determina se uma string termina com os caracteres de uma string especificada. Retorna `true` se a string termina com os caracteres especificados, caso contrário, retorna `false`."
O que é o método `replace()` em JavaScript?,Retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por um substituto. O padrão pode ser uma string ou um objeto RegExp.
O que é o método `replaceAll()` em JavaScript?,Retorna uma nova string com todas as ocorrências de um padrão substituídas por um substituto.
O que é o método `split()` em JavaScript?,"Divide uma string em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array."
O que é o método `substring()` em JavaScript?,"Retorna uma parte da string entre os índices inicial e final, ou até o final da string."
O que é o método `slice()` em JavaScript?,Extrai uma seção de uma string e retorna como uma nova string. Não modifica a string original. Também funciona com arrays.
O que é o método `substr()` em JavaScript?,"Retorna os caracteres em uma string a partir da localização especificada através de um determinado número de caracteres. (Considerado legado, prefira `substring` ou `slice`)"
O que é a diferença entre `substring` e `slice` em JavaScript?,Ambos extraem partes de uma string.  `substring` troca os argumentos se `start` > `end`. `slice` trata um índice negativo a partir do final da string. `substr` (legado) usa o segundo argumento como comprimento.
Como você lida com erros em JavaScript?,Usando blocos `try...catch`.
O que é uma exceção em JavaScript?,É um evento que ocorre durante a execução de um programa que interrompe o fluxo normal de instruções.
Como você lança uma exceção em JavaScript?,"Usando a palavra-chave `throw`. Exemplo: `throw new Error(""Mensagem de erro"");`"
O que é o bloco `finally` em um bloco `try...catch...finally`?,"O bloco `finally` é executado sempre, independentemente de uma exceção ter sido lançada ou não. É usado para realizar tarefas de limpeza."
O que é uma função auto-invocável (IIFE - Immediately Invoked Function Expression) em JavaScript?,É uma função que é executada assim que é definida.
Como você cria uma função auto-invocável em JavaScript?,"Envolvendo a função em parênteses e adicionando parênteses no final para invocá-la. Exemplo: `(function() { console.log(""Função auto-invocável""); })();`"
Qual é o benefício de usar uma função auto-invocável em JavaScript?,"Cria um escopo isolado, evitando a poluição do escopo global."
O que são side effects em JavaScript?,"São mudanças de estado que ocorrem fora do escopo da função que as causou. Incluem modificação de variáveis globais, modificação de argumentos passados para a função, e operações de I/O."
"O que é ""shadowing"" de variáveis em JavaScript?","Ocorre quando uma variável declarada dentro de um escopo (ex: uma função) tem o mesmo nome de uma variável declarada em um escopo externo. A variável interna ""sombra"" a variável externa dentro do escopo interno."
O que são Higher-Order Functions em JavaScript?,São funções que recebem outras funções como argumentos ou retornam outras funções como resultados.
O que é a palavra-chave `instanceof` em JavaScript?,Verifica se um objeto é uma instância de uma determinada classe (ou de um de seus descendentes).
"O que é o ""prototype"" em JavaScript?",É um objeto associado a cada função e objeto em JavaScript.  Ele permite herança e compartilhamento de propriedades e métodos.
Como você adiciona uma nova propriedade ao protótipo de um objeto em JavaScript?,Através da propriedade `.prototype` da função construtora ou da classe.
O que é a cadeia de protótipos em JavaScript?,"É o mecanismo pelo qual os objetos JavaScript herdam propriedades e métodos de seus protótipos. Se uma propriedade não é encontrada diretamente em um objeto, o JavaScript procura no protótipo desse objeto, e assim por diante, até chegar ao `Object.prototype`."
O que é o método `Object.create()` em JavaScript?,"Cria um novo objeto, usando um objeto existente como o protótipo do novo objeto."
Qual a diferença entre usar `Object.create(null)` e `{}` para criar um objeto em JavaScript?,"`Object.create(null)` cria um objeto sem protótipo, enquanto `{}` cria um objeto com `Object.prototype` como protótipo."
O que é um buffer em JavaScript?,"Um buffer é uma área de memória reservada para armazenar dados temporariamente. É comumente usado para lidar com dados binários, como arquivos ou dados de rede.  Em JavaScript, o `ArrayBuffer` representa um buffer genérico e `TypedArrays` (como `Uint8Array`) fornecem formas de acessar e manipular os dados no buffer."
O que são TypedArrays em JavaScript?,"São objetos semelhantes a arrays que fornecem uma maneira de acessar dados binários brutos em um buffer. Eles permitem especificar o tipo de dado que será armazenado no buffer, como inteiros de 8 bits, inteiros de 16 bits, etc."
Como você verifica se um objeto é um `TypedArray` em JavaScript?,Usando `ArrayBuffer.isView(obj)`
O que é o operador `delete` em JavaScript?,Remove uma propriedade de um objeto.
"O que acontece se você usar `delete` em uma variável declarada com `var`, `let` ou `const`?","Ele não terá efeito em variáveis declaradas com `var`, `let` ou `const`. Ele funciona apenas em propriedades de objetos."
O que é o padrão de projeto Módulo (Module Pattern) em JavaScript (sem usar ES Modules)?,"É uma forma de encapsular código JavaScript, criando um"
Qual a diferença entre `const` e `let` ao declarar variáveis em JavaScript?,"`const` declara uma variável cujo valor não pode ser reatribuído após a inicialização, enquanto `let` permite a reatribuição do valor da variável."
O que é o hoisting em JavaScript e como ele afeta a execução do código?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seus respectivos escopos antes da execução do código. Variáveis declaradas com `var` são hoisted com valor `undefined`, enquanto `let` e `const` não são inicializadas e causam um erro se acessadas antes da declaração."
Como funciona o operador `typeof` em JavaScript?,"`typeof` retorna uma string indicando o tipo de dado de um operando. Exemplos: `typeof 10` retorna `""number""`, `typeof ""hello""` retorna `""string""`, `typeof null` retorna `""object""`."
O que são closures em JavaScript e qual sua utilidade?,"Closures são funções que lembram e acessam variáveis de seu escopo léxico, mesmo quando a função é executada fora desse escopo. São úteis para criar funções que mantêm estado e para implementar padrões como o módulo."
Como se usa o método `Array.isArray()` em JavaScript?,`Array.isArray()` é usado para verificar se um determinado valor é um array. Retorna `true` se o valor for um array e `false` caso contrário.
O que é um objeto em JavaScript?,"Um objeto em JavaScript é uma coleção de pares chave-valor, onde as chaves são strings (ou Symbols) e os valores podem ser de qualquer tipo de dado JavaScript, incluindo outros objetos."
Como se cria um objeto em JavaScript usando a notação literal?,"Usando chaves `{}` e definindo pares chave-valor separados por vírgulas, por exemplo: `let person = { name: ""Alice"", age: 30 };`"
O que são funções anônimas em JavaScript?,Funções anônimas são funções que não possuem um nome definido. Elas geralmente são atribuídas a variáveis ou passadas como argumentos para outras funções.
Como se define um valor padrão para um parâmetro de função em JavaScript?,"Usando o operador `||` ou ES6+ syntax: `function greet(name = ""Guest"") { ... }`. Se o argumento `name` não for fornecido, ele terá o valor padrão ""Guest""."
O que é o método `String.prototype.substring()` em JavaScript e como ele funciona?,`substring()` extrai uma parte de uma string entre dois índices especificados. O primeiro índice é incluso e o segundo é excluído.
Qual a função do operador ternário (`? :`) em JavaScript?,"O operador ternário é uma forma abreviada de escrever uma instrução `if...else`. Ele tem a seguinte sintaxe: `condição ? expressão1 : expressão2`. Se a condição for verdadeira, `expressão1` é avaliada; caso contrário, `expressão2` é avaliada."
O que é o método `Array.prototype.forEach()` em JavaScript?,`forEach()` executa uma função fornecida uma vez para cada elemento em um array.
Como se usa o método `Array.prototype.map()` em JavaScript?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `Array.prototype.filter()` em JavaScript?,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
Como funciona o método `Array.prototype.reduce()` em JavaScript?,`reduce()` aplica uma função a um acumulador e a cada valor do array (da esquerda para a direita) para reduzi-lo a um único valor.
O que são template literals em JavaScript (ES6+)?,"Template literals são strings que permitem expressões embutidas, delimitadas por backticks (` `). Permitem interpolação de variáveis e strings multilinhas."
Como se usa a desestruturação de objetos em JavaScript (ES6+)?,"A desestruturação permite extrair valores de propriedades de objetos e atribuí-los a variáveis de forma concisa. Exemplo: `const { name, age } = person;`"
O que é o operador spread (`...`) em JavaScript (ES6+) e quais são seus usos?,"O operador spread permite expandir um iterable (como um array ou uma string) em locais onde múltiplos argumentos ou elementos são esperados. É usado para copiar arrays, combinar arrays, passar argumentos para funções, etc."
Como se define uma função arrow function em JavaScript (ES6+)?,"Uma arrow function é uma forma mais concisa de escrever uma função anônima. Exemplo: `const sum = (a, b) => a + b;`"
Como se usa o método `Object.values()` em JavaScript?,`Object.values()` retorna um array com os valores de um objeto.
Como se usa o método `setTimeout()` em JavaScript?,`setTimeout()` agenda a execução de uma função após um determinado atraso em milissegundos.
Como se interrompe a execução de um `setInterval()`?,Usando a função `clearInterval()` e passando o ID retornado pelo `setInterval()`.
O que é o objeto `Math` em JavaScript e quais são alguns de seus métodos?,"`Math` é um objeto embutido em JavaScript que fornece funções matemáticas e constantes. Alguns métodos comuns incluem `Math.random()`, `Math.floor()`, `Math.ceil()`, `Math.round()`, `Math.pow()`, `Math.sqrt()`."
Como se gera um número aleatório entre 0 e 1 em JavaScript?,Usando `Math.random()`.
Como se arredonda um número para o inteiro mais próximo em JavaScript?,Usando `Math.round()`.
Como se cria um objeto `Date` em JavaScript?,"Usando o construtor `new Date()`. Ele pode ser criado sem argumentos (data e hora atuais), com uma string representando uma data, ou com números representando ano, mês, dia, hora, minuto, segundo e milissegundo."
Como se obtém o ano a partir de um objeto `Date` em JavaScript?,Usando o método `getFullYear()`.
Como se obtém o mês a partir de um objeto `Date` em JavaScript?,"Usando o método `getMonth()`. (Note: Janeiro é 0, Fevereiro é 1, etc.)"
Como se obtém o dia do mês a partir de um objeto `Date` em JavaScript?,Usando o método `getDate()`.
O que são erros em JavaScript e como eles são tratados?,Erros em JavaScript indicam problemas que ocorreram durante a execução do código. Eles podem ser tratados usando blocos `try...catch`.
Como se lança um erro em JavaScript?,Usando a palavra-chave `throw`.
O que é um bloco `try...catch` em JavaScript?,"`try` envolve o código que pode gerar um erro, e `catch` especifica um bloco de código para lidar com o erro se ele ocorrer."
O que é o bloco `finally` em um bloco `try...catch` em JavaScript?,"O bloco `finally` é executado sempre, independentemente de um erro ter ocorrido ou não no bloco `try`."
O que são expressões regulares (RegEx) em JavaScript?,Expressões regulares são padrões usados para corresponder combinações de caracteres em strings.
Como se cria uma expressão regular em JavaScript?,Usando a notação literal (entre barras `/`) ou o construtor `new RegExp()`.
O que é o método `String.prototype.match()` em JavaScript?,`match()` procura por uma correspondência entre uma expressão regular e uma string e retorna um array com as correspondências encontradas ou `null` se nenhuma correspondência for encontrada.
O que é JSON em JavaScript?,JSON (JavaScript Object Notation) é um formato de dados leve para troca de dados. É baseado em um subconjunto da linguagem JavaScript.
Como se converte um objeto JavaScript em uma string JSON?,Usando o método `JSON.stringify()`.
Como se converte uma string JSON em um objeto JavaScript?,Usando o método `JSON.parse()`.
O que é o strict mode em JavaScript e como ele é ativado?,"Strict mode impõe regras mais rigorosas para a escrita de código JavaScript. É ativado adicionando a string `""use strict"";` no início de um script ou função."
Quais são algumas das restrições impostas pelo strict mode em JavaScript?,"Impede o uso de variáveis não declaradas, impede a atribuição a propriedades somente leitura, proíbe a duplicação de nomes de parâmetros em funções, entre outras."
O que é o DOM (Document Object Model) em JavaScript?,O DOM é uma representação em árvore da estrutura de um documento HTML ou XML. Ele permite que o JavaScript acesse e manipule os elementos e atributos do documento.
Como se seleciona um elemento HTML no DOM usando JavaScript?,"Usando métodos como `document.getElementById()`, `document.querySelector()`, `document.querySelectorAll()`."
O que é o método `document.getElementById()` em JavaScript?,`document.getElementById()` retorna o elemento HTML com o ID especificado.
O que é o método `document.querySelector()` em JavaScript?,`document.querySelector()` retorna o primeiro elemento dentro do documento que corresponde ao seletor CSS especificado.
O que é o método `document.querySelectorAll()` em JavaScript?,`document.querySelectorAll()` retorna uma lista de todos os elementos dentro do documento que correspondem ao seletor CSS especificado.
Como se altera o texto de um elemento HTML no DOM usando JavaScript?,Acessando a propriedade `textContent` ou `innerText` do elemento.
Como se altera o atributo de um elemento HTML no DOM usando JavaScript?,Usando o método `setAttribute()` ou acessando diretamente a propriedade do atributo.
Como se adiciona um novo elemento HTML ao DOM usando JavaScript?,"Criando o elemento com `document.createElement()`, definindo seus atributos e texto, e inserindo-o na árvore DOM com métodos como `appendChild()` ou `insertBefore()`."
Como se remove um elemento HTML do DOM usando JavaScript?,Usando o método `removeChild()` no elemento pai ou o método `remove()` no próprio elemento.
O que são eventos em JavaScript e como eles funcionam?,"Eventos são ações ou ocorrências que acontecem no navegador, como cliques, movimentos do mouse, carregamento de página, etc. O JavaScript pode responder a esses eventos executando funções (event handlers)."
Como se adiciona um event listener a um elemento HTML usando JavaScript?,Usando o método `addEventListener()`.
Quais são alguns exemplos de eventos comuns em JavaScript?,"`click`, `mouseover`, `mouseout`, `keydown`, `keyup`, `load`, `submit`, `change`."
O que é o objeto `event` passado para um event handler em JavaScript?,"O objeto `event` contém informações sobre o evento que ocorreu, como o elemento que o disparou, as coordenadas do mouse, etc."
O que é o método `event.preventDefault()` em JavaScript?,"`event.preventDefault()` impede o comportamento padrão do evento, como a navegação em um link ou o envio de um formulário."
O que é o método `event.stopPropagation()` em JavaScript?,`event.stopPropagation()` impede que o evento se propague para os elementos pais na árvore DOM (event bubbling).
Quais são os três estados possíveis de uma Promise em JavaScript?,"`pending` (pendente), `fulfilled` (realizada) e `rejected` (rejeitada)."
Como se cria uma Promise em JavaScript?,"Usando o construtor `new Promise()`, que recebe uma função com dois parâmetros: `resolve` e `reject`."
Como se lida com o resultado de uma Promise em JavaScript?,Usando os métodos `then()` (para lidar com o sucesso) e `catch()` (para lidar com a falha).
O que é o método `Promise.resolve()` em JavaScript?,`Promise.resolve()` cria uma Promise que é resolvida com o valor especificado.
O que é o método `Promise.reject()` em JavaScript?,`Promise.reject()` cria uma Promise que é rejeitada com o motivo especificado.
O que é o método `Promise.all()` em JavaScript?,"`Promise.all()` recebe um array de Promises e retorna uma nova Promise que é resolvida quando todas as Promises do array são resolvidas, ou rejeitada se alguma delas for rejeitada."
O que é o método `Promise.race()` em JavaScript?,`Promise.race()` recebe um array de Promises e retorna uma nova Promise que é resolvida ou rejeitada assim que a primeira Promise do array for resolvida ou rejeitada.
O que são `async` e `await` em JavaScript?,"`async` e `await` são palavras-chave que tornam a escrita e leitura de código assíncrono mais fácil e intuitiva, permitindo que o código se pareça mais com código síncrono."
Como se define uma função assíncrona em JavaScript?,Usando a palavra-chave `async` antes da palavra-chave `function`.
Como se usa a palavra-chave `await` em JavaScript?,`await` só pode ser usada dentro de uma função `async`. Ela pausa a execução da função até que a Promise seja resolvida ou rejeitada.
"Qual a diferença entre `var`, `let` e `const` em relação ao escopo em JavaScript?","`var` tem escopo de função ou global, enquanto `let` e `const` têm escopo de bloco."
O que é o operador `instanceof` em JavaScript?,O operador `instanceof` verifica se um objeto é uma instância de uma determinada classe ou construtor.
O que é o protótipo em JavaScript?,"Cada objeto em JavaScript tem um protótipo, que é outro objeto do qual herda propriedades e métodos."
Como se acessa o protótipo de um objeto em JavaScript?,Usando a propriedade `__proto__` (não recomendada para uso em produção) ou o método `Object.getPrototypeOf()`.
Como se define um método para todos os objetos de um determinado tipo em JavaScript usando o protótipo?,"Adicionando o método ao protótipo do construtor do tipo de objeto. Por exemplo, `Array.prototype.myMethod = function() { ... };`"
O que é herança prototipal em JavaScript?,Herança prototipal é o mecanismo pelo qual objetos JavaScript herdam propriedades e métodos de seus protótipos.
Como se verifica o número de argumentos passados para uma função em JavaScript?,Acessando a propriedade `arguments.length`.
O que é o método `Function.prototype.call()` em JavaScript?,`call()` invoca uma função com um determinado valor `this` e argumentos fornecidos individualmente.
O que é o método `Function.prototype.apply()` em JavaScript?,`apply()` invoca uma função com um determinado valor `this` e argumentos fornecidos como um array.
O que é o método `Function.prototype.bind()` em JavaScript?,"`bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido."
O que são funções de ordem superior em JavaScript?,Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam outras funções como resultados.
O que é o padrão módulo em JavaScript?,"O padrão módulo é um padrão de design usado para encapsular código JavaScript, criando um escopo privado e expondo apenas uma interface pública."
Como se define um generator em JavaScript?,Usando a palavra-chave `function*`.
O que é a palavra-chave `yield` em JavaScript?,`yield` é usada dentro de um generator para pausar a execução da função e retornar um valor.
Como se itera sobre os valores produzidos por um generator em JavaScript?,Usando um loop `for...of` ou chamando o método `next()` do objeto generator.
O que é o Symbol.iterator em JavaScript?,`Symbol.iterator` é um símbolo bem conhecido que define o método iterador padrão para um objeto.
O que é memoization em JavaScript?,Memoization é uma técnica de otimização que armazena em cache os resultados de chamadas de função caras e retorna o resultado armazenado em cache quando as mesmas entradas ocorrem novamente.
O que é recursão em JavaScript?,Recursão é uma técnica de programação onde uma função chama a si mesma.
Quais são os riscos de usar recursão em JavaScript?,"Se a recursão não tiver uma condição de parada adequada, pode levar a um estouro da pilha de chamadas (stack overflow)."
O que é tail call optimization (TCO) em JavaScript?,TCO é uma otimização que permite que uma chamada de função recursiva no final de outra função seja executada sem aumentar a pilha de chamadas.  (Suporte inconsistente em diferentes engines JavaScript)
O que são generators assíncronos em JavaScript?,"Generators assíncronos são uma combinação de generators e funções assíncronas, permitindo gerar valores de forma assíncrona."
Como se define um generator assíncrono em JavaScript?,Usando a sintaxe `async function*`.
O que é o operador de coalescência nula (nullish coalescing operator - `??`) em JavaScript?,"O operador de coalescência nula retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo."
O que é o operador de encadeamento opcional (optional chaining operator - `?.`) em JavaScript?,O operador de encadeamento opcional permite acessar propriedades aninhadas de um objeto sem ter que verificar se cada nível da propriedade existe. Retorna `undefined` se uma propriedade no caminho for `null` ou `undefined`.
O que são BigInts em JavaScript?,BigInts são um tipo de dado que permite representar inteiros de tamanho arbitrário.
Como se cria um BigInt em JavaScript?,Adicionando o sufixo `n` a um literal numérico (ex: `123n`) ou usando a função `BigInt()`.
O que são Symbols em JavaScript?,Symbols são um tipo de dado primitivo que representa um identificador único e imutável.
Como se cria um Symbol em JavaScript?,Usando a função `Symbol()`.
O que são computed property names em JavaScript?,Computed property names permitem usar expressões para definir as chaves de propriedades de objetos.
O que são reflect methods em JavaScript?,Reflect methods são um conjunto de métodos que espelham as operações internas da linguagem JavaScript e fornecem um acesso mais controlado e flexível a essas operações.
O que são tags HTML suportadas pelo template literals?,Tags HTML não são inherentemente suportadas por template literals. Template literals são usados para interpolação de strings. Integração com HTML requer outras abordagens.
Como funciona a delegação de eventos em JavaScript?,Delegação de eventos é uma técnica que usa event bubbling para delegar o tratamento de eventos para um elemento pai em vez de anexar listeners a cada elemento filho individualmente.
"O que é a ""Same-Origin Policy"" em Javascript?","A Same-Origin Policy é uma restrição de segurança do navegador que impede que um script de uma origem acesse recursos de uma origem diferente, a menos que a origem de destino permita explicitamente."
Qual a diferença entre usar `String()` e `new String()` em Javascript?,`String()` converte o argumento em uma string primitiva. `new String()` cria um objeto `String`.
O que são IIFEs (Immediately Invoked Function Expressions) em Javascript?,IIFEs são funções que são executadas assim que são definidas. Elas criam um escopo privado para evitar conflitos de nomes e poluição do escopo global.
Como o garbage collector do Javascript funciona?,"O garbage collector identifica e remove automaticamente os objetos que não estão mais sendo usados pelo programa, liberando memória. Ele geralmente usa algoritmos como mark-and-sweep."
"O que é o ""event loop"" em Javascript e como ele funciona?","O event loop é um mecanismo que permite que o Javascript, que é single-threaded, lide com operações assíncronas. Ele continuamente verifica a fila de eventos e executa as callbacks quando a call stack está vazia."
O que são as vantagens de usar tipagem dinâmica no Javascript?,"Tipagem dinâmica permite maior flexibilidade e prototipagem rápida, já que os tipos não precisam ser declarados explicitamente."
O que são desvantagens de usar tipagem dinâmica no Javascript?,"Tipagem dinâmica pode levar a erros em tempo de execução, que seriam detectados em tempo de compilação em linguagens estaticamente tipadas."
Como você pode evitar problemas de escopo ao usar closures?,Use `let` ou `const` em vez de `var` dentro de loops para evitar capturar o valor final da variável do loop.
O que é a vantagem de usar funções puras em Javascript?,"Funções puras produzem os mesmos resultados para as mesmas entradas e não têm efeitos colaterais, tornando o código mais previsível e fácil de testar."
Como você pode melhorar a performance do seu código Javascript?,"Otimize loops, minimize manipulação do DOM, use memoization, evite vazamentos de memória e carregue scripts de forma assíncrona."
"O que significa dizer que o Javascript é uma linguagem ""single-threaded""?","Significa que o Javascript executa apenas uma operação por vez, em um único thread."
Qual a utilidade do operador `void` em Javascript?,O operador `void` avalia uma expressão e retorna `undefined`. É frequentemente usado para evitar que um link execute um comportamento padrão.
O que são side effects em Javascript?,Side effects são mudanças de estado ou interações com o mundo exterior que uma função faz além de simplesmente retornar um valor.
Como você pode prevenir a modificação acidental de objetos em Javascript?,Use `Object.freeze()` para tornar um objeto imutável.
O que são WeakReferences em Javascript?,WeakReferences permitem criar referências a objetos sem impedir que o garbage collector os colete. Útil para caches e observadores.
Como funciona a precedência de operadores em Javascript?,Precedência de operadores define a ordem em que os operadores são avaliados em uma expressão. Operadores com maior precedência são avaliados primeiro.
"O que é a associação ""this"" em Javascript?","""this"" se refere ao objeto que é o contexto de execução de uma função. Seu valor depende de como a função é chamada."
"Quais são as diferenças entre ""call"" e ""apply"" para invocar funções?","Ambos invocam uma função com um valor ""this"" especificado. ""call"" recebe os argumentos individualmente, enquanto ""apply"" recebe os argumentos como um array."
"O que é um ""polyfilled"" em Javascript?",Um polyfill é um pedaço de código (geralmente Javascript) que fornece a funcionalidade que você espera que o navegador forneça nativamente.
O que é um code smell em Javascript e dê um exemplo.,Um code smell é um sintoma na base de código que possivelmente indica um problema mais profundo. Um exemplo é uma função muito longa (God Function).
"O que são variaveis ""truthy"" e ""falsy"" em Javascript?","Valores ""truthy"" são valores que são avaliados como verdadeiros em um contexto booleano. Valores ""falsy"" são valores que são avaliados como falsos em um contexto booleano."
"Quais valores são considerados ""falsy"" em Javascript?","`false`, `0`, `-0`, `0n`, `""""`, `null`, `undefined`, e `NaN`."
O que são funções variádicas em Javascript?,Funções variádicas são funções que aceitam um número variável de argumentos.
Como você pode documentar seu código Javascript de forma eficaz?,"Use JSDoc para adicionar comentários formatados que descrevem funções, parâmetros, tipos de retorno e outras informações relevantes."
O que é o operador `delete` em Javascript e como usá-lo?,O operador `delete` remove uma propriedade de um objeto. Ele retorna `true` se a exclusão foi bem-sucedida e `false` se a propriedade não puder ser excluída.
Qual a diferença entre `localStorage` e `sessionStorage` no Javascript?,`localStorage` armazena dados permanentemente no navegador (a menos que explicitamente removidos). `sessionStorage` armazena dados apenas para a duração da sessão do navegador.
Como você pode detectar a presença de recursos do navegador usando Javascript?,Use detecção de recursos (feature detection) para verificar se um objeto ou método existe antes de usá-lo.
O que é a diferença entre `Object.assign()` e o operador spread (`...`) para copiar objetos?,"Ambos podem ser usados para copiar objetos, mas `Object.assign()` pode ter problemas com propriedades que são acessores. O operador spread geralmente oferece uma cópia mais profunda em certos casos."
"O que são ""event handlers inline"" em HTML e porque eles são geralmente desencorajados?","Event handlers inline são atributos HTML (ex: `<button onclick=""myFunction()"">`) que especificam o código Javascript a ser executado quando um evento ocorre. Eles são desencorajados porque misturam HTML e Javascript, tornando o código mais difícil de manter."
O que são Web Workers e para que servem?,"Web Workers permitem que você execute Javascript em um thread de background, sem afetar o desempenho da página principal. Útil para tarefas computacionalmente intensivas."
O que são Service Workers e qual a sua utilidade?,"Service Workers são scripts que rodam em background, separados da página web, e oferecem funcionalidades como push notifications, caching offline e sincronização de dados."
O que é uma race condition em JavaScript e como evitá-la?,Uma race condition ocorre quando a saída de um programa depende da ordem de execução de operações não determinísticas. Evite compartilhamento de estado e use mecanismos de sincronização como mutexes ou promises.
Como depurar problemas de memória em JavaScript?,"Use as ferramentas de desenvolvedor do navegador (Chrome DevTools, etc.) para monitorar o uso de memória, identificar vazamentos e analisar o heap."
O que são Content Security Policies (CSP) e como elas melhoram a segurança?,"CSPs são mecanismos de segurança que permitem que os desenvolvedores controlem os recursos que um navegador pode carregar para uma página, reduzindo o risco de ataques como XSS."
"O que é ""tree shaking"" e como funciona no contexto do Javascript?","Tree shaking é um processo de otimização que remove o código não utilizado de um pacote Javascript, reduzindo o tamanho do arquivo final."
Explique a diferença entre declaração e expressão de função em Javascript.,Uma declaração de função é hoisted e pode ser chamada antes de sua definição no código. Uma expressão de função não é hoisted e deve ser definida antes de ser chamada.
O que são Mixins em Javascript?,Mixins são classes ou objetos que contêm funcionalidades que podem ser reutilizadas em outras classes ou objetos sem herança. Permitem compor funcionalidades.
Descreva os diferentes métodos para herança em Javascript.,"Herança Prototipal, Herança Clássica (simulada com protótipos), Herança com Classes (ES6), entre outros."
O que é o operador `yield*` em Javascript?,`yield*` permite delegar a geração de valores para outro iterável ou generator dentro de um generator.
Como você pode usar a API Fetch para fazer requisições HTTP em Javascript?,A API Fetch fornece uma interface para buscar recursos da rede de forma assíncrona. Use `fetch()` para iniciar a requisição e `.then()` para lidar com a resposta.
Quais são as vantagens de usar `querySelector` em vez de `getElementById`?,"`querySelector` é mais flexível, permitindo selecionar elementos com base em seletores CSS complexos. `getElementById` é geralmente mais rápido, mas limitado a seletores por ID."
Como você pode manipular cookies usando Javascript?,"Você pode acessar e manipular cookies usando a propriedade `document.cookie`, mas existem APIs mais modernas para lidar com cookies de forma mais segura e fácil."
O que é o padrão Observer em Javascript e quando é útil?,"O padrão Observer define uma dependência um-para-muitos entre objetos, onde um objeto (o sujeito) notifica seus dependentes (os observadores) sobre qualquer mudança de estado. É útil para sistemas de eventos e notificações."
O que é a diferença entre JSONP e CORS?,"JSONP é uma técnica antiga para contornar a Same-Origin Policy, mas tem limitações de segurança e só suporta requisições GET. CORS é um mecanismo mais moderno e seguro que permite que o servidor controle quais origens podem acessar seus recursos."
"Como usar ""MutationObserver"" para monitorar mudanças no DOM em JavaScript?","MutationObserver é uma API que permite observar mudanças que ocorrem na árvore DOM. Você pode configurar o observer para monitorar atributos, texto, nós"
O que é hoisting em JavaScript e como afeta as variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover as declarações de variáveis e funções para o topo do seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted e inicializadas com `undefined`, enquanto funções declaradas com `function` são hoisted completamente. Variáveis com `let` e `const` são hoisted, mas não inicializadas (TDZ - Temporal Dead Zone)."
"Explique o que é o ""strict mode"" em JavaScript e como ele é ativado.","O ""strict mode"" impõe um conjunto de regras mais rigorosas ao JavaScript, eliminando alguns comportamentos silenciosos e lançando erros para práticas consideradas inseguras. É ativado adicionando `""use strict"";` no início de um script ou função."
Como criar um objeto em JavaScript usando a notação literal?,"Um objeto literal é criado usando chaves `{}` e definindo pares chave-valor separados por vírgulas, onde as chaves são strings (ou símbolos) e os valores podem ser de qualquer tipo de dado. Exemplo: `let pessoa = { nome: ""João"", idade: 30 };`"
O que são funções de primeira classe em JavaScript?,"Em JavaScript, funções são consideradas de primeira classe, o que significa que podem ser atribuídas a variáveis, passadas como argumentos para outras funções e retornadas como valores de outras funções."
Explique o conceito de protótipo em JavaScript.,"Cada objeto em JavaScript tem um protótipo, que é outro objeto do qual herda propriedades e métodos. A cadeia de protótipos continua até atingir `null`."
Como herdar propriedades e métodos de um objeto para outro usando protótipos?,"Define-se o protótipo do novo objeto como uma instância do objeto que se deseja herdar. Por exemplo, `Filho.prototype = Object.create(Pai.prototype);`. Também é importante redefinir o construtor: `Filho.prototype.constructor = Filho;`."
O que é o `this` em JavaScript e como seu valor é determinado?,"`this` é uma palavra-chave que se refere ao contexto de execução atual. Seu valor é determinado pela forma como a função é chamada (global, método de objeto, com `call` ou `apply`, ou usando `new`)."
"Qual a diferença entre `call`, `apply` e `bind` em JavaScript?","`call` e `apply` invocam uma função com um valor específico para `this` e argumentos. `call` recebe argumentos individualmente, enquanto `apply` recebe um array de argumentos. `bind` cria uma nova função com o valor de `this` pré-definido."
Explique o que são template literals em JavaScript.,Template literals são strings delimitadas por crases (``) que permitem a interpolação de variáveis e expressões dentro da string usando `${}`.
Como criar uma string multi-linha em JavaScript?,"Usando template literals, é possível criar strings multi-linha de forma direta, incluindo quebras de linha diretamente dentro da string."
O que são arrow functions e como elas diferem das funções tradicionais?,Arrow functions são uma sintaxe mais concisa para definir funções em JavaScript. Elas não possuem seu próprio `this` (usam o `this` do contexto léxico) e não podem ser usadas como construtoras.
Como desestruturar (destructuring) um objeto ou array em JavaScript?,"Destructuring é uma sintaxe que permite extrair valores de objetos ou arrays e atribuí-los a variáveis de forma concisa. Exemplo: `let { nome, idade } = pessoa;` ou `let [primeiro, segundo] = array;`"
Como usar a palavra-chave `yield` em um generator?,`yield` pausa a execução do generator e retorna um valor. A execução pode ser retomada posteriormente com o método `next()`.
Qual a diferença entre `for...in` e `for...of` em JavaScript?,"`for...in` itera sobre as propriedades enumeráveis de um objeto (incluindo as herdadas), enquanto `for...of` itera sobre os valores de um objeto iterável (como arrays, strings, Maps, Sets)."
O que são Maps e Sets em JavaScript?,Maps são coleções de pares chave-valor onde as chaves podem ser de qualquer tipo de dado. Sets são coleções de valores únicos.
Como adicionar e remover elementos de um Map em JavaScript?,"Usa-se o método `set(chave, valor)` para adicionar elementos e o método `delete(chave)` para remover elementos."
Como adicionar e remover elementos de um Set em JavaScript?,Usa-se o método `add(valor)` para adicionar elementos e o método `delete(valor)` para remover elementos.
"O que são Promises em JavaScript e como elas resolvem o problema de ""callback hell""?","Promises representam o resultado eventual de uma operação assíncrona. Elas resolvem o ""callback hell"" fornecendo uma forma mais estruturada e legível de lidar com operações assíncronas usando `.then()` e `.catch()`."
Como criar uma Promise em JavaScript?,"Uma Promise é criada usando o construtor `new Promise((resolve, reject) => { ... })`. O argumento é uma função que recebe as funções `resolve` (para indicar sucesso) e `reject` (para indicar falha)."
Como usar os métodos `.then()` e `.catch()` em uma Promise?,`.then()` é usado para lidar com o resultado da Promise quando ela é resolvida (sucesso). `.catch()` é usado para lidar com o erro da Promise quando ela é rejeitada (falha).
Como usar `try...catch` dentro de uma função `async`?,"`try...catch` pode ser usado para lidar com erros que ocorrem dentro de uma função `async`, assim como em funções síncronas."
O que é o operador spread ( ... ) em JavaScript?,O operador spread permite expandir um iterável (como um array ou string) em locais onde múltiplos argumentos ou elementos são esperados. Também pode ser usado para criar cópias superficiais de arrays e objetos.
Como usar o operador spread para criar uma cópia de um array?,`let novoArray = [...arrayOriginal];`
Como usar o operador spread para criar uma cópia de um objeto?,`let novoObjeto = { ...objetoOriginal };`
O que é o operador rest ( ... ) em JavaScript?,O operador rest permite coletar os argumentos restantes de uma função em um array.
Como usar o operador rest em parâmetros de função?,"`function minhaFuncao(param1, ...rest) { ... }`"
"Qual a diferença entre `var`, `let` e `const` no escopo de variáveis?",`var` tem escopo de função ou global. `let` e `const` têm escopo de bloco. `const` declara uma variável que não pode ser reatribuída após a inicialização.
O que é um bloco de código em JavaScript?,Um bloco de código é um conjunto de declarações delimitado por chaves `{}`.
Como declarar uma função em JavaScript usando a palavra-chave `function`?,`function nomeDaFuncao(parametros) { ... }`
Qual a importância de ter um caso base em uma função recursiva?,"O caso base é a condição que interrompe a recursão, evitando que a função chame a si mesma indefinidamente e cause um estouro de pilha (stack overflow)."
Como testar se uma string corresponde a uma expressão regular?,Usa-se o método `test()` da expressão regular ou o método `match()` da string.
O que são grupos de captura em expressões regulares?,Grupos de captura são partes de uma expressão regular delimitadas por parênteses `()`. Eles permitem extrair partes específicas da string correspondida.
O que são quantificadores em expressões regulares?,"Quantificadores especificam quantas vezes um padrão deve ocorrer para corresponder. Exemplos: `*` (zero ou mais), `+` (um ou mais), `?` (zero ou um), `{n}` (exatamente n), `{n,}` (n ou mais), `{n,m}` (entre n e m)."
O que são classes de caracteres em expressões regulares?,"Classes de caracteres representam um conjunto de caracteres que podem corresponder. Exemplos: `[abc]` (qualquer um de a, b ou c), `[a-z]` (qualquer letra minúscula), `\d` (qualquer dígito), `\w` (qualquer caractere alfanumérico)."
O que são âncoras em expressões regulares?,"Âncoras especificam posições na string onde a correspondência deve ocorrer. Exemplos: `^` (início da string), `$` (fim da string), `\b` (limite de palavra)."
O que é o método `replace()` em strings e como usá-lo com expressões regulares?,`replace()` substitui partes de uma string por outra string ou o resultado de uma função. Pode ser usado com expressões regulares para substituir padrões complexos.
Como adicionar um ouvinte de evento (event listener) a um elemento HTML usando JavaScript?,"Usa-se o método `addEventListener(tipoDoEvento, funcaoCallback)` do elemento."
O que é o objeto `event` passado para uma função de callback de evento?,"O objeto `event` contém informações sobre o evento que ocorreu, como o elemento alvo (target), o tipo de evento, as coordenadas do mouse, etc."
O que é event bubbling?,Event bubbling é o processo em que um evento disparado em um elemento se propaga para seus elementos ancestrais na árvore DOM.
Como impedir o event bubbling?,Usa-se o método `stopPropagation()` do objeto `event`.
O que é event capturing?,"Event capturing é o processo inverso ao event bubbling, onde o evento é tratado primeiro pelo elemento mais ancestral e depois pelos elementos filhos."
Qual a diferença entre `localStorage` e `sessionStorage` em JavaScript?,"`localStorage` armazena dados persistentemente no navegador, mesmo após o fechamento da janela ou aba. `sessionStorage` armazena dados apenas durante a sessão do navegador."
Como armazenar e recuperar dados em `localStorage`?,"Usa-se os métodos `localStorage.setItem(chave, valor)` para armazenar e `localStorage.getItem(chave)` para recuperar. Os valores são armazenados como strings."
Como armazenar e recuperar dados em `sessionStorage`?,"Usa-se os métodos `sessionStorage.setItem(chave, valor)` para armazenar e `sessionStorage.getItem(chave)` para recuperar. Os valores são armazenados como strings."
Como converter um objeto JavaScript para JSON?,Usa-se o método `JSON.stringify(objeto)`.
Como converter uma string JSON para um objeto JavaScript?,Usa-se o método `JSON.parse(stringJSON)`.
Como definir um cookie usando JavaScript?,Atribui-se uma string formatada com `chave=valor` ao atributo `document.cookie`.
Como ler um cookie usando JavaScript?,O valor de `document.cookie` é uma string contendo todos os cookies separados por ponto e vírgula. É necessário analisá-la para encontrar o cookie desejado.
Qual a diferença entre `getElementById()` e `querySelector()`?,`getElementById()` seleciona um único elemento com um ID específico. `querySelector()` seleciona o primeiro elemento que corresponde a um seletor CSS especificado.
Qual a diferença entre `querySelector()` e `querySelectorAll()`?,`querySelector()` retorna o primeiro elemento que corresponde ao seletor. `querySelectorAll()` retorna um NodeList contendo todos os elementos que correspondem ao seletor.
Como alterar o conteúdo de um elemento HTML usando JavaScript?,Através das propriedades `innerHTML` (para HTML) ou `textContent` (para texto).
Como alterar o estilo de um elemento HTML usando JavaScript?,"Através da propriedade `style` do elemento. Exemplo: `elemento.style.color = ""red"";`"
Como adicionar ou remover classes CSS de um elemento HTML usando JavaScript?,"Usando a propriedade `classList` do elemento, que possui métodos como `add()`, `remove()` e `toggle()`."
Como criar um novo elemento HTML usando JavaScript?,Usa-se o método `document.createElement(tagName)`.
Como obter a largura e a altura da janela do navegador usando JavaScript?,Usando as propriedades `window.innerWidth` e `window.innerHeight`.
Como redirecionar o usuário para outra página usando JavaScript?,Atribuindo um novo URL à propriedade `window.location.href`.
Como mostrar um alerta (alert) na tela usando JavaScript?,Usando a função `alert(mensagem)`.
Como mostrar uma caixa de confirmação (confirm) na tela usando JavaScript?,"Usando a função `confirm(mensagem)`, que retorna `true` se o usuário clicar em ""OK"" e `false` se clicar em ""Cancelar""."
Como mostrar uma caixa de prompt (prompt) na tela usando JavaScript?,"Usando a função `prompt(mensagem, valorPadrao)`, que retorna a string digitada pelo usuário ou `null` se o usuário clicar em ""Cancelar""."
Como cancelar um `setTimeout()` ou `setInterval()`?,"Usando as funções `clearTimeout(idDoTimeout)` e `clearInterval(idDoInterval)`, respectivamente."
O que é o método `Date()` em JavaScript?,`Date()` é um objeto que representa datas e horas.
Como obter a data e hora atual usando JavaScript?,Criando uma nova instância do objeto `Date`: `let dataAtual = new Date();`
Como gerar um número aleatório entre 0 e 1 usando JavaScript?,Usando o método `Math.random()`.
Como gerar um número inteiro aleatório dentro de um intervalo específico usando JavaScript?,Usando `Math.floor(Math.random() * (max - min + 1)) + min;`
O que é o método `isNaN()` em JavaScript?,"`isNaN()` verifica se um valor é ""Not-a-Number"". No entanto, ele realiza conversão de tipo antes de verificar, o que pode levar a resultados inesperados. É recomendado usar `Number.isNaN()` que não realiza conversão de tipo."
O que é o método `parseInt()` em JavaScript?,`parseInt()` converte uma string para um número inteiro.
O que é o método `parseFloat()` em JavaScript?,`parseFloat()` converte uma string para um número de ponto flutuante.
O que é o método `typeof` em JavaScript?,`typeof` retorna uma string indicando o tipo de dado de uma variável ou expressão.
Quais são os tipos de dados primitivos em JavaScript?,"String, Number, Boolean, Null, Undefined, Symbol (ES6), BigInt (ES2020)."
Qual a diferença entre um array e um objeto em JavaScript?,"Um array é uma coleção ordenada de valores acessados por índices numéricos. Um objeto é uma coleção de pares chave-valor, onde as chaves são strings (ou símbolos)."
Como verificar se uma variável é do tipo array em JavaScript?,Usando `Array.isArray(variavel)`.
Como obter o comprimento de um array em JavaScript?,Usando a propriedade `length` do array.
Como adicionar um elemento ao final de um array em JavaScript?,Usando o método `push(elemento)`.
Como remover o último elemento de um array em JavaScript?,Usando o método `pop()`.
Como adicionar um elemento no início de um array em JavaScript?,Usando o método `unshift(elemento)`.
Como remover o primeiro elemento de um array em JavaScript?,Usando o método `shift()`.
Como remover um elemento de um array em uma posição específica em JavaScript?,"Usando o método `splice(indice, quantidade)` (indice de onde começar a remover, quantidade de elementos a remover)."
Como inserir um elemento em um array em uma posição específica sem remover nenhum elemento em JavaScript?,"Usando o método `splice(indice, 0, elemento)` (indice de onde inserir, 0 para não remover nada, elemento a inserir)."
Como concatenar dois arrays em JavaScript?,Usando o método `concat(outroArray)`.
Como criar uma cópia de um array em JavaScript?,Usando o método `slice()` (sem argumentos) ou o operador spread `[...arrayOriginal]`.
Como inverter a ordem dos elementos de um array em JavaScript?,Usando o método `reverse()`.
Como ordenar os elementos de um array em JavaScript?,"Usando o método `sort()`. Por padrão, ele ordena como strings. Para ordenar números, é necessário passar uma função de comparação como argumento."
Como ordenar um array de números em ordem crescente usando o método `sort()`?,"`array.sort((a, b) => a - b);`"
Como ordenar um array de números em ordem decrescente usando o método `sort()`?,"`array.sort((a, b) => b - a);`"
O que é o método `map()` em arrays em JavaScript?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em arrays em JavaScript?,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em arrays em JavaScript?,`reduce()` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzir a um único valor.
O que é o método `forEach()` em arrays em JavaScript?,"`forEach()` executa uma função fornecida uma vez para cada elemento do array. Ao contrário de `map`, ele não retorna um novo array."
O que é o método `find()` em arrays em JavaScript?,"`find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
O que é o método `findIndex()` em arrays em JavaScript?,"`findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1."
O que é o método `some()` em arrays em JavaScript?,"`some()` testa se pelo menos um elemento no array passa no teste implementado pela função fornecida. Retorna `true` se encontrar tal elemento, caso contrário, retorna `false`."
O que é o método `every()` em arrays em JavaScript?,"`every()` testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna `true` se todos os elementos passarem no teste, caso contrário, retorna `false`."
O que é o método `includes()` em arrays em JavaScript?,"`includes()` determina se um array contém um determinado valor, retornando `true` ou `false` conforme apropriado."
O que é o método `indexOf()` em arrays em JavaScript?,"`indexOf()` retorna o primeiro índice em que um determinado elemento pode ser encontrado no array, ou -1 se ele não estiver presente."
O que é o método `lastIndexOf()` em arrays em JavaScript?,"`lastIndexOf()` retorna o último índice em que um determinado elemento pode ser encontrado no array, ou -1 se ele não estiver presente."
Como verificar se uma propriedade existe em um objeto em JavaScript?,Usando o operador `in` ( `propriedade in objeto`) ou o método `hasOwnProperty()` (`objeto.hasOwnProperty('propriedade')`).
Qual a diferença entre usar o operador `in` e o método `hasOwnProperty()` para verificar a existência de uma propriedade em um objeto?,"O operador `in` verifica se a propriedade existe no objeto ou em sua cadeia de protótipos. `hasOwnProperty()` verifica apenas se a propriedade existe diretamente no objeto, sem olhar na cadeia de protótipos."
Como iterar sobre as propriedades de um objeto usando `for...in` em JavaScript?,`for (let propriedade in objeto) { ... }`
Como obter um array com todas as chaves (propriedades) de um objeto em JavaScript?,Usando o método `Object.keys(objeto)`.
Como obter um array com todos os valores de um objeto em JavaScript?,Usando o método `Object.values(objeto)`.
Como obter um array com todos os pares chave-valor de um objeto em JavaScript?,Usando o método `Object.entries(objeto)`.
O que é imutabilidade em JavaScript?,"Imutabilidade significa que um objeto não pode ser modificado após sua criação. Em vez de modificar o objeto original, você cria uma nova cópia com as alterações."
Como alcançar imutabilidade em JavaScript ao trabalhar com objetos e arrays?,"Usando métodos que retornam novas cópias, como `slice()`, `concat()`, `map()`, `filter()`, `reduce()` para arrays, e o operador spread ou `Object.assign()` para objetos."
Como importar um módulo em JavaScript usando a sintaxe `import`?,"`import { funcao1, funcao2 } from './meuModulo.js';`"
Como exportar um módulo em JavaScript usando a sintaxe `export`?,`export function minhaFuncao() { ... }` ou `export default minhaFuncao;`
Qual a diferença entre `export` nomeado e `export default`?,"`export` nomeado permite exportar múltiplos valores com nomes específicos. `export default` permite exportar um único valor como padrão, sem um nome específico."
O que é o objeto global `globalThis` em JavaScript?,"`globalThis` fornece uma maneira consistente de acessar o objeto global em diferentes ambientes JavaScript (navegadores, Node.js, etc.)."
O que é o operador de coalescência nula ( `??` ) em JavaScript?,"O operador de coalescência nula retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`, caso contrário, retorna o operando da esquerda."
O que é o operador de encadeamento opcional ( `?.` ) em JavaScript?,O operador de encadeamento opcional permite acessar propriedades aninhadas de um objeto sem causar um erro se uma propriedade intermediária for `null` ou `undefined`. Ele retorna `undefined` nesses casos.
O que são WeakMaps e WeakSets em JavaScript?,"WeakMaps e WeakSets são versões ""fracas"" de Maps e Sets, respectivamente. As chaves em WeakMaps e os valores em WeakSets devem ser objetos.  Eles não impedem que os objetos sejam coletados pelo garbage collector, o que é útil para evitar vazamentos de memória."
Qual a principal diferença entre um WeakMap e um Map?,"Em um WeakMap, as chaves devem ser objetos e não podem ser iteradas. Em um Map, as chaves podem ser de qualquer tipo de dado e podem ser iteradas."
Qual a principal diferença entre um WeakSet e um Set?,"Em um WeakSet, os valores devem ser objetos e não podem ser iterados. Em um Set, os valores podem ser de qualquer tipo de dado e podem ser iterados."
O que são classes em JavaScript (ES6)?,"Classes em JavaScript são um modelo para criar objetos. Elas fornecem uma sintaxe mais clara e concisa para definir a estrutura e o comportamento de objetos, baseadas no sistema de protótipos."
Como criar uma classe em JavaScript?,"Usando a palavra-chave `class`, seguida pelo nome da classe e um bloco de código contendo o construtor e os métodos da classe."
O que é o construtor de uma classe em JavaScript?,O construtor é um método especial dentro de uma classe que é chamado quando um novo objeto da classe é criado. Ele é usado para inicializar as propriedades do objeto.
Como criar um objeto (instância) de uma classe em JavaScript?,"Usando a palavra-chave `new`, seguida pelo nome da classe e parênteses (que podem conter argumentos para o construtor)."
O que é herança em OOP e como implementá-la em JavaScript usando classes?,"Herança é um mecanismo que permite que uma classe (subclasse ou classe filha) herde propriedades e métodos de outra classe (superclasse ou classe pai). Em JavaScript, a herança é implementada usando a palavra-chave `extends`."
O que é polimorfismo em OOP e como ele se manifesta em JavaScript?,"Polimorfismo é a capacidade de um objeto assumir muitas formas. Em JavaScript, o polimorfismo pode ser implementado através de herança (subclasses sobrescrevendo métodos da superclasse) ou através de interfaces implícitas (objetos que implementam os mesmos métodos, mesmo que não herdem da mesma classe)."
O que é encapsulamento em OOP e como ele pode ser simulado em JavaScript?,"Encapsulamento é a prática de ocultar os detalhes internos de um objeto e expor apenas uma interface para interagir com ele. Em JavaScript, o encapsulamento pode ser simulado usando closures (para criar variáveis privadas) e convenções de nomenclatura (como usar o prefixo `_` para indicar propriedades privadas)."
O que é uma variável privada em JavaScript e como implementá-la?,"Uma variável privada é uma variável que só pode ser acessada dentro da classe (ou função) onde foi definida. Em JavaScript, variáveis privadas podem ser implementadas usando closures ou, mais recentemente, campos privados com o prefixo `#` (ES2022)."
O que são campos privados em classes JavaScript (ES2022)?,Campos privados são propriedades de classes que só podem ser acessadas dentro da própria classe. Eles são definidos com o prefixo `#`.
Qual a diferença entre um método estático e um método de instância em uma classe JavaScript?,"Um método estático é um método que pertence à classe em si, e não a uma instância da classe. Ele é chamado diretamente na classe usando `NomeDaClasse.metodoEstático()`. Um método de instância pertence a cada instância da classe e é chamado em um objeto criado a partir da classe."
O que são getters e setters em classes JavaScript?,Getters e setters são métodos especiais que permitem acessar e modificar as propriedades de um objeto de uma forma controlada. Getters são usados para obter o valor de uma propriedade e setters são usados para definir o valor de uma propriedade.
Como usar getters e setters em classes JavaScript?,Getters são definidos com a palavra-chave `get` antes do nome do método e setters são definidos com a palavra-chave `set` antes do nome do método.
Quais são os tipos comuns de erros em JavaScript?,"`SyntaxError`, `TypeError`, `ReferenceError`, `RangeError`, `URIError`, `EvalError` (obsoleto)."
Como lidar com erros em JavaScript usando `try...catch`?,O bloco `try` contém o código que pode lançar um erro. O bloco `catch` contém o código que é executado se um erro for lançado no bloco `try`.
O que é o objeto `Error` em JavaScript?,O objeto `Error` é a classe base para todos os objetos de erro em JavaScript. Ele possui propriedades como `name` (o tipo do erro) e `message` (uma descrição do erro).
O que são eventos assíncronos em JavaScript?,"Eventos assíncronos são eventos que não ocorrem imediatamente, mas sim em algum momento futuro. Exemplos incluem cliques de mouse, carregamento de imagens, e respostas de servidores."
Como lidar com eventos assíncronos em JavaScript usando callbacks?,"Um callback é uma função que é passada como argumento para outra função e é executada quando o evento assíncrono ocorre.

**Pergunta"
Como você pode verificar se uma variável é um array em JavaScript?,"Você pode usar `Array.isArray(variavel)` para verificar se a variável é um array. Também pode usar `variavel instanceof Array`, embora esta última possa ter problemas em ambientes com múltiplos contextos de execução (iframes)."
Explique o conceito de closures em JavaScript.,"Closures são funções que ""lembram"" o ambiente léxico em que foram criadas. Isso significa que uma função interna pode acessar variáveis da função externa, mesmo depois que a função externa já terminou sua execução."
Como você pode evitar a mutação direta de um objeto em JavaScript?,"Você pode usar métodos como `Object.assign()`, o operador spread (`...`) para criar uma cópia superficial do objeto, ou bibliotecas como Immutable.js para trabalhar com objetos imutáveis."
"O que é o ""this"" em JavaScript e como seu valor é determinado?","`this` se refere ao objeto que está executando o código JavaScript atual. Seu valor é determinado pelo contexto de execução: em uma função global, `this` se refere ao objeto global (window no navegador, global no Node.js); em um método de objeto, `this` se refere ao objeto que contém o método; e em um construtor, `this` se refere ao novo objeto que está sendo criado."
O que é o prototype em JavaScript e como ele é usado?,"Todo objeto em JavaScript tem um protótipo, que é outro objeto do qual herda propriedades e métodos.  O prototype é usado para implementar herança prototipal, permitindo que objetos compartilhem comportamentos."
"Explique a diferença entre `var`, `let` e `const` ao declarar variáveis.","`var` tem escopo de função ou global e é hoisted. `let` tem escopo de bloco e não é hoisted (você não pode acessá-la antes da declaração). `const` também tem escopo de bloco e não é hoisted, e deve ser inicializada no momento da declaração; seu valor não pode ser reatribuído após a inicialização (embora as propriedades de objetos e arrays definidos com `const` possam ser modificadas)."
Como você pode usar funções de callback em JavaScript?,"Funções de callback são funções passadas como argumentos para outras funções, que são executadas após a conclusão de alguma operação. Elas são frequentemente usadas em operações assíncronas, como requisições HTTP ou manipulação de eventos."
Qual a diferença entre funções declaradas (`function nomeFuncao() {}`) e expressões de função (`const nomeFuncao = function() {}`)?,"Funções declaradas são hoisted, o que significa que você pode chamá-las antes de sua declaração no código. Expressões de função não são hoisted (a variável é hoisted, mas não a função)."
O que é o DOM (Document Object Model) e como o JavaScript interage com ele?,"O DOM é uma representação em árvore da estrutura de um documento HTML ou XML. JavaScript usa o DOM para acessar e manipular elementos, atributos e estilos do documento."
Como você pode selecionar elementos HTML usando JavaScript?,"Você pode usar métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`, `document.querySelector()` e `document.querySelectorAll()`."
Como você pode adicionar um evento a um elemento HTML usando JavaScript?,"Você pode usar o método `addEventListener()` para adicionar um evento a um elemento. Por exemplo: `elemento.addEventListener('click', function() { ... });`"
O que é o bubbling e capturing de eventos em JavaScript?,Bubbling é quando um evento acionado em um elemento interno se propaga para seus elementos pais. Capturing é o oposto: o evento é tratado primeiro pelo elemento pai e depois pelos elementos filhos.
Como você pode impedir a propagação de um evento em JavaScript?,Você pode usar o método `event.stopPropagation()` dentro do manipulador de eventos.
O que é o método `preventDefault()` em JavaScript?,"`preventDefault()` impede o comportamento padrão de um evento. Por exemplo, impedir que um link navegue para outra página."
Como você pode criar um novo elemento HTML usando JavaScript?,Você pode usar o método `document.createElement('tagName')` para criar um novo elemento.
Como você pode adicionar um elemento HTML ao DOM usando JavaScript?,"Você pode usar métodos como `appendChild()`, `insertBefore()`, `insertAdjacentElement()` para adicionar um elemento a outro elemento existente no DOM."
O que são template literals em JavaScript e como eles são usados?,Template literals são strings delimitadas por backticks (` `) que permitem a interpolação de variáveis e expressões. Eles tornam a construção de strings dinâmicas mais fácil e legível.
Como você pode usar o operador ternário em JavaScript?,O operador ternário (`condição ? valorSeVerdadeiro : valorSeFalso`) é uma forma concisa de escrever uma instrução `if...else`.
Explique o conceito de funções anônimas em JavaScript.,Funções anônimas são funções que não têm um nome. Elas são frequentemente usadas como callbacks ou como funções atribuídas a variáveis.
O que é IIFE (Immediately Invoked Function Expression)?,Uma IIFE é uma função que é definida e executada imediatamente após sua criação. É usada para criar um escopo privado e evitar conflitos de nomes com outras variáveis globais.
Como você pode iterar sobre as propriedades de um objeto em JavaScript?,Você pode usar o loop `for...in` para iterar sobre as propriedades enumeráveis de um objeto.
"Qual a diferença entre `map()`, `filter()` e `reduce()` em arrays?",`map()` cria um novo array com os resultados da chamada de uma função para cada elemento do array original. `filter()` cria um novo array com todos os elementos que passam em um teste implementado por uma função. `reduce()` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzir a um único valor.
Como você pode remover elementos duplicados de um array em JavaScript?,Você pode usar o objeto `Set` para remover duplicatas. Por exemplo: `[...new Set(arrayComDuplicatas)]`.
Explique o que são Promises em JavaScript.,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas têm três estados: pendente, cumprida (resolved) ou rejeitada (rejected)."
Como você pode lidar com erros em Promises usando `try...catch`?,Você não pode usar `try...catch` diretamente dentro do código assíncrono de uma Promise. Você deve usar o método `.catch()` da Promise para lidar com erros.
Qual a diferença entre `forEach` e `map` em JavaScript?,"`forEach` itera sobre os elementos de um array e executa uma função para cada elemento, mas não retorna um novo array. `map` também itera sobre os elementos, mas retorna um novo array com os resultados da função aplicada a cada elemento."
O que é o operador spread (`...`) em JavaScript e como ele é usado?,"O operador spread expande um iterável (como um array ou string) em elementos individuais. Ele é usado para copiar arrays, combinar arrays, passar argumentos para funções e criar objetos."
O que é o operador rest (`...`) em JavaScript e como ele é usado?,O operador rest coleta um número indefinido de argumentos em um array. Ele é usado em parâmetros de função e desestruturação.
Como você pode desestruturar objetos e arrays em JavaScript?,"Desestruturação é uma forma de extrair valores de objetos e arrays para variáveis. Por exemplo: `const { nome, idade } = pessoa;` ou `const [primeiro, segundo] = array;`."
"O que são os métodos `call()`, `apply()` e `bind()` em JavaScript?","`call()` e `apply()` são usados para invocar uma função com um determinado valor de `this`. `call()` recebe argumentos individualmente, enquanto `apply()` recebe argumentos como um array. `bind()` cria uma nova função com um valor de `this` pré-definido."
Explique o conceito de currying em JavaScript.,"Currying é uma técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada, retornando a próxima função na sequência até que todos os argumentos sejam fornecidos."
Como você pode usar classes em JavaScript?,"Classes são um modelo para criar objetos com propriedades e métodos. Elas usam a palavra-chave `class`, um construtor e métodos definidos dentro do corpo da classe."
O que é herança em classes JavaScript e como ela é implementada?,Herança permite que uma classe (subclasse) herde propriedades e métodos de outra classe (superclasse). É implementada usando a palavra-chave `extends`.
Como você pode usar o método `super()` em classes JavaScript?,`super()` é usado para chamar o construtor da classe pai em uma subclasse. Ele também pode ser usado para acessar métodos da classe pai.
Explique o conceito de tipagem dinâmica em JavaScript.,"Tipagem dinâmica significa que o tipo de uma variável é verificado em tempo de execução, e não em tempo de compilação. Uma mesma variável pode armazenar valores de tipos diferentes ao longo da execução do programa."
O que são os tipos primitivos em JavaScript?,"Os tipos primitivos em JavaScript são: `undefined`, `null`, `boolean`, `number`, `string` e `symbol` (introduzido no ES6)."
O que são objetos em JavaScript?,"Objetos são coleções de propriedades, onde cada propriedade é uma associação entre um nome (ou chave) e um valor. Os valores podem ser tipos primitivos, outros objetos ou funções."
Como você pode criar um objeto em JavaScript?,Você pode criar um objeto usando a notação literal de objeto (`{}`) ou usando o construtor `new Object()`.
Como você pode converter um objeto JavaScript em JSON e vice-versa?,Você pode usar `JSON.stringify()` para converter um objeto JavaScript em JSON e `JSON.parse()` para converter uma string JSON em um objeto JavaScript.
Como você pode gerar um número aleatório em JavaScript?,Você pode usar o método `Math.random()` para gerar um número aleatório entre 0 (inclusive) e 1 (exclusivo).
Como você pode obter a data e hora atual em JavaScript?,Você pode criar uma nova instância do objeto `Date`: `const agora = new Date();`.
Como você pode formatar uma data em JavaScript?,"Você pode usar os métodos do objeto `Date` (como `getFullYear()`, `getMonth()`, `getDate()`) para obter as partes da data e formatá-las manualmente, ou usar bibliotecas de formatação de data."
Como você pode criar uma expressão regular em JavaScript?,Você pode criar uma expressão regular usando a notação literal (`/padrão/`) ou usando o construtor `new RegExp('padrão')`.
Como você pode testar se uma string corresponde a uma expressão regular em JavaScript?,Você pode usar o método `test()` da expressão regular ou o método `match()` da string.
Como você pode substituir partes de uma string usando expressões regulares em JavaScript?,"Você pode usar o método `replace()` da string, passando a expressão regular e a string de substituição como argumentos."
"O que é o modificador ""g"" em expressões regulares?","O modificador ""g"" (global) indica que a expressão regular deve encontrar todas as correspondências na string, em vez de parar na primeira."
O que é o encadeamento opcional (optional chaining) `?.` em JavaScript?,"O encadeamento opcional permite acessar propriedades de um objeto sem precisar verificar explicitamente se cada nível da propriedade existe. Se uma propriedade no caminho for `null` ou `undefined`, a expressão retorna `undefined` em vez de lançar um erro."
O que são WeakSets e WeakMaps em JavaScript?,"`WeakSet` e `WeakMap` são coleções que armazenam referências fracas a objetos. Isso significa que, se um objeto armazenado em um `WeakSet` ou `WeakMap` não tiver outras referências a ele, o garbage collector pode coletá-lo e removê-lo da coleção. Eles são usados para evitar vazamentos de memória."
Qual a diferença entre `WeakSet` e `Set`?,`WeakSet` só pode armazenar objetos e não pode ser iterado. `Set` pode armazenar qualquer tipo de valor e pode ser iterado.
Qual a diferença entre `WeakMap` e `Map`?,`WeakMap` só pode usar objetos como chaves e não pode ser iterado. `Map` pode usar qualquer tipo de valor como chaves e pode ser iterado.
Como você cria um generator em JavaScript?,Você declara uma função generator usando o asterisco `*` após a palavra-chave `function`: `function* myGenerator() { ... }`.
Como você itera sobre um generator?,Você pode usar o método `next()` do objeto generator para obter o próximo valor retornado pelo `yield`.
O que é o método `yield*` em generators?,`yield*` permite delegar a execução para outro generator ou iterável.
Como você pode criar seu próprio iterator em JavaScript?,Você pode criar um objeto com um método `next()` que implementa a lógica para retornar os valores da sequência.
O que é o símbolo `Symbol.iterator`?,"`Symbol.iterator` é um símbolo bem conhecido que define o método padrão para iterar sobre um objeto. Quando um objeto tem uma propriedade com a chave `Symbol.iterator`, ele é considerado um iterável."
O que é o loop `for...of` em JavaScript?,"O loop `for...of` itera sobre os valores de um objeto iterável, como um array, string, Map, Set ou generator."
Qual a diferença entre `for...in` e `for...of`?,"`for...in` itera sobre as *chaves* (nomes das propriedades) de um objeto, enquanto `for...of` itera sobre os *valores* de um objeto iterável."
O que são os Proxy objects em JavaScript?,"Proxy objects permitem interceptar e personalizar operações fundamentais em objetos, como leitura, escrita, enumeração e chamada de funções."
Como você cria um Proxy object em JavaScript?,"Você usa o construtor `new Proxy(target, handler)`, onde `target` é o objeto a ser proxied e `handler` é um objeto que define os traps (métodos que interceptam as operações)."
"O que são ""traps"" em Proxy objects?","""Traps"" são métodos definidos no objeto handler de um Proxy que interceptam operações no objeto alvo. Exemplos de traps incluem `get`, `set`, `has`, `deleteProperty`, etc."
O que é o objeto `Reflect` em JavaScript?,O objeto `Reflect` fornece métodos estáticos que são os mesmos que os traps do Proxy object. Ele é usado para implementar os traps de forma mais segura e consistente.
O que é a API `Fetch` em JavaScript e para que ela serve?,A API `Fetch` fornece uma interface para buscar recursos na rede de forma assíncrona. É uma alternativa moderna à `XMLHttpRequest`.
Como você faz uma requisição GET usando a API `Fetch`?,`fetch('url').then(response => response.json()).then(data => console.log(data));`
Como você faz uma requisição POST usando a API `Fetch`?,"`fetch('url', { method: 'POST', body: JSON.stringify(data), headers: { 'Content-Type': 'application/json' } }).then(response => response.json()).then(data => console.log(data));`"
Como você lida com erros na API `Fetch`?,Você pode usar o método `.catch()` para capturar erros que ocorrem durante a requisição. Também pode verificar a propriedade `ok` da resposta para verificar se a requisição foi bem-sucedida.
O que são Web Workers em JavaScript?,"Web Workers permitem executar scripts JavaScript em segundo plano, sem bloquear a thread principal da interface do usuário."
Como você cria um Web Worker em JavaScript?,`const worker = new Worker('worker.js');`
Como você se comunica entre a thread principal e um Web Worker?,Você usa o método `postMessage()` para enviar mensagens entre as threads e o evento `message` para receber mensagens.
O que é o objeto `location` em JavaScript?,O objeto `location` contém informações sobre a URL atual da página e fornece métodos para alterar a URL.
O que é o objeto `history` em JavaScript?,"O objeto `history` permite navegar pelo histórico de navegação do navegador, como voltar e avançar."
Como você define um cookie em JavaScript?,`document.cookie = 'nome=valor; expires=data; path=/';`
Como você lê um cookie em JavaScript?,`const cookies = document.cookie;` (que retorna uma string com todos os cookies separados por ponto e vírgula).
Como você exclui um cookie em JavaScript?,"Defina a data de expiração do cookie para uma data no passado: `document.cookie = 'nome=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/';`"
O que é o Local Storage e o Session Storage em JavaScript?,"Local Storage e Session Storage são APIs para armazenar dados localmente no navegador do usuário. Local Storage armazena dados permanentemente (até que sejam explicitamente excluídos), enquanto Session Storage armazena dados apenas durante a sessão do navegador."
Como você armazena um valor no Local Storage?,"`localStorage.setItem('chave', 'valor');`"
Como você recupera um valor do Local Storage?,`const valor = localStorage.getItem('chave');`
Como você remove um valor do Local Storage?,`localStorage.removeItem('chave');`
O que é o Session Storage e como ele difere do Local Storage?,"Session Storage armazena dados apenas durante a sessão do navegador, enquanto Local Storage armazena dados permanentemente (até serem explicitamente excluídos). Os dados no Session Storage são perdidos quando a janela ou aba do navegador é fechada."
O que é o tipo `BigInt` em JavaScript?,`BigInt` é um tipo de dados numérico que pode representar inteiros maiores que o limite do tipo `Number`. É usado para realizar operações aritméticas em inteiros muito grandes com precisão.
Como você cria um `BigInt` em JavaScript?,Você pode criar um `BigInt` adicionando o sufixo `n` a um literal inteiro (ex: `123n`) ou usando a função `BigInt()` (ex: `BigInt(123)`).
Quais operações são suportadas com o tipo `BigInt`?,"A maioria das operações aritméticas padrão (+, -, *, /, **, %) são suportadas, mas `BigInt` não pode ser misturado com `Number` em operações aritméticas. Você deve converter explicitamente para `BigInt` antes de realizar a operação."
O que são Map e Set em JavaScript?,"Map e Set são estruturas de dados que representam coleções de valores. Map armazena pares chave-valor, enquanto Set armazena valores únicos."
Qual a diferença entre um objeto e um Map em JavaScript?,"Map permite usar qualquer tipo de valor como chave, enquanto objetos só podem usar strings ou Symbols. Map também mantém a ordem de inserção das chaves, enquanto a ordem das propriedades em objetos não é garantida."
Como você adiciona um valor a um Set em JavaScript?,`meuSet.add(valor);`
Como você verifica se um valor existe em um Set em JavaScript?,`meuSet.has(valor);`
Como você remove um valor de um Set em JavaScript?,`meuSet.delete(valor);`
Como você itera sobre os valores em um Set em JavaScript?,Você pode usar o loop `for...of` ou o método `forEach()`.
Como você adiciona um par chave-valor a um Map em JavaScript?,"`meuMap.set(chave, valor);`"
Como você obtém um valor de um Map em JavaScript usando sua chave?,`const valor = meuMap.get(chave);`
Como você verifica se uma chave existe em um Map em JavaScript?,`meuMap.has(chave);`
Como você remove um par chave-valor de um Map em JavaScript?,`meuMap.delete(chave);`
Como você itera sobre os pares chave-valor em um Map em JavaScript?,Você pode usar o loop `for...of` com o método `entries()` ou o método `forEach()`.
O que é tail call optimization (TCO) e JavaScript suporta?,TCO é uma otimização que permite que uma chamada de função no final de outra função (tail call) seja executada sem adicionar um novo frame à pilha de chamadas. JavaScript tem suporte limitado a TCO e geralmente só é garantido em modo estrito e em determinadas situações.
Qual a diferença entre `in` e `hasOwnProperty()` em JavaScript?,"`in` verifica se uma propriedade existe no objeto ou em sua cadeia de protótipos, enquanto `hasOwnProperty()` verifica se a propriedade existe diretamente no objeto, sem considerar a cadeia de protótipos."
O que é o tipo `Symbol` em JavaScript?,`Symbol` é um tipo de dados primitivo introduzido no ES6 que representa um identificador único e imutável. Eles são frequentemente usados para criar propriedades de objeto que não entrarão em conflito com outras propriedades.
Como você cria um Symbol em JavaScript?,`const meuSimbolo = Symbol('descrição');`
Como você pode usar Symbols para criar propriedades privadas em objetos?,"Ao usar um Symbol como chave de uma propriedade, a propriedade fica ""escondida"" da enumeração normal e não é acessível diretamente por outros códigos que não tenham acesso ao Symbol. No entanto, não é verdadeiramente privado, já que `Object.getOwnPropertySymbols()` pode revelar os Symbols de um objeto."
O que são os símbolos bem conhecidos (well-known symbols) em JavaScript?,"São símbolos predefinidos que representam comportamentos internos da linguagem. Exemplos incluem `Symbol.iterator`, `Symbol.toStringTag`, `Symbol.hasInstance`, etc."
Qual a diferença entre `Object.freeze()` e `Object.seal()`?,"`Object.freeze()` impede a adição, remoção e modificação de propriedades, enquanto `Object.seal()` impede a adição e remoção de propriedades, mas permite a modificação das propriedades existentes."
Como você ativa o modo estrito em JavaScript?,"Adicione a diretiva `""use strict"";` no início de um script ou função."
Quais são algumas das restrições impostas pelo modo estrito?,"* Impossibilidade de usar variáveis não declaradas.
* Atribuição a propriedades somente leitura lança um erro.
* Impossibilidade de deletar variáveis ou funções declaradas com `var`, `let` ou `const`.
* `this` dentro de uma função não vinculada é `undefined`, em vez do objeto global."
O que é o objeto global em JavaScript?,"O objeto global é o objeto que existe no escopo mais externo. No navegador, é o objeto `window`. No Node.js, é o objeto `global`."
Como você pode detectar se o código está sendo executado em um navegador ou no Node.js?,"Você pode verificar se o objeto `window` existe: `typeof window !== 'undefined'`. Se existir, o código está sendo executado em um navegador. Caso contrário, provavelmente está sendo executado em um ambiente Node.js."
O que é o operador `void` em JavaScript?,O operador `void` avalia uma expressão e retorna `undefined`. É frequentemente usado para evitar que o navegador navegue para um novo URL quando um link é clicado.
Como você pode criar um loop infinito em JavaScript?,`while (true) { ... }` ou `for (;;) { ... }`
Como você pode quebrar um loop em JavaScript?,Você pode usar a palavra-chave `break` para sair de um loop.
Como você pode pular para a próxima iteração de um loop em JavaScript?,Você pode usar a palavra-chave `continue` para pular para a próxima iteração.
O que é um label em JavaScript e como ele é usado?,Um label é um identificador que pode ser associado a uma instrução. Ele é usado em conjunto com `break` e `continue` para controlar o fluxo de loops aninhados.
Como você usa um label com `break` em JavaScript?,`label: while (condição) { ... if (condiçãoDeSaída) { break label; } ... }` Isso fará com que o loop identificado pelo label seja interrompido.
O que é o padrão Observer em JavaScript?,"O padrão Observer define uma dependência um-para-muitos entre objetos, de forma que, quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
Como você pode implementar o padrão Observer em JavaScript?,"Você pode criar um objeto que mantém uma lista de observadores (callbacks) e fornece métodos para adicionar observadores, remover observadores e notificar os observadores quando o estado muda."
Como você pode implementar memoization em JavaScript?,Você pode criar uma função que armazena os resultados em um objeto e verifica se o resultado para uma determinada entrada já existe no objeto antes de calcular o resultado novamente.
O que é o padrão Revealing Module em JavaScript?,"É uma variação do padrão Module, onde retornamos um objeto contendo apenas as funções que queremos tornar públicas, ""revelando-as"". As demais funções permanecem privadas dentro do escopo do módulo."
"O que é ""tree shaking"" e como ele se relaciona com JavaScript?","Tree shaking é uma técnica usada por bundlers (como Webpack) para remover código não utilizado de um projeto JavaScript. Isso ajuda a reduzir o tamanho final do arquivo, melhorando o desempenho."
O que são WebAssembly e como se relacionam com JavaScript?,"WebAssembly (Wasm) é um formato binário para código que é executado em navegadores web. Ele é projetado para ser uma alternativa mais rápida e eficiente ao JavaScript para tarefas computacionalmente intensivas. Wasm pode ser usado em conjunto com JavaScript, permitindo que você escreva partes do seu aplicativo em linguagens como C++ ou Rust e compile-as para Wasm."
O que são Mixins em JavaScript e como podem ser úteis?,Mixins são classes ou objetos que contêm métodos que podem ser usados por outras classes sem herança. Eles permitem reutilizar o código e adicionar funcionalidades a classes existentes de forma flexível.
"O que é a ""Event Loop"" em JavaScript e qual seu papel?","A Event Loop é um mecanismo central no JavaScript que permite lidar com operações assíncronas de forma não bloqueante. Ela monitora a pilha de chamadas e a fila de tarefas, movendo callbacks da fila para a pilha quando a pilha está vazia."
"O que é ""Garbage Collection"" em JavaScript e como ela funciona?",Garbage Collection é o processo automático de liberação de memória que não está mais sendo usada por um programa JavaScript. O garbage collector identifica objetos que não são mais referenciados e libera a memória que eles ocupavam.
"O que é ""Dead Code Elimination"" e como se relaciona com JavaScript?",Dead Code Elimination é um processo de otimização que remove o código que nunca será
Como funciona o operador `typeof`?,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando. Por exemplo, `typeof 42` retorna ""number"", `typeof ""hello""` retorna ""string"", e `typeof undefined` retorna ""undefined""."
Explique o que é closure em JavaScript.,"Um closure é a capacidade de uma função de ""lembrar"" e acessar variáveis de seu escopo léxico (o escopo onde a função foi definida), mesmo quando a função é executada fora desse escopo."
O que é o objeto `arguments`?,"Dentro de uma função, o `arguments` é um objeto semelhante a um array que contém todos os argumentos passados para a função. Não é um array real, mas pode ser percorrido usando um loop."
O que é uma função construtora em JavaScript?,"Uma função construtora é uma função usada para criar objetos. Ela é chamada com a palavra-chave `new`. Dentro da função, `this` se refere ao novo objeto sendo criado."
Explique o conceito de herança prototipal em JavaScript.,"JavaScript usa herança prototipal, onde objetos herdam propriedades e métodos de outro objeto, chamado protótipo. Cada objeto tem um protótipo, e quando uma propriedade é acessada no objeto, JavaScript primeiro verifica se a propriedade existe no objeto, e se não existir, procura no protótipo e assim por diante, até chegar ao protótipo final (geralmente `null`)."
Qual a função do método `bind()`?,"O método `bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido. Ele também permite predefinir argumentos para a função."
O que é o JSON e qual sua utilidade em JavaScript?,"JSON (JavaScript Object Notation) é um formato de dados leve usado para troca de dados. Em JavaScript, é usado para transmitir dados entre um servidor e um aplicativo web ou para armazenar dados de forma estruturada."
Explique o conceito de truthy e falsy values.,"Em JavaScript, um valor truthy é um valor que é avaliado como `true` em um contexto booleano, enquanto um valor falsy é avaliado como `false`. Exemplos de valores falsy incluem `0`, `""""` (string vazia), `null`, `undefined`, `NaN` e `false`."
O que é o operador ternário (operador condicional)?,O operador ternário é uma forma concisa de escrever uma instrução `if...else`. Sua sintaxe é `condição ? expressão_se_verdadeira : expressão_se_falsa`.
O que são template literals?,Template literals são strings que permitem incorporar expressões dentro delas usando a sintaxe `${expressão}`. Elas são delimitadas por backticks (``).
Explique o que são classes em JavaScript.,Classes em JavaScript são um açúcar sintático sobre a herança prototipal. Elas fornecem uma forma mais clara e orientada a objetos de criar objetos e lidar com herança.
"Qual a diferença entre `let`, `const` e `var`?",`var` tem escopo de função ou escopo global se declarado fora de uma função. `let` e `const` têm escopo de bloco (dentro de chaves `{}`). `const` é usado para variáveis cujo valor não deve ser reatribuído após a inicialização.
Como você seleciona um elemento HTML usando JavaScript?,"Você pode usar métodos como `document.getElementById()`, `document.querySelector()` e `document.querySelectorAll()` para selecionar elementos HTML."
Como você modifica o conteúdo de um elemento HTML usando JavaScript?,Você pode usar a propriedade `textContent` ou `innerHTML` de um elemento para modificar seu conteúdo.
Como você adiciona um ouvinte de evento (event listener) a um elemento?,"Você usa o método `addEventListener()` para adicionar um ouvinte de evento a um elemento. Por exemplo, `element.addEventListener('click', myFunction)`."
Como você previne o comportamento padrão de um evento?,"Você pode usar o método `preventDefault()` do objeto de evento para prevenir o comportamento padrão. Por exemplo, `event.preventDefault()`."
Como você interrompe a propagação de um evento?,"Você pode usar o método `stopPropagation()` do objeto de evento para interromper a propagação. Por exemplo, `event.stopPropagation()`."
O que são cookies?,"Cookies são pequenos arquivos de texto que os sites armazenam no navegador do usuário para lembrar informações sobre o usuário, como preferências ou informações de login."
O que é o Local Storage?,Local Storage é um mecanismo de armazenamento web que permite armazenar dados localmente no navegador do usuário. Os dados permanecem armazenados mesmo após o navegador ser fechado.
Como você armazena dados no Local Storage?,"Você usa o método `localStorage.setItem(key, value)` para armazenar dados no Local Storage."
O que é o Session Storage?,"Session Storage é semelhante ao Local Storage, mas os dados são armazenados apenas durante a sessão do navegador. Os dados são perdidos quando o navegador é fechado."
Como você armazena dados no Session Storage?,"Você usa o método `sessionStorage.setItem(key, value)` para armazenar dados no Session Storage."
O que são callbacks?,Callbacks são funções passadas como argumentos para outras funções. Elas são executadas quando a função que as recebeu como argumento termina sua execução.
O que são Promises?,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas podem estar em um dos três estados: pendente (pending), resolvida (fulfilled) ou rejeitada (rejected)."
O que são async/await?,"`async/await` são palavras-chave que facilitam o trabalho com Promises. `async` declara uma função assíncrona, e `await` pausa a execução da função até que uma Promise seja resolvida ou rejeitada."
O que é uma expressão regular?,Uma expressão regular é um padrão de texto usado para corresponder e manipular strings.
Como você cria uma expressão regular em JavaScript?,"Você pode criar uma expressão regular usando literais (por exemplo, `/pattern/`) ou o construtor `RegExp`."
O que é o método `map()` em arrays?,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em arrays?,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em arrays?,O método `reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o método `forEach()` em arrays?,O método `forEach()` executa uma função fornecida uma vez para cada elemento em um array.
O que é o método `sort()` em arrays?,O método `sort()` ordena os elementos de um array no local e retorna o array ordenado.
Como você remove o último elemento de um array?,Você pode usar o método `pop()` para remover o último elemento de um array.
Como você adiciona um elemento ao final de um array?,Você pode usar o método `push()` para adicionar um elemento ao final de um array.
Como você remove o primeiro elemento de um array?,Você pode usar o método `shift()` para remover o primeiro elemento de um array.
Como você adiciona um elemento ao início de um array?,Você pode usar o método `unshift()` para adicionar um elemento ao início de um array.
O que é o método `splice()` em arrays?,"O método `splice()` altera o conteúdo de um array, adicionando novos elementos enquanto remove elementos antigos."
O que é o método `slice()` em arrays?,O método `slice()` retorna uma cópia rasa (shallow copy) de uma parte de um array em um novo array.
O que é o método `concat()` em arrays?,"O método `concat()` é usado para juntar dois ou mais arrays. Este método não modifica os arrays existentes, mas retorna um novo array."
O que é o operador spread (`...`)?,O operador spread permite que um iterável (como um array ou string) seja expandido em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados.
O que é o método `padStart()`?,"O método `padStart()` preenche o início da string atual com outra string (repetida, se necessário) para que a string resultante alcance um determinado comprimento."
O que é o método `padEnd()`?,"O método `padEnd()` preenche o final da string atual com uma string fornecida (repetida, se necessário) para que a string resultante alcance um determinado comprimento."
O que é o método `trim()`?,O método `trim()` remove os espaços em branco (whitespaces) do início e do fim de uma string.
O que é o método `toUpperCase()`?,O método `toUpperCase()` retorna o valor da string original convertido em letras maiúsculas.
O que é o método `toLowerCase()`?,O método `toLowerCase()` retorna o valor da string original convertido em letras minúsculas.
O que é o método `includes()` em strings?,O método `includes()` determina se uma string contém outra string e retorna `true` ou `false` conforme apropriado.
O que é o método `startsWith()` em strings?,"O método `startsWith()` determina se uma string começa com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado."
O que é o método `endsWith()` em strings?,"O método `endsWith()` determina se uma string termina com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado."
O que é o método `substring()` em strings?,O método `substring()` retorna uma parte da string entre os índices inicial e final fornecidos.
O que é o método `substr()` em strings?,"O método `substr()` retorna uma parte da string, começando no índice especificado e retornando o número especificado de caracteres."
O que é o método `replace()` em strings?,O método `replace()` retorna uma nova string com alguma ou todas as correspondências de um padrão substituídas por uma substituição.
O que é o método `replaceAll()` em strings?,O método `replaceAll()` retorna uma nova string com todas as correspondências de um padrão substituídas por uma substituição.
O que é o método `split()` em strings?,"O método `split()` divide um String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array."
O que é o método `join()` em arrays?,"O método `join()` cria e retorna uma nova string concatenando todos os elementos em um array (ou um objeto semelhante a um array), separados por vírgulas ou uma string de separador especificada."
Como você gera um número aleatório em JavaScript?,Você pode usar `Math.random()` para gerar um número aleatório entre 0 (inclusive) e 1 (exclusivo).
Como você arredonda um número para cima em JavaScript?,Você pode usar `Math.ceil()` para arredondar um número para cima.
Como você arredonda um número para baixo em JavaScript?,Você pode usar `Math.floor()` para arredondar um número para baixo.
Como você calcula a raiz quadrada de um número em JavaScript?,Você pode usar `Math.sqrt()` para calcular a raiz quadrada de um número.
Como você eleva um número a uma potência em JavaScript?,"Você pode usar `Math.pow(base, exponent)` para elevar um número a uma potência."
Como você obtém a data atual em JavaScript?,Você pode criar um novo objeto `Date` usando `new Date()`.
Como você obtém o ano de uma data em JavaScript?,Você pode usar o método `getFullYear()` para obter o ano de uma data.
Como você obtém o mês de uma data em JavaScript?,Você pode usar o método `getMonth()` para obter o mês de uma data (0-11).
Como você obtém o dia do mês de uma data em JavaScript?,Você pode usar o método `getDate()` para obter o dia do mês de uma data.
Como você obtém o dia da semana de uma data em JavaScript?,"Você pode usar o método `getDay()` para obter o dia da semana de uma data (0-6, onde 0 é Domingo)."
Como você obtém as horas de uma data em JavaScript?,Você pode usar o método `getHours()` para obter as horas de uma data.
Como você obtém os minutos de uma data em JavaScript?,Você pode usar o método `getMinutes()` para obter os minutos de uma data.
Como você obtém os segundos de uma data em JavaScript?,Você pode usar o método `getSeconds()` para obter os segundos de uma data.
Como você define o ano de uma data em JavaScript?,Você pode usar o método `setFullYear()` para definir o ano de uma data.
Como você define o mês de uma data em JavaScript?,Você pode usar o método `setMonth()` para definir o mês de uma data.
Como você define o dia do mês de uma data em JavaScript?,Você pode usar o método `setDate()` para definir o dia do mês de uma data.
O que são iteradores e iteráveis em JavaScript?,Um iterável é um objeto que pode ser iterado (percorrido) usando um loop. Ele deve ter um método `Symbol.iterator` que retorna um iterador. Um iterador é um objeto que define como iterar sobre um iterável. Ele deve ter um método `next()` que retorna um objeto com as propriedades `value` (o próximo valor) e `done` (um booleano indicando se a iteração terminou).
O que é o operador `in`?,"O operador `in` retorna `true` se a propriedade especificada estiver no objeto, caso contrário, retorna `false`."
O que é o operador `instanceof`?,O operador `instanceof` verifica se um objeto foi criado usando um determinado construtor.
O que é WeakMap e WeakSet em JavaScript?,"WeakMap e WeakSet são semelhantes a Map e Set, mas as chaves em um WeakMap e os valores em um WeakSet devem ser objetos. Além disso, eles são ""fracos"", o que significa que se um objeto não for mais referenciado em nenhum outro lugar, ele pode ser coletado pelo garbage collector, e a entrada correspondente no WeakMap/WeakSet será removida."
O que são proxies em JavaScript?,"Proxies permitem interceptar e personalizar operações fundamentais em objetos (por exemplo, leitura de propriedades, atribuição, enumeração, invocação de função, etc.)."
O que são reflection em JavaScript?,"Reflection é um conjunto de APIs que permitem inspecionar e manipular o comportamento interno de objetos e funções. Ele fornece métodos como `Reflect.get`, `Reflect.set`, `Reflect.apply`, etc."
O que é o operador `delete`?,O operador `delete` remove uma propriedade de um objeto.
O que é a função `eval()`?,A função `eval()` avalia uma string como código JavaScript. Seu uso é geralmente desencorajado devido a riscos de segurança e desempenho.
O que é o `void` operador?,O operador `void` avalia uma expressão e retorna `undefined`. Ele é frequentemente usado para evitar que o navegador navegue para um novo URL quando um link é clicado.
O que é o operador de coalescência nula (`??`)?,"O operador de coalescência nula (`??`) retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`, e caso contrário, retorna o operando da esquerda."
O que é o encadeamento opcional (`?.`)?,O encadeamento opcional (`?.`) permite acessar propriedades profundamente aninhadas em um objeto sem ter que verificar explicitamente se cada referência no caminho é `null` ou `undefined`.
O que é o método `Object.freeze()`?,"O método `Object.freeze()` congela um objeto. Um objeto congelado não pode mais ser alterado; congelar um objeto impede que novas propriedades sejam adicionadas a ele, impede que as propriedades existentes sejam removidas e impede que os valores das propriedades existentes sejam alterados."
O que é o método `Object.seal()`?,"O método `Object.seal()` sela um objeto, impedindo que novas propriedades sejam adicionadas a ele e marcando todas as propriedades existentes como não configuráveis. Os valores das propriedades presentes ainda podem ser alterados, desde que sejam graváveis."
O que são decorators em JavaScript (proposta)?,"Decorators são uma forma de modificar ou estender classes, métodos, propriedades ou parâmetros. Eles usam a sintaxe `@decorator`. (Ainda é uma proposta e não faz parte do padrão ECMAScript oficialmente, mas amplamente utilizado com transpiladores como Babel)."
"Explique o conceito de ""currying"" em JavaScript.","Currying é uma técnica em programação funcional que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada. Cada função intermediária retorna outra função que espera o próximo argumento, até que todos os argumentos tenham sido fornecidos, momento em que a função original é executada."
O que é um Immediately Invoked Function Expression (IIFE)?,Um IIFE (Immediately Invoked Function Expression) é uma função JavaScript que é executada assim que é definida. A sintaxe comum é `(function() { ... })();` ou `( () => { ... })();`.  São usados para criar escopos privados.
O que é a função `requestAnimationFrame()`?,A função `requestAnimationFrame()` informa ao navegador que você deseja realizar uma animação e solicita que o navegador chame uma função especificada para atualizar uma animação antes da próxima repintura.
O que são Web Workers?,"Web Workers permitem que você execute scripts JavaScript em threads de fundo, sem bloquear a thread principal do navegador. Isso pode melhorar o desempenho de aplicativos web que realizam tarefas pesadas."
O que é Cross-Origin Resource Sharing (CORS)?,CORS (Cross-Origin Resource Sharing) é um mecanismo que permite que recursos da web de um domínio sejam acessados por recursos de um domínio diferente.
O que é JSONP?,JSONP (JSON with Padding) é uma técnica usada para contornar a política de mesma origem em navegadores web. Ele envolve o uso de tags `<script>` para carregar dados de um domínio diferente.
O que é minificação de código JavaScript?,"Minificação é o processo de remover todos os caracteres desnecessários do código JavaScript, como espaços em branco, comentários e nomes de variáveis mais longos, para reduzir o tamanho do arquivo."
O que é ofuscação de código JavaScript?,"Ofuscação é o processo de transformar o código JavaScript em um formato que é difícil de entender e depurar, para proteger o código de engenharia reversa."
O que são polyfills?,Polyfills são trechos de código que implementam funcionalidades que não estão disponíveis em versões mais antigas de navegadores. Eles permitem que você use recursos modernos em navegadores legados.
O que são transpilers?,"Transpilers são ferramentas que convertem o código-fonte de uma linguagem de programação para outra linguagem de programação. No contexto do JavaScript, os transpilers são frequentemente usados para converter código JavaScript moderno (por exemplo, ES6+) para código JavaScript mais antigo (por exemplo, ES5) que pode ser executado em navegadores mais antigos."
O que é garbage collection em JavaScript?,Garbage collection é um processo automático que o motor JavaScript usa para liberar memória que não está mais sendo usada.
O que é o event loop em JavaScript?,"O event loop é um mecanismo que permite que o JavaScript execute operações assíncronas sem bloquear a thread principal. Ele monitora a pilha de chamadas e a fila de tarefas, e move as tarefas da fila para a pilha quando a pilha está vazia."
O que é a pilha de chamadas (call stack) em JavaScript?,A pilha de chamadas é uma estrutura de dados que rastreia a ordem em que as funções são chamadas em um programa JavaScript.
O que é a fila de tarefas (task queue) em JavaScript?,"A fila de tarefas é uma fila de callbacks que estão esperando para serem executados. Ela contém callbacks de eventos, timers e outras operações assíncronas."
O que é o método `setTimeout()`?,O método `setTimeout()` executa uma função ou um trecho de código após um determinado atraso em milissegundos.
O que é o método `setInterval()`?,"O método `setInterval()` executa uma função ou um trecho de código repetidamente, com um atraso fixo entre cada chamada."
"Qual a diferença entre `console.log()`, `console.warn()` e `console.error()`?",`console.log()` exibe uma mensagem de log no console. `console.warn()` exibe uma mensagem de aviso no console. `console.error()` exibe uma mensagem de erro no console.
O que são os Service Workers?,"Service Workers são scripts que rodam em segundo plano, separados da página web, e permitem funcionalidades como notificações push, cache offline e sincronização em segundo plano."
Qual a diferença entre CommonJS e ES Modules?,"CommonJS é um sistema de módulos usado principalmente em Node.js, enquanto ES Modules (ECMAScript Modules) é o sistema de módulos padrão para JavaScript moderno.  CommonJS usa `require()` para importar e `module.exports` para exportar, enquanto ES Modules usam `import` e `export`."
Como você importa um módulo usando ES Modules?,"Você usa a palavra-chave `import` para importar um módulo usando ES Modules. Por exemplo, `import { myFunction } from './myModule.js';`"
Como você exporta um módulo usando ES Modules?,"Você usa a palavra-chave `export` para exportar um módulo usando ES Modules. Por exemplo, `export function myFunction() { ... }` ou `export default myFunction;`"
O que é uma função pure em JavaScript?,"Uma função pura é uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais (ou seja, não modifica nenhum estado fora da função)."
O que é programação funcional em JavaScript?,"Programação funcional é um paradigma de programação que enfatiza o uso de funções puras, imutabilidade e evitar efeitos colaterais."
O que é programação orientada a objetos em JavaScript?,"Programação orientada a objetos (POO) é um paradigma de programação que organiza o código em objetos, que são instâncias de classes. A POO se concentra em conceitos como encapsulamento, herança e polimorfismo."
O que é o padrão Module em JavaScript?,O padrão Module é uma forma de encapsular código JavaScript e criar escopos privados usando funções IIFE (Immediately Invoked Function Expression).
O que é o padrão Singleton em JavaScript?,O padrão Singleton garante que apenas uma instância de uma classe seja criada e fornece um ponto de acesso global a essa instância.
O que é o padrão Factory em JavaScript?,O padrão Factory fornece uma interface para criar objetos sem especificar suas classes concretas.
O que é o padrão Strategy em JavaScript?,"O padrão Strategy define uma família de algoritmos, encapsula cada um deles e os torna intercambiáveis. Ele permite que o algoritmo varie independentemente dos clientes que o utilizam."
O que é o padrão Decorator em JavaScript?,"O padrão Decorator permite adicionar responsabilidades a um objeto dinamicamente, sem modificar seu código."
O que é o padrão Iterator em JavaScript?,"O padrão Iterator fornece uma maneira de acessar os elementos de um objeto agregado sequencialmente, sem expor sua representação subjacente."
O que é o padrão Command em JavaScript?,"O padrão Command encapsula uma solicitação como um objeto, permitindo parametrizar clientes com diferentes solicitações, enfileirar ou registrar solicitações e suportar operações anuláveis."
O que é o padrão Template Method em JavaScript?,"O padrão Template Method define o esqueleto de um algoritmo em uma classe base, permitindo que as subclasses forneçam implementações específicas para algumas etapas do algoritmo, sem alterar sua estrutura."
O que é o padrão Proxy em JavaScript?,"O padrão Proxy fornece um substituto para outro objeto, controlando o acesso a ele."
O que é o padrão Facade em JavaScript?,O padrão Facade fornece uma interface unificada para um conjunto de interfaces em um subsistema.
O que é o padrão Flyweight em JavaScript?,O padrão Flyweight usa o compartilhamento para suportar eficientemente um grande número de objetos de granularidade fina.
O que é o padrão Mediator em JavaScript?,"O padrão Mediator define um objeto que encapsula como um conjunto de objetos interage. O Mediator promove o acoplamento fraco, evitando que os objetos se refiram explicitamente uns aos outros."
O que é o padrão Memento em JavaScript?,"O padrão Memento permite capturar e externalizar o estado interno de um objeto, de forma que o objeto possa ser restaurado para esse estado posteriormente, sem violar o encapsulamento."
O que é o padrão Visitor em JavaScript?,O padrão Visitor representa uma operação a ser executada sobre os elementos de uma estrutura de objeto. O Visitor permite definir uma nova operação sem alterar as classes dos elementos sobre os quais opera.
O que é o padrão State em JavaScript?,O padrão State permite que um objeto altere seu comportamento quando seu estado interno muda. O objeto parecerá mudar de classe.
O que é o padrão Bridge em JavaScript?,"O padrão Bridge separa a abstração de sua implementação, de forma que ambas possam variar independentemente."
O que é o padrão Composite em JavaScript?,O padrão Composite compõe objetos em estruturas de árvore para representar hierarquias parte-todo.
O que é o padrão Adapter em JavaScript?,O padrão Adapter permite que classes com interfaces incompatíveis trabalhem juntas.
O que é o padrão Builder em JavaScript?,"O padrão Builder separa a construção de um objeto complexo de sua representação, de forma que o mesmo processo de construção possa criar representações diferentes."
O que é o padrão Prototype em JavaScript?,O padrão Prototype especifica os tipos de objetos a serem criados usando uma instância prototípica e cria novos objetos copiando este protótipo.
O que é o padrão Chain of Responsibility em JavaScript?,"O padrão Chain of Responsibility evita o acoplamento de um solicitante a seu receptor, dando a mais de um objeto a chance de lidar com a solicitação."
"Explique o conceito de ""debounce"".","Debounce é uma técnica para limitar a taxa na qual uma função é executada. Ela garante que a função só seja executada após um período de inatividade especificado, ou seja, quando uma série de eventos relacionados (como digitação ou redimensionamento de janela) tiver parado de ocorrer."
"Explique o conceito de ""throttle"".","Throttling é uma técnica para limitar a taxa na qual uma função é executada. Diferente do debounce, que espera um período de inatividade, o throttling garante que a função seja executada no máximo uma vez dentro de um período especificado."
O que são WebSockets?,WebSockets fornecem um canal de comunicação full-duplex sobre uma única conexão TCP. Isso permite que o servidor envie dados para o cliente sem que o cliente precise fazer uma solicitação inicial (como com HTTP).
O que é Server-Sent Events (SSE)?,"Server-Sent Events (SSE) é uma tecnologia que permite que um servidor envie dados para um navegador web em tempo real, usando uma única conexão HTTP. Diferente de WebSockets, SSE é unidirecional: o servidor envia dados para o cliente, mas o cliente não envia dados de volta para o servidor."
O que é a API Fetch?,A API Fetch fornece uma interface moderna para fazer requisições de rede em JavaScript. É uma alternativa mais poderosa e flexível ao XMLHttpRequest.
Como você faz uma requisição GET usando a API Fetch?,Você pode fazer uma requisição GET usando a API Fetch da seguinte forma: `fetch('url') .then(response => response.json()) .then(data => console.log(data));`
Como você faz uma requisição POST usando a API Fetch?,"Você pode fazer uma requisição POST usando a API Fetch da seguinte forma: `fetch('url', { method: 'POST', body: JSON.stringify(data), headers: { 'Content-Type': 'application/json' } }) .then(response => response.json()) .then(data => console.log(data));`"
O que é hoisting em JavaScript e como ele se aplica a variáveis declaradas com `var`?,"Hoisting é um comportamento em JavaScript onde as declarações de variáveis e funções são movidas para o topo de seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com um valor inicial de `undefined`, significando que você pode usá-las antes de sua declaração textual, mas seu valor será `undefined` até que a atribuição seja executada."
Explique a diferença entre `null` e `undefined` em JavaScript.,"`null` é um valor de atribuição. Representa a ausência intencional de um valor. `undefined` significa que uma variável foi declarada, mas não recebeu um valor, ou que uma propriedade de um objeto não existe."
Explique o que é o `this` em JavaScript.,`this` é uma palavra-chave que se refere ao objeto em que a função está sendo executada. Seu valor depende de como a função é chamada.
O que é o prototype em JavaScript?,Cada objeto em JavaScript tem um protótipo. O protótipo é um outro objeto do qual o objeto herda propriedades e métodos.
Como funciona a herança prototípica em JavaScript?,"A herança prototípica em JavaScript permite que objetos herdem propriedades e métodos de outros objetos através da cadeia de protótipos. Quando você tenta acessar uma propriedade ou método em um objeto que não está definido diretamente nele, JavaScript procura na cadeia de protótipos até encontrar a propriedade ou método ou chegar ao protótipo `null`."
Explique o conceito de escopo léxico em JavaScript.,"Escopo léxico significa que o escopo de uma variável é determinado pela sua posição no código fonte. Funções internas têm acesso às variáveis declaradas em suas funções externas, mesmo que a função externa já tenha retornado."
Qual a diferença entre `let` e `var` em relação ao escopo?,"Variáveis declaradas com `var` têm escopo de função (ou escopo global se declaradas fora de uma função). Variáveis declaradas com `let` têm escopo de bloco, o que significa que elas estão disponíveis apenas dentro do bloco em que foram declaradas."
O que é um bloco em JavaScript?,"Um bloco é um conjunto de zero ou mais declarações delimitadas por chaves `{}`. Blocos são usados para agrupar declarações em estruturas de controle como `if`, `else`, `for` e `while`."
O que é uma expressão em JavaScript?,"Uma expressão é uma unidade de código que pode ser avaliada para produzir um valor. Exemplos incluem literais, variáveis, operadores e chamadas de função."
O que é um statement (declaração) em JavaScript?,"Um statement é uma instrução que realiza uma ação. Exemplos incluem declarações de variáveis, atribuições, estruturas de controle e loops."
Como você pode verificar o tipo de uma variável em JavaScript?,Você pode usar o operador `typeof` para verificar o tipo de uma variável.
O que é um operador ternário em JavaScript?,"O operador ternário é um operador condicional que tem a seguinte sintaxe: `condição ? expressão_se_verdadeiro : expressão_se_falso`. Ele avalia a condição e retorna `expressão_se_verdadeiro` se a condição for verdadeira, e `expressão_se_falso` se for falsa."
Como você pode converter uma string para um número em JavaScript?,"Você pode usar as funções `parseInt()`, `parseFloat()` ou o operador unário `+`."
Como você pode converter um número para uma string em JavaScript?,"Você pode usar o método `toString()` ou concatenar o número com uma string vazia (`"""" + numero`)."
O que são arrays em JavaScript?,"Arrays são objetos que representam coleções ordenadas de valores. Cada valor em um array é chamado de elemento e é acessado por seu índice numérico, começando em 0."
Como você pode adicionar um elemento ao final de um array em JavaScript?,Você pode usar o método `push()`.
Como você pode remover o último elemento de um array em JavaScript?,Você pode usar o método `pop()`.
Como você pode adicionar um elemento ao início de um array em JavaScript?,Você pode usar o método `unshift()`.
Como você pode remover o primeiro elemento de um array em JavaScript?,Você pode usar o método `shift()`.
O que é o método `splice()` em JavaScript e para que ele serve?,"O método `splice()` é usado para adicionar ou remover elementos de um array em qualquer posição. Ele pode receber vários argumentos, incluindo o índice de início, o número de elementos a serem removidos e os elementos a serem adicionados."
O que é o método `slice()` em JavaScript e para que ele serve?,O método `slice()` retorna uma cópia superficial de uma porção de um array em um novo array. Ele recebe dois argumentos opcionais: o índice de início e o índice de fim (não inclusivo).
O que é o método `concat()` em JavaScript e para que ele serve?,O método `concat()` é usado para combinar dois ou mais arrays em um novo array.
O que é o método `join()` em JavaScript e para que ele serve?,"O método `join()` é usado para juntar todos os elementos de um array em uma string, separando-os por um separador especificado."
O que é o método `reverse()` em JavaScript e para que ele serve?,O método `reverse()` inverte a ordem dos elementos em um array.
O que é o método `sort()` em JavaScript e para que ele serve?,"O método `sort()` ordena os elementos de um array. Por padrão, ele ordena os elementos como strings. Você pode fornecer uma função de comparação para personalizar a ordem."
O que é o método `map()` em JavaScript e para que ele serve?,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em JavaScript e para que ele serve?,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em JavaScript e para que ele serve?,"O método `reduce()` executa uma função reducer (fornecida por você) em cada elemento do array, resultando em um único valor de retorno."
O que é o método `forEach()` em JavaScript e para que ele serve?,O método `forEach()` executa uma função fornecida uma vez para cada elemento do array.
O que é o método `find()` em JavaScript e para que ele serve?,"O método `find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
O que é o método `findIndex()` em JavaScript e para que ele serve?,"O método `findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1."
O que é o método `some()` em JavaScript e para que ele serve?,O método `some()` testa se pelo menos um elemento no array passa no teste implementado pela função fornecida. Retorna `true` se encontrar tal elemento e `false` caso contrário.
O que é o método `every()` em JavaScript e para que ele serve?,O método `every()` testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna `true` se todos os elementos passarem no teste e `false` caso contrário.
O que é uma string em JavaScript?,Uma string é uma sequência de caracteres. Strings em JavaScript são imutáveis.
Como você pode encontrar o comprimento de uma string em JavaScript?,Você pode usar a propriedade `length`.
O que é o método `substring()` em JavaScript e para que ele serve?,O método `substring()` retorna uma parte de uma string entre os índices especificados.
"O que é o método `slice()` em JavaScript e para que ele serve, quando usado em strings?","Similar ao `substring()`, o `slice()` retorna uma parte de uma string, mas pode lidar com índices negativos."
O que é o método `toUpperCase()` em JavaScript e para que ele serve?,O método `toUpperCase()` converte uma string para letras maiúsculas.
O que é o método `toLowerCase()` em JavaScript e para que ele serve?,O método `toLowerCase()` converte uma string para letras minúsculas.
O que é o método `trim()` em JavaScript e para que ele serve?,O método `trim()` remove espaços em branco do início e do fim de uma string.
O que é o método `replace()` em JavaScript e para que ele serve?,O método `replace()` substitui uma parte de uma string por outra string.
O que é o método `split()` em JavaScript e para que ele serve?,"O método `split()` divide uma string em um array de substrings, usando um separador especificado."
O que é o método `indexOf()` em JavaScript e para que ele serve?,O método `indexOf()` retorna o índice da primeira ocorrência de um valor especificado em uma string. Retorna -1 se o valor não for encontrado.
O que é o método `lastIndexOf()` em JavaScript e para que ele serve?,O método `lastIndexOf()` retorna o índice da última ocorrência de um valor especificado em uma string. Retorna -1 se o valor não for encontrado.
O que são templates literals (template strings) em JavaScript?,Template literals são strings que permitem embutir expressões. Elas são delimitadas por backticks (``) em vez de aspas simples ou duplas e podem conter placeholders na forma `${expressão}`.
Como você pode arredondar um número para o inteiro mais próximo em JavaScript?,Você pode usar o método `Math.round()`.
Como você pode arredondar um número para baixo para o inteiro mais próximo em JavaScript?,Você pode usar o método `Math.floor()`.
Como você pode arredondar um número para cima para o inteiro mais próximo em JavaScript?,Você pode usar o método `Math.ceil()`.
Como você pode encontrar o valor máximo entre dois números em JavaScript?,Você pode usar o método `Math.max()`.
Como você pode encontrar o valor mínimo entre dois números em JavaScript?,Você pode usar o método `Math.min()`.
Como você pode calcular a potência de um número em JavaScript?,Você pode usar o método `Math.pow()`.
Como você pode calcular a raiz quadrada de um número em JavaScript?,Você pode usar o método `Math.sqrt()`.
O que é um objeto `Date` em JavaScript?,O objeto `Date` é usado para trabalhar com datas e horários.
Como você pode criar um novo objeto `Date` em JavaScript?,Você pode usar o construtor `new Date()`.
Como você pode obter o ano de um objeto `Date` em JavaScript?,Você pode usar o método `getFullYear()`.
Como você pode obter o mês de um objeto `Date` em JavaScript?,"Você pode usar o método `getMonth()`. Lembre-se que os meses são baseados em zero (0 para Janeiro, 1 para Fevereiro, etc.)."
Como você pode obter o dia do mês de um objeto `Date` em JavaScript?,Você pode usar o método `getDate()`.
Como você pode obter o dia da semana de um objeto `Date` em JavaScript?,"Você pode usar o método `getDay()`. Lembre-se que os dias da semana são baseados em zero (0 para Domingo, 1 para Segunda, etc.)."
Como você pode obter as horas de um objeto `Date` em JavaScript?,Você pode usar o método `getHours()`.
Como você pode obter os minutos de um objeto `Date` em JavaScript?,Você pode usar o método `getMinutes()`.
Como você pode obter os segundos de um objeto `Date` em JavaScript?,Você pode usar o método `getSeconds()`.
Como você pode obter os milissegundos de um objeto `Date` em JavaScript?,Você pode usar o método `getMilliseconds()`.
Como você pode obter o timestamp de um objeto `Date` em JavaScript?,"Você pode usar o método `getTime()`, que retorna o número de milissegundos desde 1 de janeiro de 1970 UTC."
Como você pode converter um objeto JavaScript para uma string JSON?,Você pode usar o método `JSON.stringify()`.
Como você pode converter uma string JSON para um objeto JavaScript?,Você pode usar o método `JSON.parse()`.
O que é um loop `for` em JavaScript?,Um loop `for` é uma estrutura de controle que permite repetir um bloco de código um número especificado de vezes.
Qual é a sintaxe básica de um loop `for` em JavaScript?,`for (inicialização; condição; incremento) { // código a ser executado }`
O que é um loop `while` em JavaScript?,Um loop `while` é uma estrutura de controle que repete um bloco de código enquanto uma condição especificada for verdadeira.
Qual é a sintaxe básica de um loop `while` em JavaScript?,`while (condição) { // código a ser executado }`
O que é um loop `do...while` em JavaScript?,"Um loop `do...while` é semelhante ao loop `while`, mas garante que o bloco de código seja executado pelo menos uma vez, mesmo que a condição seja falsa na primeira vez."
Qual é a sintaxe básica de um loop `do...while` em JavaScript?,`do { // código a ser executado } while (condição);`
O que é a declaração `break` em JavaScript?,A declaração `break` é usada para sair de um loop ou switch statement.
O que é a declaração `continue` em JavaScript?,A declaração `continue` é usada para pular a iteração atual de um loop e passar para a próxima iteração.
O que é uma função em JavaScript?,Uma função é um bloco de código reutilizável que executa uma tarefa específica.
Como você declara uma função em JavaScript?,"Você pode usar a palavra-chave `function` seguida pelo nome da função, parênteses para os parâmetros e um bloco de código delimitado por chaves."
Como você chama (executa) uma função em JavaScript?,"Você chama uma função usando seu nome seguido por parênteses `()`. Se a função espera argumentos, você deve passá-los dentro dos parênteses."
O que são parâmetros de função em JavaScript?,Parâmetros são valores passados para uma função quando ela é chamada. Eles são usados para fornecer dados para a função processar.
O que são argumentos de função em JavaScript?,Argumentos são os valores reais que são passados para uma função quando ela é chamada.
O que é o valor de retorno de uma função em JavaScript?,"O valor de retorno é o valor que uma função retorna quando termina de executar. Você pode especificar o valor de retorno usando a declaração `return`. Se uma função não tiver uma declaração `return`, ela retorna `undefined`."
O que são arrow functions (funções de seta) em JavaScript?,"Arrow functions são uma sintaxe mais curta para escrever funções. Elas são introduzidas no ES6 (ECMAScript 2015) e têm algumas diferenças em relação às funções tradicionais, especialmente em relação ao `this`."
Qual a sintaxe básica de uma arrow function em JavaScript?,`(parâmetros) => expressão` ou `(parâmetros) => { // código }`
O que é uma função pura em JavaScript?,Uma função pura é uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais.
O que são efeitos colaterais em JavaScript?,"Efeitos colaterais são ações que uma função executa que modificam o estado fora de seu próprio escopo, como alterar variáveis globais, modificar o DOM ou fazer chamadas de rede."
O que é higher-order function em JavaScript?,Uma higher-order function é uma função que recebe outra função como argumento ou retorna uma função como resultado.
O que é o operador `...` (spread operator) em JavaScript?,O spread operator é usado para expandir um array ou objeto em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados.
O que é o operador `&&` (AND lógico) em JavaScript?,O operador `&&` retorna `true` se ambos os operandos forem verdadeiros e `false` caso contrário.
O que é o operador `||` (OR lógico) em JavaScript?,O operador `||` retorna `true` se pelo menos um dos operandos for verdadeiro e `false` se ambos forem falsos.
O que é o operador `!` (NOT lógico) em JavaScript?,O operador `!` inverte o valor booleano de seu operando.
O que são truthy e falsy values em JavaScript?,Truthy values são valores que são avaliados como `true` em um contexto booleano. Falsy values são valores que são avaliados como `false` em um contexto booleano.
Quais são os falsy values em JavaScript?,"Os falsy values em JavaScript são: `false`, `0`, `-0`, `0n`, `""""` (string vazia), `null`, `undefined` e `NaN`."
Como você pode acessar as propriedades de um objeto em JavaScript?,Você pode acessar as propriedades de um objeto usando a notação de ponto (`objeto.propriedade`) ou a notação de colchetes (`objeto['propriedade']`).
Como você pode adicionar uma nova propriedade a um objeto em JavaScript?,Você pode adicionar uma nova propriedade a um objeto usando a notação de ponto ou a notação de colchetes e atribuindo um valor a ela.
Como você pode remover uma propriedade de um objeto em JavaScript?,Você pode remover uma propriedade de um objeto usando o operador `delete`.
O que são métodos de um objeto em JavaScript?,Métodos são funções que são propriedades de um objeto.
O que é o operador `new` em JavaScript?,O operador `new` cria uma instância de um tipo de objeto definido pelo usuário ou por um dos tipos de objetos embutidos.
Quais são alguns métodos comuns do objeto `console` em JavaScript?,"`console.log()`, `console.warn()`, `console.error()`, `console.table()`."
Como você pode adicionar um ouvinte de evento a um elemento em JavaScript?,Você pode usar o método `addEventListener()`.
O que é o método `preventDefault()` do objeto `event`?,"O método `preventDefault()` impede o comportamento padrão do evento. Por exemplo, ele pode impedir que um link navegue para uma nova página ou que um formulário seja enviado."
O que é o método `stopPropagation()` do objeto `event`?,O método `stopPropagation()` impede que o evento se propague para elementos pai na árvore DOM.
O que é o DOM em JavaScript?,"O DOM (Document Object Model) é uma representação em forma de árvore da estrutura de um documento HTML ou XML. Ele permite que o JavaScript acesse e manipule o conteúdo, a estrutura e o estilo do documento."
Como você pode acessar um elemento HTML no DOM usando JavaScript?,"Você pode usar métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()` ou `document.querySelector()` e `document.querySelectorAll()`."
Como você pode criar um novo elemento HTML no DOM usando JavaScript?,Você pode usar o método `document.createElement()`.
Como você pode adicionar um novo elemento HTML ao DOM usando JavaScript?,"Você pode usar métodos como `appendChild()`, `insertBefore()`, `insertAdjacentElement()`."
Como você pode remover um elemento HTML do DOM usando JavaScript?,Você pode usar o método `removeChild()`.
Como você pode alterar o texto de um elemento HTML no DOM usando JavaScript?,Você pode usar a propriedade `textContent` ou `innerText`.
Como você pode alterar os atributos de um elemento HTML no DOM usando JavaScript?,Você pode usar os métodos `setAttribute()` e `getAttribute()`.
Como você pode alterar os estilos de um elemento HTML no DOM usando JavaScript?,Você pode usar a propriedade `style`.
Como você lida com o resultado de uma promise em JavaScript?,"Você pode usar os métodos `then()` e `catch()`. O método `then()` é chamado quando a promise é resolvida, e o método `catch()` é chamado quando a promise é rejeitada."
O que é a palavra-chave `async` em JavaScript?,A palavra-chave `async` é usada para declarar uma função assíncrona. Funções assíncronas sempre retornam uma promise.
O que é a palavra-chave `await` em JavaScript?,A palavra-chave `await` é usada dentro de uma função assíncrona para pausar a execução da função até que uma promise seja resolvida.
Como você pode lançar um erro em JavaScript?,Você pode usar a declaração `throw`.
Como você pode lidar com erros em JavaScript?,"Você pode usar o bloco `try...catch`. O código que pode gerar um erro é colocado dentro do bloco `try`, e o código que lida com o erro é colocado dentro do bloco `catch`."
O que é o bloco `finally` em JavaScript?,"O bloco `finally` é executado após o bloco `try` e o bloco `catch`, independentemente de um erro ter ocorrido ou não."
O que é o objeto `TypeError` em JavaScript?,O objeto `TypeError` representa um erro que ocorre quando um valor não é do tipo esperado.
O que é o objeto `ReferenceError` em JavaScript?,O objeto `ReferenceError` representa um erro que ocorre quando você tenta usar uma variável que não foi declarada.
O que é o objeto `SyntaxError` em JavaScript?,O objeto `SyntaxError` representa um erro que ocorre quando o código tem uma sintaxe inválida.
O que é o objeto `RangeError` em JavaScript?,O objeto `RangeError` representa um erro que ocorre quando um valor está fora de um intervalo permitido.
O que é o objeto `EvalError` em JavaScript?,O objeto `EvalError` representa um erro que ocorre quando a função `eval()` é usada de forma incorreta. (Nota: este erro raramente é usado em JavaScript moderno).
O que é o objeto `URIError` em JavaScript?,O objeto `URIError` representa um erro que ocorre quando as funções `encodeURI()` ou `decodeURI()` são usadas de forma incorreta.
Como você importa um módulo em JavaScript (ES Modules)?,Você usa a declaração `import`. Ex: `import { nomeDaFuncao } from './meuModulo.js';`
Como você exporta um módulo em JavaScript (ES Modules)?,Você usa a declaração `export`. Ex: `export function minhaFuncao() { ... }` ou `export default minhaFuncao;`
Qual a diferença entre `export default` e `export` (nomeado)?,"`export default` é usado para exportar um único valor padrão de um módulo. `export` (nomeado) é usado para exportar vários valores de um módulo, cada um com um nome específico."
O que é a diferença entre `forEach` e `map` em JavaScript?,"`forEach` itera sobre um array e executa uma função para cada elemento, mas não retorna nada (undefined). `map` itera sobre um array, executa uma função para cada elemento e retorna um novo array com os resultados da função aplicada a cada elemento."
Qual a diferença entre funções declaradas e expressões de função em JavaScript?,"Funções declaradas são hoisted, o que significa que podem ser chamadas antes de sua declaração no código. Expressões de função não são hoisted."
O que são IIFE (Immediately Invoked Function Expressions) em JavaScript?,IIFE são funções que são executadas imediatamente após sua criação. Elas são usadas para criar um escopo privado para evitar conflitos de nomes com variáveis globais.
O que é optional chaining (encadeamento opcional) em JavaScript?,"O encadeamento opcional (`?.`) permite acessar propriedades de objetos que podem ser `null` ou `undefined` sem causar um erro. Se uma propriedade na cadeia for `null` ou `undefined`, a expressão retorna `undefined` em vez de lançar um erro."
O que é o objeto `WeakSet` em JavaScript?,"O objeto `WeakSet` permite armazenar objetos de forma ""fraca"". Isso significa que se não houver outras referências a um objeto armazenado em um `WeakSet`, o objeto pode ser coletado pelo garbage collector. `WeakSet` só armazena objetos."
O que é o objeto `WeakMap` em JavaScript?,"O objeto `WeakMap` armazena pares chave-valor, onde as chaves devem ser objetos. Similar ao `WeakSet`, o `WeakMap` permite que os objetos chave sejam coletados pelo garbage collector se não houver outras referências a eles."
O que é TCO (Tail Call Optimization) em JavaScript?,"Tail Call Optimization é uma otimização que alguns engines JavaScript podem realizar em chamadas recursivas de cauda. Uma chamada recursiva de cauda ocorre quando a última operação realizada por uma função é uma chamada para ela mesma. A otimização substitui o frame de pilha da função atual pelo frame da função chamada, evitando o estouro da pilha. No entanto, o suporte para TCO em JavaScript é limitado e inconsistente entre os engines.

Espero que este conjunto de perguntas e respostas seja útil!"
Qual é a diferença entre `undefined` e `null` em JavaScript?,"`undefined` significa que uma variável foi declarada, mas ainda não recebeu um valor. `null` é um valor de atribuição que representa a ausência intencional de qualquer valor ou objeto."
Qual é o propósito do operador `void` em JavaScript?,O operador `void` avalia uma expressão e retorna `undefined`. É frequentemente usado para prevenir que o navegador siga um link.
O que é hoisting em JavaScript e como isso afeta as variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover as declarações de variáveis e funções para o topo do escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto funções declaradas com `function` são completamente hoisted. Variáveis declaradas com `let` e `const` são hoisted, mas não inicializadas, levando a um erro se acessadas antes da declaração."
Como você compara dois objetos em JavaScript para verificar se eles são iguais em conteúdo?,"A comparação direta de objetos com `==` ou `===` verifica se eles referenciam o mesmo objeto na memória, não se possuem o mesmo conteúdo. Para comparar o conteúdo, você precisa iterar sobre as propriedades dos objetos e compará-las individualmente ou usar uma função de serialização para converter os objetos em strings e compará-las."
O que são template literals (template strings) e como são usados?,Template literals são strings que permitem expressões incorporadas. Eles são delimitados por backticks (`) e as expressões são inseridas com `${expressao}`. Eles permitem interpolação de strings e strings multilinha.
Qual é a diferença entre `map` e `forEach` em arrays?,"`map` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. `forEach` executa uma função fornecida uma vez para cada elemento do array, mas não cria um novo array."
O que é o método `reduce` em arrays e como ele funciona?,"`reduce` executa uma função reducer (fornecida por você) em cada elemento do array, resultando em um único valor de saída. A função reducer recebe um acumulador e o valor atual, e retorna o novo acumulador."
Como você lida com erros em JavaScript usando `try...catch`?,"Você envolve o código que pode gerar uma exceção dentro de um bloco `try`. Se uma exceção ocorrer, o bloco `catch` é executado. `try { /* código que pode gerar erro */ } catch (erro) { /* tratamento do erro */ }`"
Qual é a diferença entre os operadores `==` e `===` em JavaScript?,`==` (igualdade) realiza a conversão de tipo antes de comparar. `===` (igualdade estrita) compara sem conversão de tipo. É geralmente recomendado usar `===` para evitar resultados inesperados.
O que é o operador ternário em JavaScript e como ele funciona?,O operador ternário é uma forma abreviada de um `if...else`. Ele tem a seguinte sintaxe: `condição ? expressão_se_verdadeiro : expressão_se_falso`.
Como você impede a propagação de um evento em JavaScript?,Você pode usar o método `event.stopPropagation()` para impedir que o evento se propague para os elementos pai na árvore DOM.
Como você adiciona e remove classes CSS de um elemento usando JavaScript?,"Você pode usar as propriedades `classList.add('nomeDaClasse')` e `classList.remove('nomeDaClasse')` para adicionar e remover classes CSS, respectivamente."
Como você seleciona um elemento HTML pelo seu ID usando JavaScript?,Você pode usar o método `document.getElementById('idDoElemento')` para selecionar um elemento pelo seu ID.
Como você seleciona elementos HTML por sua classe usando JavaScript?,Você pode usar o método `document.getElementsByClassName('nomeDaClasse')` para selecionar elementos por sua classe. Ele retorna uma HTMLCollection de elementos.
Como você seleciona elementos HTML usando um seletor CSS em JavaScript?,Você pode usar `document.querySelector('seletorCSS')` para selecionar o primeiro elemento que corresponda ao seletor CSS ou `document.querySelectorAll('seletorCSS')` para selecionar todos os elementos que correspondam.
Como você altera o texto de um elemento HTML usando JavaScript?,Você pode usar a propriedade `textContent` ou `innerText` do elemento para alterar seu texto.
Como você altera o valor de um atributo de um elemento HTML usando JavaScript?,"Você pode usar o método `setAttribute('nomeDoAtributo', 'novoValor')` para alterar o valor de um atributo."
Como você cria um novo elemento HTML usando JavaScript?,Você pode usar o método `document.createElement('nomeDaTag')` para criar um novo elemento.
Como você define um timeout em JavaScript?,"Você pode usar a função `setTimeout(funcao, atrasoEmMilissegundos)` para executar uma função após um determinado atraso."
Como você define um intervalo em JavaScript?,"Você pode usar a função `setInterval(funcao, intervaloEmMilissegundos)` para executar uma função repetidamente em intervalos regulares."
Como você limpa um timeout em JavaScript?,Você pode usar a função `clearTimeout(idDoTimeout)` para cancelar um timeout agendado.
Como você limpa um intervalo em JavaScript?,Você pode usar a função `clearInterval(idDoIntervalo)` para cancelar um intervalo agendado.
O que são arrow functions em JavaScript e como elas se diferem das funções regulares?,"Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas têm uma sintaxe diferente e não possuem seu próprio `this`, `arguments`, `super` ou `new.target`."
O que é o operador rest (...) em JavaScript?,O operador rest permite que você represente um número indefinido de argumentos como um array.
O que são parâmetros padrão em funções JavaScript?,"Parâmetros padrão permitem que você defina valores padrão para os parâmetros de uma função, que são usados se nenhum valor for fornecido para esses parâmetros quando a função é chamada."
O que é um módulo em JavaScript?,Um módulo é um arquivo JavaScript que encapsula um bloco de código reutilizável.  Eles promovem o isolamento do código e ajudam a evitar conflitos de namespace.
Como você importa um módulo em JavaScript usando `import`?,Você pode usar a declaração `import` para importar módulos: `import { nomeDaFuncao } from './caminho/para/modulo.js';`
Como você exporta um módulo em JavaScript usando `export`?,Você pode usar a declaração `export` para exportar módulos: `export function nomeDaFuncao() { /* código */ }` ou `export default funcao;`
Como você obtém o valor absoluto de um número em JavaScript?,Você pode usar o método `Math.abs(numero)` para obter o valor absoluto de um número.
Como você obtém a data e hora atual em JavaScript?,Você pode criar uma nova instância do objeto `Date`: `const agora = new Date();`
O que é o tipo de dado `symbol` em JavaScript?,`Symbol` é um tipo de dado primitivo introduzido no ES6 que representa um identificador único e imutável.
O que é o tipo de dado `bigint` em JavaScript?,`BigInt` é um tipo de dado primitivo que pode representar números inteiros com precisão arbitrária.
O que é coerção de tipo em JavaScript?,Coerção de tipo é a conversão automática ou implícita de valores de um tipo de dado para outro (como strings para números) em JavaScript.
O que é NaN em JavaScript?,NaN (Not-a-Number) é um valor numérico que representa algo que não é um número. É geralmente o resultado de uma operação matemática inválida.
Como você verifica se um valor é NaN em JavaScript?,"Você pode usar a função `isNaN(valor)` para verificar se um valor é NaN. No entanto, `Number.isNaN(valor)` é mais preciso."
O que é o método `test()` de uma expressão regular em JavaScript?,"O método `test()` retorna `true` se a expressão regular encontrar uma correspondência na string, caso contrário, retorna `false`."
O que é o método `exec()` de uma expressão regular em JavaScript?,O método `exec()` executa uma busca por uma correspondência em uma string especificada. Retorna um array de resultados ou `null` se nenhuma correspondência for encontrada.
O que é o método `match()` de uma string em JavaScript?,O método `match()` retorna um array contendo os resultados da correspondência de uma string com uma expressão regular.
O que é o método `replace()` de uma string em JavaScript?,O método `replace()` retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por um substituto.
O que é o método `search()` de uma string em JavaScript?,O método `search()` executa uma busca por uma correspondência entre uma expressão regular e este objeto `String`. Retorna o índice da primeira correspondência na string.
O que é o método `split()` de uma string em JavaScript?,O método `split()` divide um objeto `String` em um array de strings ao separar a string em substrings.
O que é o método `substring()` de uma string em JavaScript?,"O método `substring()` retorna uma parte da string, entre um índice inicial e um índice final (exclusivo)."
O que é o método `slice()` de uma string em JavaScript?,O método `slice()` extrai uma seção de uma string e retorna uma nova string.
O que é o método `toUpperCase()` de uma string em JavaScript?,O método `toUpperCase()` retorna o valor da string convertida em letras maiúsculas.
O que é o método `toLowerCase()` de uma string em JavaScript?,O método `toLowerCase()` retorna o valor da string convertida em letras minúsculas.
O que é o método `trim()` de uma string em JavaScript?,O método `trim()` remove espaços em branco do início e do fim de uma string.
O que é o método `padStart()` de uma string em JavaScript?,"O método `padStart()` preenche o início da string atual com uma string fornecida (repetidamente, se necessário) para que a string resultante atinja um determinado comprimento."
O que é o método `padEnd()` de uma string em JavaScript?,"O método `padEnd()` preenche o final da string atual com uma string fornecida (repetidamente, se necessário) para que a string resultante atinja um determinado comprimento."
O que é o método `includes()` de uma string em JavaScript?,O método `includes()` determina se uma string contém outra string e retorna `true` ou `false` conforme apropriado.
O que é o método `startsWith()` de uma string em JavaScript?,"O método `startsWith()` determina se uma string começa com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado."
O que é o método `endsWith()` de uma string em JavaScript?,"O método `endsWith()` determina se uma string termina com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado."
O que é o método `indexOf()` de uma string em JavaScript?,O método `indexOf()` retorna o índice da primeira ocorrência de um valor especificado em uma string.
O que é o método `lastIndexOf()` de uma string em JavaScript?,O método `lastIndexOf()` retorna o índice da última ocorrência de um valor especificado em uma string.
Como você converte um número para uma string em JavaScript?,"Você pode usar o método `toString()` do número ou concatenar o número com uma string vazia: `numero.toString()` ou `"""" + numero`."
Como você obtém o comprimento de uma string em JavaScript?,Você pode usar a propriedade `length` da string: `string.length`.
Como você declara um array em JavaScript?,Você pode declarar um array usando literais de array (`[]`) ou usando o construtor `new Array()`.
Como você acessa um elemento de um array em JavaScript?,"Você acessa um elemento de um array usando seu índice, que começa em 0: `array[indice]`."
Como você adiciona um elemento ao início de um array em JavaScript?,Você pode usar o método `unshift(elemento)` para adicionar um elemento ao início do array.
Como você remove o primeiro elemento de um array em JavaScript?,Você pode usar o método `shift()` para remover o primeiro elemento do array.
Como você remove ou substitui elementos em um array em JavaScript?,"Você pode usar o método `splice(indiceInicial, numeroDeElementosParaRemover, elemento1, elemento2, ...)` para remover ou substituir elementos em um array."
Como você concatena dois arrays em JavaScript?,Você pode usar o método `concat(array2)` para criar um novo array que é a concatenação de dois arrays.
Como você cria uma cópia de um array em JavaScript?,Você pode usar o operador spread (`...`) ou o método `slice()` para criar uma cópia de um array: `const novoArray = [...arrayOriginal];` ou `const novoArray = arrayOriginal.slice();`
Como você inverte a ordem dos elementos em um array em JavaScript?,Você pode usar o método `reverse()` para inverter a ordem dos elementos em um array.
Como você ordena os elementos de um array em JavaScript?,"Você pode usar o método `sort()` para ordenar os elementos de um array. Por padrão, ele ordena em ordem alfabética (convertendo os elementos para strings). Você pode passar uma função de comparação para ordenar numericamente."
Como você encontra o índice de um elemento em um array em JavaScript?,Você pode usar o método `indexOf(elemento)` para encontrar o índice da primeira ocorrência de um elemento ou `lastIndexOf(elemento)` para encontrar o índice da última ocorrência.
Como você verifica se um array inclui um determinado elemento em JavaScript?,Você pode usar o método `includes(elemento)` para verificar se um array inclui um determinado elemento.
Como você filtra os elementos de um array com base em uma condição em JavaScript?,Você pode usar o método `filter(funcao)` para criar um novo array com todos os elementos que passam no teste implementado pela função fornecida.
Como você transforma os elementos de um array usando uma função em JavaScript?,Você pode usar o método `map(funcao)` para criar um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
Como você itera sobre os elementos de um array em JavaScript usando um loop `for`?,`for (let i = 0; i < array.length; i++) { /* código */ }`
Como você itera sobre os elementos de um array em JavaScript usando um loop `for...of`?,`for (let elemento of array) { /* código */ }`
Como você cria um objeto em JavaScript?,Você pode criar um objeto usando literais de objeto (`{}`) ou usando o construtor `new Object()`.
Como você acessa as propriedades de um objeto em JavaScript?,Você pode acessar as propriedades de um objeto usando a notação de ponto (`objeto.propriedade`) ou a notação de colchetes (`objeto['propriedade']`).
Como você adiciona uma nova propriedade a um objeto em JavaScript?,Você pode adicionar uma nova propriedade a um objeto usando a notação de ponto ou a notação de colchetes: `objeto.novaPropriedade = valor;` ou `objeto['novaPropriedade'] = valor;`
Como você remove uma propriedade de um objeto em JavaScript?,Você pode usar o operador `delete`: `delete objeto.propriedade;`
Como você verifica se um objeto tem uma determinada propriedade em JavaScript?,Você pode usar o operador `in`: `'propriedade' in objeto;` ou o método `hasOwnProperty('propriedade')`.
Como você define um método em um objeto em JavaScript?,"Você pode definir um método em um objeto como qualquer outra propriedade, atribuindo uma função a ela: `objeto.meuMetodo = function() { /* código */ };`"
O que é a palavra-chave `this` em JavaScript?,A palavra-chave `this` refere-se ao objeto no qual a função está sendo executada. Seu valor depende de como a função é chamada.
Como o valor de `this` é determinado em uma função regular em JavaScript?,"Em uma função regular, o valor de `this` é determinado pelo objeto que invoca a função. Se a função for chamada no escopo global, `this` se refere ao objeto global (window em navegadores, global em Node.js)."
Como o valor de `this` é determinado em uma arrow function em JavaScript?,"Em uma arrow function, `this` herda o valor do escopo léxico circundante. Não é ligado dinamicamente."
O que é o protótipo de um objeto em JavaScript?,"O protótipo de um objeto é outro objeto do qual ele herda propriedades e métodos. Cada objeto tem um protótipo, exceto o objeto raiz."
Como você acessa o protótipo de um objeto em JavaScript?,Você pode acessar o protótipo de um objeto usando a propriedade `__proto__` (não recomendada em código de produção) ou o método `Object.getPrototypeOf(objeto)`.
Como você define o protótipo de um objeto em JavaScript?,"Você pode definir o protótipo de um objeto usando o método `Object.setPrototypeOf(objeto, prototipo)`."
O que é programação orientada a objetos (POO) em JavaScript?,POO é um paradigma de programação que usa objetos para representar entidades e suas interações. JavaScript oferece suporte a POO através de protótipos e classes (introduzidas no ES6).
Como você cria um objeto a partir de uma classe em JavaScript?,Você pode criar um objeto a partir de uma classe usando a palavra-chave `new`: `const meuObjeto = new MinhaClasse();`
O que é o método `super()` em uma classe JavaScript?,O método `super()` é usado dentro de um construtor de classe filha para chamar o construtor da classe pai e acessar suas propriedades e métodos.
O que é herança de classe em JavaScript?,Herança de classe é um mecanismo onde uma classe (classe filha) herda propriedades e métodos de outra classe (classe pai).
Como você implementa herança de classe em JavaScript?,Você pode usar a palavra-chave `extends` para implementar herança de classe: `class ClasseFilha extends ClassePai { /* código */ }`
O que são métodos estáticos em classes JavaScript?,"Métodos estáticos são métodos que pertencem à classe em si, em vez de instâncias da classe. Eles são chamados diretamente na classe e não precisam de uma instância para serem acessados."
Como você define um método estático em uma classe JavaScript?,Você pode definir um método estático usando a palavra-chave `static`: `static meuMetodo() { /* código */ }`
Como você define um getter em uma classe JavaScript?,Você pode definir um getter usando a palavra-chave `get`: `get minhaPropriedade() { /* código */ }`
Como você define um setter em uma classe JavaScript?,Você pode definir um setter usando a palavra-chave `set`: `set minhaPropriedade(valor) { /* código */ }`
O que são promessas em JavaScript?,"Promessas representam o resultado eventual de uma operação assíncrona. Elas podem estar em um de três estados: pendente (pending), resolvida (fulfilled) ou rejeitada (rejected)."
Como você cria uma promessa em JavaScript?,"Você pode criar uma promessa usando o construtor `new Promise((resolve, reject) => { /* código */ });`"
"O que são os métodos `then()`, `catch()` e `finally()` em promessas?",`then()` é usado para lidar com o resultado da promessa quando ela é resolvida. `catch()` é usado para lidar com erros quando a promessa é rejeitada. `finally()` é executado independentemente de a promessa ser resolvida ou rejeitada.
Como você usa `await` em JavaScript?,Você pode usar `await` dentro de uma função assíncrona para esperar que uma promessa seja resolvida: `const resultado = await minhaPromessa;`
Como você define uma função generator em JavaScript?,Você pode definir uma função generator usando o asterisco (`*`): `function* minhaFuncaoGeradora() { /* código */ }`
O que é a palavra-chave `yield` em generators?,A palavra-chave `yield` é usada dentro de uma função generator para pausar a execução e retornar um valor.
Como você itera sobre os valores produzidos por um generator em JavaScript?,Você pode usar um loop `for...of` ou o método `next()` do objeto generator para iterar sobre os valores produzidos.
O que é o strict mode em JavaScript?,Strict mode é uma forma de executar JavaScript com um conjunto mais restrito de regras. Ajuda a prevenir erros e melhorar a segurança do código.
Como você habilita o strict mode em JavaScript?,"Você pode habilitar o strict mode adicionando a string `""use strict"";` no início do arquivo ou da função."
O que são IIFEs (Immediately Invoked Function Expressions) em JavaScript?,IIFEs são funções que são executadas assim que são definidas. Elas são frequentemente usadas para criar escopos isolados e evitar conflitos de namespace.
Como você cria uma IIFE em JavaScript?,Você pode criar uma IIFE envolvendo uma função anônima entre parênteses e invocando-a imediatamente: `(function() { /* código */ })();`
O que é composição de funções em JavaScript?,Composição de funções é um processo de combinar duas ou mais funções para produzir uma nova função.
O que é um polyfill em JavaScript?,Um polyfill é um código que fornece a funcionalidade que você espera que o navegador forneça nativamente. Ele permite que você use recursos mais recentes em navegadores mais antigos.
O que é transpilador em JavaScript?,"Um transpilador é uma ferramenta que converte o código fonte de uma linguagem de programação em outra linguagem de programação. Em JavaScript, os transpiladores são frequentemente usados para converter código ES6+ em código ES5 para compatibilidade com navegadores mais antigos."
O que é linting em JavaScript?,"Linting é o processo de análise estática do código fonte para identificar erros de programação, bugs, erros de estilo e construções suspeitas."
O que é minificação em JavaScript?,"Minificação é o processo de remover todos os caracteres desnecessários do código fonte (como espaços em branco, comentários e nomes de variáveis) para reduzir o tamanho do arquivo."
O que são web workers em JavaScript?,"Web workers permitem que você execute scripts JavaScript em threads de segundo plano, sem afetar o desempenho da página web."
O que é local storage em JavaScript?,Local storage é um recurso do navegador que permite armazenar dados localmente no navegador do usuário. Os dados persistem mesmo após o fechamento do navegador.
O que é session storage em JavaScript?,"Session storage é semelhante ao local storage, mas os dados são armazenados apenas durante a sessão do navegador e são removidos quando o navegador é fechado."
O que é CORS (Cross-Origin Resource Sharing) em JavaScript?,CORS é um mecanismo de segurança do navegador que restringe que páginas da web façam requisições de recursos de um domínio diferente daquele de onde a página se originou.
O que é o padrão de módulo revealing em JavaScript?,"O padrão de módulo revealing é uma maneira de implementar encapsulamento em JavaScript,"
"O que é o conceito de ""hoisting"" em JavaScript?","Hoisting é um comportamento em JavaScript onde declarações de variáveis e funções são movidas para o topo de seu escopo antes da execução do código. Isso significa que você pode usar uma variável ou função antes de sua declaração no código, embora apenas a declaração seja elevada, não a inicialização (no caso de variáveis).

**2.**"
"O que é um ""closure"" em JavaScript e como ele funciona?","Um closure é a combinação de uma função e o ambiente léxico (escopo) em que essa função foi declarada. Ele permite que uma função interna acesse variáveis do escopo externo (função pai) mesmo após a função pai ter retornado.

**4.**"
Como você pode comparar dois objetos em JavaScript para verificar se eles são iguais (têm as mesmas propriedades e valores)?,"A comparação direta de objetos (`obj1 == obj2` ou `obj1 === obj2`) compara as referências, não o conteúdo. Para comparar o conteúdo, é necessário iterar sobre as propriedades de ambos os objetos e comparar seus valores individualmente, ou converter os objetos em strings JSON e comparar as strings.

**5.**"
Explique a diferença entre `==` e `===` em JavaScript.,"`==` é o operador de igualdade abstrata, que realiza a conversão de tipo antes de comparar. `===` é o operador de igualdade estrita, que compara os valores sem conversão de tipo. É geralmente recomendado usar `===` para evitar comportamentos inesperados.

**6.**"
O que é uma função anônima em JavaScript?,"Uma função anônima é uma função que não tem nome. Geralmente é usada como um callback ou atribuída a uma variável.

**7.**"
Como você pode criar uma cópia profunda de um objeto em JavaScript?,"Uma cópia profunda cria um novo objeto com cópias de todos os seus objetos aninhados. Você pode usar `JSON.parse(JSON.stringify(obj))` para criar uma cópia profunda, mas isso tem limitações (não copia funções ou datas corretamente).  Outra opção é usar uma função recursiva para copiar cada propriedade individualmente.

**8.**"
"O que são ""template literals"" em JavaScript e quais são suas vantagens?","Template literals são strings delimitadas por acentos graves (`` ` ``). Elas permitem interpolação de variáveis usando `${}` e strings de múltiplas linhas sem necessidade de concatenação.

**10.**"
O que é o operador `typeof` em JavaScript e quais tipos de dados ele pode retornar?,"O operador `typeof` retorna uma string indicando o tipo de dado de um valor. Os tipos de dados que ele pode retornar incluem: `""string""`, `""number""`, `""bigint""`, `""boolean""`, `""symbol""`, `""undefined""`, `""object""` e `""function""`.  Retorna ""object"" para null.

**11.**"
"O que é ""event bubbling"" em JavaScript?","Event bubbling é um processo onde um evento disparado em um elemento DOM se propaga para cima na árvore DOM, acionando os event listeners de seus elementos pais.

**13.**"
"O que é ""event capturing"" em JavaScript?","Event capturing é o oposto de bubbling. Em vez de começar no elemento mais interno, o evento é primeiro capturado pelo elemento mais externo e, em seguida, propagado para os elementos mais internos.

**14.**"
Como você pode parar a propagação de um evento em JavaScript?,"Você pode usar o método `event.stopPropagation()` dentro de um event listener para impedir que o evento se propague para cima na árvore DOM.

**15.**"
O que são funções de ordem superior (higher-order functions) em JavaScript?,"Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam outras funções como resultado.

**17.**"
O que é o método `map()` em arrays JavaScript?,"O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.

**19.**"
O que é o método `filter()` em arrays JavaScript?,"O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.

**20.**"
O que é o método `reduce()` em arrays JavaScript?,"O método `reduce()` aplica uma função contra um acumulador e cada valor do array (da esquerda para a direita) para reduzi-lo a um único valor.

**21.**"
O que é o método `forEach()` em arrays JavaScript?,"O método `forEach()` executa uma dada função para cada elemento de um array. Ele não retorna um novo array, apenas itera sobre o array existente.

**22.**"
Como você pode converter um valor para um número em JavaScript?,"Você pode usar as funções `Number()`, `parseInt()` ou `parseFloat()` para converter um valor para um número.

**23.**"
Como você pode converter um valor para uma string em JavaScript?,"Você pode usar a função `String()` ou o método `.toString()` para converter um valor para uma string.

**24.**"
Como você pode gerar um número aleatório entre dois valores específicos em JavaScript?,"Você pode usar a fórmula: `Math.floor(Math.random() * (max - min + 1)) + min;`

**26.**"
Quais são alguns métodos comuns do objeto `console`?,"Alguns métodos comuns incluem: `console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`.

**31.**"
O que são variáveis declaradas com `let` em JavaScript?,"Variáveis declaradas com `let` têm escopo de bloco. Elas só são acessíveis dentro do bloco onde foram definidas. Elas não são hoisted.

**32.**"
O que são variáveis declaradas com `const` em JavaScript?,"Variáveis declaradas com `const` também têm escopo de bloco e devem ser inicializadas no momento da declaração. Uma vez atribuído um valor, ele não pode ser reatribuído (embora o objeto referenciado possa ser modificado).

**33.**"
"Qual a diferença entre `var`, `let` e `const` ao declarar variáveis em JavaScript?","`var` tem escopo de função ou escopo global se declarado fora de uma função e é hoisted. `let` e `const` têm escopo de bloco e não são hoisted. `const` é usado para declarar variáveis que não devem ser reatribuídas.

**34.**"
O que é o operador de espalhamento (spread operator) em JavaScript?,"O operador de espalhamento (`...`) permite que você expanda um array ou objeto em elementos individuais.

**35.**"
Como você pode usar o operador de espalhamento para criar uma cópia de um array em JavaScript?,"Você pode usar `[...array]` para criar uma cópia superficial de um array.

**36.**"
Como você pode usar o operador de espalhamento para combinar dois arrays em JavaScript?,"Você pode usar `[...array1, ...array2]` para combinar dois arrays.

**37.**"
O que é desestruturação (destructuring) em JavaScript?,"Desestruturação é uma expressão JavaScript que permite extrair valores de arrays ou propriedades de objetos e atribuí-los a variáveis de forma concisa.

**38.**"
Como você pode desestruturar um objeto em JavaScript?,"Você pode usar a sintaxe `{ propriedade1, propriedade2 } = objeto;` para extrair as propriedades `propriedade1` e `propriedade2` do objeto e atribuí-las a variáveis com os mesmos nomes.

**39.**"
Como você pode desestruturar um array em JavaScript?,"Você pode usar a sintaxe `[elemento1, elemento2] = array;` para extrair os elementos `elemento1` e `elemento2` do array e atribuí-los a variáveis.

**40.**"
Como você lida com o resultado de uma promise bem-sucedida em JavaScript?,"Você usa o método `.then()` para registrar uma função de callback que será chamada quando a promise for resolvida.

**50.**"
Como você lida com o erro de uma promise rejeitada em JavaScript?,"Você usa o método `.catch()` para registrar uma função de callback que será chamada quando a promise for rejeitada.

**51.**"
O que é o bloco `finally()` em promises JavaScript?,"O bloco `finally()` é executado sempre, independentemente de a promise ter sido resolvida ou rejeitada.  É usado para limpar recursos.

**52.**"
O que a palavra-chave `await` faz em JavaScript?,"A palavra-chave `await` pausa a execução de uma função assíncrona até que uma promise seja resolvida. Ela só pode ser usada dentro de uma função `async`.

**55.**"
Como você lida com erros dentro de uma função `async/await` em JavaScript?,"Você pode usar um bloco `try...catch` para capturar erros que ocorram durante a execução da função assíncrona.

**56.**"
O que são expressões regulares (regex) em JavaScript?,"Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings.

**57.**"
Quais são alguns métodos comuns usados com expressões regulares em JavaScript?,"Alguns métodos comuns incluem: `test()`, `exec()`, `match()`, `search()`, `replace()`, `split()`.

**59.**"
O que o método `test()` faz com expressões regulares em JavaScript?,"O método `test()` verifica se uma string corresponde a um padrão e retorna `true` ou `false`.

**60.**"
O que o método `exec()` faz com expressões regulares em JavaScript?,"O método `exec()` procura uma correspondência em uma string e retorna um array com informações sobre a correspondência, ou `null` se não houver correspondência.

**61.**"
Qual a diferença entre os métodos `match()` e `exec()` em JavaScript quando usados com expressões regulares?,"`match()` é um método de string que recebe uma regex como argumento, enquanto `exec()` é um método de regex que recebe uma string como argumento. `match()` retorna um array de resultados (ou null), enquanto `exec()` retorna um objeto com mais detalhes sobre a primeira correspondência (ou null).

**62.**"
O que são quantificadores em expressões regulares? Dê um exemplo.,"Quantificadores especificam quantas vezes um elemento deve ocorrer para haver uma correspondência. Exemplo: `*` (zero ou mais vezes), `+` (uma ou mais vezes), `?` (zero ou uma vez), `{n}` (exatamente n vezes), `{n,}` (pelo menos n vezes), `{n,m}` (entre n e m vezes).

**63.**"
O que são classes de caracteres em expressões regulares? Dê um exemplo.,"Classes de caracteres definem um conjunto de caracteres para corresponder. Exemplo: `[abc]` (corresponde a 'a', 'b' ou 'c'), `[a-z]` (corresponde a qualquer letra minúscula), `[0-9]` (corresponde a qualquer dígito), `.` (corresponde a qualquer caractere exceto nova linha).

**64.**"
O que são âncoras em expressões regulares? Dê um exemplo.,"Âncoras especificam uma posição na string onde a correspondência deve ocorrer. Exemplo: `^` (início da string), `$` (fim da string), `\b` (limite de palavra).

**65.**"
O que é o método `String.prototype.startsWith()` em JavaScript?,"O método `startsWith()` determina se uma string começa com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado.

**66.**"
O que é o método `String.prototype.endsWith()` em JavaScript?,"O método `endsWith()` determina se uma string termina com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado.

**67.**"
O que é o método `String.prototype.includes()` em JavaScript?,"O método `includes()` determina se uma string contém os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado.

**68.**"
O que é o método `String.prototype.repeat()` em JavaScript?,"O método `repeat()` constrói e retorna uma nova string que contém o número especificado de cópias concatenadas da string na qual foi chamado.

**69.**"
Como você pode remover espaços em branco do início e do fim de uma string em JavaScript?,"Você pode usar o método `trim()`.

**70.**"
O que é o método `String.prototype.padStart()` em JavaScript?,"O método `padStart()` preenche a string atual com outra string (repetidamente, se necessário) para que a string resultante atinja um determinado comprimento. O preenchimento é aplicado desde o início (lado esquerdo) da string atual.

**71.**"
O que é o método `String.prototype.padEnd()` em JavaScript?,"O método `padEnd()` preenche a string atual com uma string fornecida (repetidamente, se necessário) para que a string resultante atinja um dado comprimento. O preenchimento é aplicado a partir do final (lado direito) da string atual.

**72.**"
"Quais são os valores considerados ""falsy"" em JavaScript?","`false`, `0`, `-0`, `0n`, `""""` (string vazia), `null`, `undefined`, e `NaN`.

**74.**"
O que é o operador de negação lógica `!` em JavaScript?,"O operador `!` inverte o valor booleano de um operando. Se o operando for truthy, ele retornará `false`. Se o operando for falsy, ele retornará `true`.

**75.**"
O que é o método `Array.prototype.find()` em JavaScript?,"O método `find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`.

**76.**"
O que é o método `Array.prototype.findIndex()` em JavaScript?,"O método `findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1.

**77.**"
O que é o método `Array.prototype.some()` em JavaScript?,"O método `some()` testa se ao menos um elemento no array passa no teste implementado pela função fornecida. Retorna `true` se, no array, encontrar um elemento para o qual a função fornecida retorna `true`; caso contrário, retorna `false`.

**78.**"
O que é o método `Array.prototype.every()` em JavaScript?,"O método `every()` testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna `true` se todos os elementos no array passam no teste; caso contrário, retorna `false`.

**79.**"
O que é o método `Array.prototype.includes()` em JavaScript (para arrays)?,"O método `includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado.

**80.**"
O que é o método `Array.prototype.slice()` em JavaScript?,"O método `slice()` retorna uma cópia de parte de um array dentro de um novo array começando pelo índice inicial até o índice final (final não incluído). O array original não será modificado.

**87.**"
Como você pode ordenar um array em JavaScript?,"Você pode usar o método `Array.prototype.sort()`. Por padrão, ele ordena os elementos como strings. Você pode passar uma função de comparação para personalizar a ordenação.

**88.**"
Como você pode inverter a ordem dos elementos em um array em JavaScript?,"Você pode usar o método `Array.prototype.reverse()`.

**89.**"
Como você pode selecionar um elemento HTML pelo seu ID em JavaScript?,"Você pode usar o método `document.getElementById('id')`.

**93.**"
Como você pode selecionar elementos HTML por sua classe em JavaScript?,"Você pode usar o método `document.getElementsByClassName('classe')`. Ele retorna uma HTMLCollection.

**94.**"
Como você pode selecionar elementos HTML por sua tag name em JavaScript?,"Você pode usar o método `document.getElementsByTagName('tag')`. Ele retorna uma HTMLCollection.

**95.**"
O que são `HTMLCollection` e `NodeList` em JavaScript? Qual a diferença?,"Ambos representam coleções de elementos DOM. `HTMLCollection` é uma coleção *viva* (as mudanças no DOM são refletidas automaticamente), enquanto `NodeList` pode ser *viva* ou *estática* (dependendo do método usado para criá-la). `getElementsByClassName` e `getElementsByTagName` retornam `HTMLCollection`. `querySelectorAll` retorna uma `NodeList` estática.

**96.**"
Como você pode selecionar elementos HTML usando seletores CSS em JavaScript?,"Você pode usar o método `document.querySelector('seletorCSS')` para selecionar o primeiro elemento que corresponde ao seletor ou `document.querySelectorAll('seletorCSS')` para selecionar todos os elementos que correspondem ao seletor.

**97.**"
Como você pode acessar o conteúdo de texto de um elemento HTML em JavaScript?,"Você pode usar a propriedade `textContent` ou `innerText`. `textContent` retorna o texto de todos os elementos, mesmo os ocultos, enquanto `innerText` retorna o texto renderizado visível.

**98.**"
Como você pode modificar o conteúdo HTML de um elemento em JavaScript?,"Você pode usar a propriedade `innerHTML`.

**99.**"
Como você pode adicionar um novo elemento HTML ao DOM em JavaScript?,"Primeiro, crie o elemento com `document.createElement('tag')`. Em seguida, defina suas propriedades. Finalmente, adicione-o ao DOM usando métodos como `appendChild()`, `insertBefore()` ou `append()`.

**100.**"
Como você pode remover um elemento HTML do DOM em JavaScript?,"Você pode usar o método `element.remove()` ou `parentElement.removeChild(element)`.

**101.**"
Como você pode adicionar um atributo a um elemento HTML em JavaScript?,"Você pode usar o método `element.setAttribute('nomeDoAtributo', 'valorDoAtributo')`.

**102.**"
Como você pode remover um atributo de um elemento HTML em JavaScript?,"Você pode usar o método `element.removeAttribute('nomeDoAtributo')`.

**103.**"
Como você pode obter o valor de um atributo de um elemento HTML em JavaScript?,"Você pode usar o método `element.getAttribute('nomeDoAtributo')`.

**104.**"
Como você pode adicionar ou remover classes CSS de um elemento HTML em JavaScript?,"Você pode usar a propriedade `element.classList`. Métodos incluem `add()`, `remove()`, `toggle()` e `contains()`.

**105.**"
Como você pode adicionar um event listener a um elemento HTML em JavaScript?,"Você pode usar o método `element.addEventListener('nomeDoEvento', funcaoCallback)`.

**106.**"
O que é o objeto `event` passado para um event listener em JavaScript?,"O objeto `event` contém informações sobre o evento que ocorreu, como o elemento alvo, o tipo de evento e quaisquer dados adicionais.

**107.**"
Quais são alguns eventos comuns em JavaScript?,"`click`, `mouseover`, `mouseout`, `keydown`, `keyup`, `submit`, `load`, `DOMContentLoaded`.

**108.**"
O que é o evento `DOMContentLoaded` em JavaScript?,"O evento `DOMContentLoaded` é disparado quando o documento HTML é totalmente carregado e analisado, sem esperar que imagens, folhas de estilo e subframes terminem de carregar.

**109.**"
O que é o evento `load` em JavaScript?,"O evento `load` é disparado quando todo o documento, incluindo todos os recursos dependentes, como imagens e folhas de estilo, terminou de carregar.

**110.**"
Como você pode redirecionar o navegador para outra URL em JavaScript?,"Você pode usar a propriedade `window.location.href = 'URL'`.

**113.**"
Como você pode obter a URL atual em JavaScript?,"Você pode usar a propriedade `window.location.href` ou `document.URL`.

**114.**"
Como você pode voltar para a página anterior no histórico do navegador em JavaScript?,"Você pode usar o método `window.history.back()`.

**116.**"
Como você pode avançar para a próxima página no histórico do navegador em JavaScript?,"Você pode usar o método `window.history.forward()`.

**117.**"
Como você pode ler um cookie em JavaScript?,"Você pode acessar a string de cookies usando a propriedade `document.cookie`. Essa string contém todos os cookies, separados por ponto e vírgula.

**119.**"
Como você pode definir um cookie em JavaScript?,"Você pode definir um cookie atribuindo uma string ao `document.cookie`. A string deve conter o nome do cookie, o valor e outras opções, como a data de expiração.

**120.**"
Como você pode excluir um cookie em JavaScript?,"Você pode excluir um cookie definindo sua data de expiração para uma data no passado.

**121.**"
O que é Local Storage em JavaScript?,"Local Storage é um mecanismo de armazenamento web que permite armazenar dados no navegador do usuário persistentemente, mesmo após o fechamento do navegador. Os dados são armazenados localmente e não são enviados para o servidor com cada requisição.

**122.**"
Como você pode armazenar dados no Local Storage em JavaScript?,"Você pode usar o método `localStorage.setItem('chave', 'valor')`.

**123.**"
Como você pode recuperar dados do Local Storage em JavaScript?,"Você pode usar o método `localStorage.getItem('chave')`.

**124.**"
Como você pode remover um item do Local Storage em JavaScript?,"Você pode usar o método `localStorage.removeItem('chave')`.

**125.**"
Como você pode limpar todo o Local Storage em JavaScript?,"Você pode usar o método `localStorage.clear()`.

**126.**"
O que é Session Storage em JavaScript?,"Session Storage é semelhante ao Local Storage, mas os dados são armazenados apenas para a duração da sessão do navegador. Os dados são perdidos quando o navegador é fechado.

**127.**"
Como você pode armazenar dados no Session Storage em JavaScript?,"Você pode usar o método `sessionStorage.setItem('chave', 'valor')`.

**128.**"
Qual a diferença principal entre Local Storage e Session Storage?,"Local Storage é persistente (os dados permanecem mesmo após o fechamento do navegador), enquanto Session Storage é temporário (os dados são perdidos quando o navegador é fechado).

**129.**"
Como você pode converter um objeto JavaScript em uma string JSON?,"Você pode usar o método `JSON.stringify(objeto)`.

**131.**"
Como você pode converter uma string JSON em um objeto JavaScript?,"Você pode usar o método `JSON.parse(stringJSON)`.

**132.**"
Como você pode lançar uma exceção em JavaScript?,"Você pode usar a instrução `throw`. Exemplo: `throw new Error('Mensagem de erro')`.

**134.**"
Como você pode lidar com exceções em JavaScript?,"Você pode usar um bloco `try...catch` para capturar e lidar com exceções.

**135.**"
"O que são os tipos de erro `TypeError`, `ReferenceError` e `SyntaxError` em JavaScript?","`TypeError` é lançado quando uma operação não pode ser executada devido a um tipo de valor inesperado. `ReferenceError` é lançado quando você tenta usar uma variável que não foi declarada. `SyntaxError` é lançado quando há um erro de sintaxe no código.

**138.**"
"O que é o conceito de ""hoisting"" em JavaScript e como ele afeta variáveis e funções?","Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto funções declaradas como function declarations são totalmente hoisted. Variáveis declaradas com `let` e `const` também são hoisted, mas não inicializadas, resultando em um erro se acessadas antes da declaração.

**3.**"
O que é uma closure em JavaScript e como ela funciona?,"Uma closure é a capacidade de uma função de lembrar e acessar variáveis do escopo léxico onde foi criada, mesmo depois que esse escopo já não existe mais. Ela permite que funções internas acessem variáveis da função externa.

**5.**"
Descreva a diferença entre `==` e `===` em JavaScript.,"`==` é o operador de igualdade abstrata, que realiza conversão de tipo antes de comparar. `===` é o operador de igualdade estrita, que não realiza conversão de tipo e compara apenas se os tipos e valores são idênticos.

**6.**"
O que são template literals em JavaScript e quais são suas vantagens?,"Template literals são strings delimitadas por backticks (`), que permitem a interpolação de expressões e strings multilinhas. Suas vantagens incluem melhor legibilidade e facilidade de uso para criar strings dinâmicas.

**7.**"
Explique o que são funções de primeira classe em JavaScript.,"Funções de primeira classe significa que funções podem ser tratadas como qualquer outra variável. Elas podem ser atribuídas a variáveis, passadas como argumentos para outras funções e retornadas como valores de outras funções.

**9.**"
"Qual é a diferença entre `let`, `const` e `var` ao declarar variáveis em JavaScript?","`var` tem escopo de função ou global, `let` tem escopo de bloco e `const` também tem escopo de bloco, mas declara variáveis que não podem ser reatribuídas após a inicialização.

**10.**"
O que é o operador ternário em JavaScript e como ele é usado?,"O operador ternário é uma forma concisa de escrever uma instrução `if...else`. Sua sintaxe é `condição ? expressão_se_verdadeiro : expressão_se_falso`.

**11.**"
O que é o método `Array.map()` em JavaScript e como ele funciona?,"`Array.map()` cria um novo array com os resultados da chamada de uma função fornecida para cada elemento no array chamador.

**13.**"
Explique o que é o método `Array.filter()` em JavaScript e como ele é utilizado.,"`Array.filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.

**14.**"
O que é o método `Array.reduce()` em JavaScript e qual é sua finalidade?,"`Array.reduce()` aplica uma função a um acumulador e a cada valor do array (da esquerda para a direita) para reduzi-lo a um único valor.

**15.**"
Descreva o que é o JSON e como você pode trabalhar com ele em JavaScript.,"JSON (JavaScript Object Notation) é um formato de dados leve e legível por humanos. Em JavaScript, você pode usar os métodos `JSON.parse()` para converter uma string JSON em um objeto JavaScript e `JSON.stringify()` para converter um objeto JavaScript em uma string JSON.

**17.**"
O que são funções anônimas em JavaScript e como elas são usadas?,"Funções anônimas são funções que não têm um nome. Elas são frequentemente usadas como argumentos para outras funções (callbacks) ou atribuídas a variáveis.

**18.**"
"Explique o conceito de ""event delegation"" em JavaScript.","Event delegation é uma técnica que permite anexar um único ouvinte de evento a um elemento pai, em vez de anexar ouvintes de evento individuais a cada elemento filho. Isso pode melhorar o desempenho, especialmente quando há muitos elementos filhos.

**19.**"
O que são Promises em JavaScript e como elas ajudam a lidar com operações assíncronas?,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas fornecem uma maneira mais estruturada de lidar com callbacks, tornando o código mais legível e fácil de manter. Uma Promise pode estar em um dos três estados: pendente, resolvida ou rejeitada.

**20.**"
Descreva o uso de `async` e `await` em JavaScript.,"`async` e `await` são usados para simplificar o tratamento de Promises. A palavra-chave `async` é usada para definir uma função assíncrona, e a palavra-chave `await` é usada dentro de uma função assíncrona para pausar a execução até que uma Promise seja resolvida.

**21.**"
O que é o operador spread (...) em JavaScript e quais são seus usos?,"O operador spread (...) permite expandir um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados. Ele é usado para copiar arrays/objetos, concatenar arrays e passar argumentos variáveis para funções.

**22.**"
"Qual é a diferença entre `call()`, `apply()` e `bind()` em JavaScript?","`call()` e `apply()` são usados para invocar uma função com um valor `this` específico e argumentos. `call()` aceita argumentos individualmente, enquanto `apply()` aceita um array de argumentos. `bind()` cria uma nova função com um valor `this` específico e argumentos predefinidos, sem invocar a função imediatamente.

**23.**"
"O que é o conceito de ""currying"" em JavaScript e como ele é implementado?","Currying é uma técnica que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada. Cada chamada retorna uma nova função que espera o próximo argumento.

**24.**"
Explique o que são Generators em JavaScript e como eles funcionam.,"Generators são funções que podem ser pausadas e retomadas, permitindo a criação de iteradores personalizados. Elas usam a palavra-chave `yield` para retornar valores e pausar a execução.

**25.**"
O que são Iterators em JavaScript e como eles são usados?,"Iterators são objetos que definem uma sequência e, ao finalizar, retornam um valor. O protocolo Iterator define um método `next()` que retorna um objeto com duas propriedades: `value` (o próximo valor na sequência) e `done` (um booleano que indica se a sequência foi concluída).

**26.**"
Descreva o que é o `window` object em JavaScript (em um ambiente de navegador).,"O `window` é o objeto global no contexto do navegador. Ele representa a janela do navegador e fornece acesso a métodos e propriedades relacionados à janela, como `document`, `location`, `history`, etc.

**27.**"
Como você pode adicionar ou remover classes CSS de um elemento usando JavaScript?,"Você pode usar a propriedade `classList` de um elemento para adicionar, remover ou alternar classes CSS. Métodos como `element.classList.add('classe')`, `element.classList.remove('classe')` e `element.classList.toggle('classe')` são usados para essa finalidade.

**28.**"
O que é o DOM (Document Object Model) e como você pode manipular elementos do DOM usando JavaScript?,"O DOM é uma representação em árvore da estrutura de um documento HTML ou XML. JavaScript pode ser usado para acessar e manipular elementos do DOM, permitindo que você altere o conteúdo, estilo e estrutura da página dinamicamente. Métodos como `document.getElementById()`, `document.querySelector()`, `document.createElement()`, `element.appendChild()` e `element.removeChild()` são usados para manipulação do DOM.

**29.**"
O que são atributos `data-*` em HTML e como você pode acessá-los usando JavaScript?,"Atributos `data-*` são atributos HTML personalizados que permitem armazenar dados privados personalizados em elementos HTML. Você pode acessá-los usando a propriedade `dataset` de um elemento, ex: `element.dataset.nomeDoAtributo`.

**30.**"
Como você pode evitar memory leaks em JavaScript?,"Para evitar memory leaks, é importante remover event listeners quando não são mais necessários, evitar referências circulares entre objetos, liberar variáveis que não serão mais usadas (atribuindo `null` ou `undefined`), e usar ferramentas de análise de memória para identificar problemas.

**31.**"
O que é o operador `void` em JavaScript e qual é o seu uso?,"O operador `void` avalia uma expressão e retorna `undefined`. Ele é usado para evitar que o navegador siga um link (por exemplo, em um atributo `href`) ou para evitar que uma função retorne um valor inesperado.

**32.**"
Explique o que são expressões regulares (RegEx) em JavaScript e como elas são usadas.,"Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings. Em JavaScript, elas são usadas para validar formatos de dados, pesquisar e substituir texto, e realizar outras operações de manipulação de strings.

**33.**"
Como você pode trabalhar com datas em JavaScript?,"JavaScript fornece o objeto `Date` para trabalhar com datas. Você pode criar objetos `Date` para representar datas e horas específicas, obter e definir componentes de data (ano, mês, dia, hora, etc.) e formatar datas para exibição.

**34.**"
O que é o método `String.prototype.substring()` e qual a diferença para `String.prototype.slice()`?,"Tanto `substring()` quanto `slice()` extraem uma parte de uma string e retornam uma nova string. A principal diferença é como eles lidam com argumentos negativos. `substring()` trata argumentos negativos como 0, enquanto `slice()` os interpreta como deslocamentos do final da string.

**35.**"
Como você pode clonar um objeto em JavaScript?,"Você pode clonar um objeto usando o operador spread (`...`), o método `Object.assign()` para shallow copies, ou usando `JSON.parse(JSON.stringify(obj))` para deep copies (com limitações).

**36.**"
Explique o que é a função `eval()` em JavaScript e por que seu uso geralmente é desencorajado.,"A função `eval()` avalia uma string como código JavaScript. Seu uso é desencorajado devido a problemas de segurança (pode executar código malicioso) e desempenho (dificulta a otimização pelo motor JavaScript).

**37.**"
O que são arrow functions em JavaScript e quais são suas principais diferenças em relação às funções regulares?,"Arrow functions são uma sintaxe mais concisa para escrever funções em JavaScript. Suas principais diferenças incluem a ausência de um `this` próprio (herdam o `this` do contexto léxico), não possuem `arguments` object e não podem ser usadas como construtoras (não podem ser instanciadas com `new`).

**38.**"
Como você pode importar e exportar módulos em JavaScript usando `import` e `export`?,"Você pode usar `export` para exportar variáveis, funções ou classes de um módulo e `import` para importar esses elementos em outro módulo. Existem named exports (exportações nomeadas) e default exports (exportação padrão).

**39.**"
"O que é o conceito de ""truthy"" e ""falsy"" values em JavaScript?","Truthy values são valores que são avaliados como `true` em um contexto booleano, enquanto falsy values são valores que são avaliados como `false`. Falsy values incluem `false`, `0`, `""""` (string vazia), `null`, `undefined` e `NaN`. Todos os outros valores são truthy.

**40.**"
Como você pode verificar se uma propriedade existe em um objeto JavaScript?,"Você pode usar o operador `in` (ex: `'propriedade' in objeto`), o método `hasOwnProperty()` (ex: `objeto.hasOwnProperty('propriedade')`) ou simplesmente acessar a propriedade e verificar se o valor é diferente de `undefined` (ex: `objeto.propriedade !== undefined`).

**41.**"
O que é o objeto `arguments` dentro de uma função em JavaScript (especialmente em funções não-arrow)?,"`arguments` é um objeto semelhante a um array que contém os argumentos passados para uma função. Ele está disponível apenas em funções declaradas com a palavra-chave `function` e não em arrow functions.

**42.**"
Qual a diferença entre `preventDefault()` e `stopPropagation()` em manipulação de eventos?,"`preventDefault()` impede o comportamento padrão de um evento (por exemplo, um link seguindo para um URL). `stopPropagation()` impede que o evento se propague para elementos pais na árvore DOM.

**43.**"
O que são Web Workers em JavaScript e qual o propósito deles?,"Web Workers permitem executar scripts JavaScript em threads em segundo plano, sem bloquear a thread principal da UI. Isso é útil para realizar tarefas computacionalmente intensivas ou operações de rede sem comprometer a responsividade da interface do usuário.

**44.**"
Como você pode debugar código JavaScript em um navegador?,"Você pode usar as ferramentas de desenvolvedor do navegador (geralmente acessíveis pressionando F12) para debugar JavaScript. Elas permitem definir breakpoints, inspecionar variáveis, executar o código passo a passo e analisar logs.

**45.**"
"O que é o conceito de ""throttling"" e ""debouncing"" em JavaScript, e quando são usados?","Throttling limita a frequência com que uma função pode ser executada. Debouncing atrasa a execução de uma função até que um período de inatividade tenha passado. Ambos são usados para otimizar o desempenho, especialmente em resposta a eventos frequentes, como redimensionamento da janela ou entrada do usuário.

**46.**"
O que é o Local Storage e Session Storage em JavaScript e qual a diferença entre eles?,"Local Storage e Session Storage são APIs de armazenamento web que permitem armazenar dados localmente no navegador do usuário. Local Storage armazena dados permanentemente (até serem explicitamente removidos), enquanto Session Storage armazena dados apenas durante a duração da sessão do navegador.

**47.**"
"Como você pode detectar o tipo de dispositivo (mobile, tablet, desktop) usando JavaScript?","Você pode inspecionar a propriedade `navigator.userAgent` para obter informações sobre o navegador e o sistema operacional do usuário. No entanto, essa abordagem não é totalmente confiável devido a spoofing.  Outra abordagem é usar media queries CSS em conjunto com `window.matchMedia()` para verificar as características da tela.

**48.**"
O que é o uso do `Symbol` em JavaScript?,"`Symbol` é um tipo de dado primitivo que representa um identificador único e imutável. É frequentemente usado como chave de propriedade de objeto para evitar colisões com outras propriedades.

**49.**"
Como funciona o mecanismo de Garbage Collection em JavaScript?,"O Garbage Collection é o processo automático de liberar memória que não está mais sendo usada pelo programa. O JavaScript usa um garbage collector ""mark and sweep"" que identifica objetos que não são mais acessíveis a partir da raiz (objetos globais e variáveis ativas) e libera a memória que eles ocupam.

**50.**"
O que são Map e Set em JavaScript e qual a diferença entre eles e objetos e arrays?,"`Map` é uma coleção de pares chave-valor onde as chaves podem ser de qualquer tipo de dado. `Set` é uma coleção de valores únicos. Diferentemente de objetos, as chaves de um Map podem ser de qualquer tipo, e a ordem de inserção é preservada. Diferentemente de arrays, Sets garantem que cada valor seja único.

Continuando com mais perguntas e respostas exclusivas:

**51.**"
O que é o `Proxy` object em JavaScript e como ele pode ser usado?,"O `Proxy` object permite interceptar e personalizar operações fundamentais em objetos, como leitura, escrita, enumeração e chamadas de função. Ele é usado para criar wrappers, validar acesso a propriedades e implementar comportamento personalizado.

**52.**"
Como você pode verificar se um valor é um array em JavaScript?,"Você pode usar `Array.isArray(valor)` para verificar se um valor é um array.

**53.**"
Explique o que é destructuring em JavaScript e como ele é usado em arrays e objetos.,"Destructuring é uma forma concisa de extrair valores de objetos ou arrays e atribuí-los a variáveis. Ele simplifica a atribuição de valores e torna o código mais legível. Ex: `const { nome, idade } = pessoa;` ou `const [ primeiro, segundo ] = array;`

**54.**"
O que é a diferença entre `forEach` e um loop `for...in` ao iterar sobre um array?,"`forEach` itera sobre os valores de um array, enquanto `for...in` itera sobre os *índices* das propriedades enumeráveis de um objeto (o que inclui os índices de um array, mas não é recomendado para iterar arrays). `forEach` é geralmente preferível para iterar sobre arrays.

**55.**"
O que é a diferença entre `forEach` e um loop `for...of` ao iterar sobre um array?,"`forEach` é um método de array que executa uma função para cada elemento.  `for...of` é uma sintaxe de loop que itera sobre os *valores* de um objeto iterável (como um array). `for...of` permite usar `break` e `continue`, o que não é possível com `forEach`.

**56.**"
Como você pode converter um NodeList (retornado por `querySelectorAll`) para um array em JavaScript?,"Você pode usar `Array.from(nodeList)`, o operador spread `[...nodeList]` ou `Array.prototype.slice.call(nodeList)` para converter um NodeList para um array.

**57.**"
O que é a diferença entre uma shallow copy e uma deep copy de um objeto em JavaScript?,"Uma shallow copy cria uma nova referência para o objeto, mas as propriedades do objeto original ainda são compartilhadas com a cópia. Uma deep copy cria um novo objeto e copia recursivamente todos os valores do objeto original, de forma que a cópia e o original sejam completamente independentes.

**58.**"
Como você pode criar um timer (setTimeout e setInterval) em JavaScript?,"`setTimeout(funcao, atraso)` executa uma função após um atraso especificado em milissegundos. `setInterval(funcao, intervalo)` executa uma função repetidamente em um intervalo especificado em milissegundos.

**59.**"
Como você pode limpar um timer criado com `setTimeout` ou `setInterval`?,"Use `clearTimeout(idDoTimer)` para limpar um timer criado com `setTimeout` e `clearInterval(idDoTimer)` para limpar um timer criado com `setInterval`.

**60.**"
O que são eventos customizados em JavaScript e como você pode dispará-los e ouvi-los?,"Eventos customizados são eventos que você define e dispara manualmente. Você pode criar um evento usando `new Event('nomeDoEvento')`, dispará-lo usando `element.dispatchEvent(evento)` e ouvi-lo usando `element.addEventListener('nomeDoEvento', funcao)`.

**61.**"
"O que é ""event bubbling"" e ""event capturing"" em JavaScript?","Event bubbling é o processo em que um evento disparado em um elemento filho se propaga para seus elementos pais na árvore DOM. Event capturing é o oposto, onde o evento é primeiro capturado pelo elemento pai e, em seguida, propagado para o elemento filho.

**62.**"
Como você pode usar o método `fetch()` para fazer requisições HTTP em JavaScript?,"O método `fetch()` retorna uma Promise que resolve para a resposta da requisição. Você pode usar `.then()` para processar a resposta e `.catch()` para lidar com erros. Exemplo: `fetch('url').then(response => response.json()).then(data => console.log(data)).catch(error => console.error(error));`

**63.**"
O que é CORS (Cross-Origin Resource Sharing) e como ele afeta as requisições `fetch()` em JavaScript?,"CORS é um mecanismo de segurança que restringe requisições HTTP feitas a um domínio diferente do domínio do script que está sendo executado. Se o servidor não enviar os cabeçalhos CORS corretos, o navegador bloqueará a requisição.

**64.**"
O que é um Service Worker em JavaScript e quais são seus casos de uso?,"Service Workers são scripts que rodam em segundo plano, separados da página web. Eles podem interceptar e controlar requisições de rede, armazenar em cache recursos, e fornecer notificações push. São usados para criar experiências offline, melhorar o desempenho e habilitar recursos como Progressive Web Apps (PWAs).

**65.**"
Como você pode usar o operador `??` (nullish coalescing operator) em JavaScript?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Ele é diferente do operador `||`, que retorna o operando do lado direito quando o operando do lado esquerdo é falsy.

**66.**"
O que é o Optional Chaining Operator `?.` em JavaScript e como ele funciona?,"O Optional Chaining Operator `?.` permite acessar propriedades de um objeto que podem ser `null` ou `undefined` sem causar um erro. Se a propriedade anterior for `null` ou `undefined`, a expressão retorna `undefined` imediatamente. Ex: `objeto?.propriedade?.subPropriedade`.

**67.**"
Explique o que é o `this` keyword em JavaScript e como seu valor pode variar dependendo do contexto.,"`this` refere-se ao objeto no qual a função está sendo executada. Seu valor depende de como a função é chamada. Em funções globais, `this` geralmente se refere ao objeto global (window no navegador). Em métodos de objeto, `this` se refere ao objeto. Em event handlers, `this` se refere ao elemento que disparou o evento. Em arrow functions, `this` herda o contexto léxico da função pai.

**68.**"
O que é a diferença entre usar `bind()` e uma arrow function para manter o contexto do `this` dentro de um callback?,"`bind()` cria uma nova função com o `this` especificado. Uma arrow function captura o valor do `this` do escopo léxico em que foi definida, sem criar um novo contexto. Arrow functions são geralmente preferíveis porque são mais concisas e evitam a criação de funções desnecessárias.

**69.**"
O que é a função `Object.freeze()` em JavaScript e qual o seu efeito?,"`Object.freeze()` impede que novas propriedades sejam adicionadas a um objeto e impede que as propriedades existentes sejam removidas. Também impede a alteração dos valores das propriedades existentes. No entanto, as propriedades que contêm objetos ainda podem ser alteradas (shallow freeze).

**70.**"
O que é a função `Object.seal()` em JavaScript e qual o seu efeito?,"`Object.seal()` impede que novas propriedades sejam adicionadas a um objeto e impede que as propriedades existentes sejam removidas. No entanto, os valores das propriedades existentes ainda podem ser alterados.

**71.**"
Como você pode ordenar um array de objetos em JavaScript com base em uma propriedade específica?,"Use o método `array.sort()` com uma função de comparação que retorna um valor negativo, zero ou positivo dependendo da ordem desejada. A função de comparação deve comparar os valores da propriedade que você deseja usar para ordenar.

**72.**"
O que são WeakMap e WeakSet em JavaScript e qual a principal diferença para Map e Set?,"`WeakMap` e `WeakSet` são versões ""fracas"" de `Map` e `Set`. A principal diferença é que as chaves de um `WeakMap` e os valores de um `WeakSet` devem ser objetos. Além disso, eles não impedem que esses objetos sejam coletados pelo garbage collector se não houver outras referências a eles.

**73.**"
Como você pode lidar com erros em JavaScript usando `try...catch...finally`?,"O bloco `try` contém o código que pode lançar uma exceção. O bloco `catch` captura a exceção se ela for lançada. O bloco `finally` é executado sempre, independentemente de uma exceção ter sido lançada ou não.

**74.**"
O que é o operador `instanceof` em JavaScript e como ele é usado?,"O operador `instanceof` verifica se um objeto é uma instância de uma determinada classe ou construtor. Ele retorna `true` se o objeto for uma instância da classe ou construtor, e `false` caso contrário.

**75.**"
O que é uma função construtora em JavaScript e como você pode usá-la para criar objetos?,"Uma função construtora é uma função usada para criar objetos. Ela é chamada com a palavra-chave `new`. Dentro da função construtora, `this` se refere ao novo objeto que está sendo criado.

**76.**"
Qual é a diferença entre herança prototipal e herança clássica (como em outras linguagens OO)?,"Em herança prototipal (JavaScript), os objetos herdam propriedades diretamente de outros objetos (os protótipos). Não há classes no sentido tradicional. Em herança clássica, as classes definem a estrutura dos objetos, e a herança ocorre entre classes.

**77.**"
Explique como funciona a cadeia de protótipos em JavaScript.,"Cada objeto em JavaScript tem um protótipo, que é outro objeto. Quando você tenta acessar uma propriedade em um objeto, o JavaScript primeiro procura a propriedade no próprio objeto. Se a propriedade não for encontrada, o JavaScript procura no protótipo do objeto, e assim por diante, até chegar ao protótipo `null`.

**78.**"
O que é o método `Object.create()` em JavaScript e como ele é usado para criar objetos com protótipos específicos?,"`Object.create()` cria um novo objeto com o protótipo especificado. Ele permite criar objetos que herdam propriedades de um objeto existente.

**79.**"
Como você pode adicionar métodos a um protótipo de objeto em JavaScript?,"Você pode adicionar métodos a um protótipo de objeto atribuindo uma função à propriedade `prototype` da função construtora do objeto. Exemplo: `MinhaClasse.prototype.meuMetodo = function() { ... }`

**80.**"
O que é o uso de `super` em classes JavaScript?,"`super` é usado em classes para chamar o construtor da classe pai (`super()`) ou para acessar métodos da classe pai (`super.meuMetodo()`).

Continuando...

**81.**"
O que são Mixins em JavaScript e como eles podem ser usados?,"Mixins são classes ou objetos que contêm funcionalidades que podem ser ""misturadas"" em outras classes. Eles permitem reutilizar código e adicionar funcionalidades a classes existentes sem usar herança múltipla.

**82.**"
Como você pode prevenir o uso de `this` acidentalmente referenciando o objeto global (window) em strict mode?,"Em strict mode, o valor de `this` é `undefined` quando usado em uma função que não é um método de um objeto e não foi chamada com `call`, `apply` ou `bind`. Isso ajuda a prevenir erros acidentais.

**83.**"
O que é um Decorator em JavaScript (usando a sintaxe de proposta)?,"Decorators são uma proposta de sintaxe para adicionar metadados ou modificar classes e seus membros (métodos, propriedades). Eles usam a sintaxe `@decorator`. Decorators são funções que são aplicadas a classes ou membros de classes no momento da definição.

**84.**"
O que é a função `Object.entries()` em JavaScript e o que ela retorna?,"`Object.entries()` retorna um array de arrays, onde cada sub-array contém a chave e o valor de uma propriedade enumerável de um objeto.

**85.**"
O que é a função `Object.keys()` em JavaScript e o que ela retorna?,"`Object.keys()` retorna um array contendo os nomes de todas as propriedades enumeráveis de um objeto.

**86.**"
O que é a função `Object.values()` em JavaScript e o que ela retorna?,"`Object.values()` retorna um array contendo os valores de todas as propriedades enumeráveis de um objeto.

**87.**"
Como você pode verificar se um objeto está vazio em JavaScript?,"Você pode usar `Object.keys(objeto).length === 0` para verificar se um objeto está vazio.

**88.**"
Explique o que é memoization em JavaScript e como ela pode melhorar o desempenho.,"Memoization é uma técnica de otimização que armazena em cache os resultados de chamadas de função caras e retorna o resultado em cache quando as mesmas entradas ocorrem novamente. Isso pode melhorar o desempenho, especialmente para funções recursivas ou computacionalmente intensivas.

**89.**"
O que são Higher-Order Functions em JavaScript e quais são alguns exemplos comuns?,"Higher-Order Functions são funções que recebem outras funções como argumentos ou retornam outras funções como resultados. Exemplos comuns incluem `Array.map()`, `Array.filter()`, `Array.reduce()`, `setTimeout()` e `setInterval()`.

**90.**"
"Como você pode criar um contador que incrementa seu valor cada vez que é chamado, usando closures?","```javascript
function criarContador() {
  let contador = 0;
  return function() {
    contador++;
    return contador;
  };
}

const meuContador = criarContador();
console.log(meuContador()); // 1
console.log(meuContador()); // 2
```

**91.**"
O que são IIFE (Immediately Invoked Function Expressions) em JavaScript e qual o seu propósito?,"IIFE são funções que são executadas imediatamente após sua criação. Seu propósito é criar um escopo privado para evitar conflitos de nomes com outras variáveis no escopo global.

**92.**"
Como você pode detectar se o navegador do usuário tem o JavaScript habilitado?,"A maneira mais simples é usar a tag `<noscript>`. Se o JavaScript estiver desabilitado, o conteúdo dentro da tag `<noscript>` será exibido.

**93.**"
O que são características e vantagens de programação funcional em JavaScript?,"A programação funcional em JavaScript enfatiza o uso de funções puras (funções que sempre retornam o mesmo resultado para as mesmas entradas e não têm efeitos colaterais), imutabilidade de dados e funções de alta ordem. As vantagens incluem código mais previsível, fácil de testar e reutilizar.

**94.**"
O que são currying e partial application em JavaScript?,"Currying é uma técnica que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada. Partial application é quando você preenche alguns dos argumentos de uma função e retorna uma nova função que espera os argumentos restantes.

**95.**"
Como você pode usar a função `Date.now()` em JavaScript?,"`Date.now()` retorna o número de milissegundos que se passaram desde 1 de janeiro de 1970 00:00:00 UTC. Ele é frequentemente usado para medir o tempo de execução de um código.

**96.**"
O que é o `requestAnimationFrame()` em JavaScript e qual o seu uso?,"`requestAnimationFrame()` agenda uma função para ser executada antes da próxima repintura do navegador. Ele é usado para criar animações suaves e eficientes, pois sincroniza a animação com a taxa de atualização da tela.

**97.**"
Como você pode usar a função `cancelAnimationFrame()` em JavaScript?,"`cancelAnimationFrame()` cancela um quadro de animação previamente agendado com `requestAnimationFrame()`.

**98.**"
O que é o padrão de módulo em JavaScript e como ele é implementado?,"O padrão de módulo é uma forma de encapsular código e dados em um escopo privado, expondo apenas as partes que são necessárias para o exterior. Ele é implementado usando closures ou módulos ES6.

**99.**"
O que é o objeto `Intl` em JavaScript e para que ele é usado?,"O objeto `Intl` fornece APIs para internacionalização, como formatação de datas, números e moedas de acordo com as configurações regionais do usuário.

**100.**"
Como você pode verificar se um elemento está visível na tela usando JavaScript?,"Você pode usar a API Intersection Observer para verificar se um elemento está visível na tela. Essa API permite observar quando um elemento entra ou sai da viewport.

Mais 100 para completar a lista:

**101.**"
O que é o Resumable Functions (uma proposta para JavaScript)?,"Resumable Functions são funções que podem ser pausadas e retomadas em um ponto específico, mantendo o estado local. Elas são semelhantes a generators, mas podem ser mais fáceis de usar em alguns casos.

**102.**"
Como você pode transformar um array de arrays em um único array (flatten) em JavaScript?,Você pode usar `array.flat
Como você declara uma variável constante em JavaScript?,"Usando a palavra-chave `const`, por exemplo: `const PI = 3.14159;`"
Como você cria um array em JavaScript?,"Usando literais de array: `let myArray = [1, 2, 3];` ou o construtor `Array`: `let myArray = new Array(1, 2, 3);`"
Como você acessa o primeiro elemento de um array em JavaScript?,Usando o índice 0: `myArray[0];`
O que é o `this` em JavaScript?,`this` refere-se ao contexto de execução atual. Seu valor depende de como a função é chamada.
Como você cria uma função em JavaScript?,Usando a declaração de função: `function myFunction() { ... }` ou a expressão de função: `let myFunction = function() { ... };`
O que é um closure em JavaScript?,"Um closure é a capacidade de uma função de acessar variáveis de seu escopo léxico externo, mesmo após a função externa ter terminado de executar."
Como você lança um erro em JavaScript?,"Usando a palavra-chave `throw`, seguida de um objeto de erro. Por exemplo: `throw new Error('Mensagem de erro');`"
O que é o bloco `try...catch` em JavaScript?,"É usado para lidar com exceções. O código dentro do bloco `try` é executado, e se um erro for lançado, o código dentro do bloco `catch` é executado."
Como você previne o comportamento padrão de um evento em JavaScript?,Usando o método `preventDefault()` no objeto de evento.
O que são template literals em JavaScript?,"São strings que permitem expressões embutidas, delimitadas por crases (`)."
O que é o operador spread em JavaScript?,Permite expandir um array ou objeto em locais onde são esperados múltiplos argumentos ou elementos.
O que é herança em JavaScript?,É um mecanismo onde uma classe (subclasse ou classe filha) herda propriedades e métodos de outra classe (superclasse ou classe pai).
O que são módulos em JavaScript (ES6)?,"Permitem dividir o código em arquivos separados, tornando-o mais organizado e reutilizável."
Como você importa um módulo em JavaScript (ES6)?,Usando a palavra-chave `import`. Por exemplo: `import { myFunction } from './myModule.js';`
Como você exporta um módulo em JavaScript (ES6)?,Usando a palavra-chave `export`. Por exemplo: `export function myFunction() { ... }` ou `export default myFunction;`
Como você verifica se um array inclui um determinado valor em JavaScript?,Usando o método `includes()`.
O que é o método `join()` em JavaScript?,Junta todos os elementos de um array em uma string.
O que é o método `splice()` em JavaScript?,"Altera o conteúdo de um array removendo, substituindo ou adicionando elementos."
O que é o método `push()` em JavaScript?,Adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
O que é o método `pop()` em JavaScript?,Remove o último elemento de um array e retorna esse elemento.
O que é o método `shift()` em JavaScript?,Remove o primeiro elemento de um array e retorna esse elemento.
O que é o método `unshift()` em JavaScript?,Adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
O que é o método `sort()` em JavaScript?,Ordena os elementos de um array no local e retorna o array ordenado.
O que é o método `reverse()` em JavaScript?,Inverte a ordem dos elementos em um array.
Como você remove elementos duplicados de um array em JavaScript?,Usando `[...new Set(myArray)]`.
Como você calcula a potência de um número em JavaScript?,Usando `Math.pow()`.
Como você gera um número aleatório entre 0 (inclusive) e 1 (exclusivo) em JavaScript?,Usando `Math.random()`.
Como você obtém o ano atual a partir de um objeto `Date` em JavaScript?,Usando `myDate.getFullYear()`.
Como você obtém o mês atual a partir de um objeto `Date` em JavaScript?,Usando `myDate.getMonth()` (retorna um valor de 0 a 11).
Como você obtém o dia do mês a partir de um objeto `Date` em JavaScript?,Usando `myDate.getDate()`.
Como você converte um objeto JavaScript para uma string JSON?,Usando `JSON.stringify()`.
Como você converte uma string JSON para um objeto JavaScript?,Usando `JSON.parse()`.
O que é uma Promise em JavaScript?,"É um objeto que representa a eventual conclusão (ou falha) de uma operação assíncrona, e seu valor resultante."
Quais são os estados de uma Promise em JavaScript?,"Pendente (pending), Cumprida (fulfilled) e Rejeitada (rejected)."
Como você cria uma Promise em JavaScript?,"Usando o construtor `new Promise((resolve, reject) => { ... });`"
Como você lida com o sucesso de uma Promise em JavaScript?,Usando o método `.then()`.
Como você lida com o erro de uma Promise em JavaScript?,Usando o método `.catch()`.
O que é o método `finally()` em Promises JavaScript?,Executa um bloco de código independentemente de a Promise ser cumprida ou rejeitada.
Como você define uma função assíncrona em JavaScript?,Usando a palavra-chave `async` antes da declaração da função.
Como você seleciona um elemento HTML pelo ID em JavaScript?,Usando `document.getElementById('idDoElemento')`.
Como você seleciona elementos HTML por classe em JavaScript?,Usando `document.getElementsByClassName('nomeDaClasse')`.
Como você seleciona elementos HTML por tag em JavaScript?,Usando `document.getElementsByTagName('nomeDaTag')`.
Como você altera o conteúdo de um elemento HTML em JavaScript?,Usando a propriedade `innerHTML` ou `textContent`.
Como você define o valor de um atributo de um elemento HTML em JavaScript?,Usando o método `setAttribute()`.
Como você obtém o valor de um atributo de um elemento HTML em JavaScript?,Usando o método `getAttribute()`.
Como você cria um novo elemento HTML em JavaScript?,Usando `document.createElement('nomeDaTag')`.
Como você adiciona um elemento HTML ao DOM em JavaScript?,Usando o método `appendChild()` ou `insertBefore()`.
Como você remove um elemento HTML do DOM em JavaScript?,Usando o método `removeChild()`.
Como você adiciona um listener de evento a um elemento HTML em JavaScript?,Usando o método `addEventListener()`.
Como você remove um listener de evento de um elemento HTML em JavaScript?,Usando o método `removeEventListener()`.
O que é um evento em JavaScript?,"É uma ação ou ocorrência que acontece no navegador, como um clique, carregamento de página, ou envio de formulário."
Como você obtém o elemento que disparou um evento em JavaScript?,Usando a propriedade `target` do objeto `event`.
O que é o bubbling de eventos em JavaScript?,É o processo onde um evento disparado em um elemento se propaga para seus elementos pais no DOM.
O que é o capturing de eventos em JavaScript?,É o processo onde um evento é capturado pelo elemento mais externo antes de se propagar para o elemento alvo.
Como você armazena dados em `localStorage` em JavaScript?,"Usando `localStorage.setItem('chave', 'valor')`."
Como você recupera dados de `localStorage` em JavaScript?,Usando `localStorage.getItem('chave')`.
Como você remove dados de `localStorage` em JavaScript?,Usando `localStorage.removeItem('chave')`.
Como você limpa todo o `localStorage` em JavaScript?,Usando `localStorage.clear()`.
O que é uma expressão regular em JavaScript?,É um padrão usado para corresponder a combinações de caracteres em strings.
O que é o método `test()` em expressões regulares em JavaScript?,Testa se uma string corresponde ao padrão da expressão regular. Retorna `true` ou `false`.
O que é o método `exec()` em expressões regulares em JavaScript?,Executa uma busca por uma correspondência em uma string. Retorna um array com informações sobre a correspondência ou `null` se não houver correspondência.
O que é o método `match()` em strings em JavaScript?,Retorna uma correspondência entre uma string e uma expressão regular.
O que é o método `replace()` em strings em JavaScript?,Substitui uma parte de uma string por outra string ou por uma string retornada por uma função.
O que são quantificadores em expressões regulares em JavaScript?,"Símbolos que especificam quantas ocorrências de um caractere ou grupo de caracteres devem corresponder. Ex: `*`, `+`, `?`, `{n}`, `{n,}`, `{n,m}`."
O que são classes de caracteres em expressões regulares em JavaScript?,"Conjuntos de caracteres que representam um tipo específico de caractere. Ex: `\d` (dígito), `\w` (caractere alfanumérico), `\s` (espaço em branco)."
O que são grupos de captura em expressões regulares em JavaScript?,Partes da expressão regular que são delimitadas por parênteses `()`. As correspondências desses grupos podem ser recuperadas separadamente.
O que é programação orientada a protótipos em JavaScript?,É um estilo de programação orientada a objetos onde a herança é baseada em protótipos em vez de classes.
O que é duck typing em JavaScript?,"É um estilo de tipagem onde a validade de um objeto é determinada por sua capacidade de realizar certas operações, em vez de seu tipo específico."
O que é a diferença entre programação imperativa e declarativa em JavaScript?,"A programação imperativa foca em *como* realizar uma tarefa, enquanto a programação declarativa foca em *o que* deve ser realizado."
O que são funções de alta ordem em JavaScript?,São funções que recebem outras funções como argumentos ou retornam funções como resultados.
Como você cria um objeto imutável em JavaScript?,Usando `Object.freeze()` ou bibliotecas como Immutable.js.
O que é o princípio DRY (Don't Repeat Yourself) em programação JavaScript?,"É um princípio que afirma que cada parte do conhecimento deve ter uma representação única, inequívoca e confiável dentro de um sistema."
"O que é o princípio KISS (Keep It Simple, Stupid) em programação JavaScript?",É um princípio que afirma que a maioria dos sistemas funcionam melhor se forem mantidos simples em vez de complicados.
O que é o padrão de projeto Module em JavaScript?,É um padrão que permite criar módulos encapsulados com escopo privado e uma interface pública para interagir com o módulo.
O que é o padrão de projeto Revealing Module em JavaScript?,"Uma variação do padrão Module onde todos os métodos e variáveis são definidos no escopo privado, e apenas um conjunto selecionado é revelado como público."
"Explique o conceito de ""graceful degradation"" em JavaScript.","É a prática de construir uma aplicação web para que ela funcione corretamente nos navegadores mais recentes, enquanto ainda oferece uma experiência utilizável (embora talvez menos rica em recursos) em navegadores mais antigos."
"Explique o conceito de ""progressive enhancement"" em JavaScript.","É uma estratégia de design web que prioriza o conteúdo base e a funcionalidade essencial, adicionando recursos e aprimoramentos mais avançados quando o navegador do usuário os suporta."
"O que é o ""event loop"" em JavaScript e como ele funciona?","É o mecanismo que permite que o JavaScript, uma linguagem single-threaded, execute operações assíncronas. Ele monitora a pilha de chamadas e a fila de callbacks, movendo callbacks da fila para a pilha quando a pilha está vazia."
"O que é a ""callback queue"" (fila de callbacks) em JavaScript?","É uma fila que armazena callbacks assíncronos que estão prontos para serem executados, aguardando a pilha de chamadas ficar vazia."
"O que é a ""microtask queue"" (fila de microtarefas) em JavaScript?","Semelhante à callback queue, mas para microtarefas (Promises, MutationObserver). Microtarefas são executadas antes das tarefas da callback queue."
O que é o Garbage Collector em JavaScript?,É um processo automático que libera a memória que não está mais sendo usada pelo programa.
"O que é ""memoization"" e como ela pode otimizar funções em JavaScript?",Memoization é uma técnica de otimização que armazena em cache os resultados de chamadas de função caras e os retorna quando as mesmas entradas são usadas novamente.
"O que são ""side effects"" (efeitos colaterais) em funções JavaScript?","São alterações no estado fora do escopo da função, como modificar variáveis globais, fazer chamadas I/O ou interagir com o DOM. Funções com side effects podem ser mais difíceis de prever e testar."
"O que é a ""temporal dead zone"" (TDZ) em JavaScript?","É a área do código onde uma variável declarada com `let` ou `const` existe, mas não pode ser acessada antes de sua declaração ser alcançada."
"Qual a diferença entre ""shallow copy"" e ""deep copy"" em JavaScript?","Uma shallow copy cria uma nova referência para o mesmo objeto, enquanto uma deep copy cria um novo objeto com todos os valores copiados recursivamente."
Como você pode criar uma deep copy de um objeto em JavaScript?,Usando `JSON.parse(JSON.stringify(obj))` (para objetos simples) ou bibliotecas como Lodash.
"Explique o conceito de ""closures"" com um exemplo prático.","(Exemplo de uma função que retorna outra função, que acessa uma variável do escopo da função externa, mesmo após a função externa ter terminado de executar.)"
"O que é ""event delegation"" em JavaScript e por que é útil?",É uma técnica de adicionar um listener de evento a um elemento pai em vez de adicionar o listener a cada elemento filho individualmente. É útil para melhorar o desempenho e lidar com elementos que são adicionados dinamicamente.
O que é CORS (Cross-Origin Resource Sharing) e como ele afeta o JavaScript?,É um mecanismo de segurança do navegador que restringe solicitações HTTP de origens diferentes. Isso pode afetar o JavaScript se você estiver tentando fazer solicitações para um servidor que não compartilha a mesma origem.
"O que é ""strict mode"" em JavaScript e como ele pode ajudar a escrever código melhor?","É um modo que impõe regras mais rigorosas para o código JavaScript, ajudando a evitar erros comuns e tornando o código mais legível e manutenível. Ativado adicionando `""use strict"";` no início de um script ou função."
"O que são ""linter"" e por que são úteis em JavaScript?","São ferramentas que analisam o código-fonte para identificar erros de estilo, erros potenciais e outras questões de qualidade de código. Eles ajudam a manter a consistência e melhorar a qualidade do código."
"O que são ""unit tests"" (testes unitários) e por que são importantes em JavaScript?","São testes que verificam o comportamento de unidades individuais de código (funções, classes, módulos) de forma isolada. Eles ajudam a garantir que o código funcione conforme o esperado e a detectar erros precocemente."
Como você debuga o código JavaScript no navegador?,"Usando as ferramentas de desenvolvedor do navegador (console, debugger, network tab)."
"Qual a diferença entre ""synchronous"" (síncrono) e ""asynchronous"" (assíncrono) JavaScript?","O código síncrono é executado em sequência, bloqueando a execução até que cada operação seja concluída. O código assíncrono permite que o programa continue executando outras tarefas enquanto aguarda a conclusão de uma operação (por exemplo, uma solicitação de rede)."
"O que é um ""callback hell"" e como você pode evitá-lo em JavaScript?","É uma situação onde o código se torna aninhado e difícil de ler devido ao uso excessivo de callbacks aninhados. Pode ser evitado usando Promises, async/await, ou padrões de projeto como o padrão Observer."
"O que é ""code splitting"" e como ele pode melhorar o desempenho do seu aplicativo JavaScript?","É a prática de dividir o código do aplicativo em vários pedaços menores, que podem ser carregados sob demanda. Isso pode reduzir o tempo de carregamento inicial e melhorar a experiência do usuário."
"O que é ""tree shaking"" e como ele funciona em JavaScript?",É um processo de otimização que remove o código não utilizado de um aplicativo JavaScript durante o processo de construção. Isso pode reduzir o tamanho do pacote final e melhorar o desempenho.
"O que é ""minification"" e como ele funciona em JavaScript?","É um processo de otimização que remove espaços em branco, comentários e outros caracteres desnecessários do código JavaScript, reduzindo o tamanho do arquivo."
"O que é ""transpilation"" e por que é usado em JavaScript?",É o processo de converter código de uma versão do JavaScript para outra (geralmente uma versão mais antiga) para garantir a compatibilidade com navegadores mais antigos.
O que é o Symbol em JavaScript?,É um tipo de dado primitivo usado para criar propriedades de objeto únicas e imutáveis.
O que são Iterators e Generators em JavaScript?,"Iterators são objetos que permitem iterar sobre uma coleção de dados. Generators são um tipo especial de função que podem ser pausadas e retomadas, permitindo a criação de iterators mais facilmente."
Explique o conceito de tail call optimization (TCO) em JavaScript.,"É uma otimização do compilador que permite que chamadas recursivas de cauda (onde a chamada recursiva é a última operação realizada pela função) sejam executadas sem adicionar um novo frame à pilha de chamadas, evitando estouros de pilha."
O que é a API Fetch em JavaScript?,"É uma interface para fazer solicitações de rede, oferecendo uma alternativa moderna e mais flexível ao XMLHttpRequest."
Quais são os diferentes tipos de erros em JavaScript?,"SyntaxError, TypeError, ReferenceError, RangeError, URIError, EvalError, InternalError."
"O que é o uso de ""void"" em JavaScript?",O operador `void` avalia uma expressão e retorna `undefined`. É frequentemente usado para evitar que um link execute uma ação padrão ou para garantir que uma função não retorne um valor.
Como você otimiza loops em JavaScript?,"Minimizar cálculos dentro do loop, cache de valores que não mudam, usar loops mais eficientes (for vs. forEach), reduzir o número de acessos ao DOM."
O que é um Service Worker em JavaScript?,"É um script que roda em background, separado da página web, e pode interceptar e lidar com requisições de rede, cache de recursos e funcionalidades de push notifications."
O que é a API WebSockets em JavaScript?,"Fornece um canal de comunicação full-duplex sobre uma única conexão TCP, permitindo uma comunicação bidirecional em tempo real entre um cliente e um servidor."
O que são Proxy objects em JavaScript?,"Permitem interceptar e personalizar operações fundamentais em objetos, como leitura, escrita, enumeração e validação."
Como você compara dois objetos para determinar se eles são iguais em conteúdo?,"Uma comparação direta `obj1 === obj2` verifica se ambos apontam para a mesma referência de objeto. Para comparar o conteúdo, é necessário iterar sobre as propriedades e comparar os valores. Uma função deep equality pode ser implementada ou bibliotecas externas podem ser usadas."
O que é memoization usando Closures e qual é a sua vantagem?,"É a técnica de armazenar os resultados de chamadas de função ""caras"" dentro de um closure para que eles possam ser reutilizados para as mesmas entradas em chamadas futuras. Isso pode melhorar significativamente o desempenho, evitando recálculos repetitivos."
O que é 'use strict' e por que é uma boa prática?,"`use strict` habilita um modo restrito de JavaScript que impõe regras mais rigorosas, como proibir variáveis implícitas e lançar erros para certas ações silenciosas. Ele ajuda a evitar erros comuns e escrever um código mais limpo e seguro."
Explique o conceito de Data Binding e seu papel em frameworks JavaScript.,"Data binding é uma técnica que sincroniza automaticamente os dados entre um modelo (dados) e a visualização (interface do usuário). Quando os dados no modelo são alterados, a visualização é atualizada automaticamente e vice-versa. Isso simplifica a manipulação do DOM e melhora a reatividade."
Qual a diferença entre Immediate Invoked Function Expression (IIFE) e blocos anônimos?,"Um IIFE (Immediately Invoked Function Expression) é uma função anônima que é executada imediatamente após sua criação. Blocos anônimos, por outro lado, são apenas blocos de código envoltos em chaves `{}`. IIFEs criam um escopo privado para evitar conflitos de nomes, enquanto blocos anônimos não criam um novo escopo.

Espero que esta lista seja útil!"
Qual a diferença entre usar `let` e `const` para declarar variáveis em JavaScript?,"`let` declara variáveis que podem ser reatribuídas, enquanto `const` declara variáveis que não podem ser reatribuídas após a inicialização. No entanto, para objetos e arrays declarados com `const`, as propriedades internas podem ser modificadas."
O que é o operador `in` em JavaScript e como ele é usado?,O operador `in` é usado para verificar se uma propriedade específica existe dentro de um objeto. Ele retorna `true` se a propriedade existir e `false` caso contrário. Ele também pode ser usado para verificar se um índice existe em um array.
Explique o conceito de `template literals` em JavaScript.,Template literals (ou template strings) são strings que permitem a incorporação de expressões dentro de strings usando a sintaxe `${expressao}`. Eles também suportam strings multi-linha e interpolação de variáveis.
O que são `closures` em JavaScript?,"Closures são a habilidade de uma função de lembrar e acessar o escopo léxico no qual foi criada, mesmo após a função externa ter terminado sua execução. Isso permite que a função interna acesse variáveis da função externa."
Como funciona o operador `delete` em JavaScript?,"O operador `delete` é usado para remover uma propriedade de um objeto. Ele retorna `true` se a propriedade foi removida com sucesso ou se a propriedade não existia. Ele não pode ser usado para deletar variáveis declaradas com `var`, `let` ou `const`."
O que é `type coercion` em JavaScript?,Type coercion é o processo automático de conversão de um tipo de dado para outro quando um operador ou função espera um tipo diferente. Isso pode levar a resultados inesperados se não for compreendido.
Explique o conceito de `hoisting` em JavaScript.,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis (com `var`) e funções para o topo de seu escopo antes da execução do código. No entanto, apenas a declaração é movida; a inicialização permanece onde está no código. Variáveis declaradas com `let` e `const` são hoisted, mas não inicializadas, resultando em um erro se forem acessadas antes da declaração."
Como funciona o método `Array.prototype.forEach()` em JavaScript?,"O método `forEach()` itera sobre os elementos de um array e executa uma função fornecida para cada elemento. Ele não retorna um novo array e não interrompe a iteração, a menos que uma exceção seja lançada."
O que é o método `Array.prototype.map()` em JavaScript?,"O método `map()` itera sobre os elementos de um array e executa uma função fornecida para cada elemento, retornando um novo array com os resultados da função aplicada a cada elemento."
Explique o método `Array.prototype.filter()` em JavaScript.,O método `filter()` itera sobre os elementos de um array e retorna um novo array contendo apenas os elementos que satisfazem uma condição especificada na função fornecida.
O que faz o método `Array.prototype.reduce()` em JavaScript?,O método `reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzir o array a um único valor.
Qual a finalidade do método `Array.prototype.sort()` em JavaScript?,"O método `sort()` ordena os elementos de um array no local e retorna o array ordenado. Por padrão, ele ordena os elementos como strings, o que pode levar a resultados inesperados ao ordenar números. Uma função de comparação pode ser fornecida para personalizar a ordem de classificação."
Explique o que é o `spread operator` em JavaScript.,O spread operator (`...`) permite expandir um iterável (como um array ou string) em locais onde são esperados zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array).
O que é o `rest parameter` em JavaScript?,O rest parameter (`...`) permite que uma função aceite um número indefinido de argumentos como um array. Ele deve ser o último parâmetro da função.
O que é `JSON` e como é usado em JavaScript?,"JSON (JavaScript Object Notation) é um formato de dados leve para troca de dados. Em JavaScript, ele é usado para enviar e receber dados de servidores web. Os métodos `JSON.stringify()` e `JSON.parse()` são usados para converter objetos JavaScript em strings JSON e vice-versa."
Explique o conceito de `promises` em JavaScript.,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas podem estar em um de três estados: pendente, resolvida (fulfilled) ou rejeitada (rejected). Promises ajudam a lidar com operações assíncronas de forma mais organizada e legível, evitando o ""callback hell""."
Como funciona o tratamento de erros com `try...catch` em JavaScript?,"O bloco `try` contém o código que pode gerar uma exceção. O bloco `catch` captura a exceção, se ocorrer, e permite que você lide com o erro de forma apropriada."
O que é um `stack overflow` em JavaScript?,Um stack overflow ocorre quando a pilha de chamadas excede seu limite de tamanho. Isso geralmente acontece com chamadas recursivas infinitas ou muito profundas.
Qual a diferença entre `setTimeout()` e `setInterval()` em JavaScript?,`setTimeout()` executa uma função uma vez após um determinado atraso em milissegundos. `setInterval()` executa uma função repetidamente em intervalos regulares de tempo em milissegundos.
Como você pode limpar um `setTimeout()` ou `setInterval()` em JavaScript?,"Você pode usar `clearTimeout(idDoTimeout)` para limpar um `setTimeout()` e `clearInterval(idDoInterval)` para limpar um `setInterval()`, onde `idDoTimeout` e `idDoInterval` são os valores retornados pelas respectivas funções."
O que é o objeto `Math` em JavaScript e quais são alguns de seus métodos comuns?,"O objeto `Math` é um objeto nativo do JavaScript que fornece propriedades e métodos para operações matemáticas. Alguns métodos comuns incluem `Math.random()`, `Math.floor()`, `Math.ceil()`, `Math.round()`, `Math.max()`, `Math.min()` e `Math.pow()`."
O que é o objeto `Date` em JavaScript e como ele é usado?,"O objeto `Date` é usado para trabalhar com datas e horas em JavaScript. Ele permite criar objetos de data, obter informações sobre datas (como ano, mês, dia) e formatar datas."
O que é o método `Date.now()` em JavaScript?,"O método `Date.now()` retorna o número de milissegundos decorridos desde 1º de janeiro de 1970, 00:00:00 UTC (o Epoch Unix)."
O que é `RegExp` em JavaScript?,"`RegExp` (Regular Expression) é um objeto que representa um padrão de texto. Ele é usado para buscar, substituir e validar texto em JavaScript."
Quais são alguns dos metacaracteres comuns usados em expressões regulares em JavaScript?,"Alguns metacaracteres comuns incluem `.` (qualquer caractere), `*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `^` (início da string), `$` (fim da string), `\d` (dígito), `\w` (caractere alfanumérico), `\s` (espaço em branco)."
O que são `flags` em expressões regulares em JavaScript?,"Flags são modificadores que alteram o comportamento de uma expressão regular. Alguns flags comuns incluem `i` (ignorar maiúsculas/minúsculas), `g` (global, encontrar todas as ocorrências) e `m` (multiline, trata `^` e `$` como início e fim de cada linha)."
Explique o conceito de `inheritance` (herança) em JavaScript.,"Em JavaScript, a herança é implementada usando protótipos. Cada objeto tem um protótipo, que é outro objeto do qual herda propriedades e métodos. A cadeia de protótipos permite que objetos herdem características de seus ancestrais."
O que é o `prototype` em JavaScript?,O `prototype` é um objeto associado a cada função e objeto em JavaScript. Ele contém propriedades e métodos que são herdados por todos os objetos criados a partir dessa função ou objeto.
Como você pode criar um objeto em JavaScript usando a sintaxe de classe (ES6)?,"Você pode usar a palavra-chave `class` seguida do nome da classe, e dentro da classe, você pode definir o construtor e os métodos da classe."
O que é o construtor em uma classe JavaScript?,O construtor é um método especial dentro de uma classe que é chamado quando um novo objeto da classe é criado. Ele é usado para inicializar as propriedades do objeto.
Como você pode herdar de uma classe em JavaScript usando a sintaxe de classe (ES6)?,"Você pode usar a palavra-chave `extends` para herdar de outra classe. A classe que herda é chamada de subclasse, e a classe da qual herda é chamada de superclasse."
O que é o método `super()` em JavaScript?,O método `super()` é usado em uma subclasse para chamar o construtor da superclasse. Ele também pode ser usado para chamar outros métodos da superclasse.
Como o valor de `this` é determinado em uma função arrow em JavaScript?,"Em uma função arrow, o valor de `this` é herdado do contexto léxico circundante. Isso significa que `this` se refere ao mesmo objeto que `this` se referiria fora da função arrow."
O que é o objeto `window` em JavaScript (no navegador)?,O objeto `window` representa a janela do navegador. É o objeto global no contexto do navegador e contém propriedades e métodos para manipular a janela do navegador.
O que é o objeto `document` em JavaScript (no navegador)?,O objeto `document` representa o documento HTML exibido na janela do navegador. Ele permite acessar e manipular os elementos HTML da página.
O que é o `DOM` (Document Object Model) em JavaScript?,"O DOM (Document Object Model) é uma representação em forma de árvore da estrutura de um documento HTML ou XML. Ele permite que programas (como JavaScript) acessem e manipulem o conteúdo, a estrutura e o estilo do documento."
Como você pode selecionar múltiplos elementos HTML por sua classe em JavaScript?,Você pode usar o método `document.getElementsByClassName('nomeDaClasse')`.
Como você pode modificar o conteúdo de um elemento HTML em JavaScript?,"Você pode usar a propriedade `textContent` ou `innerHTML` do elemento. `textContent` define o texto dentro do elemento, enquanto `innerHTML` define o código HTML dentro do elemento."
Como você pode adicionar um ouvinte de evento a um elemento HTML em JavaScript?,"Você pode usar o método `addEventListener('nomeDoEvento', funcaoCallback)` do elemento."
Como você pode prevenir o comportamento padrão de um evento em JavaScript?,Você pode usar o método `event.preventDefault()`.
Como você pode interromper a propagação de um evento em JavaScript?,Você pode usar o método `event.stopPropagation()`.
O que é o `event bubbling` em JavaScript?,"Event bubbling é o processo em que um evento disparado em um elemento se propaga para cima na árvore DOM, acionando os ouvintes de evento em seus elementos pais."
O que é o `event capturing` em JavaScript?,"Event capturing é o processo oposto ao event bubbling. Em vez de começar no elemento alvo e subir na árvore DOM, o evento começa na raiz do documento e desce até o elemento alvo. O capturing é menos comum que o bubbling."
O que são `cookies` em JavaScript e como são usados?,"Cookies são pequenos arquivos de texto que um site armazena no computador de um usuário. Eles são usados para armazenar informações sobre o usuário, como preferências, informações de login, etc."
Como você pode ler e definir cookies em JavaScript?,"Você pode acessar os cookies através da propriedade `document.cookie`. Para definir um cookie, você atribui uma string no formato `nome=valor; expires=data; path=/` à propriedade `document.cookie`. Para ler os cookies, você precisa analisar a string `document.cookie`."
O que é `localStorage` em JavaScript e como é usado?,`localStorage` é um objeto que permite armazenar dados persistentemente no navegador do usuário. Os dados armazenados em `localStorage` permanecem disponíveis mesmo após o fechamento do navegador.
O que é `sessionStorage` em JavaScript e como é usado?,"`sessionStorage` é semelhante a `localStorage`, mas os dados armazenados são apenas válidos durante a sessão do navegador. Os dados são apagados quando o navegador é fechado."
Como você pode armazenar e recuperar dados de `localStorage` e `sessionStorage` em JavaScript?,"Você pode usar os métodos `localStorage.setItem('chave', 'valor')` para armazenar dados e `localStorage.getItem('chave')` para recuperar dados. O mesmo se aplica a `sessionStorage`."
O que é `strict mode` em JavaScript e como é usado?,"Strict mode é um modo de execução do JavaScript que impõe regras mais rígidas e ajuda a evitar erros comuns. Ele é ativado adicionando a string `""use strict"";` no início de um script ou função."
Quais são alguns dos benefícios de usar `strict mode` em JavaScript?,"Strict mode previne o uso de variáveis não declaradas, impede a atribuição a propriedades somente leitura, proíbe o uso de palavras reservadas como nomes de variáveis, e torna o código mais seguro e fácil de depurar."
O que são `modules` em JavaScript (ES6)?,Modules são unidades de código reutilizáveis que podem ser importadas e exportadas para compartilhar funcionalidades entre diferentes partes de um aplicativo JavaScript.
Como você pode exportar funcionalidades de um módulo JavaScript?,Você pode usar as palavras-chave `export` (para exportar individualmente) ou `export default` (para exportar um único valor padrão).
Como você pode importar funcionalidades de um módulo JavaScript?,Você pode usar a palavra-chave `import` seguida do nome da funcionalidade e do caminho do módulo.
Qual a diferença entre `named exports` e `default exports` em JavaScript?,`Named exports` permitem exportar múltiplos valores com nomes específicos. `Default exports` permitem exportar um único valor padrão.
O que é `IIFE` (Immediately Invoked Function Expression) em JavaScript?,IIFE é uma função que é definida e executada imediatamente após sua criação. É usada para criar um escopo privado para evitar conflitos de nomes e proteger variáveis.
Como você pode criar um `IIFE` em JavaScript?,Você pode criar um IIFE envolvendo a definição da função entre parênteses e adicionando parênteses adicionais no final para executá-la: `(function() { /* código */ })();`.
O que é `memoization` em JavaScript?,Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras e retorna o resultado armazenado em cache quando as mesmas entradas são usadas novamente.
Como você pode implementar `memoization` em JavaScript?,"Você pode criar um objeto para armazenar os resultados em cache, verificar se o resultado para uma determinada entrada já existe no cache antes de calcular o resultado, e armazenar o resultado no cache após o cálculo."
O que é `currying` em JavaScript?,Currying é uma técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.
Como você pode implementar `currying` em JavaScript?,"Você pode criar uma função que retorna outra função, que por sua vez retorna outra função, e assim por diante, até que todos os argumentos sejam fornecidos."
O que é `functional programming` (programação funcional) em JavaScript?,"Programação funcional é um paradigma de programação que enfatiza o uso de funções puras, imutabilidade de dados e evitar efeitos colaterais."
O que são `pure functions` (funções puras) em JavaScript?,Funções puras são funções que sempre retornam o mesmo resultado para as mesmas entradas e não têm efeitos colaterais (não modificam variáveis externas nem interagem com o mundo exterior).
O que é `immutability` (imutabilidade) em JavaScript?,"Imutabilidade significa que os dados não podem ser modificados após serem criados. Em vez de modificar dados existentes, você cria novos dados com as modificações desejadas."
O que são `higher-order functions` (funções de ordem superior) em JavaScript?,Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam funções como resultado.
O que são `callbacks` em JavaScript?,Callbacks são funções que são passadas como argumentos para outras funções e executadas quando a função receptora termina sua execução.
O que é `recursion` (recursão) em JavaScript?,Recursão é uma técnica em que uma função chama a si mesma dentro de sua própria definição.
Quais são os riscos de usar `recursion` em JavaScript?,"O principal risco é o `stack overflow`, que ocorre quando a função recursiva chama a si mesma infinitamente ou muito profundamente, excedendo o limite da pilha de chamadas."
Como você pode evitar um `stack overflow` ao usar `recursion` em JavaScript?,"Você pode usar uma condição de parada para interromper a recursão, ou usar uma técnica chamada `tail call optimization` (otimização de chamada final), que transforma a recursão em um loop. No entanto, a tail call optimization não é suportada em todos os ambientes JavaScript."
O que é `event delegation` em JavaScript?,Event delegation é uma técnica em que você adiciona um ouvinte de evento a um elemento pai em vez de adicionar ouvintes a vários elementos filhos. Isso é útil quando você tem muitos elementos filhos ou quando os elementos filhos são adicionados dinamicamente.
Como você pode implementar `event delegation` em JavaScript?,Você adiciona um ouvinte de evento ao elemento pai e usa a propriedade `event.target` para identificar o elemento filho que disparou o evento.
O que é `debouncing` em JavaScript?,Debouncing é uma técnica para limitar a taxa na qual uma função é executada. Ela garante que uma função não seja chamada mais de uma vez em um determinado período de tempo.
Como você pode implementar `debouncing` em JavaScript?,Você pode usar um `setTimeout()` para atrasar a execução da função e limpar o timeout sempre que a função é chamada novamente antes do timeout expirar.
O que é `throttling` em JavaScript?,Throttling é outra técnica para limitar a taxa na qual uma função é executada. Ela garante que uma função seja chamada no máximo uma vez em um determinado período de tempo.
Como você pode implementar `throttling` em JavaScript?,"Você pode usar uma flag para indicar se a função está atualmente sendo executada e definir a flag para `true` quando a função é chamada. Em seguida, você usa um `setTimeout()` para definir a flag para `false` após um determinado período de tempo."
O que é `polyfills` em JavaScript?,Polyfills são pedaços de código que fornecem funcionalidades que não estão nativamente disponíveis em navegadores mais antigos. Eles permitem que você use recursos mais recentes do JavaScript em navegadores que não os suportam.
O que é `transpilation` em JavaScript?,Transpilation é o processo de converter código JavaScript moderno (ES6+) em código JavaScript mais antigo (ES5) que é compatível com navegadores mais antigos.
O que é `minification` em JavaScript?,"Minification é o processo de remover espaços em branco, comentários e outros caracteres desnecessários do código JavaScript para reduzir o tamanho do arquivo."
O que é `bundling` em JavaScript?,Bundling é o processo de combinar vários arquivos JavaScript em um único arquivo para reduzir o número de solicitações HTTP que o navegador precisa fazer.
O que é `tree shaking` em JavaScript?,Tree shaking é uma técnica para remover o código não utilizado de um pacote JavaScript durante o processo de bundling.
O que é `code splitting` em JavaScript?,Code splitting é uma técnica para dividir o código JavaScript em vários pacotes menores que podem ser carregados sob demanda.
O que é `garbage collection` em JavaScript?,Garbage collection é o processo automático de liberar memória que não está mais sendo usada por um programa.
Como funciona o `garbage collection` em JavaScript?,O garbage collector identifica objetos que não são mais acessíveis a partir da raiz do programa e libera a memória ocupada por esses objetos.
O que são `web workers` em JavaScript?,"Web workers permitem que você execute código JavaScript em segundo plano, sem bloquear a thread principal do navegador. Isso é útil para realizar tarefas computacionalmente intensivas ou demoradas sem comprometer a capacidade de resposta da interface do usuário."
Como você pode criar e usar um `web worker` em JavaScript?,Você cria um novo `web worker` usando o construtor `new Worker('caminhoDoArquivoWorker.js')`. Você pode enviar mensagens para o worker usando o método `postMessage()` e receber mensagens do worker usando o evento `onmessage`.
O que é `linting` em JavaScript?,"Linting é o processo de analisar o código JavaScript para identificar erros de sintaxe, erros de estilo e outras potenciais problemas."
Quais são algumas das ferramentas de `linting` populares para JavaScript?,"Algumas ferramentas populares incluem ESLint, JSHint e JSLint."
O que é `debugging` em JavaScript?,Debugging é o processo de identificar e corrigir erros no código JavaScript.
Quais são algumas das técnicas de `debugging` comuns para JavaScript?,"Algumas técnicas comuns incluem usar o objeto `console` para exibir mensagens de depuração, usar o debugger do navegador para pausar a execução do código e inspecionar variáveis, e usar ferramentas de linting para identificar erros de sintaxe e estilo."
O que são `unit tests` em JavaScript?,Unit tests são testes automatizados que verificam se pequenas unidades de código (como funções ou classes) funcionam corretamente.
Quais são algumas das ferramentas de `unit testing` populares para JavaScript?,"Algumas ferramentas populares incluem Jest, Mocha, Jasmine e Chai."
O que é `integration testing` em JavaScript?,Integration testing são testes automatizados que verificam se diferentes partes de um aplicativo JavaScript funcionam corretamente juntas.
O que são `end-to-end tests` (E2E tests) em JavaScript?,"End-to-end tests são testes automatizados que simulam a interação de um usuário com um aplicativo JavaScript, verificando se o aplicativo funciona corretamente do ponto de vista do usuário."
O que é `AJAX` (Asynchronous JavaScript and XML) em JavaScript?,"AJAX é uma técnica que permite que um aplicativo JavaScript faça solicitações HTTP para um servidor web em segundo plano, sem precisar recarregar a página inteira."
Como você pode fazer uma solicitação `AJAX` em JavaScript?,Você pode usar o objeto `XMLHttpRequest` ou a função `fetch()`.
Quais são os métodos HTTP comuns usados em solicitações `AJAX`?,"Os métodos HTTP comuns incluem `GET` (para obter dados), `POST` (para enviar dados), `PUT` (para atualizar dados) e `DELETE` (para excluir dados)."
O que é o `callback hell` (inferno de callbacks) em JavaScript?,Callback hell é uma situação em que o código JavaScript se torna difícil de ler e manter devido ao aninhamento excessivo de callbacks.
Como você pode evitar o `callback hell` em JavaScript?,"Você pode usar promises, async/await, ou técnicas de programação funcional para organizar o código assíncrono de forma mais legível."
O que são `design patterns` (padrões de projeto) em JavaScript?,Design patterns são soluções reutilizáveis para problemas comuns de design de software.
Quais são alguns dos `design patterns` comuns usados em JavaScript?,"Alguns padrões comuns incluem Singleton, Factory, Observer, Module e Revealing Module."
O que é o padrão `Singleton` em JavaScript?,O padrão Singleton garante que uma classe tenha apenas uma instância e fornece um ponto de acesso global a essa instância.
O que é o padrão `Factory` em JavaScript?,O padrão Factory fornece uma interface para criar objetos sem especificar suas classes concretas.
O que é o padrão `Observer` em JavaScript?,"O padrão Observer define uma dependência um-para-muitos entre objetos, de forma que, quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
O que é o padrão `Module` em JavaScript?,"O padrão Module encapsula código em um escopo privado, expondo apenas as funcionalidades necessárias."
O que é o padrão `Revealing Module` em JavaScript?,O padrão Revealing Module é uma variação do padrão Module que expõe apenas as funcionalidades desejadas através de um objeto retornado pela função do módulo.
O que é `Progressive Enhancement` (Aprimoramento Progressivo) em JavaScript?,"Progressive Enhancement é uma estratégia de design web que foca em fornecer uma experiência básica de qualidade para todos os usuários, independentemente do navegador ou dispositivo que estejam usando, e então adicionar recursos mais avançados para usuários com navegadores mais modernos."
O que é `Graceful Degradation` (Degradação Elegante) em JavaScript?,"Graceful Degradation é uma estratégia oposta ao Progressive Enhancement. Ela foca em construir um site com os recursos mais avançados primeiro e, em seguida, garantir que o site ainda funcione de forma razoável em navegadores mais antigos ou com menos recursos."
O que é `SEO` (Search Engine Optimization) e como o JavaScript pode afetá-lo?,SEO é o processo de otimizar um site para que ele apareça nos resultados de pesquisa de mecanismos de busca como o Google. O JavaScript pode afetar o SEO de um site se for usado para gerar conteúdo dinamicamente ou para criar sites que são difíceis para os mecanismos de busca rastrearem.
Como você pode otimizar seu código JavaScript para `SEO`?,"Você pode usar renderização do lado do servidor (SSR) ou pré-renderização para fornecer aos mecanismos de busca conteúdo HTML estático. Você também deve garantir que o site seja fácil de rastrear e indexar, e que o conteúdo seja relevante e de alta qualidade."
O que é `Accessibility` (Acessibilidade) e como o JavaScript pode afetá-la?,Acessibilidade é a prática de tornar sites e aplicativos utilizáveis por pessoas com deficiência. O JavaScript pode afetar a acessibilidade de um site se for usado para criar interfaces complexas que são difíceis para usuários com leitores de tela ou outras tecnologias assistivas navegarem.
Como você pode otimizar seu código JavaScript para `Accessibility`?,"Você deve usar marcação HTML semântica, fornecer alternativas de texto para imagens e outros elementos não textuais, e garantir que o site seja navegável com o teclado. Você também deve testar o site com leitores de tela e outras tecnologias assistivas."
Como declarar uma variável constante em JavaScript?,Utilize a palavra-chave `const` seguida pelo nome da variável e o valor inicial. Ex: `const minhaConstante = 10;`
Qual o propósito do operador `typeof` em JavaScript?,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando. Ex: `typeof 42` retorna `""number""`."
O que são closures em JavaScript?,"Closures são funções que lembram o ambiente lexical em que foram criadas, mesmo quando executadas fora desse ambiente. Isso significa que uma função interna pode acessar variáveis da função externa, mesmo depois que a função externa já terminou de executar."
Como criar um objeto literal em JavaScript?,"Utilize chaves `{}` para definir um objeto literal. Dentro das chaves, defina propriedades como `chave: valor`. Ex: `const pessoa = { nome: ""João"", idade: 30 };`"
Qual a função do método `parseInt()` em JavaScript?,`parseInt()` converte uma string em um número inteiro. Ele tenta analisar a string e retorna um inteiro ou `NaN` se a string não puder ser convertida.
Como verificar se um valor é um array em JavaScript?,Utilize o método `Array.isArray(valor)`. Ele retorna `true` se o valor for um array e `false` caso contrário.
Como converter um objeto JavaScript para uma string JSON?,Utilize o método `JSON.stringify(objeto)`. Ele retorna uma string JSON representando o objeto.
Como criar um array em JavaScript?,Existem duas formas principais: usando o literal `[]` (ex: `const meuArray = [];`) ou usando o construtor `new Array()` (ex: `const meuArray = new Array();`).
O que é o escopo de uma variável em JavaScript?,"O escopo de uma variável define onde a variável pode ser acessada e usada no código. JavaScript tem escopo global, escopo de função e escopo de bloco (introduzido com `let` e `const`)."
Como adicionar um novo elemento ao final de um array em JavaScript?,"Utilize o método `push()`. Ex: `meuArray.push(""novoElemento"");`"
Qual a finalidade do método `map()` em arrays JavaScript?,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida para cada elemento do array original.
O que é o operador spread (`...`) em JavaScript?,O operador spread permite expandir um iterável (como um array ou string) em locais onde múltiplos argumentos (para chamadas de função) ou múltiplos elementos (para literais de array) são esperados.
Como criar um loop `for...in` em JavaScript?,O loop `for...in` itera sobre as propriedades enumeráveis de um objeto. Ex: `for (let propriedade in objeto) { console.log(propriedade); }`
Qual a função do método `filter()` em arrays JavaScript?,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
Como declarar uma função em JavaScript?,"Utilize a palavra-chave `function` seguida pelo nome da função, parênteses `()` e chaves `{}` para o corpo da função. Ex: `function minhaFuncao() { ... }`"
Como remover um elemento específico de um array em JavaScript?,"Utilize o método `splice(indice, quantidade)`. Ex: `meuArray.splice(2, 1)` remove o elemento no índice 2."
Como comparar duas strings em JavaScript?,Utilize o operador `===` para comparar as strings diretamente.
O que é o evento `onload` em JavaScript?,"O evento `onload` é disparado quando um elemento (como uma página, imagem ou script) terminou de carregar."
Como parar a propagação de um evento em JavaScript?,Utilize o método `event.stopPropagation()`.
Como gerar um número aleatório entre 0 e 1 em JavaScript?,Utilize o método `Math.random()`.
Como acessar o comprimento de uma string em JavaScript?,Utilize a propriedade `length`. Ex: `minhaString.length`.
O que é o método `substring()` em strings JavaScript?,O método `substring()` retorna uma parte da string entre os índices especificados.
Como converter uma string para letras maiúsculas em JavaScript?,Utilize o método `toUpperCase()`. Ex: `minhaString.toUpperCase()`.
O que é o método `indexOf()` em strings JavaScript?,O método `indexOf()` retorna o índice da primeira ocorrência de um valor especificado em uma string. Retorna -1 se o valor não for encontrado.
Como verificar se uma string começa com uma determinada substring em JavaScript?,"Utilize o método `startsWith()`. Ex: `minhaString.startsWith(""substring"")`."
O que é o método `replace()` em strings JavaScript?,O método `replace()` substitui uma ocorrência de um valor em uma string por outro valor.
Como dividir uma string em um array de substrings em JavaScript?,"Utilize o método `split()`. Ex: `minhaString.split("","")`."
O que é o método `trim()` em strings JavaScript?,O método `trim()` remove os espaços em branco do início e do fim de uma string.
Como verificar se um elemento está presente em um array em JavaScript?,"Utilize o método `includes()`. Ex: `meuArray.includes(""elemento"")`."
O que é o método `find()` em arrays JavaScript?,O método `find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida.
Como encontrar o índice de um elemento em um array em JavaScript?,"Utilize o método `indexOf()`. Ex: `meuArray.indexOf(""elemento"")`."
O que é o método `slice()` em arrays JavaScript?,O método `slice()` retorna uma cópia de uma porção de um array em um novo array.
Como ordenar um array em JavaScript?,"Utilize o método `sort()`. Por padrão, ele ordena os elementos como strings. Para ordenar números, você pode fornecer uma função de comparação."
O que é o método `reverse()` em arrays JavaScript?,O método `reverse()` inverte a ordem dos elementos em um array.
Como verificar se um objeto tem uma determinada propriedade em JavaScript?,"Utilize o método `hasOwnProperty()`. Ex: `objeto.hasOwnProperty(""propriedade"")`."
O que é o conceito de Truthy e Falsy em JavaScript?,"Truthy e Falsy são valores que são avaliados como `true` ou `false` em um contexto booleano. Falsy incluem `0`, `""""`, `null`, `undefined`, `NaN`, e `false`. Todos os outros valores são Truthy."
Como usar template literals (template strings) em JavaScript?,"Use backticks (`) para delimitar a string e `${}` para inserir variáveis ou expressões. Ex: `const nome = ""João""; console.log(`Olá, ${nome}!`);`"
O que é o método `padStart()` em strings JavaScript?,"O método `padStart()` preenche o início de uma string com outro string (repetidamente, se necessário) para que a string resultante atinja um determinado comprimento."
Qual a finalidade do operador `??` (nullish coalescing operator) em JavaScript?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Caso contrário, retorna o operando do lado esquerdo."
Como criar um loop `while` em JavaScript?,Utilize a palavra-chave `while` seguida por uma condição entre parênteses e um bloco de código entre chaves. Ex: `while (condicao) { ... }`
Qual a diferença entre um loop `while` e um loop `do...while` em JavaScript?,"O loop `while` verifica a condição antes de executar o bloco de código, enquanto o loop `do...while` executa o bloco de código pelo menos uma vez, e depois verifica a condição."
Como interromper um loop em JavaScript?,Utilize a palavra-chave `break`.
Como pular para a próxima iteração de um loop em JavaScript?,Utilize a palavra-chave `continue`.
Como converter um número para uma string em JavaScript?,Utilize o método `toString()`. Ex: `numero.toString()`.
O que é o operador de módulo (%) em JavaScript?,O operador de módulo (%) retorna o resto da divisão de um número por outro.
Como usar comentários de uma linha e de múltiplas linhas em JavaScript?,Comentários de uma linha começam com `//`. Comentários de múltiplas linhas começam com `/*` e terminam com `*/`.
O que é o Strict Mode em JavaScript?,"O Strict Mode é um modo restrito que impõe regras mais rigorosas para o código JavaScript, ajudando a prevenir erros e a melhorar a segurança. Ative-o adicionando `""use strict"";` no início de um script ou função."
Como declarar uma variável com escopo global em JavaScript?,Declare a variável fora de qualquer função. Evite isso tanto quanto possível e prefira o escopo de bloco.
Como usar a função `setTimeout()` em JavaScript?,"A função `setTimeout(funcao, tempo)` executa uma função após um determinado tempo (em milissegundos)."
O que é a função `setInterval()` em JavaScript?,"A função `setInterval(funcao, tempo)` executa uma função repetidamente em intervalos regulares (em milissegundos)."
Como limpar um timeout definido com `setTimeout()` em JavaScript?,"Utilize a função `clearTimeout(timeoutId)`, onde `timeoutId` é o valor retornado por `setTimeout()`."
Como limpar um intervalo definido com `setInterval()` em JavaScript?,"Utilize a função `clearInterval(intervalId)`, onde `intervalId` é o valor retornado por `setInterval()`."
O que é o operador de exponenciação (**) em JavaScript?,O operador de exponenciação (**) eleva um número à potência de outro. Ex: `2 ** 3` retorna 8.
Como arredondar um número para o inteiro mais próximo em JavaScript?,Utilize o método `Math.round()`.
O que é o método `Math.floor()` em JavaScript?,O método `Math.floor()` retorna o maior inteiro menor ou igual a um número.
Como obter o valor absoluto de um número em JavaScript?,Utilize o método `Math.abs()`.
O que é o método `Math.ceil()` em JavaScript?,O método `Math.ceil()` retorna o menor inteiro maior ou igual a um número.
Como limitar o número de casas decimais de um número em JavaScript?,Utilize o método `toFixed(casasDecimais)`. Ex: `numero.toFixed(2)`.
O que é a função `eval()` em JavaScript?,A função `eval()` avalia uma string como código JavaScript. O uso de `eval()` geralmente é desencorajado devido a riscos de segurança.
Como lançar um erro em JavaScript?,"Utilize a palavra-chave `throw` seguida por um objeto de erro. Ex: `throw new Error(""Mensagem de erro"");`"
Como criar um objeto a partir de uma classe em JavaScript?,Utilize a palavra-chave `new` seguida pelo nome da classe e parênteses `()`. Ex: `const meuObjeto = new MinhaClasse();`
Como implementar herança em JavaScript?,Utilize a palavra-chave `extends` para indicar que uma classe herda de outra. Ex: `class SubClasse extends SuperClasse { ... }`
O que é o conceito de protótipo em JavaScript?,"Em JavaScript, cada objeto tem um protótipo. O protótipo é outro objeto do qual o objeto herda propriedades e métodos."
Como acessar o protótipo de um objeto em JavaScript?,Utilize a propriedade `__proto__` (embora geralmente seja recomendado usar `Object.getPrototypeOf()`).
O que é a função `Object.create()` em JavaScript?,A função `Object.create()` cria um novo objeto com um protótipo especificado.
Como clonar um objeto em JavaScript?,"Uma forma é usar o operador spread: `const novoObjeto = {...objetoOriginal}`.  Para objetos complexos, considere `JSON.parse(JSON.stringify(objetoOriginal))` ou `structuredClone()`."
O que é a função `Object.assign()` em JavaScript?,A função `Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto de destino.
Como detectar o tipo de navegador em JavaScript?,"A informação do navegador está disponível no objeto `navigator`. A propriedade `navigator.userAgent` fornece uma string contendo informações sobre o navegador. No entanto, essa abordagem pode ser pouco confiável."
Como obter a data e hora atual em JavaScript?,Crie um novo objeto `Date`. Ex: `const agora = new Date();`
"O que é o conceito de ""event bubbling"" em JavaScript?","Event bubbling é um processo no qual um evento disparado em um elemento DOM se propaga para cima na hierarquia do DOM, acionando os manipuladores de eventos dos elementos pai."
"O que é o conceito de ""event capturing"" em JavaScript?","Event capturing é o oposto de event bubbling. Em vez de começar no elemento alvo e subir na hierarquia, ele começa no elemento raiz e desce até o elemento alvo. É menos comum do que bubbling."
Como selecionar um elemento HTML pelo seu ID em JavaScript?,"Utilize o método `document.getElementById(""idDoElemento"")`."
Como selecionar elementos HTML por sua classe em JavaScript?,"Utilize o método `document.getElementsByClassName(""nomeDaClasse"")`. Ele retorna uma coleção de elementos."
Como selecionar elementos HTML por sua tag em JavaScript?,"Utilize o método `document.getElementsByTagName(""nomeDaTag"")`. Ele retorna uma coleção de elementos."
O que é o método `querySelector()` em JavaScript?,O método `querySelector()` retorna o primeiro elemento dentro do documento que corresponde ao seletor CSS especificado.
O que é o método `querySelectorAll()` em JavaScript?,O método `querySelectorAll()` retorna uma lista de todos os elementos dentro do documento que correspondem ao seletor CSS especificado.
Como alterar o texto de um elemento HTML em JavaScript?,"Utilize a propriedade `textContent` ou `innerText`. Ex: `elemento.textContent = ""Novo texto"";`"
Como alterar o HTML interno de um elemento HTML em JavaScript?,"Utilize a propriedade `innerHTML`. Ex: `elemento.innerHTML = ""<b>Novo HTML</b>"";`"
Como adicionar um novo elemento HTML ao DOM em JavaScript?,"Crie o elemento usando `document.createElement()`, configure suas propriedades e adicione-o ao DOM usando `appendChild()` ou `insertBefore()`."
Como remover um elemento HTML do DOM em JavaScript?,Utilize o método `removeChild()` do elemento pai.
Como alterar o estilo CSS de um elemento HTML em JavaScript?,"Utilize a propriedade `style` do elemento. Ex: `elemento.style.color = ""red"";`"
Como adicionar uma classe CSS a um elemento HTML em JavaScript?,"Utilize a propriedade `classList.add(""nomeDaClasse"")`."
Como remover uma classe CSS de um elemento HTML em JavaScript?,"Utilize a propriedade `classList.remove(""nomeDaClasse"")`."
Como verificar se um elemento HTML possui uma determinada classe CSS em JavaScript?,"Utilize a propriedade `classList.contains(""nomeDaClasse"")`."
Como alternar uma classe CSS em um elemento HTML em JavaScript?,"Utilize a propriedade `classList.toggle(""nomeDaClasse"")`."
Como adicionar um ouvinte de eventos a um elemento HTML em JavaScript?,"Utilize o método `addEventListener(""nomeDoEvento"", funcaoCallback)`."
Como remover um ouvinte de eventos de um elemento HTML em JavaScript?,"Utilize o método `removeEventListener(""nomeDoEvento"", funcaoCallback)`."
O que é o objeto `event` passado para um manipulador de eventos em JavaScript?,"O objeto `event` contém informações sobre o evento que foi disparado, como o tipo de evento, o elemento que disparou o evento e outras propriedades relacionadas ao evento."
O que é o método `preventDefault()` do objeto `event` em JavaScript?,"O método `preventDefault()` impede o comportamento padrão do evento. Por exemplo, impede que um link siga seu URL ou que um formulário seja enviado."
Como obter o elemento que disparou um evento em JavaScript?,Utilize a propriedade `event.target`.
Como obter as coordenadas do mouse em um evento de clique em JavaScript?,"Utilize as propriedades `event.clientX` e `event.clientY` para obter as coordenadas relativas à janela do navegador, ou `event.pageX` e `event.pageY` para obter as coordenadas relativas ao documento."
O que é a API `Fetch` em JavaScript (sem mencionar bibliotecas externas)?,A API `Fetch` fornece uma interface para buscar recursos através da rede. Ela é uma alternativa mais moderna e poderosa para o `XMLHttpRequest`.
Como fazer uma requisição GET usando a API `Fetch` em JavaScript?,"Utilize a função `fetch(""url"")` para fazer a requisição. Em seguida, use `.then()` para lidar com a resposta."
Como lidar com erros em uma requisição `Fetch` em JavaScript?,Utilize o método `.catch()` para capturar erros que ocorram durante a requisição.
Como enviar dados em uma requisição POST usando a API `Fetch` em JavaScript?,"Passe um objeto de opções para a função `fetch()` com o método definido como ""POST"" e o corpo da requisição configurado com os dados a serem enviados."
Como converter a resposta de uma requisição `Fetch` para JSON em JavaScript?,Utilize o método `.json()` na resposta. Ex: `resposta.json().then(data => { ... });`
Como lidar com o sucesso de uma Promise em JavaScript?,Utilize o método `.then(funcao)` para executar uma função quando a Promise for resolvida.
Como lidar com a falha de uma Promise em JavaScript?,Utilize o método `.catch(funcao)` para executar uma função quando a Promise for rejeitada.
Como usar `async` e `await` para lidar com operações assíncronas em JavaScript?,"Marque uma função como `async`, e dentro dela use `await` antes de uma Promise. Isso faz com que a execução da função espere até que a Promise seja resolvida antes de continuar."
Como lidar com erros ao usar `async` e `await` em JavaScript?,Envolva o código que usa `await` em um bloco `try...catch` para capturar erros que possam ser lançados pela Promise.
Como exportar funcionalidades de um módulo em JavaScript?,"Utilize a palavra-chave `export` antes da declaração da variável, função ou classe que você deseja exportar."
Como importar funcionalidades de um módulo em JavaScript?,"Utilize a palavra-chave `import` seguida pelo nome da variável, função ou classe que você deseja importar e a origem do módulo."
"Qual a diferença entre ""default exports"" e ""named exports"" em JavaScript?","""Default exports"" permitem exportar um único valor por módulo e importar sem usar chaves. ""Named exports"" permitem exportar múltiplos valores por módulo, e na importação deve-se usar chaves e o nome exato do valor exportado."
Como exibir uma mensagem no console do navegador em JavaScript?,"Utilize o método `console.log(""Mensagem"");`."
O que é o método `console.table()` em JavaScript?,O método `console.table()` exibe dados tabulares como tabelas formatadas no console.
Como usar flags em expressões regulares em JavaScript?,"As flags são usadas para modificar o comportamento da expressão regular. Algumas flags comuns incluem `i` (ignore case), `g` (global), e `m` (multiline). Ex: `/padrao/i`."
O que é o método `match()` de uma string em JavaScript (relacionado a RegEx)?,O método `match()` busca por uma correspondência de uma expressão regular em uma string. Retorna um array com as correspondências ou `null` se não houver correspondência.
O que é o método `replace()` de uma string em JavaScript (relacionado a RegEx)?,O método `replace()` substitui as correspondências de uma expressão regular em uma string por outra string.
Como criar um `Symbol` em JavaScript?,"Utilize a função `Symbol()`. Ex: `const meuSimbolo = Symbol(""descricao"");`"
Como criar um iterator em JavaScript?,Implemente um objeto com um método `next()` que retorna um objeto com as propriedades `value` e `done`.
Como criar um generator em JavaScript?,Utilize a sintaxe `function* minhaFuncaoGeradora() { yield valor; }`.
O que é a palavra-chave `yield` em generators JavaScript?,A palavra-chave `yield` pausa a execução do generator e retorna o valor especificado. A execução pode ser retomada posteriormente.
Como criar um WeakMap em JavaScript?,Utilize o construtor `new WeakMap()`.
Como criar um WeakSet em JavaScript?,Utilize o construtor `new WeakSet()`.
O que é o método `Proxy` em JavaScript?,"O objeto `Proxy` permite criar proxies para outros objetos, que podem interceptar e modificar operações fundamentais, como leitura de propriedades, atribuição, enumeração e chamadas de função."
Como criar um Proxy em JavaScript?,"Utilize o construtor `new Proxy(target, handler)`. `target` é o objeto que você está criando um proxy para, e `handler` é um objeto que define os traps (métodos) que interceptam as operações."
O que são os traps (handlers) em um Proxy JavaScript?,"Os traps são funções que interceptam operações específicas no objeto proxy, como `get`, `set`, `apply`, etc. Eles permitem personalizar o comportamento do proxy."
"O que é o padrão de projeto ""Revealing Module Pattern"" em JavaScript?",É um padrão de projeto para encapsular e organizar o código JavaScript.  Ele usa closures para manter o estado privado e retorna um objeto com acesso público a métodos selecionados.
"Como aplicar o ""Revealing Module Pattern"" em JavaScript?","Envolva o código em uma função anônima imediatamente invocada (IIFE). Dentro da função, declare variáveis e funções privadas. Retorne um objeto com apenas as funções que você deseja tornar públicas."
O que são tagged templates em JavaScript?,Tagged templates são uma forma de chamar uma função com um template literal. A função recebe um array de strings literais e um array de valores interpolados.
Como criar uma tagged template em JavaScript?,"Defina uma função que recebe um array de strings e um array de valores. Chame a função usando um template literal com a função como a ""tag"". Ex: `minhaFuncao`Hello, ${nome}!``"
O que é o operador de atribuição com desestruturação (destructuring assignment) em JavaScript?,Permite extrair valores de objetos ou arrays e atribuí-los a variáveis de forma concisa.
Como usar a atribuição com desestruturação em JavaScript com objetos?,"Utilize chaves `{}` para especificar as propriedades que você deseja extrair. Ex: `const { nome, idade } = pessoa;`"
