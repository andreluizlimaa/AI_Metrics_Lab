Pergunta,Resposta
Qual a diferença entre `null` e `undefined` em JavaScript?,"`null` é um valor de atribuição. Representa a ausência intencional de um valor. `undefined` significa que uma variável foi declarada, mas não recebeu nenhum valor."
O que é o conceito de hoisting em JavaScript?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis (com `var`) e funções para o topo do seu escopo antes da execução do código. Variáveis declaradas com `let` e `const` também sofrem hoisting, mas não são inicializadas."
Como você impede que o padrão de evento aconteça em JavaScript?,Usando o método `event.preventDefault()` dentro da função de tratamento do evento.
Qual a diferença entre `==` e `===` em JavaScript?,`==` compara valores após a conversão de tipo (se necessário). `===` compara valores e tipos de dados sem conversão de tipo.
O que é uma closure em JavaScript?,"Uma closure é a capacidade de uma função em JavaScript de ""lembrar"" o ambiente léxico em que foi criada, mesmo depois que a função pai já terminou de executar."
Como você pode verificar se uma variável é um array em JavaScript?,Usando `Array.isArray(variavel)`.
"Qual a diferença entre `var`, `let` e `const` na declaração de variáveis?","`var` tem escopo de função ou global, `let` e `const` têm escopo de bloco. `const` também exige que a variável seja inicializada e não pode ser reatribuída depois."
O que é o operador ternário em JavaScript?,É uma forma abreviada de escrever uma instrução `if...else`. Sua sintaxe é: `condição ? expressão_se_verdadeiro : expressão_se_falso`.
Como você itera sobre as propriedades de um objeto em JavaScript?,Usando um loop `for...in`.
O que é o método `map()` em arrays?,`map()` cria um novo array com os resultados da chamada de uma função fornecida para cada elemento no array original.
Qual a função do método `reduce()` em arrays?,`reduce()` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.
Como você pode criar um objeto em JavaScript?,Usando a notação literal de objeto `{}` ou usando o construtor `new Object()`.
O que é o método `filter()` em arrays?,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
Como você pode remover elementos duplicados de um array em JavaScript?,"Usando `[...new Set(array)]` ou `array.filter((item, index) => array.indexOf(item) === index)`."
O que é o método `find()` em arrays?,"`find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
"Qual a diferença entre `call()`, `apply()` e `bind()` em JavaScript?","`call()` e `apply()` invocam uma função com um determinado valor `this` e argumentos (separados por vírgula em `call()` e em um array em `apply()`). `bind()` retorna uma nova função com o valor `this` especificado, sem invocar a função original imediatamente."
O que é o uso de template literals (template strings) em JavaScript?,Template literals (usando crases ``) permitem a interpolação de strings e multilinhas de forma mais legível.
Como você pode converter uma string em um número em JavaScript?,"Usando `parseInt()`, `parseFloat()` ou o operador unário `+`."
O que é o conceito de event bubbling em JavaScript?,Event bubbling é quando um evento disparado em um elemento HTML também se propaga para seus elementos pai.
Como você para a propagação de um evento em JavaScript?,Usando o método `event.stopPropagation()` dentro da função de tratamento do evento.
O que é o objeto `arguments` em JavaScript?,"Dentro de uma função, `arguments` é um objeto semelhante a um array que contém todos os argumentos passados para a função."
Como você declara uma função anônima em JavaScript?,`function() { // código da função }`.
O que é uma função de ordem superior em JavaScript?,É uma função que recebe outras funções como argumentos ou retorna uma função como resultado.
Qual a diferença entre `forEach()` e `map()` em arrays?,"`forEach()` itera sobre os elementos de um array, mas não retorna um novo array. `map()` itera sobre os elementos e retorna um novo array com os resultados da função aplicada a cada elemento."
O que é JSON e como é usado em JavaScript?,"JSON (JavaScript Object Notation) é um formato de dados leve e legível para humanos. Em JavaScript, é usado para transmitir dados entre um servidor e um cliente (geralmente através de APIs)."
Como você converte um objeto JavaScript em JSON?,Usando `JSON.stringify(objeto)`.
Como você converte uma string JSON em um objeto JavaScript?,Usando `JSON.parse(string)`.
O que é o operador `typeof` em JavaScript?,É um operador que retorna uma string indicando o tipo de dado de um operando.
Como você pode verificar se um objeto tem uma propriedade específica em JavaScript?,Usando o operador `in` ou o método `hasOwnProperty()`.
O que é o `this` em JavaScript?,`this` se refere ao objeto que está executando o código JavaScript atual. Seu valor depende de como a função é chamada.
O que são arrow functions em JavaScript?,"São uma forma mais concisa de escrever funções, introduzidas no ES6. Elas têm uma sintaxe mais curta e não têm seu próprio `this`."
Como você lida com erros em JavaScript?,Usando blocos `try...catch...finally`.
O que é o bloco `finally` em um bloco `try...catch`?,"O bloco `finally` sempre é executado após os blocos `try` e `catch`, independentemente de um erro ter ocorrido ou não."
Como você lança um erro manualmente em JavaScript?,"Usando a instrução `throw new Error(""Mensagem de erro"")`."
O que são Promises em JavaScript?,Promises são objetos que representam a eventual conclusão (ou falha) de uma operação assíncrona e seu valor resultante.
Quais são os estados de uma Promise?,"Pending (pendente), Fulfilled (cumprida) e Rejected (rejeitada)."
Como você lida com o resultado de uma Promise?,Usando os métodos `.then()` (para sucesso) e `.catch()` (para falha).
O que é `async/await` em JavaScript?,"`async/await` é uma sintaxe para lidar com Promises de forma mais síncrona e legível. `async` declara uma função assíncrona, e `await` pausa a execução da função até que uma Promise seja resolvida."
O que são módulos em JavaScript?,Módulos são arquivos JavaScript que exportam e importam funcionalidades para outros arquivos.
Como você exporta funcionalidades de um módulo em JavaScript?,"Usando `export` (pode ser `export default` para exportar um único valor padrão ou `export { nome1, nome2 }` para exportar múltiplos valores)."
Como você importa funcionalidades de um módulo em JavaScript?,"Usando `import` (pode ser `import valorPadrao from './modulo.js'` ou `import { nome1, nome2 } from './modulo.js'`)."
O que é o DOM em JavaScript?,"DOM (Document Object Model) é uma representação em árvore da estrutura de um documento HTML ou XML, permitindo que JavaScript acesse e manipule o conteúdo, a estrutura e o estilo do documento."
Como você seleciona um elemento HTML pelo ID usando JavaScript?,"Usando `document.getElementById(""idDoElemento"")`."
Como você seleciona elementos HTML por classe usando JavaScript?,"Usando `document.getElementsByClassName(""nomeDaClasse"")`."
Como você seleciona elementos HTML por tag name usando JavaScript?,"Usando `document.getElementsByTagName(""nomeDaTag"")`."
Como você adiciona um novo elemento HTML ao DOM usando JavaScript?,"Primeiro, crie o elemento com `document.createElement(""tagName"")`. Depois, adicione-o ao DOM usando métodos como `appendChild()`, `insertBefore()`, etc."
Como você altera o texto de um elemento HTML usando JavaScript?,Acessando a propriedade `textContent` ou `innerText` do elemento.
Como você adiciona um atributo a um elemento HTML usando JavaScript?,"Usando o método `setAttribute(""nomeDoAtributo"", ""valorDoAtributo"")`."
Como você remove um atributo de um elemento HTML usando JavaScript?,"Usando o método `removeAttribute(""nomeDoAtributo"")`."
Como você adiciona um evento a um elemento HTML usando JavaScript?,"Usando o método `addEventListener(""nomeDoEvento"", funcaoDeCallback)`."
O que é o event loop em JavaScript?,"O event loop é um mecanismo que permite que o JavaScript, que é single-threaded (executa uma tarefa por vez), execute operações assíncronas de forma eficiente."
O que são callbacks em JavaScript?,Callbacks são funções passadas como argumentos para outras funções e são executadas quando a função principal termina sua execução.
Qual a diferença entre funções síncronas e assíncronas?,Funções síncronas bloqueiam a execução do código até que terminem. Funções assíncronas permitem que o código continue a ser executado enquanto esperam que a operação assíncrona seja concluída.
O que é o método `setTimeout()` em JavaScript?,`setTimeout()` agenda a execução de uma função após um determinado período de tempo (em milissegundos).
O que é o método `setInterval()` em JavaScript?,`setInterval()` repete a execução de uma função em intervalos regulares (em milissegundos).
Como você para a execução de um `setInterval()`?,Usando `clearInterval(idDoIntervalo)`.
O que é o método `clearTimeout()` em JavaScript?,`clearTimeout()` cancela um timeout definido com `setTimeout()`.
Qual a diferença entre funções declaradas e expressões de função?,"Funções declaradas são hoisted (elevadas ao topo do escopo), enquanto expressões de função não são hoisted."
O que é um Immediately Invoked Function Expression (IIFE)?,É uma função JavaScript que é executada assim que é definida.
Qual é o propósito de um IIFE?,Criar um escopo privado para evitar conflitos de nomes de variáveis com o escopo global.
O que é o modo strict em JavaScript?,"É um modo que aplica regras mais rígidas ao código JavaScript, ajudando a prevenir erros comuns e a otimizar o desempenho."
Como você ativa o modo strict em JavaScript?,"Adicionando a string `""use strict"";` no início de um script ou função."
O que são template literals tagged?,"São template literals precedidas por uma função (a tag), que pode processar o template literal antes de retornar a string final."
Como você cria uma template literal tagged?,`tag\`String com ${variavel}\``
O que é a spread syntax (...) em JavaScript?,A spread syntax permite expandir um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados.
Como você usa a spread syntax para copiar um array?,`const novoArray = [...arrayOriginal]`
Como você usa a spread syntax para juntar dois arrays?,"`const arrayFinal = [...array1, ...array2]`"
O que é o rest parameter em JavaScript?,O rest parameter permite que uma função aceite um número indefinido de argumentos como um array.
Como você usa o rest parameter em uma função?,`function minhaFuncao(...args) { // args é um array com os argumentos passados }`
O que é destructuring em JavaScript?,Destructuring é uma forma de extrair valores de objetos ou arrays e atribuí-los a variáveis.
Como você usa destructuring para extrair valores de um objeto?,"`const { propriedade1, propriedade2 } = objeto`"
Como você usa destructuring para extrair valores de um array?,"`const [elemento1, elemento2] = array`"
O que são object literals enhanced em JavaScript?,"São formas mais concisas de criar objetos, como omitir a propriedade e o valor se tiverem o mesmo nome e usar nomes de métodos mais curtos."
Como você usa shorthand property names em object literals enhanced?,"`const nome = ""João""; const idade = 30; const pessoa = { nome, idade };`"
O que são default parameters em funções JavaScript?,São valores padrão atribuídos a parâmetros de função se nenhum valor for passado quando a função for chamada.
Como você define um default parameter em uma função?,`function minhaFuncao(parametro = valorPadrao) { // ... }`
O que são generators em JavaScript?,"Generators são funções que podem ser pausadas e retomadas, permitindo a criação de iteradores personalizados."
Como você declara uma função generator em JavaScript?,`function* minhaFuncaoGenerator() { // ... yield valor; }`
O que é a palavra-chave `yield` em generators?,`yield` pausa a execução da função generator e retorna um valor.
O que é o método `next()` em um objeto generator?,`next()` retoma a execução da função generator até o próximo `yield` ou até o final da função.
O que são iterators em JavaScript?,Iterators são objetos que definem uma sequência e um valor de retorno ao final dessa sequência.
Qual o método fundamental para criar um iterator?,O método `next()`.
O que é um símbolo em JavaScript?,"Um símbolo é um tipo de dado primitivo único e imutável, usado principalmente como chaves de propriedade de objeto para evitar colisões de nomes."
Como você cria um símbolo em JavaScript?,"`const meuSimbolo = Symbol(""descrição"")`"
Qual a finalidade de usar símbolos como chaves de propriedades de objeto?,"Criar propriedades privadas, pois elas não são acessíveis por métodos convencionais de iteração."
O que são WeakMaps e WeakSets em JavaScript?,"WeakMaps e WeakSets são coleções que mantêm referências ""fracas"" para objetos. Isso significa que, se não houver outras referências para um objeto contido em um WeakMap ou WeakSet, o objeto pode ser coletado pelo garbage collector."
Qual a principal diferença entre um Map e um WeakMap?,"As chaves de um WeakMap precisam ser objetos, enquanto as chaves de um Map podem ser de qualquer tipo de dado."
Qual a principal diferença entre um Set e um WeakSet?,Um WeakSet só pode conter objetos e não é iterável.
O que é a propriedade `prototype` em JavaScript?,É um objeto associado a cada função que serve como um modelo para outros objetos.
Como você usa o prototype para adicionar métodos a todos os objetos de um determinado tipo?,`TipoDeObjeto.prototype.novoMetodo = function() { // código do método }`
O que é herança prototipal em JavaScript?,É um mecanismo onde objetos herdam propriedades e métodos de outros objetos através da cadeia de protótipos.
O que é a palavra-chave `super` em JavaScript?,`super` é usado para chamar funções no objeto pai de uma classe.
Como você usa `super()` em um construtor de classe?,`super()` chama o construtor da classe pai.
O que são classes em JavaScript (ES6)?,"Classes são uma forma de sintaxe mais clara para criar objetos e lidar com herança em JavaScript, baseada no sistema de protótipos existente."
Como você define uma classe em JavaScript?,`class MinhaClasse { constructor() { } }`
O que é um construtor em uma classe JavaScript?,É um método especial dentro de uma classe que é executado quando um novo objeto da classe é criado.
O que são métodos estáticos em classes JavaScript?,"Métodos estáticos são métodos que pertencem à classe em si, em vez de instâncias da classe."
Como você define um método estático em uma classe JavaScript?,`static meuMetodoEstatico() { // código do método }`
O que são getters e setters em classes JavaScript?,Getters e setters são métodos especiais que permitem controlar o acesso e a modificação de propriedades de objetos.
Como você define um getter em uma classe JavaScript?,`get minhaPropriedade() { // código para retornar o valor da propriedade }`
Como você define um setter em uma classe JavaScript?,`set minhaPropriedade(valor) { // código para definir o valor da propriedade }`
O que é o método `Object.create()` em JavaScript?,`Object.create()` cria um novo objeto com o objeto especificado como protótipo.
O que é o método `Object.assign()` em JavaScript?,`Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto destino.
O que é o método `Object.keys()` em JavaScript?,`Object.keys()` retorna um array com os nomes de todas as propriedades enumeráveis de um objeto.
O que é o método `Object.values()` em JavaScript?,`Object.values()` retorna um array com os valores de todas as propriedades enumeráveis de um objeto.
O que é o método `Object.entries()` em JavaScript?,"`Object.entries()` retorna um array de arrays, onde cada sub-array contém um par chave/valor de um objeto."
O que são regular expressions (regex) em JavaScript?,Regular expressions são padrões usados para corresponder a combinações de caracteres em strings.
Como você cria uma regular expression em JavaScript?,"Usando a sintaxe literal `/padrão/` ou o construtor `new RegExp(""padrão"")`."
O que é o método `test()` de uma regular expression?,`test()` verifica se uma string corresponde ao padrão da regular expression e retorna `true` ou `false`.
O que é o método `exec()` de uma regular expression?,`exec()` executa uma busca por uma correspondência em uma string e retorna um array com informações sobre a correspondência ou `null` se não houver correspondência.
O que é o método `match()` de uma string?,`match()` busca por uma correspondência de uma regular expression em uma string e retorna um array com os resultados ou `null` se não houver correspondência.
O que são quantificadores em regular expressions?,"Quantificadores especificam quantas ocorrências de um caractere, grupo ou classe de caracteres devem estar presentes para que haja uma correspondência."
Dê um exemplo de um quantificador em regular expressions.,"`*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `{n}` (exatamente n ocorrências), `{n,}` (n ou mais ocorrências), `{n,m}` (entre n e m ocorrências)."
O que são character classes em regular expressions?,Character classes definem um conjunto de caracteres que podem ser usados para corresponder a um único caractere em uma string.
Dê um exemplo de uma character class em regular expressions.,"`.` (qualquer caractere, exceto quebras de linha), `\d` (dígito), `\w` (caractere alfanumérico ou underscore), `\s` (espaço em branco), `[abc]` (qualquer caractere entre a, b ou c), `[^abc]` (qualquer caractere diferente de a, b ou c)."
O que são capturing groups em regular expressions?,Capturing groups são partes de uma regular expression que são cercadas por parênteses `()` e que capturam a parte da string que corresponde a esse grupo.
Como você acessa os capturing groups em JavaScript?,Os grupos capturados são armazenados em um array retornado pelo método `exec()` ou `match()`.
O que são lookarounds em regular expressions?,"Lookarounds são construções que permitem corresponder a um padrão com base no que vem antes ou depois dele, sem incluir esses caracteres no resultado da correspondência."
O que é um positive lookahead em regular expressions?,Um positive lookahead `(?=...)` corresponde a um padrão somente se for seguido pelo padrão especificado.
O que é um negative lookahead em regular expressions?,Um negative lookahead `(?!...)` corresponde a um padrão somente se não for seguido pelo padrão especificado.
O que é um positive lookbehind em regular expressions?,Um positive lookbehind `(?<=...)` corresponde a um padrão somente se for precedido pelo padrão especificado.
O que é um negative lookbehind em regular expressions?,Um negative lookbehind `(?<!...)` corresponde a um padrão somente se não for precedido pelo padrão especificado.
O que são flags em regular expressions?,Flags são opções que modificam o comportamento de uma regular expression.
Dê exemplos de flags em regular expressions.,"`g` (global), `i` (ignore case), `m` (multiline), `s` (dotall), `u` (unicode), `y` (sticky)."
O que é um Named Capture Group?,"Um Named Capture Group, permite dar um nome para um grupo de captura da Regex."
Como definir e referenciar um Named Capture Group em JavaScript?,"`(?<nomeDoGrupo>...)` para definir e referenciar com `match.groups.nomeDoGrupo`.

Espero que estas perguntas e respostas sejam úteis para aprofundar seu conhecimento em JavaScript!"
O que é o operador `void` em JavaScript e qual sua principal utilidade?,"O operador `void` avalia uma expressão e retorna `undefined`. Sua principal utilidade é evitar que o resultado de uma expressão, como um `<a>` com `href=""javascript:...""`, sobrescreva o conteúdo da página."
Explique a diferença entre `null` e `undefined` em JavaScript.,"`null` é um valor de atribuição que representa a ausência intencional de um valor. `undefined` significa que uma variável foi declarada, mas ainda não recebeu um valor."
O que é uma closure em JavaScript e como ela funciona?,"Uma closure é a capacidade de uma função em JavaScript de ""lembrar"" e acessar variáveis do escopo léxico em que foi criada, mesmo após a função externa ter retornado. Funciona mantendo uma referência para o escopo léxico externo."
O que é hoisting em JavaScript?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis (com `var`) e funções para o topo de seus respectivos escopos antes da execução do código.  Atenção: apenas a *declaração* é movida, não a inicialização (atribuição de valor)."
Como você pode verificar se um objeto é um array em JavaScript?,Usando `Array.isArray(objeto)` ou `objeto instanceof Array`.  `Array.isArray()` é a forma mais confiável.
O que é o `use strict` em JavaScript?,"`use strict` é uma diretiva que habilita o modo estrito do JavaScript, impondo regras mais rígidas e ajudando a evitar erros comuns."
Explique o que é o método `bind()` em JavaScript.,"`bind()` cria uma nova função com o `this` definido para um valor específico, permitindo que você defina o contexto de execução da função."
Qual a finalidade dos métodos `call()` e `apply()` em JavaScript?,"`call()` e `apply()` são usados para invocar uma função com um valor `this` específico e argumentos. `call()` recebe argumentos individualmente, enquanto `apply()` recebe um array de argumentos."
O que é o prototype em JavaScript?,O prototype é um objeto associado a cada função e objeto em JavaScript. Permite que objetos herdem propriedades e métodos de seu prototype.
Como funciona a herança prototipal em JavaScript?,"A herança prototipal funciona criando uma cadeia de prototypes, onde cada objeto herda propriedades e métodos do prototype do objeto pai. Isso é feito definindo o prototype de um objeto como uma instância de outro objeto."
Qual a diferença entre uma função declarada (`function myFunction() {}`) e uma expressão de função (`var myFunction = function() {}`) em JavaScript?,"Funções declaradas são hoisted, o que significa que podem ser chamadas antes de sua declaração no código. Expressões de função não são hoisted e devem ser definidas antes de serem chamadas."
O que são Immediately Invoked Function Expressions (IIFE) em JavaScript?,IIFEs são funções que são executadas imediatamente após sua criação. São usadas para criar um escopo isolado e evitar a poluição do escopo global.
O que são getters e setters em JavaScript?,"Getters e setters são métodos especiais que permitem controlar o acesso e a modificação de propriedades de um objeto. Getters retornam o valor de uma propriedade, enquanto setters definem o valor de uma propriedade."
Como você pode clonar um objeto em JavaScript?,"Superficialmente: usando `Object.assign({}, objeto)` ou o operador spread `{...objeto}`. Profundamente: usando JSON.parse(JSON.stringify(objeto)) (com limitações) ou bibliotecas especializadas."
O que são eventos em JavaScript?,"Eventos são ações ou ocorrências que acontecem no navegador (como cliques, pressionamentos de tecla, carregamento de página) às quais o JavaScript pode reagir."
Como você adiciona um event listener a um elemento HTML em JavaScript?,"Usando o método `addEventListener()` do elemento.  Por exemplo: `elemento.addEventListener('click', function() { ... });`"
O que é o bubbling e capturing de eventos em JavaScript?,"Bubbling é quando um evento acionado em um elemento se propaga para seus elementos pai na árvore DOM. Capturing é o oposto, onde o evento é acionado no elemento raiz e se propaga para baixo até o elemento alvo."
O que é o método `preventDefault()` em JavaScript?,"`preventDefault()` impede o comportamento padrão de um evento, como o envio de um formulário ou a navegação para um link."
O que é o objeto `this` em JavaScript e como seu valor é determinado?,"`this` refere-se ao contexto de execução atual. Seu valor é determinado pela forma como a função é chamada. Pode referir-se ao objeto global (em modo não estrito), ao objeto que chamou o método, ou ao objeto especificado com `call()`, `apply()` ou `bind()`."
O que são templates strings (template literals) em JavaScript?,Template strings são strings delimitadas por crases (``) que permitem interpolação de variáveis e expressões dentro da string usando `${...}`.
Explique o operador spread (...) em JavaScript.,O operador spread permite expandir um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados. Também pode ser usado para criar cópias de objetos.
O que são arrow functions em JavaScript e como elas se diferenciam das funções tradicionais?,Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas têm uma sintaxe mais curta e não têm seu próprio `this` (herdam o `this` do contexto circundante). Também não possuem o objeto `arguments`.
Como você lida com operações assíncronas em JavaScript usando Promises?,Usando os métodos `then()` (para lidar com o sucesso) e `catch()` (para lidar com a falha) de uma Promise.
O que são async/await em JavaScript?,"`async/await` são palavras-chave que tornam o código assíncrono mais fácil de ler e escrever. `async` define uma função como assíncrona, e `await` pausa a execução da função até que uma Promise seja resolvida."
O que é o operador `??` (nullish coalescing operator) em JavaScript?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo. É diferente de `||`, que retorna o operando do lado direito se o operando do lado esquerdo for falsy (incluindo `0`, `""""`, `false`)."
O que é o operador `?.` (optional chaining operator) em JavaScript?,"O operador `?.` permite acessar propriedades profundamente aninhadas de um objeto sem ter que verificar se cada nível existe. Se qualquer propriedade no caminho for `null` ou `undefined`, a expressão retorna `undefined` em vez de lançar um erro."
O que é o objeto `Map` em JavaScript?,"O objeto `Map` armazena pares chave-valor, onde as chaves podem ser de qualquer tipo de dado (ao contrário de objetos JavaScript tradicionais, onde as chaves são strings ou símbolos). Maps também mantêm a ordem de inserção das chaves."
O que é o objeto `Set` em JavaScript?,O objeto `Set` armazena valores únicos de qualquer tipo de dado. Sets são úteis para remover duplicatas de um array.
O que é o método `Object.freeze()` em JavaScript?,"O método `Object.freeze()` congela um objeto, tornando-o imutável. Novas propriedades não podem ser adicionadas, as propriedades existentes não podem ser removidas e seus valores não podem ser alterados."
O que é o método `Object.seal()` em JavaScript?,"O método `Object.seal()` sela um objeto, impedindo que novas propriedades sejam adicionadas e as propriedades existentes sejam removidas. No entanto, os valores das propriedades existentes ainda podem ser alterados."
O que é o método `Object.defineProperty()` em JavaScript?,"O método `Object.defineProperty()` define uma nova propriedade diretamente em um objeto ou modifica uma propriedade existente e retorna o objeto.  Permite um controle mais fino sobre a criação de propriedades (configurabilidade, enumerabilidade, writability)."
O que é o JSON (JavaScript Object Notation)?,JSON é um formato leve para troca de dados. É baseado em um subconjunto da linguagem JavaScript e é facilmente legível por humanos e máquinas.
Como você converte um objeto JavaScript em uma string JSON e vice-versa?,Usando os métodos `JSON.stringify()` (para converter um objeto em uma string JSON) e `JSON.parse()` (para converter uma string JSON em um objeto JavaScript).
O que são cookies em JavaScript?,"Cookies são pequenos arquivos de texto que os sites armazenam no computador do usuário para lembrar informações sobre ele, como preferências de login ou itens em um carrinho de compras."
"Como você define, lê e remove cookies usando JavaScript?","Definir: `document.cookie = ""nome=valor; expires=DataExpiracao; path=/"";` Ler: `document.cookie;` Remover: Definir um cookie com a mesma chave e uma data de expiração no passado."
O que é o localStorage e sessionStorage em JavaScript?,"localStorage e sessionStorage são APIs de armazenamento web que permitem armazenar dados localmente no navegador do usuário. localStorage armazena dados persistentemente (até que sejam removidos), enquanto sessionStorage armazena dados apenas durante a sessão do navegador."
Qual a diferença entre localStorage e sessionStorage?,"localStorage persiste os dados entre sessões do navegador, enquanto sessionStorage armazena dados apenas para a sessão atual. Quando a aba ou janela do navegador é fechada, os dados do sessionStorage são apagados."
O que é o DOM (Document Object Model)?,"O DOM é uma representação estruturada de um documento HTML ou XML como uma árvore de objetos. Ele permite que o JavaScript acesse e manipule o conteúdo, a estrutura e o estilo de um documento."
Como você seleciona elementos HTML usando JavaScript?,"Usando métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`, `document.querySelector()` e `document.querySelectorAll()`."
Como você modifica o conteúdo de um elemento HTML usando JavaScript?,"Usando as propriedades `innerHTML`, `textContent` ou `innerText` do elemento."
Como você adiciona e remove classes CSS de um elemento HTML usando JavaScript?,"Usando as propriedades `classList.add()`, `classList.remove()` e `classList.toggle()` do elemento."
Como você cria um novo elemento HTML usando JavaScript?,Usando o método `document.createElement()` para criar o elemento e `appendChild()` ou `insertBefore()` para adicioná-lo ao DOM.
Como você remove um elemento HTML do DOM usando JavaScript?,Usando o método `removeChild()` do elemento pai ou `remove()` do próprio elemento.
O que é o atributo `data-*` em HTML e como você o acessa usando JavaScript?,`data-*` são atributos personalizados que você pode adicionar a elementos HTML para armazenar dados adicionais. Você pode acessá-los usando a propriedade `dataset` do elemento.
O que é o `requestAnimationFrame()` em JavaScript?,`requestAnimationFrame()` agenda uma função para ser executada antes da próxima repintura do navegador. É usado para criar animações suaves e otimizadas.
O que são módulos em JavaScript (ES Modules)?,Módulos são arquivos JavaScript que podem importar e exportar funcionalidades para outros arquivos. Eles ajudam a organizar o código em partes reutilizáveis e evitam a poluição do escopo global.
Como você importa e exporta funcionalidades em módulos JavaScript (ES Modules)?,"Usando as palavras-chave `import` e `export`.  `export` marca as variáveis/funções/classes que devem ser acessíveis de fora do módulo, e `import` importa esses elementos de outros módulos."
Qual a diferença entre `export default` e `export` (named exports) em JavaScript?,`export default` define uma exportação padrão para um módulo. Cada módulo pode ter apenas uma exportação padrão. `export` (named exports) permite exportar vários valores com nomes específicos.
O que é a função `eval()` em JavaScript e quais os seus riscos?,"`eval()` executa uma string como código JavaScript. É considerado perigoso porque pode executar código arbitrário, tornando seu aplicativo vulnerável a ataques de injeção de código."
Como você cancela um `setTimeout()` ou `setInterval()` em JavaScript?,Usando as funções `clearTimeout()` (para cancelar um `setTimeout()`) e `clearInterval()` (para cancelar um `setInterval()`).
O que são expressões regulares (RegEx) em JavaScript?,"Expressões regulares são padrões que descrevem um conjunto de strings. Elas são usadas para pesquisar, substituir e validar strings em JavaScript."
Como você cria uma expressão regular em JavaScript?,Usando a notação literal `/padrão/` ou o construtor `new RegExp('padrão')`.
Quais são alguns métodos comuns de string que usam expressões regulares em JavaScript?,"`search()`, `match()`, `replace()` e `split()`."
O que são erros `TypeError` em JavaScript?,"Erros `TypeError` ocorrem quando uma operação é realizada em um valor de um tipo inesperado, por exemplo, chamar um método em um valor `undefined` ou `null`."
O que são erros `ReferenceError` em JavaScript?,Erros `ReferenceError` ocorrem quando você tenta usar uma variável que não foi declarada.
O que são erros `SyntaxError` em JavaScript?,"Erros `SyntaxError` ocorrem quando o código JavaScript não está sintaticamente correto, ou seja, viola as regras da linguagem."
Como você pode tratar erros em JavaScript?,"Usando blocos `try...catch`. O código que pode gerar um erro é colocado dentro do bloco `try`, e o código que lida com o erro é colocado dentro do bloco `catch`."
O que é o bloco `finally` em um bloco `try...catch` em JavaScript?,"O bloco `finally` é executado sempre, independentemente de ocorrer um erro ou não no bloco `try`. É usado para realizar ações de limpeza, como fechar arquivos ou liberar recursos."
O que é o objeto `console` em JavaScript?,"O objeto `console` fornece acesso ao console de depuração do navegador. Ele é usado para exibir mensagens, avisos e erros, bem como para registrar informações sobre o código em execução."
Quais são alguns métodos comuns do objeto `console` em JavaScript?,"`console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()` e `console.timeEnd()`."
O que é o método `debugger` em JavaScript?,"O método `debugger` insere um ponto de interrupção no código, permitindo que você depure o código usando as ferramentas de desenvolvedor do navegador."
Quais são os tipos de dados primitivos em JavaScript?,"`string`, `number`, `boolean`, `null`, `undefined`, `symbol` e `bigint`."
O que é a coerção de tipo em JavaScript?,Coerção de tipo é a conversão automática de um tipo de dado para outro pelo JavaScript.
O que são valores truthy e falsy em JavaScript?,"Valores truthy são valores que são avaliados como `true` em um contexto booleano (por exemplo, `1`, `""hello""`, `[]`, `{}`). Valores falsy são valores que são avaliados como `false` em um contexto booleano (por exemplo, `0`, `""""`, `null`, `undefined`, `NaN`)."
O que é o operador ternário (condicional) em JavaScript?,O operador ternário é uma forma concisa de escrever uma instrução `if...else`. Sua sintaxe é `condição ? expressão1 : expressão2`.
O que é o operador vírgula em JavaScript?,O operador vírgula avalia cada um de seus operandos (da esquerda para a direita) e retorna o valor do último operando.
O que são labels em JavaScript?,Labels são identificadores que podem ser usados com as instruções `break` e `continue` para controlar o fluxo de loops aninhados.
O que é o método `Array.map()` em JavaScript?,`Array.map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `Array.filter()` em JavaScript?,`Array.filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `Array.reduce()` em JavaScript?,`Array.reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o método `Array.forEach()` em JavaScript?,`Array.forEach()` executa uma função fornecida uma vez para cada elemento no array.  Não retorna nada.
O que é o método `Array.sort()` em JavaScript?,"`Array.sort()` ordena os elementos de um array no local e retorna o array ordenado. Por padrão, a ordenação é alfabética e ascendente."
O que é o método `Array.slice()` em JavaScript?,`Array.slice()` retorna uma cópia rasa de uma porção de um array em um novo array.
O que é o método `Array.splice()` em JavaScript?,`Array.splice()` altera o conteúdo de um array removendo ou substituindo elementos existentes e/ou adicionando novos elementos no local.
O que é o método `Array.concat()` em JavaScript?,`Array.concat()` retorna um novo array contendo a junção de dois ou mais arrays.
O que é o método `Array.indexOf()` em JavaScript?,"`Array.indexOf()` retorna o primeiro índice em que um determinado elemento pode ser encontrado no array, ou -1 se não estiver presente."
O que é o método `Array.includes()` em JavaScript?,"`Array.includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado."
O que é o método `String.substring()` em JavaScript?,`String.substring()` retorna uma parte da string entre dois índices especificados.
O que é o método `String.slice()` em JavaScript?,"`String.slice()` retorna uma parte da string entre dois índices especificados. Semelhante ao `substring`, mas aceita índices negativos."
O que é o método `String.replace()` em JavaScript?,`String.replace()` retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por um substituto.
O que é o método `String.toUpperCase()` em JavaScript?,`String.toUpperCase()` retorna a string convertida para maiúsculas.
O que é o método `String.toLowerCase()` em JavaScript?,`String.toLowerCase()` retorna a string convertida para minúsculas.
O que é o método `String.trim()` em JavaScript?,`String.trim()` remove espaços em branco do início e do fim de uma string.
O que é o método `String.split()` em JavaScript?,"`String.split()` divide uma string em um array de substrings, usando um separador especificado."
O que é o objeto `Math` em JavaScript?,O objeto `Math` é um objeto embutido que possui propriedades e métodos para constantes e funções matemáticas.
Quais são algumas funções comuns do objeto `Math` em JavaScript?,"`Math.random()`, `Math.floor()`, `Math.ceil()`, `Math.round()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`."
O que é o método `Date` em JavaScript?,O objeto `Date` é usado para trabalhar com datas e horários em JavaScript.
Como você obtém a data e hora atual em JavaScript?,Criando uma nova instância do objeto `Date`: `new Date()`.
Como você formata uma data em JavaScript?,"Usando os métodos do objeto `Date` como `getFullYear()`, `getMonth()`, `getDate()`, `getHours()`, `getMinutes()`, `getSeconds()` e construindo a string formatada manualmente, ou usando bibliotecas de formatação de data/hora."
O que são Generators em JavaScript?,"Generators são funções que podem ser pausadas e retomadas, permitindo a criação de iteradores."
Como você define uma função Generator em JavaScript?,Usando a sintaxe `function* myGenerator() { ... }`. O asterisco (*) indica que é uma função generator.
O que é a palavra-chave `yield` em uma função Generator?,A palavra-chave `yield` pausa a execução da função generator e retorna um valor. A execução pode ser retomada posteriormente.
O que é um iterador em JavaScript?,Um iterador é um objeto que define uma sequência e retorna seus valores um por vez.
Como você cria um iterador personalizado em JavaScript?,Implementando um objeto com um método `next()` que retorna um objeto com as propriedades `value` (o próximo valor da sequência) e `done` (um booleano indicando se a sequência foi concluída).
Qual a principal diferença entre WeakMap e Map?,"Em um WeakMap, as chaves devem ser objetos. Em um Map, as chaves podem ser de qualquer tipo de dado.  WeakMaps não são iteráveis e não têm a propriedade `size`."
Qual a principal diferença entre WeakSet e Set?,Um WeakSet pode armazenar apenas objetos. Um Set pode armazenar qualquer tipo de dado. WeakSets não são iteráveis e não tem a propriedade `size`.
O que é o método `Proxy` em JavaScript?,"O objeto `Proxy` permite interceptar e personalizar operações fundamentais em objetos (por exemplo, leitura de propriedades, atribuição, enumeração, invocação de função)."
Como você cria um Proxy em JavaScript?,"Usando o construtor `new Proxy(target, handler)`, onde `target` é o objeto a ser proxy e `handler` é um objeto que define os comportamentos interceptados."
O que é garbage collection em JavaScript?,Garbage collection é o processo automático de liberar memória que não está mais sendo usada por um programa. O JavaScript tem um garbage collector embutido.
O que são memory leaks (vazamentos de memória) em JavaScript?,"Memory leaks ocorrem quando a memória alocada por um programa não é liberada, mesmo que não esteja mais sendo usada. Isso pode levar a um desempenho degradado e, eventualmente, ao travamento do aplicativo."
Quais são algumas causas comuns de memory leaks em JavaScript?,"Variáveis globais acidentais, closures que retêm referências a variáveis externas por muito tempo, timers e listeners não removidos."
O que são web workers em JavaScript?,"Web workers permitem executar scripts JavaScript em threads de fundo, sem bloquear a thread principal do navegador. Isso pode melhorar o desempenho de aplicativos que realizam tarefas computacionalmente intensivas."
Como você cria um web worker em JavaScript?,Criando uma nova instância do objeto `Worker`: `new Worker('meu-worker.js')`.
Como você comunica entre a thread principal e um web worker em JavaScript?,Usando o método `postMessage()` para enviar mensagens e o evento `message` para receber mensagens.
O que é um Service Worker?,"Um Service Worker é um script que o navegador executa em segundo plano, separado de uma página web. Ele atua como um proxy entre o navegador e a rede, permitindo funcionalidades como notificações push, cache offline e atualizações em segundo plano."
O que são metadados de classe (Class Metadata) em JavaScript?,"Metadados de classe são dados adicionais que podem ser associados a classes e seus membros. Eles são usados para fornecer informações adicionais sobre o código, como anotações ou configurações. (Observação: o suporte nativo para metadados de classe em JavaScript está em desenvolvimento e não é amplamente suportado)."
O que são decorators em JavaScript?,"Decorators são uma forma de modificar ou adicionar funcionalidades a classes, métodos, propriedades ou parâmetros de funções. (Observação: o suporte nativo para decorators em JavaScript está em desenvolvimento e não é amplamente suportado)."
Como funcionam os decorators em JavaScript?,"Decorators são funções que recebem a classe, método, propriedade ou parâmetro como argumento e retornam uma nova versão modificada ou estendida. Eles são aplicados usando a sintaxe `@decorator`."
O que é o método `Intl` em JavaScript?,"O objeto `Intl` é o namespace para a API de Internacionalização do JavaScript, que fornece formatação sensível à linguagem para datas, números, moedas e outras informações específicas da cultura."
O que são BigInts em JavaScript?,"BigInts são um tipo de dado numérico em JavaScript que podem representar inteiros de precisão arbitrária, ou seja, números maiores que o limite seguro para números inteiros (`Number.MAX_SAFE_INTEGER`)."
Como você cria um BigInt em JavaScript?,"Adicionando o sufixo `n` a um número literal (por exemplo, `123n`) ou usando a função `BigInt()` (por exemplo, `BigInt(123)`)."
O que é o método `Array.from()` em JavaScript?,`Array.from()` cria uma nova instância de Array a partir de um objeto iterável ou semelhante a um array.
O que é o método `Array.of()` em JavaScript?,"`Array.of()` cria uma nova instância de Array com um número variável de argumentos, independentemente do número ou do tipo dos argumentos."
O que são TCO (Tail Call Optimization) em JavaScript?,TCO é uma otimização que permite que certas chamadas de função recursivas sejam executadas sem aumentar o tamanho da pilha de chamadas. (Observação: o suporte para TCO em JavaScript é limitado e não está presente em todos os ambientes).
O que é o método `Object.is()` em JavaScript?,"`Object.is()` determina se dois valores são o mesmo valor. Ele é semelhante ao operador `===`, mas trata casos especiais como `NaN` e `-0` de forma diferente."
"O que é o conceito de ""currying"" em JavaScript?",Currying é uma técnica em programação funcional onde uma função que recebe vários argumentos é transformada em uma sequência de funções que recebem um único argumento cada.
O que são side effects (efeitos colaterais) em JavaScript?,"Side effects são alterações no estado de um programa que são observáveis fora da função ou expressão que as causou. Isso inclui modificação de variáveis globais, manipulação do DOM, requisições HTTP, etc."
O que é imutabilidade em JavaScript?,"Imutabilidade é o conceito de que, uma vez criado, um objeto não pode ser alterado. Em vez de modificar um objeto existente, uma nova cópia com as alterações é criada."
Como você pode promover a imutabilidade em JavaScript?,"Usando `const` para declarar variáveis, evitando modificar arrays diretamente (usando métodos como `map`, `filter`, `reduce`, `concat`), criando cópias de objetos antes de modificá-los (usando spread operator ou `Object.assign`), e usando bibliotecas de imutabilidade."
O que é memoization em JavaScript?,Memoization é uma técnica de otimização que armazena em cache os resultados de chamadas de função caras e retorna o resultado em cache quando as mesmas entradas ocorrem novamente.
O que é o operador `instanceof` em JavaScript?,O operador `instanceof` testa se a propriedade `prototype` de um construtor aparece em algum lugar na cadeia de protótipos de um objeto.
O que é o Deno?,"Deno é um runtime para JavaScript e TypeScript criado por Ryan Dahl, o mesmo criador do Node.js. Deno tem como foco a segurança e a produtividade e possui TypeScript embutido. (Embora o Deno não seja JavaScript puro, a pergunta é relevante por seu impacto no ecossistema JS)."
O que é um event loop (laço de eventos) em JavaScript?,O event loop é um mecanismo que permite que o JavaScript execute tarefas assíncronas sem bloquear a thread principal. Ele monitora a pilha de chamadas e a fila de tarefas e move tarefas da fila para a pilha quando a pilha está vazia.
O que é um microtask queue em JavaScript?,A microtask queue é uma fila especial usada para enfileirar pequenas tarefas que devem ser executadas antes da próxima renderização da página. As Promises usam a microtask queue para enfileirar seus callbacks `then` e `catch`. As microtasks têm prioridade sobre as tarefas regulares da fila de eventos.
O que é shadow DOM?,"Shadow DOM permite encapsular partes de um componente web. Isso permite que o HTML, CSS e JavaScript de um componente web sejam mantidos separados do resto do documento."
O que é o operador `as` em TypeScript?,"O operador `as` em TypeScript é usado para realizar type assertion, que é uma forma de dizer ao compilador TypeScript para tratar uma expressão como tendo um tipo diferente do que o compilador infere. (Embora o TypeScript não seja JavaScript puro, a pergunta é relevante por seu impacto no ecossistema JS)."
O que é JSDoc?,"JSDoc é um padrão de marcação para documentar código JavaScript. Ele usa comentários especiais no código para gerar documentação API.

Essas perguntas e respostas devem fornecer uma base sólida para testar e aprofundar seus conhecimentos em JavaScript. Lembre-se de que a prática e a experimentação são fundamentais para dominar qualquer linguagem de programação."
O que é hoisting em JavaScript e como ele se aplica a variáveis declaradas com `var` e `let/const`?,"Hoisting é o comportamento do JavaScript de mover declarações para o topo do seu escopo antes da execução do código. Variáveis declaradas com `var` são ""hoisted"" e inicializadas com `undefined`, enquanto variáveis declaradas com `let` e `const` também são ""hoisted"" mas não inicializadas, resultando em um erro de referência se acessadas antes da declaração."
Explique o que são Closures em JavaScript.,"Closures são funções que ""lembram"" do ambiente léxico em que foram criadas. Elas dão acesso ao escopo de uma função externa mesmo após a função externa ter retornado."
Qual é a finalidade da palavra-chave `this` em JavaScript?,"`this` refere-se ao objeto no qual a função está sendo executada. Seu valor é determinado pelo contexto de execução da função, podendo variar dependendo de como a função é chamada."
Como você pode evitar modificar um array original ao usar métodos como `splice` ou `sort`?,"Para evitar modificar o array original, você pode criar uma cópia usando o método `slice()` ou o operador spread (`...`) antes de aplicar `splice` ou `sort`."
O que é um IIFE (Immediately Invoked Function Expression)? Dê um exemplo.,"Um IIFE é uma função que é executada assim que é definida. Exemplo: `(function() { console.log(""IIFE executada!""); })();`"
Explique o conceito de event bubbling em JavaScript.,"Event bubbling é quando um evento acionado em um elemento dispara os manipuladores de eventos dos seus elementos pais na hierarquia DOM.

**Conjunto 2:**"
O que são template literals (template strings) e como eles funcionam?,Template literals são strings delimitadas por crases (` `) que permitem a incorporação de expressões JavaScript usando `${expressao}`. Eles também suportam strings multi-linha.
O que é destructuring em JavaScript? Dê um exemplo.,"Destructuring é uma forma concisa de extrair valores de objetos ou arrays e atribuí-los a variáveis. Exemplo: `const { nome, idade } = pessoa;`"
"Qual a diferença entre `map`, `filter` e `reduce` em arrays?",`map` transforma cada elemento de um array em um novo valor e retorna um novo array. `filter` cria um novo array com todos os elementos que passam em um teste especificado. `reduce` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.
Explique o conceito de currying em JavaScript.,"Currying é uma técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada, uma de cada vez."
O que são Higher-Order Functions em JavaScript?,Higher-Order Functions são funções que recebem outras funções como argumentos ou retornam funções como resultado.
Como você pode converter um objeto em uma string JSON em JavaScript?,Você pode usar o método `JSON.stringify(objeto)` para converter um objeto em uma string JSON.
Como você pode converter uma string JSON de volta para um objeto JavaScript?,Você pode usar o método `JSON.parse(stringJSON)` para converter uma string JSON de volta para um objeto JavaScript.
O que é o operador ternário em JavaScript e como ele funciona?,O operador ternário é uma forma concisa de escrever uma instrução `if...else`. Ele tem a forma `condição ? expressãoSeVerdadeira : expressãoSeFalsa`.
Explique o que é o conceito de immutability em JavaScript e como você pode implementá-lo.,"Imutabilidade significa que, após a criação, um objeto não pode ser modificado. Você pode implementá-lo usando métodos como `Object.freeze()`, `const`, ou bibliotecas que fornecem estruturas de dados imutáveis.

**Conjunto 3:**"
O que é o operador spread (`...`) em JavaScript e quais são seus usos comuns?,"O operador spread expande um iterável (como um array ou string) em elementos individuais. É usado para copiar arrays, combinar arrays, passar argumentos para funções e criar objetos com propriedades existentes."
Como você pode criar um objeto sem protótipo em JavaScript?,Você pode usar `Object.create(null)` para criar um objeto sem protótipo.
O que é um Set em JavaScript e qual sua utilidade?,Um Set é uma coleção de valores únicos. É útil para remover duplicatas de arrays e realizar operações de conjunto.
O que é um Map em JavaScript e qual sua utilidade?,"Um Map é uma coleção de pares chave-valor, onde as chaves podem ser de qualquer tipo de dado. Ele oferece maior flexibilidade do que os objetos tradicionais como mapas."
Como você pode iterar sobre as chaves e valores de um Map em JavaScript?,"Você pode usar os métodos `keys()`, `values()` e `entries()` do objeto Map para iterar sobre suas chaves, valores e pares chave-valor, respectivamente."
O que é o método `Object.assign()` em JavaScript e qual sua utilidade?,`Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto destino. É usado para mesclar objetos.
O que são generators em JavaScript e como eles funcionam?,"Generators são funções que podem ser pausadas e retomadas, permitindo a criação de iteradores personalizados. Eles usam a palavra-chave `yield` para pausar a execução e retornar um valor."
O que é o método `requestAnimationFrame()` em JavaScript?,"`requestAnimationFrame()` agenda uma função para ser executada antes da próxima repintura do navegador, otimizando animações e atualizações visuais."
"Explique o conceito de ""debounce"" em JavaScript.","Debounce é uma técnica para limitar a taxa na qual uma função é executada, atrasando a invocação até que um período de inatividade tenha passado desde a última vez que a função foi invocada. É útil para lidar com eventos como digitação em um campo de pesquisa.

**Conjunto 4:**"
"Explique o conceito de ""throttle"" em JavaScript.","Throttling é uma técnica para limitar a taxa na qual uma função é executada, garantindo que a função seja invocada no máximo uma vez dentro de um determinado período."
O que é o método `bind()` em JavaScript e qual sua utilidade?,"`bind()` cria uma nova função com o `this` definido para um valor específico e, opcionalmente, pré-define alguns argumentos."
Qual a diferença entre `call()` e `apply()` em JavaScript?,"Ambos `call()` e `apply()` invocam uma função com um valor específico para `this`. A diferença é que `call()` recebe argumentos individualmente, enquanto `apply()` recebe argumentos como um array."
O que são WeakSets e WeakMaps em JavaScript e como eles diferem de Sets e Maps regulares?,"WeakSets e WeakMaps são semelhantes a Sets e Maps, mas suas chaves devem ser objetos e eles não impedem que esses objetos sejam coletados pelo garbage collector."
O que é o método `Symbol()` em JavaScript e qual sua utilidade?,"`Symbol()` cria um valor primitivo único e imutável. Symbols são frequentemente usados para criar propriedades de objeto ""privadas""."
Como você pode comparar dois objetos em JavaScript para determinar se eles são iguais?,"Comparar objetos diretamente com `==` ou `===` verifica apenas se eles referenciam o mesmo objeto na memória. Para comparar o conteúdo dos objetos, você precisa iterar sobre as propriedades e compará-las individualmente, ou usar uma biblioteca que ofereça uma função de comparação profunda."
O que é o método `Promise.all()` em JavaScript?,"`Promise.all()` recebe um array de Promises e retorna uma única Promise que é resolvida quando todas as Promises no array são resolvidas, ou rejeitada se alguma Promise for rejeitada."
O que é o método `Promise.race()` em JavaScript?,`Promise.race()` recebe um array de Promises e retorna uma única Promise que é resolvida ou rejeitada assim que a primeira Promise no array for resolvida ou rejeitada.
O que são async/await em JavaScript e como eles facilitam o trabalho com Promises?,"`async/await` são palavras-chave que tornam o código assíncrono mais fácil de ler e escrever. `async` declara uma função assíncrona, e `await` pausa a execução da função até que uma Promise seja resolvida."
"O que é ""Temporal Dead Zone"" (TDZ) em JavaScript e como ele se relaciona com `let` e `const`?","A TDZ é a área do código onde uma variável declarada com `let` ou `const` existe, mas não pode ser acessada antes de sua declaração ser avaliada. Tentar acessar a variável na TDZ resulta em um erro de referência.

**Conjunto 5:**"
Como você pode clonar um objeto em JavaScript? Quais são as diferenças entre shallow copy e deep copy?,"Você pode clonar um objeto usando o operador spread (`...`) ou `Object.assign()` para shallow copy. Deep copy requer recursão ou serialização/deserialização JSON para copiar objetos aninhados. Shallow copy copia apenas a referência, enquanto deep copy cria cópias independentes dos objetos aninhados."
O que são Mixins em JavaScript e como você pode implementá-los?,"Mixins são uma forma de reutilizar código em múltiplas classes, ""misturando"" as propriedades e métodos de um objeto em outro. Podem ser implementados copiando propriedades de um objeto para outro ou usando herança prototipal."
Explique o conceito de scope chain em JavaScript.,A scope chain é um conjunto de escopos que são pesquisados para encontrar uma variável quando ela é referenciada no código. Ela começa com o escopo local da função atual e sobe pelos escopos das funções pai até o escopo global.
O que é o método `Symbol.iterator` em JavaScript?,"O método `Symbol.iterator` é um método especial que define um iterador para um objeto. Quando um objeto tem um método `Symbol.iterator`, ele pode ser iterado usando `for...of`."
Como você pode usar o `for...of` loop em JavaScript?,"O `for...of` loop é usado para iterar sobre valores de objetos iteráveis como arrays, strings, Maps, Sets, e objetos com um método `Symbol.iterator`."
Como você pode usar o `for...in` loop em JavaScript?,"O `for...in` loop é usado para iterar sobre as chaves enumeráveis de um objeto. Ele percorre todas as propriedades enumeráveis, incluindo aquelas herdadas da cadeia de protótipos."
O que é um Proxy em JavaScript e qual sua utilidade?,"Um Proxy permite interceptar e personalizar operações fundamentais em objetos, como leitura de propriedades, atribuições, enumeração e chamadas de função. Ele é usado para criar comportamentos personalizados para objetos."
O que são WeakRefs em JavaScript?,"WeakRefs permitem manter uma referência a um objeto sem impedir que esse objeto seja coletado pelo garbage collector. Eles são úteis para caches e outras situações em que você precisa de uma referência a um objeto que pode ser descartado a qualquer momento.

**Conjunto 6:**"
O que é um erro `TypeError` em JavaScript e quando ele ocorre?,"Um `TypeError` ocorre quando uma operação é realizada em um valor de um tipo inesperado. Por exemplo, chamar um método em um valor que não é uma função."
O que é um erro `ReferenceError` em JavaScript e quando ele ocorre?,Um `ReferenceError` ocorre quando se tenta usar uma variável que não foi declarada.
O que é um erro `SyntaxError` em JavaScript e quando ele ocorre?,"Um `SyntaxError` ocorre quando o código JavaScript contém um erro de sintaxe, ou seja, está escrito de forma que o interpretador não consegue entender."
Como você pode lidar com erros em JavaScript usando `try...catch`?,"O bloco `try...catch` permite capturar e lidar com exceções que ocorrem durante a execução do código. O código que pode gerar uma exceção é colocado dentro do bloco `try`, e o código para lidar com a exceção é colocado dentro do bloco `catch`."
"Como você pode evitar o ""callback hell"" em JavaScript?","Você pode evitar o ""callback hell"" usando Promises, async/await, ou modularizando o código em funções menores e mais gerenciáveis."
O que são arrow functions em JavaScript e como elas se comparam às funções regulares?,"Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas não têm seu próprio `this`, `arguments`, `super`, ou `new.target`, e são lexicamente ligadas ao `this` do contexto circundante."
O que é o método `Array.from()` em JavaScript e qual sua utilidade?,`Array.from()` cria um novo array a partir de um objeto iterável ou semelhante a um array. É útil para converter NodeLists e arguments em arrays.
O que são tagged template literals em JavaScript?,"Tagged template literals são um tipo de template literal onde uma função (a ""tag"") é chamada com o template literal como argumento. A função pode processar o template literal de forma personalizada.

**Conjunto 7:**"
"O que é ""use strict"" em JavaScript e qual seu efeito?","`""use strict""` é uma diretiva que habilita o modo estrito no JavaScript. Ele impõe uma sintaxe mais rigorosa e elimina alguns comportamentos ""silenciosos"" da linguagem, tornando o código mais fácil de depurar e menos propenso a erros."
O que é NaN em JavaScript e como você pode verificar se um valor é NaN?,NaN (Not-a-Number) é um valor numérico que representa o resultado de uma operação matemática inválida. Você pode verificar se um valor é NaN usando `isNaN(valor)` ou `Number.isNaN(valor)`. `Number.isNaN()` é preferível porque não tenta converter o valor para um número primeiro.
O que é o método `encodeURIComponent()` em JavaScript e qual sua utilidade?,"`encodeURIComponent()` codifica um componente URI (Uniform Resource Identifier) substituindo cada instância de certos caracteres por uma, duas, três ou quatro sequências de escape representando a codificação UTF-8 do caractere."
O que é o método `decodeURIComponent()` em JavaScript e qual sua utilidade?,`decodeURIComponent()` decodifica um componente URI (Uniform Resource Identifier) previamente codificado por `encodeURIComponent()`.
O que é a diferença entre `let` e `const`?,"`let` declara uma variável que pode ser reatribuída, enquanto `const` declara uma variável que não pode ser reatribuída após a inicialização."
O que é a diferença entre usar `var` e `let` dentro de um loop?,"Variáveis declaradas com `var` dentro de um loop têm escopo de função (ou escopo global se o loop estiver fora de uma função), enquanto variáveis declaradas com `let` têm escopo de bloco, o que significa que cada iteração do loop terá uma nova variável com um valor diferente."
O que é o conceito de hoisting de funções em JavaScript?,"Funções declaradas com a palavra-chave `function` são ""hoisted"", o que significa que podem ser chamadas antes de sua declaração no código."
O que é o método `padStart()` e `padEnd()` em JavaScript e qual sua utilidade?,"`padStart()` preenche o início de uma string com outra string (repetida, se necessário) para que a string resultante atinja um determinado comprimento. `padEnd()` faz o mesmo, mas preenche o final da string."
O que é o método `trim()` em JavaScript?,`trim()` remove espaços em branco do início e do fim de uma string.
Como você pode verificar se um objeto possui uma determinada propriedade em JavaScript?,"Você pode usar o operador `in`, o método `hasOwnProperty()`, ou o método `Object.hasOwn()` para verificar se um objeto possui uma determinada propriedade.

**Conjunto 8:**"
Explique a diferença entre os métodos `forEach()` e `map()` em arrays JavaScript.,"Ambos `forEach()` e `map()` iteram sobre um array. `forEach()` executa uma função para cada elemento, mas não retorna um novo array. `map()` executa uma função para cada elemento e retorna um novo array com os resultados da função."
O que é o método `entries()` em JavaScript e qual sua utilidade quando usado com objetos?,O método `Object.entries()` retorna um array de pares chave-valor de um objeto. É útil para iterar sobre as propriedades de um objeto.
O que é o método `keys()` em JavaScript e qual sua utilidade quando usado com objetos?,O método `Object.keys()` retorna um array com todas as chaves de um objeto. É útil para iterar sobre as chaves de um objeto.
O que é o método `values()` em JavaScript e qual sua utilidade quando usado com objetos?,O método `Object.values()` retorna um array com todos os valores de um objeto.
O que é o operador bitwise NOT (~) em JavaScript?,O operador bitwise NOT (~) inverte todos os bits de um número.
"O que são os operadores bitwise AND (&), OR (|) e XOR (^) em JavaScript?",`&` (AND) retorna 1 se ambos os bits forem 1. `|` (OR) retorna 1 se pelo menos um bit for 1. `^` (XOR) retorna 1 se os bits forem diferentes.
O que é o operador de deslocamento de bits à esquerda (<<) e à direita (>>) em JavaScript?,"`<<` (deslocamento à esquerda) desloca os bits para a esquerda, preenchendo com zeros à direita. `>>` (deslocamento à direita) desloca os bits para a direita, preservando o sinal (deslocamento com sinal)."
O que é o operador de deslocamento de bits à direita sem sinal (>>>) em JavaScript?,"`>>>` (deslocamento à direita sem sinal) desloca os bits para a direita, preenchendo com zeros à esquerda."
O que é tail call optimization (TCO) e JavaScript suporta?,Tail call optimization (TCO) é uma técnica que permite que um compilador ou interpretador otimize chamadas recursivas de função quando a chamada recursiva é a última operação realizada na função. JavaScript *não* garante suporte para TCO em todas as implementações.
O que são DataView e ArrayBuffer em JavaScript?,"Um `ArrayBuffer` é um objeto que representa um buffer de dados binários brutos. Um `DataView` fornece uma interface para ler e escrever múltiplos tipos de dados numéricos no `ArrayBuffer`.

**Conjunto 9:**"
O que é o método `Intl.NumberFormat()` em JavaScript?,"O método `Intl.NumberFormat()` formata números de acordo com uma determinada localidade, fornecendo opções para moeda, decimais, etc."
O que é o método `Intl.DateTimeFormat()` em JavaScript?,"O método `Intl.DateTimeFormat()` formata datas e horários de acordo com uma determinada localidade, fornecendo opções para formatos de data e hora."
Como você pode formatar números como moeda em JavaScript?,"Você pode usar o método `Intl.NumberFormat()` com a opção `style: 'currency'` para formatar números como moeda, especificando a moeda desejada (por exemplo, 'USD', 'EUR', 'BRL')."
O que é o objeto `RegExp` em JavaScript e como ele é usado?,"`RegExp` é um objeto que representa uma expressão regular, usada para correspondência de padrões em strings."
Como você pode criar uma expressão regular em JavaScript?,Você pode criar uma expressão regular usando um literal `/padrão/` ou usando o construtor `new RegExp('padrão')`.
"Quais são alguns modificadores comuns em expressões regulares em JavaScript (por exemplo, `g`, `i`, `m`)?","*   `g` (global): Encontra todas as correspondências em vez de parar após a primeira.
*   `i` (ignore case): Ignora a diferença entre maiúsculas e minúsculas.
*   `m` (multiline): Permite que `^` e `$` correspondam ao início e ao fim de cada linha (separadas por `\n` ou `\r`) em vez de apenas ao início e ao fim da string inteira."
O que são grupos de captura em expressões regulares em JavaScript?,"Grupos de captura são partes de uma expressão regular cercadas por parênteses `()`. Eles capturam a parte da string que corresponde ao padrão dentro dos parênteses, permitindo que você acesse essas partes individualmente."
O que é o método `String.prototype.match()` em JavaScript?,O método `match()` pesquisa uma string por uma correspondência com uma expressão regular e retorna um array com os resultados.
O que é o método `String.prototype.replace()` em JavaScript?,O método `replace()` substitui parte de uma string por outra string ou por um valor retornado por uma função.
O que é o método `String.prototype.search()` em JavaScript?,"O método `search()` pesquisa uma string por uma correspondência com uma expressão regular e retorna o índice da primeira correspondência, ou -1 se nenhuma correspondência for encontrada.

**Conjunto 10:**"
O que é o método `String.prototype.split()` em JavaScript?,"O método `split()` divide uma string em um array de substrings, usando um separador especificado."
Como você pode criar um temporizador em JavaScript que executa uma função apenas uma vez após um determinado período de tempo?,"Você pode usar a função `setTimeout(funcao, atraso)` para executar uma função apenas uma vez após um determinado período de tempo (em milissegundos)."
Como você pode criar um temporizador em JavaScript que executa uma função repetidamente em intervalos regulares?,"Você pode usar a função `setInterval(funcao, intervalo)` para executar uma função repetidamente em intervalos regulares (em milissegundos)."
Como você pode cancelar um temporizador criado com `setTimeout()` em JavaScript?,"Você pode cancelar um temporizador usando a função `clearTimeout(idDoTemporizador)`, onde `idDoTemporizador` é o valor retornado por `setTimeout()`."
Como você pode cancelar um temporizador criado com `setInterval()` em JavaScript?,"Você pode cancelar um temporizador usando a função `clearInterval(idDoTemporizador)`, onde `idDoTemporizador` é o valor retornado por `setInterval()`."
O que é o objeto `Math` em JavaScript e quais são alguns de seus métodos úteis?,"`Math` é um objeto embutido que fornece funções matemáticas e constantes. Alguns métodos úteis incluem `Math.random()`, `Math.round()`, `Math.floor()`, `Math.ceil()`, `Math.abs()`, `Math.max()`, `Math.min()`."
Como você pode gerar um número aleatório entre dois valores específicos em JavaScript?,"Você pode usar a fórmula `Math.floor(Math.random() * (max - min + 1)) + min`, onde `max` e `min` são os valores máximo e mínimo desejados."
O que são funções recursivas em JavaScript?,Funções recursivas são funções que chamam a si mesmas.
Quais são os riscos de usar recursão excessiva em JavaScript e como você pode evitá-los?,"Recursão excessiva pode levar a um erro de ""stack overflow"" porque cada chamada de função coloca um novo quadro na pilha de chamadas. Você pode evitar isso usando recursão de cauda (se suportada) ou convertendo a recursão em um loop iterativo."
O que é uma função pura em JavaScript?,"Uma função pura é uma função que sempre retorna o mesmo resultado para as mesmas entradas, e não tem efeitos colaterais (não modifica nenhum estado fora de seu próprio escopo).

Espero que este conjunto abrangente de perguntas e respostas seja útil!"
Qual é a diferença entre `null` e `undefined` em JavaScript?,"`null` é um valor de atribuição que representa a ausência intencional de um valor. `undefined` significa que uma variável foi declarada, mas não atribuída com um valor."
Como você impede a propagação de um evento em JavaScript?,Usando o método `event.stopPropagation()` no objeto de evento.
"O que é ""hoisting"" em JavaScript e como ele afeta as variáveis e funções?","Hoisting é um comportamento do JavaScript onde declarações de variáveis (usando `var`) e funções são movidas para o topo do seu escopo antes da execução do código.  Variáveis `var` são hoisted com o valor `undefined`, enquanto funções são hoisted com sua definição completa."
Qual é a diferença entre `==` e `===` em JavaScript?,"`==` compara dois valores após a conversão de tipo, enquanto `===` compara dois valores sem conversão de tipo. `===` verifica a igualdade tanto do valor quanto do tipo de dado."
Como você cria um objeto em JavaScript?,Existem várias maneiras: usando a sintaxe literal `{}` ou usando a palavra-chave `new` com um construtor. Ex: `const obj = {};` ou `const obj = new Object();`.
"Explique o conceito de ""closures"" em JavaScript.","Um closure é uma função que tem acesso ao escopo de outra função, mesmo após a função externa ter retornado. Isso permite que a função interna ""lembre"" das variáveis do escopo externo."
"O que é o ""strict mode"" em JavaScript e como você o ativa?","O ""strict mode"" é uma forma de impor regras mais rígidas no código JavaScript, ajudando a prevenir erros comuns e tornar o código mais seguro. Você o ativa adicionando a string `""use strict"";` no início do seu script ou função."
"Qual é a diferença entre `let`, `const` e `var` na declaração de variáveis?","`var` tem escopo de função ou global, enquanto `let` e `const` têm escopo de bloco. `let` permite reatribuição, enquanto `const` não permite reatribuição após a inicialização."
Como você converte uma string para um número em JavaScript?,"Usando as funções `parseInt()`, `parseFloat()` ou o operador unário `+`."
"O que são ""template literals"" em JavaScript?",São strings que permitem inserir expressões JavaScript diretamente dentro da string usando a sintaxe `${expressão}`. Elas são delimitadas por crases (`).
Como você clona um objeto em JavaScript?,"Você pode usar `Object.assign({}, objetoOriginal)` ou o spread operator `{...objetoOriginal}` para clonar um objeto superficialmente. Para clonagem profunda, você pode usar `JSON.parse(JSON.stringify(objetoOriginal))`, mas isso pode ter limitações com tipos de dados complexos."
O que é o método `map()` em arrays JavaScript?,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
Qual é a diferença entre os métodos `forEach()` e `map()` em arrays?,"`forEach()` executa uma função em cada elemento do array, mas não retorna um novo array. `map()` executa uma função em cada elemento e retorna um novo array com os resultados."
"O que é um ""callback function"" em JavaScript?","É uma função passada como argumento para outra função, para ser executada em um momento posterior, geralmente após a conclusão de alguma operação."
Como você manipula erros em JavaScript?,Usando blocos `try...catch` para capturar exceções e o bloco `finally` para executar código independentemente de ocorrer ou não uma exceção.
O que é o método `reduce()` em arrays JavaScript?,O método `reduce()` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.
"O que são ""arrow functions"" em JavaScript?","São uma sintaxe mais curta para escrever funções, com algumas diferenças em relação às funções tradicionais, principalmente no contexto de `this`."
Como você verifica se uma variável é um array em JavaScript?,Usando o método `Array.isArray(variavel)`.
O que é o método `filter()` em arrays JavaScript?,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
Como você define um valor padrão para um parâmetro de função em JavaScript?,Usando a sintaxe de valor padrão: `function minhaFuncao(parametro = valorPadrao) { ... }`.
O que é o método `find()` em arrays JavaScript?,"O método `find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
Qual é a diferença entre `slice()` e `splice()` em arrays JavaScript?,"`slice()` retorna uma cópia de uma parte do array, sem modificar o array original. `splice()` modifica o array original removendo, substituindo ou adicionando elementos."
O que é o método `includes()` em arrays JavaScript?,"O método `includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado."
Como você remove espaços em branco do início e do fim de uma string em JavaScript?,"Usando os métodos `trim()`, `trimStart()` (ou `trimLeft()`) e `trimEnd()` (ou `trimRight()`)."
O que é o método `padStart()` e `padEnd()` em strings JavaScript?,"`padStart()` preenche o início de uma string com outra string até atingir um determinado comprimento. `padEnd()` faz o mesmo, mas preenche o final da string."
O que são iteradores e iteráveis em JavaScript?,"Um iterável é um objeto que pode ser iterado (usado em um loop `for...of`, por exemplo). Um iterador é um objeto que define uma sequência e, ao terminar, retorna um objeto com uma propriedade `done` definida como `true`."
O que é a função `Object.freeze()` em JavaScript?,"A função `Object.freeze()` congela um objeto. Um objeto congelado não pode mais ser alterado: novas propriedades não podem ser adicionadas, propriedades existentes não podem ser removidas, seus valores não podem ser alterados e sua prototipagem não pode ser alterada. `freeze()` retorna o mesmo objeto."
O que é a função `Object.seal()` em JavaScript?,"A função `Object.seal()` sela um objeto, impedindo que novas propriedades sejam adicionadas a ele e marcando todas as propriedades existentes como não configuráveis. Os valores das propriedades presentes ainda podem ser alterados, desde que sejam graváveis."
"O que é ""destructuring"" em JavaScript?",Destructuring é uma expressão JavaScript que possibilita descompactar valores de arrays ou propriedades de objetos em variáveis distintas.
Como você troca os valores de duas variáveis em JavaScript sem usar uma terceira variável temporária?,"Usando destructuring: `[a, b] = [b, a];`"
O que é o operador `...` (spread operator) em JavaScript?,O spread operator permite expandir um iterável (como um array ou string) em locais onde múltiplos argumentos (para chamadas de função) ou múltiplos elementos (para literais de array) são esperados.
O que é o operador `...` (rest operator) em JavaScript?,O rest operator permite que você represente um número indefinido de argumentos como um array. Ele é usado em parâmetros de função.
O que é a função `setTimeout()` em JavaScript?,É uma função que executa uma função ou trecho de código especificado após um determinado período de tempo (em milissegundos).
O que é a função `setInterval()` em JavaScript?,É uma função que repete a execução de uma função ou trecho de código especificado em intervalos regulares (em milissegundos).
Como você para a execução de um `setInterval()` em JavaScript?,Usando a função `clearInterval()` e passando o ID retornado por `setInterval()` como argumento.
O que é JSON e como você trabalha com ele em JavaScript?,"JSON (JavaScript Object Notation) é um formato leve para troca de dados. Em JavaScript, você pode usar as funções `JSON.stringify()` para converter um objeto JavaScript em uma string JSON e `JSON.parse()` para converter uma string JSON em um objeto JavaScript."
"O que são ""promises"" em JavaScript?","Promises representam o eventual resultado (ou falha) de uma operação assíncrona. Elas têm três estados: pendente (pending), cumprida (fulfilled) e rejeitada (rejected)."
Como você lida com promises em JavaScript?,Usando os métodos `.then()` para lidar com o caso de sucesso (fulfilled) e `.catch()` para lidar com o caso de falha (rejected).
O que é a sintaxe `async/await` em JavaScript?,"É uma sintaxe que simplifica o trabalho com promises, tornando o código assíncrono mais fácil de ler e escrever.  `async` declara uma função assíncrona e `await` espera que uma promise seja resolvida antes de continuar a execução."
"O que é uma ""generator function"" em JavaScript?","Uma função generator é uma função que pode ser interrompida e retomada, permitindo a criação de iteradores personalizados. Elas são definidas usando `function*`."
Como você define um getter e setter em um objeto JavaScript?,"Usando as palavras-chave `get` e `set` dentro da definição de um objeto. Por exemplo:
```javascript
const obj = {
  _valor: 0,
  get valor() { return this._valor; },
  set valor(novoValor) { this._valor = novoValor; }
};
```"
O que é o método `bind()` em JavaScript?,"O método `bind()` cria uma nova função que, quando chamada, tem sua palavra-chave `this` definida com o valor fornecido.  Isso permite controlar o contexto de `this` dentro de uma função."
O que é o método `call()` em JavaScript?,O método `call()` invoca uma função com um determinado valor `this` e argumentos fornecidos individualmente.
O que é o método `apply()` em JavaScript?,O método `apply()` invoca uma função com um dado valor `this` e argumentos fornecidos como um array.
Como você verifica se uma propriedade existe em um objeto JavaScript?,Usando o operador `in` ou o método `hasOwnProperty()`.
O que é o protótipo em JavaScript?,O protótipo é um objeto associado a cada função e objeto em JavaScript.  Ele permite a herança de propriedades e métodos.
Como você implementa herança prototípica em JavaScript?,Definindo o protótipo de um objeto para ser outro objeto. Isso permite que o primeiro objeto herde as propriedades e métodos do segundo objeto.
O que é o método `Object.getPrototypeOf()` em JavaScript?,O método `Object.getPrototypeOf()` retorna o protótipo interno de um objeto.
O que é o método `Object.setPrototypeOf()` em JavaScript?,"O método `Object.setPrototypeOf()` define o protótipo (ou seja, o objeto interno [[Prototype]]) de um objeto especificado para um outro objeto ou `null`."
"O que é o ""event loop"" em JavaScript?","O event loop é um mecanismo que permite ao JavaScript lidar com operações assíncronas de forma não bloqueante. Ele monitora a pilha de chamadas e a fila de callbacks, movendo callbacks prontos da fila para a pilha quando a pilha está vazia."
"O que é o ""call stack"" em JavaScript?",O call stack é uma estrutura de dados que registra o ponto em que o programa está durante a execução. Ele é usado para rastrear as chamadas de função e a ordem em que elas são executadas.
"O que é a ""queue"" em JavaScript?","A queue (fila) é uma estrutura de dados que armazena callbacks que estão prontos para serem executados, mas que ainda não foram movidos para o call stack."
Como você adiciona um event listener a um elemento em JavaScript?,"Usando o método `addEventListener()` no objeto do elemento. Por exemplo: `elemento.addEventListener('click', minhaFuncao);`."
O que é o objeto `event` em JavaScript?,"O objeto `event` é um objeto que contém informações sobre o evento que ocorreu, como o tipo de evento, o elemento que disparou o evento e outros detalhes."
"O que é o ""event bubbling"" em JavaScript?","Event bubbling é o processo em que um evento disparado em um elemento se propaga para os elementos pai na árvore do DOM, disparando os event listeners associados a esses elementos."
"O que é o ""event capturing"" em JavaScript?","Event capturing é o processo inverso do event bubbling, onde um evento se propaga do elemento raiz do DOM para o elemento alvo, disparando os event listeners associados a cada elemento no caminho."
Como você evita o comportamento padrão de um evento em JavaScript?,Usando o método `event.preventDefault()` no objeto de evento.
"O que são ""data attributes"" em HTML e como você acessa eles em JavaScript?",Data attributes são atributos HTML que começam com `data-` e permitem armazenar informações personalizadas em elementos HTML. Você pode acessá-los em JavaScript usando a propriedade `dataset` do elemento.
"O que é ""local storage"" em JavaScript?",Local storage é um mecanismo de armazenamento web que permite armazenar dados localmente no navegador do usuário. Os dados armazenados no local storage persistem mesmo após o fechamento do navegador.
"O que é ""session storage"" em JavaScript?","Session storage é semelhante ao local storage, mas os dados armazenados no session storage são excluídos quando o usuário fecha a guia ou janela do navegador."
Como você armazena e recupera dados no local storage e session storage?,"Usando os métodos `setItem()`, `getItem()`, `removeItem()` e `clear()` do objeto `localStorage` ou `sessionStorage`."
"O que são ""cookies"" em JavaScript?","Cookies são pequenos arquivos de texto que os sites armazenam no navegador do usuário para lembrar informações sobre o usuário, como preferências ou dados de login."
Como você lê e define cookies em JavaScript?,Você pode acessar e modificar cookies usando a propriedade `document.cookie`.
"O que é ""caching"" em JavaScript?",Caching é o processo de armazenar dados em um local temporário (cache) para que possam ser acessados mais rapidamente no futuro.
"O que é ""memoization"" em JavaScript?",Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras para que possam ser reutilizados em chamadas futuras com os mesmos argumentos.
O que são efeitos colaterais em JavaScript?,"Efeitos colaterais são ações que uma função realiza que afetam o estado externo do programa, como modificar variáveis globais, fazer requisições HTTP ou manipular o DOM."
"O que é ""Currying"" em JavaScript?",Currying é uma técnica que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada vez.
"O que é ""Composição de Funções"" em JavaScript?","Composição de funções é o processo de combinar duas ou mais funções para criar uma nova função. O resultado da primeira função é passado como argumento para a segunda função, e assim por diante."
"O que é ""debounce"" em JavaScript?",Debounce é uma técnica para limitar a taxa em que uma função é executada. Ela garante que uma função só seja executada após um determinado período de inatividade.
"O que é ""throttle"" em JavaScript?",Throttle é uma técnica para limitar a taxa em que uma função é executada. Ela garante que uma função seja executada no máximo uma vez a cada determinado período de tempo.
"O que é ""AJAX"" em JavaScript?","AJAX (Asynchronous JavaScript and XML) é uma técnica que permite que as páginas web atualizem o conteúdo de forma assíncrona, sem a necessidade de recarregar a página inteira."
Como você faz uma requisição AJAX em JavaScript?,Usando o objeto `XMLHttpRequest` ou a API `fetch`.
O que é a API `fetch` em JavaScript?,A API `fetch` é uma interface para fazer requisições HTTP em JavaScript. Ela fornece uma maneira mais moderna e flexível de substituir o objeto `XMLHttpRequest`.
"O que são ""web workers"" em JavaScript?","Web workers são scripts que são executados em segundo plano, separadamente do thread principal do navegador. Eles permitem realizar tarefas computacionalmente intensivas sem bloquear a interface do usuário."
"O que são ""service workers"" em JavaScript?","Service workers são scripts que atuam como um proxy entre o navegador e o servidor. Eles podem ser usados para implementar recursos como caching offline, notificações push e sincronização em segundo plano."
O que é o objeto `window` em JavaScript?,O objeto `window` representa a janela do navegador. É o objeto global no ambiente do navegador.
O que é o objeto `document` em JavaScript?,O objeto `document` representa o documento HTML exibido na janela do navegador. Ele fornece uma interface para acessar e manipular o conteúdo e a estrutura do documento.
Como você seleciona elementos HTML no DOM usando JavaScript?,"Usando os métodos `getElementById()`, `getElementsByClassName()`, `getElementsByTagName()` ou `querySelector()` e `querySelectorAll()` do objeto `document`."
Como você modifica o conteúdo de um elemento HTML no DOM usando JavaScript?,"Usando a propriedade `innerHTML`, `textContent` ou `innerText` do objeto do elemento."
Como você modifica os atributos de um elemento HTML no DOM usando JavaScript?,Usando os métodos `setAttribute()` e `getAttribute()` do objeto do elemento.
Como você modifica os estilos de um elemento HTML no DOM usando JavaScript?,Acessando a propriedade `style` do objeto do elemento e definindo as propriedades de estilo desejadas.
"O que é ""shadow DOM"" em JavaScript?","Shadow DOM é uma tecnologia que permite encapsular a estrutura, o estilo e o comportamento de um componente web, protegendo-o de interferências externas."
"O que são ""custom elements"" em JavaScript?",Custom elements são elementos HTML personalizados que você pode definir usando a API Web Components. Eles permitem estender a funcionalidade do HTML e criar componentes reutilizáveis.
"O que são ""modules"" em JavaScript?",Modules são unidades de código independentes que podem ser reutilizadas em diferentes partes de um aplicativo. Eles ajudam a organizar o código e a evitar conflitos de nomes.
Como você importa e exporta modules em JavaScript?,Usando as palavras-chave `import` e `export`.
"O que é o ""ES6"" em JavaScript?","ES6 (ECMAScript 2015) é uma versão importante da linguagem JavaScript que introduziu muitas novas funcionalidades, como classes, arrow functions, let e const, template literals, modules e muito mais."
"O que é ""transpilação"" em JavaScript?",Transpilação é o processo de converter código JavaScript escrito em uma versão mais recente da linguagem (como ES6+) para uma versão mais antiga (como ES5) que é compatível com navegadores mais antigos.
"O que é ""bundling"" em JavaScript?","Bundling é o processo de combinar vários arquivos JavaScript em um único arquivo, otimizando o código para desempenho e reduzindo o número de requisições HTTP."
"O que é ""minificação"" em JavaScript?",Minificação é o processo de remover todos os caracteres desnecessários (como espaços em branco e comentários) do código JavaScript para reduzir o tamanho do arquivo.
"O que é ""code splitting"" em JavaScript?","Code splitting é a técnica de dividir o código JavaScript em vários arquivos menores que podem ser carregados sob demanda, melhorando o desempenho do aplicativo."
"O que é ""tree shaking"" em JavaScript?","Tree shaking é uma técnica para remover código não utilizado de um pacote JavaScript, reduzindo o tamanho do arquivo e melhorando o desempenho."
"O que são ""linting tools"" em JavaScript?","Linting tools são ferramentas que analisam o código JavaScript para identificar erros de sintaxe, erros de estilo e outros problemas de qualidade."
"O que são ""testing frameworks"" em JavaScript?","Testing frameworks são ferramentas que ajudam a automatizar o processo de testes de código JavaScript, garantindo que o código funcione corretamente e que as mudanças não introduzam novos erros."
"O que são ""debuggers"" em JavaScript?","Debuggers são ferramentas que permitem inspecionar o código JavaScript durante a execução, permitindo identificar e corrigir erros."
O que é o console em JavaScript?,"O console é uma ferramenta disponível nos navegadores que permite exibir mensagens de log, depurar código e interagir com o ambiente JavaScript."
O que é o método `console.log()` em JavaScript?,O método `console.log()` é usado para exibir mensagens no console do navegador.
O que é o método `console.error()` em JavaScript?,O método `console.error()` é usado para exibir mensagens de erro no console do navegador.
O que é o método `console.warn()` em JavaScript?,O método `console.warn()` é usado para exibir mensagens de aviso no console do navegador.
O que é o método `console.table()` em JavaScript?,O método `console.table()` é usado para exibir dados em formato de tabela no console do navegador.
O que é o método `console.time()` e `console.timeEnd()` em JavaScript?,Os métodos `console.time()` e `console.timeEnd()` são usados para medir o tempo de execução de um trecho de código.
"O que são ""regular expressions"" em JavaScript?","Regular expressions (regex) são padrões de texto que podem ser usados para pesquisar, substituir e validar texto."
Quais são os principais métodos para trabalhar com regular expressions em JavaScript?,"`test()`, `exec()`, `match()`, `search()`, `replace()` e `split()`."
"O que são ""character classes"" em regular expressions?","Character classes definem um conjunto de caracteres que podem corresponder a um determinado ponto em um padrão. Exemplos: `[abc]` (qualquer um dos caracteres a, b ou c), `[^abc]` (qualquer caractere que não seja a, b ou c), `\d` (qualquer dígito), `\w` (qualquer caractere de palavra), `\s` (qualquer caractere de espaço em branco)."
"O que são ""flags"" em regular expressions?","Flags modificam o comportamento de uma regular expression. Exemplos: `i` (ignorar maiúsculas e minúsculas), `g` (correspondência global), `m` (multilinhas)."
"O que é ""unicode"" em JavaScript?",Unicode é um padrão para codificar caracteres que inclui praticamente todos os caracteres usados em todos os idiomas do mundo.
Como você lida com caracteres Unicode em JavaScript?,JavaScript suporta Unicode por padrão. Você pode usar os mesmos métodos de string para manipular caracteres Unicode como faria com caracteres ASCII.
Quais são alguns métodos comuns do objeto `Math` em JavaScript?,"`Math.random()`, `Math.round()`, `Math.ceil()`, `Math.floor()`, `Math.abs()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`, `Math.sin()`, `Math.cos()`, `Math.tan()`."
Como você gera um número aleatório entre dois valores específicos em JavaScript?,`Math.floor(Math.random() * (max - min + 1)) + min;`
O que é o objeto `Date` em JavaScript?,O objeto `Date` é usado para trabalhar com datas e horários.
Como você cria um objeto `Date` em JavaScript?,"Usando o construtor `new Date()`. Você pode passar uma string de data, um número de milissegundos desde a época Unix (1 de janeiro de 1970) ou vários argumentos (ano, mês, dia, hora, minuto, segundo, milissegundo)."
Como você obtém o timestamp atual em JavaScript?,Usando o método `Date.now()` ou o método `getTime()` de um objeto `Date`.
Como você calcula a diferença entre duas datas em JavaScript?,Subtraindo os timestamps das duas datas. O resultado estará em milissegundos.
O que é o método `eval()` em JavaScript?,O método `eval()` executa uma string de código JavaScript. **É altamente desencorajado o uso de `eval()` devido a riscos de segurança e desempenho.**
"O que é ""WebAssembly"" e qual sua relação com JavaScript?",WebAssembly (Wasm) é um formato de código binário que pode ser executado em navegadores modernos. Ele foi projetado para ser uma alternativa de alto desempenho ao JavaScript para tarefas computacionalmente intensivas. JavaScript pode interagir com módulos WebAssembly.
Qual a diferença entre programação imperativa e declarativa em Javascript?,"Na programação imperativa, você detalha *como* realizar uma tarefa, passo a passo. Na programação declarativa, você descreve *o que* você quer alcançar, deixando a implementação para o sistema. Javascript suporta ambos os estilos, mas muitas vezes a programação declarativa resulta em código mais conciso e legível."
"O que é ""Object.is()"" em JavaScript?","`Object.is()` determina se dois valores são o mesmo valor. Ele é similar a `===`, mas lida com casos especiais como `NaN` (considerando `NaN` igual a `NaN`) e `-0` e `+0` (considerando-os diferentes)."
O que é a intenção por trás da criação do `BigInt` em Javascript e como ele difere do tipo `Number`?,"`BigInt` foi criado para representar inteiros de precisão arbitrária, permitindo cálculos com números maiores do que o limite seguro do tipo `Number` (Number.MAX_SAFE_INTEGER).  `Number` usa ponto flutuante de dupla precisão (64-bit), o que limita a precisão para números inteiros grandes."
Qual a diferença entre `encodeURI()` e `encodeURIComponent()` em JavaScript?,"`encodeURI()` codifica uma URI, exceto alguns caracteres. `encodeURIComponent()` codifica um componente de URI. `encodeURIComponent()` deve ser usado para codificar partes individuais de um URI, como parâmetros de consulta, enquanto `encodeURI()` deve ser usado para codificar a URI completa."
"Como você pode detectar se o usuário está utilizando o ""modo escuro"" (dark mode) no sistema operacional através de Javascript?","Usando a `window.matchMedia('(prefers-color-scheme: dark)').matches` que retorna `true` se o usuário prefere o modo escuro, e `false` caso contrário."
"O que é o ""Temporal API"" do Javascript (ainda em desenvolvimento) e quais problemas ele pretende resolver em relação ao objeto `Date` atual?","A Temporal API é uma nova API para lidar com datas e horários em JavaScript, projetada para substituir o objeto `Date` existente, que é considerado problemático devido à sua mutabilidade, inconsistências de fuso horário e falta de suporte para calendários não-gregorianos. A Temporal API é mais moderna, imutável e oferece melhor suporte para fuso horários e calendários."
O que é o hoisting em JavaScript e como ele afeta a execução do código?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com valor `undefined`, enquanto funções declaradas com `function` são hoisted completamente. Isso significa que você pode usar variáveis antes de sua declaração em alguns casos, mas com resultados inesperados se usar `var`. `let` e `const` são hoisted, mas não inicializadas, resultando em um erro se acessadas antes da declaração."
Explique a diferença entre `==` e `===` em JavaScript.,"`==` é o operador de igualdade abstrata, que realiza coerção de tipo antes de comparar. `===` é o operador de igualdade estrita, que não realiza coerção de tipo e retorna `true` apenas se os tipos e valores forem idênticos."
O que é o objeto `arguments` e quando ele é usado?,"`arguments` é um objeto semelhante a um array disponível dentro de funções que contém todos os argumentos passados para a função, mesmo que não tenham sido definidos na assinatura da função. Ele é usado para acessar argumentos adicionais ou para funções que precisam lidar com um número variável de argumentos. Note que em arrow functions, o objeto `arguments` não está disponível."
O que é uma closure em JavaScript e por que ela é importante?,"Uma closure é a capacidade de uma função de ""lembrar"" o ambiente léxico em que foi criada, mesmo depois que a função externa já terminou de executar. Isso é importante para encapsulamento de dados, criação de funções de fábrica e manutenção de estado."
O que é um protótipo em JavaScript e como ele é usado?,"Um protótipo é um objeto do qual outros objetos herdam propriedades e métodos. Cada objeto em JavaScript tem um protótipo, e a herança é feita através da cadeia de protótipos. É usado para implementar herança e reutilização de código."
Explique o que é o método `bind()` e como ele funciona.,O método `bind()` cria uma nova função com o `this` definido para um valor especificado. Ele também pode receber argumentos que serão predefinidos para a nova função quando ela for chamada.
O que são arrow functions e quais suas vantagens em relação às funções tradicionais?,Arrow functions são uma sintaxe mais concisa para escrever funções em JavaScript. Elas têm um `this` léxico (herdado do contexto circundante) e não têm seu próprio objeto `arguments`. São mais adequadas para funções anônimas e callbacks.
Como você pode criar um objeto em JavaScript usando a notação literal?,"Você pode criar um objeto usando a notação literal com chaves `{}` e definindo pares chave-valor dentro das chaves, como: `let pessoa = { nome: ""João"", idade: 30 };`."
O que é o método `map()` em arrays e como ele é usado?,`map()` é um método de array que cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. É usado para transformar os elementos de um array.
O que é o método `filter()` em arrays e como ele é usado?,`filter()` é um método de array que cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. É usado para selecionar elementos específicos de um array.
O que é o método `reduce()` em arrays e como ele é usado?,"`reduce()` é um método de array que aplica uma função contra um acumulador e cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor. É usado para realizar operações como somar, multiplicar ou combinar elementos de um array."
"Qual a diferença entre `let`, `const` e `var` ao declarar variáveis?","`var` tem escopo de função ou global e pode ser redeclarada e reatribuída. `let` tem escopo de bloco e pode ser reatribuída, mas não redeclarada no mesmo escopo. `const` tem escopo de bloco e não pode ser redeclarada nem reatribuída após a inicialização."
O que é o operador ternário e como ele é usado?,O operador ternário é uma forma concisa de escrever uma instrução `if...else`. Sua sintaxe é `condição ? expressão_se_verdadeiro : expressão_se_falso;`.
O que é o `typeof` operador e quais valores ele pode retornar?,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando. Ele pode retornar valores como ""number"", ""string"", ""boolean"", ""object"", ""undefined"", ""function"" e ""symbol""."
Como você pode converter uma string para um número em JavaScript?,"Você pode usar `Number()`, `parseInt()` ou `parseFloat()` para converter uma string para um número. `parseInt()` converte para um inteiro, `parseFloat()` para um número de ponto flutuante e `Number()` tenta converter para o tipo mais apropriado."
O que são template literals e como eles são usados?,Template literals são strings delimitadas por crases (`) que permitem a interpolação de variáveis e expressões dentro da string. Eles são usados para criar strings dinâmicas e multilinhas.
"Explique o conceito de ""truthy"" e ""falsy"" values em JavaScript.","""Truthy"" e ""falsy"" values são valores que são avaliados como `true` ou `false` em um contexto booleano. Valores ""falsy"" incluem `false`, `0`, `""""`, `null`, `undefined` e `NaN`. Todos os outros valores são considerados ""truthy""."
O que é o operador `&&` (AND lógico) e como ele funciona?,"O operador `&&` retorna o primeiro operando ""falsy"" encontrado ou o último operando se todos forem ""truthy"". Ele é usado para realizar operações lógicas AND."
O que é o operador `||` (OR lógico) e como ele funciona?,"O operador `||` retorna o primeiro operando ""truthy"" encontrado ou o último operando se todos forem ""falsy"". Ele é usado para realizar operações lógicas OR."
O que é o operador `!` (NOT lógico) e como ele funciona?,"O operador `!` retorna o inverso booleano do operando. Se o operando for ""truthy"", retorna `false`; se for ""falsy"", retorna `true`."
O que é o operador `in` em JavaScript e como ele é usado?,O operador `in` retorna `true` se uma propriedade especificada existe no objeto.  Exemplo: `'nome' in pessoa;`
O que é o operador `instanceof` em JavaScript e como ele é usado?,O operador `instanceof` testa se o protótipo da função construtora de um objeto aparece em algum lugar na cadeia de protótipos do objeto.
Como você pode criar uma cópia profunda de um objeto em JavaScript?,"Uma forma de criar uma cópia profunda é usando `JSON.parse(JSON.stringify(objeto))`. No entanto, isso não funciona para objetos que contêm funções, datas ou outros tipos não serializáveis em JSON."
O que são funções construtoras em JavaScript?,Funções construtoras são funções que são usadas para criar objetos. Elas são chamadas com o operador `new` e geralmente seguem a convenção de iniciar com letra maiúscula.
Explique o conceito de herança prototípica em JavaScript.,"Herança prototípica é um modelo de herança onde objetos herdam propriedades e métodos de seus protótipos. Cada objeto tem um protótipo, e a cadeia de protótipos permite que objetos acessem propriedades e métodos de objetos ancestrais."
O que é o `this` keyword em JavaScript e como seu valor é determinado?,O `this` é uma palavra-chave que se refere ao objeto no qual a função está sendo executada. Seu valor é determinado pelo contexto de chamada da função.
O que é uma função auto-invocável (IIFE)?,Uma IIFE (Immediately Invoked Function Expression) é uma função que é executada assim que é definida. Ela é usada para criar escopos privados e evitar a poluição do escopo global.
Como você pode escrever um comentário de uma linha e um comentário de várias linhas em JavaScript?,"Comentários de uma linha são escritos usando `//`, e comentários de várias linhas são escritos usando `/* ... */`."
O que é o DOM (Document Object Model) e como ele se relaciona com JavaScript?,"O DOM é uma representação em árvore da estrutura de um documento HTML ou XML. JavaScript usa o DOM para interagir com os elementos de uma página web, manipulando seu conteúdo, estilo e comportamento."
O que é o evento bubbling em JavaScript?,"Event bubbling é o processo em que um evento disparado em um elemento do DOM ""borbulha"" para cima na árvore do DOM, disparando os manipuladores de eventos dos elementos pai."
O que é o evento capturing em JavaScript?,"Event capturing é o processo oposto ao bubbling, onde um evento é capturado pelo elemento mais externo na árvore do DOM antes de ser disparado no elemento alvo."
Qual a diferença entre `localStorage` e `sessionStorage` em JavaScript?,"`localStorage` armazena dados permanentemente no navegador, enquanto `sessionStorage` armazena dados apenas durante a duração da sessão do navegador."
O que é o método `JSON.stringify()` e como ele é usado?,`JSON.stringify()` converte um objeto JavaScript em uma string JSON. Ele é usado para serializar dados para armazenamento ou transmissão.
O que é o método `JSON.parse()` e como ele é usado?,`JSON.parse()` converte uma string JSON em um objeto JavaScript. Ele é usado para desserializar dados recebidos de uma fonte externa ou armazenados anteriormente.
O que é o método `setTimeout()` e como ele é usado?,`setTimeout()` agenda a execução de uma função após um determinado período de tempo (em milissegundos). Ele é usado para executar código assíncrono após um atraso.
O que é o método `setInterval()` e como ele é usado?,`setInterval()` executa repetidamente uma função a cada determinado período de tempo (em milissegundos). Ele é usado para executar código assíncrono em intervalos regulares.
Como você pode interromper a execução de um `setInterval()`?,"Você pode interromper a execução de um `setInterval()` usando a função `clearInterval()`, passando o ID retornado por `setInterval()` como argumento."
O que é o `use strict` em JavaScript e qual seu propósito?,"`use strict` é uma diretiva que habilita o modo estrito em JavaScript. Ele ajuda a escrever código mais seguro e limpo, aplicando regras mais rigorosas e lançando erros para práticas ruins."
O que é o método `forEach()` em arrays e como ele é usado?,`forEach()` é um método de array que executa uma função para cada elemento do array. Ele é usado para iterar sobre os elementos de um array e realizar alguma ação em cada um.
Como você pode ordenar um array de números em JavaScript?,"Você pode usar o método `sort()` com uma função de comparação para ordenar um array de números. Exemplo: `numeros.sort((a, b) => a - b);` para ordenação crescente."
O que é o operador spread (`...`) e como ele é usado?,"O operador spread (`...`) permite expandir um array ou objeto em elementos individuais. Ele é usado para copiar arrays, combinar arrays, passar argumentos para funções e criar cópias de objetos."
O que é o destructuring em JavaScript e como ele é usado?,Destructuring é uma sintaxe que permite extrair valores de arrays ou propriedades de objetos e atribuí-los a variáveis de forma mais concisa.
O que são iterators e iterables em JavaScript?,"Um iterable é um objeto que pode ser iterado (por exemplo, usando um loop `for...of`). Um iterator é um objeto que define como iterar sobre um iterable, fornecendo um método `next()` que retorna o próximo valor na sequência."
Como você pode verificar se um número é inteiro em JavaScript?,Você pode usar `Number.isInteger(numero)` para verificar se um número é inteiro.
O que é o método `Object.keys()` e como ele é usado?,`Object.keys()` retorna um array com todas as chaves de um objeto.
O que é o método `Object.values()` e como ele é usado?,`Object.values()` retorna um array com todos os valores de um objeto.
O que é o método `Object.entries()` e como ele é usado?,"`Object.entries()` retorna um array de arrays, onde cada array interno contém um par chave-valor de um objeto."
Como você pode clonar um array em JavaScript?,"Você pode clonar um array usando o operador spread (`...`), o método `slice()` ou o método `Array.from()`."
O que é o operador `??` (nullish coalescing operator) e como ele é usado?,"O operador `??` retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`, caso contrário, retorna o operando da esquerda."
O que é o operador `?.` (optional chaining operator) e como ele é usado?,O operador `?.` permite acessar propriedades de um objeto sem causar um erro se uma propriedade intermediária for `null` ou `undefined`. Ele retorna `undefined` se a propriedade não existir.
O que são promises em JavaScript e como elas são usadas para lidar com código assíncrono?,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas têm três estados: pendente, resolvida e rejeitada. São usadas para simplificar o tratamento de código assíncrono e evitar o ""callback hell""."
O que são as palavras-chave `async` e `await` em JavaScript e como elas são usadas com promises?,"`async` é uma palavra-chave que declara uma função assíncrona, que sempre retorna uma promise. `await` é uma palavra-chave que pausa a execução da função assíncrona até que a promise seja resolvida ou rejeitada. Elas tornam o código assíncrono mais legível e semelhante ao código síncrono."
O que é o método `Promise.all()` e como ele é usado?,`Promise.all()` recebe um array de promises e retorna uma única promise que é resolvida quando todas as promises no array são resolvidas ou rejeitada se alguma promise for rejeitada.
O que é o método `Promise.race()` e como ele é usado?,`Promise.race()` recebe um array de promises e retorna uma promise que é resolvida ou rejeitada assim que a primeira promise no array for resolvida ou rejeitada.
O que é um try...catch statement em JavaScript e para que ele é usado?,"A instrução `try...catch` é usada para lidar com exceções em JavaScript. O código que pode lançar uma exceção é colocado dentro do bloco `try`, e o código que lida com a exceção é colocado dentro do bloco `catch`."
O que é o bloco `finally` em um try...catch...finally statement e quando ele é executado?,"O bloco `finally` é executado sempre após o bloco `try` e o bloco `catch`, independentemente de uma exceção ter sido lançada ou não. Ele é usado para realizar limpeza ou liberar recursos."
Como você pode lançar um erro personalizado em JavaScript?,"Você pode lançar um erro personalizado usando a palavra-chave `throw` seguida por um objeto `Error` ou uma string. Exemplo: `throw new Error(""Mensagem de erro personalizada"");`."
O que é um callback function?,"Uma callback function é uma função passada como um argumento para outra função, que é então invocada (chamada de volta) dentro da função externa para completar alguma ação."
Qual é a diferença entre uma função síncrona e assíncrona?,"Uma função síncrona é executada em ordem e bloqueia a execução de outras funções até que seja concluída. Uma função assíncrona permite que outras funções sejam executadas enquanto espera por uma operação ser concluída, utilizando callbacks, promises ou async/await para lidar com os resultados."
Como você pode evitar o callback hell em JavaScript?,"O callback hell pode ser evitado usando Promises, async/await, ou organizando o código em funções menores e mais gerenciáveis."
O que é o padrão de módulo em JavaScript e por que é importante?,"O padrão de módulo é uma forma de encapsular código JavaScript em módulos reutilizáveis e independentes. Ele ajuda a evitar conflitos de nomes, organizar o código e promover a reutilização."
Como você pode criar um módulo em JavaScript usando IIFE (Immediately Invoked Function Expression)?,Você pode criar um módulo usando IIFE envolvendo o código do módulo em uma função anônima que é executada imediatamente. Isso cria um escopo privado para as variáveis e funções do módulo.
O que são eventos customizados em JavaScript?,Eventos customizados são eventos que você define e dispara manualmente em JavaScript. Eles permitem que você crie interações personalizadas e comunique entre diferentes partes do seu código.
Como você pode criar e disparar um evento customizado em JavaScript?,Você pode criar um evento customizado usando a classe `CustomEvent` e dispará-lo usando o método `dispatchEvent()` em um elemento do DOM.
O que é o padrão Observer (também conhecido como Pub/Sub) em JavaScript?,"O padrão Observer é um padrão de design onde um objeto (o subject) mantém uma lista de seus dependentes (os observers) e notifica-os automaticamente sobre quaisquer mudanças de estado, geralmente chamando um de seus métodos."
O que é currying em JavaScript?,Currying é uma técnica em JavaScript que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.
O que é a composição de funções em JavaScript?,"A composição de funções é o processo de combinar duas ou mais funções para produzir uma nova função. A nova função aplica cada uma das funções originais em sequência, passando o resultado de cada função para a próxima."
Qual é a diferença entre deep copy e shallow copy?,"Uma shallow copy copia as referências dos objetos originais. Se você modificar o objeto copiado, o objeto original também será modificado. Uma deep copy cria uma cópia completamente nova do objeto original, incluindo todos os objetos aninhados, para que as modificações no objeto copiado não afetem o original."
O que é o método `Object.freeze()` e como ele é usado?,"`Object.freeze()` congela um objeto. Um objeto congelado não pode mais ter novas propriedades adicionadas, propriedades existentes não podem ser removidas, e valores de propriedades existentes não podem ser alterados."
O que é o método `Object.seal()` e como ele é usado?,"`Object.seal()` sela um objeto. Um objeto selado não pode ter novas propriedades adicionadas ou removidas, mas os valores das propriedades existentes podem ser alterados."
O que são WeakMaps e WeakSets em JavaScript e em que diferem de Maps e Sets?,"WeakMaps e WeakSets são coleções que mantêm referências ""fracas"" aos seus objetos-chave. Isso significa que se não houver outras referências ao objeto-chave, o garbage collector pode removê-lo da memória, e a entrada correspondente em WeakMap/WeakSet também será removida.  Maps e Sets mantêm referências fortes, o que impede o garbage collection."
O que é o garbage collection em JavaScript e como ele funciona?,Garbage collection é um processo automático que libera memória que não está mais sendo usada por um programa. O motor JavaScript rastreia quais objetos ainda estão em uso e libera a memória ocupada por objetos que não estão mais acessíveis.
O que é o strict mode em JavaScript?,"Strict mode é um modo restrito de execução do JavaScript que impõe regras mais rigorosas para o código, ajudando a evitar erros comuns e tornando o código mais seguro. É ativado adicionando `""use strict"";` no início de um script ou função."
O que são Typed Arrays em JavaScript?,Typed Arrays são objetos semelhantes a arrays que fornecem um mecanismo para acessar dados binários brutos na memória. Eles são mais eficientes para lidar com grandes conjuntos de dados numéricos do que arrays regulares.
O que é o Blob (Binary Large Object) em JavaScript?,"Blob é um objeto que representa dados brutos imutáveis, como imagens, áudio ou vídeo. Eles podem ser usados para armazenar dados localmente ou para enviar dados para um servidor."
O que é o FileReader API em JavaScript?,"O FileReader API permite que você leia o conteúdo de arquivos armazenados no computador do usuário. Ele pode ser usado para ler arquivos como strings, arrays de bytes ou URLs de dados."
O que é o Fetch API em JavaScript?,O Fetch API fornece uma interface moderna para fazer requisições de rede em JavaScript. Ele é baseado em Promises e oferece mais flexibilidade e controle do que o antigo XMLHttpRequest.
O que são Web Workers em JavaScript?,"Web Workers permitem que você execute código JavaScript em segundo plano, em threads separados do thread principal do navegador. Isso evita que o código pesado bloqueie a interface do usuário."
O que é o Service Worker em JavaScript?,"Service Workers são scripts que são executados em segundo plano e atuam como um proxy entre o navegador e a rede. Eles podem ser usados para implementar funcionalidades como cache offline, notificações push e atualizações em segundo plano."
O que é o Canvas API em JavaScript?,O Canvas API fornece uma forma de desenhar gráficos 2D em tempo real em um elemento `<canvas>` HTML usando JavaScript.
O que é o SVG (Scalable Vector Graphics) em JavaScript?,SVG é um formato de imagem vetorial baseado em XML que pode ser manipulado usando JavaScript. Ele permite que você crie gráficos escaláveis e interativos.
O que é a API de Geolocation em JavaScript?,A API de Geolocation permite que você obtenha a localização geográfica do usuário usando JavaScript.
O que é a API de Web Storage em JavaScript?,A API de Web Storage fornece mecanismos para armazenar dados localmente no navegador do usuário. Inclui `localStorage` para armazenamento persistente e `sessionStorage` para armazenamento temporário.
O que é a API de IndexedDB em JavaScript?,A API de IndexedDB é um sistema de banco de dados NoSQL transacional que permite que você armazene grandes quantidades de dados estruturados localmente no navegador do usuário.
O que é a API de History em JavaScript?,"A API de History permite que você manipule o histórico de navegação do navegador usando JavaScript. Você pode adicionar, remover ou navegar pelas entradas do histórico."
O que é a API de Clipboard em JavaScript?,A API de Clipboard permite que você interaja com a área de transferência do sistema usando JavaScript. Você pode ler dados da área de transferência ou escrever dados para ela.
O que é o Cross-Origin Resource Sharing (CORS) e como ele afeta o JavaScript?,CORS é um mecanismo de segurança que restringe solicitações HTTP de scripts executados em uma origem para recursos em uma origem diferente. Ele é projetado para proteger os usuários contra ataques de script entre sites (XSS). JavaScript é afetado por CORS ao fazer requisições para domínios diferentes do domínio da página atual.
O que são cookie em JavaScript?,"Cookies são pequenos arquivos de texto que os sites armazenam no computador do usuário para lembrar informações sobre ele, como preferências de idioma, informações de login ou itens em um carrinho de compras. JavaScript pode acessar e manipular cookies para personalizar a experiência do usuário."
O que é o Event Loop em JavaScript e qual seu papel na execução de código assíncrono?,O Event Loop é um mecanismo que permite que o JavaScript execute código assíncrono de forma não bloqueante. Ele monitora a fila de tarefas e move tarefas da fila para a pilha de chamadas quando a pilha está vazia. Isso permite que o JavaScript execute código assíncrono sem bloquear a execução do thread principal.
O que é a pilha de chamadas (call stack) em JavaScript?,"A pilha de chamadas é uma estrutura de dados que rastreia a execução de funções em JavaScript. Cada vez que uma função é chamada, ela é adicionada ao topo da pilha. Quando uma função é concluída, ela é removida da pilha."
O que é a fila de tarefas (task queue) em JavaScript?,A fila de tarefas é uma fila que armazena as tarefas assíncronas que precisam ser executadas. O Event Loop monitora a fila de tarefas e move tarefas para a pilha de chamadas quando a pilha está vazia.
O que são template tags em JavaScript?,Template tags são funções que permitem personalizar a interpolação de template literals. Elas recebem o template literal como um argumento e podem processá-lo antes de retornar a string resultante.
O que é o padrão revealing module em JavaScript?,"O padrão revealing module é uma variação do padrão de módulo que expõe explicitamente apenas as funções e variáveis que devem ser acessíveis externamente, mantendo o restante privado."
O que são proxies em JavaScript?,"Proxies são objetos que permitem interceptar e personalizar operações em outros objetos, como leitura de propriedades, atribuição de propriedades e chamadas de funções."
O que são Reflect API em JavaScript?,"A Reflect API fornece métodos para realizar operações básicas em objetos, como ler propriedades, atribuir propriedades e chamar funções. Ela é usada em conjunto com proxies para interceptar e personalizar essas operações."
O que são Symbols em JavaScript?,Symbols são um novo tipo de dados primitivo em JavaScript que representam identificadores únicos. Eles são usados para criar propriedades de objeto que não podem ser acessadas ou sobrescritas acidentalmente.
O que é o Iterator Protocol em JavaScript?,O Iterator Protocol define uma interface para iteradores em JavaScript. Um objeto é um iterador se tiver um método `next()` que retorna um objeto com propriedades `value` (o próximo valor na sequência) e `done` (um booleano que indica se a iteração foi concluída).
O que é o Iterable Protocol em JavaScript?,O Iterable Protocol define uma interface para objetos iteráveis em JavaScript. Um objeto é iterável se tiver um método `[Symbol.iterator]()` que retorna um objeto iterador.
O que é o operador `for...of` em JavaScript e como ele é usado?,"O operador `for...of` é usado para iterar sobre os valores de um objeto iterável, como um array, string ou NodeList."
O que é o operador `for...in` em JavaScript e como ele é usado?,O operador `for...in` é usado para iterar sobre as propriedades enumeráveis de um objeto.
O que é o globalThis em JavaScript?,"`globalThis` é uma propriedade global que sempre se refere ao objeto global do ambiente de execução atual, seja ele um navegador (window), Node.js (global) ou outro ambiente."
O que é a API Intl em JavaScript?,"A API Intl fornece objetos e métodos para formatar datas, números, moedas e strings de acordo com as convenções de diferentes idiomas e regiões."
O que são erros `RangeError` em JavaScript?,"Erros `RangeError` são lançados quando você tenta usar um valor que está fora do intervalo permitido, como tentar criar um array com um tamanho negativo."
O que são erros `URIError` em JavaScript?,Erros `URIError` são lançados quando você tenta usar uma função URI com um URI inválido.
Como você pode debugar código JavaScript em um navegador?,"Você pode debugar código JavaScript em um navegador usando as ferramentas de desenvolvedor do navegador, que incluem um depurador que permite definir breakpoints, inspecionar variáveis e executar o código passo a passo."
O que é um breakpoint em um depurador JavaScript?,"Um breakpoint é um ponto em seu código onde o depurador irá pausar a execução, permitindo que você inspecione o estado do seu programa."
O que é linting em JavaScript?,"Linting é o processo de analisar o código-fonte para identificar erros potenciais, problemas de estilo e práticas ruins."
O que são linters JavaScript populares?,Linters JavaScript populares incluem ESLint e JSHint.
O que são os Design Patterns em JavaScript?,Design Patterns são soluções reutilizáveis para problemas comuns de design de software. Eles representam as melhores práticas evoluídas ao longo do tempo.
O que é o padrão Singleton em JavaScript?,O padrão Singleton garante que uma classe tenha apenas uma instância e fornece um ponto de acesso global a ela.
O que é o padrão Factory em JavaScript?,O padrão Factory fornece uma interface para criar objetos sem especificar suas classes concretas.
O que é o padrão Observer em JavaScript?,"O padrão Observer define uma dependência um-para-muitos entre objetos de forma que quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
O que é o padrão Module em JavaScript?,"O padrão Module encapsula código em um escopo privado, expondo apenas as partes necessárias para o exterior, promovendo a organização e evitando conflitos de nomes."
O que é o operador de coalescência nula (`??`) em JavaScript e como ele difere do operador OR lógico (`||`)?,"O operador de coalescência nula (`??`) retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`. O operador OR lógico (`||`) retorna o operando da direita quando o operando da esquerda é um valor ""falsy"" (como `0`, `""""`, `false`, `null`, `undefined`, `NaN`). A diferença é que `??` considera apenas `null` e `undefined` como valores ""nulos"", enquanto `||` considera todos os valores ""falsy""."
O que é a API de Intersection Observer em JavaScript?,"A API de Intersection Observer permite observar as mudanças na interseção de um elemento com um elemento ancestral ou com a viewport do documento. É útil para implementar carregamento preguiçoso de imagens, detecção de visibilidade de anúncios e outros efeitos baseados na posição do elemento."
O que são Mixins em JavaScript?,"Mixins são uma forma de reutilizar código em JavaScript, permitindo que você adicione funcionalidades a uma classe ou objeto, ""misturando"" as propriedades e métodos de outro objeto ou classe."
Explique o conceito de debounce em JavaScript.,"Debounce é uma técnica para limitar a taxa na qual uma função é executada. Ele garante que a função seja executada apenas após um certo período de inatividade (ou seja, após um período em que o evento que aciona a função não ocorra). É útil para lidar com eventos como rolagem, redimensionamento e digitação, evitando que a função seja executada com muita frequência."
Explique o conceito de throttle em JavaScript.,"Throttling é uma técnica para limitar a taxa na qual uma função é executada. Ele garante que a função seja executada no máximo uma vez em um determinado período de tempo. É útil para lidar com eventos como rolagem, redimensionamento e digitação, garantindo que a função não seja executada com muita frequência, mas que ainda seja executada em intervalos regulares."
"Como você pode detectar o tipo de dispositivo (desktop, mobile, tablet) usando JavaScript puro?","Detectar o tipo de dispositivo com precisão usando apenas JavaScript é desafiador, mas você pode usar a propriedade `navigator.userAgent` para inspecionar a string do agente do usuário e procurar palavras-chave como ""Mobile"", ""Tablet"" ou ""Android"". No entanto, essa abordagem pode ser pouco confiável devido a falsificações do agente do usuário.  A detecção de recursos (feature detection) é geralmente uma abordagem mais robusta."
O que é a Same-Origin Policy (Política da Mesma Origem) em JavaScript?,"A Same-Origin Policy é uma importante medida de segurança dos navegadores que restringe scripts de uma origem (domínio, protocolo e porta) de acessar dados de uma origem diferente. Isso"
Como declarar uma variável em JavaScript que não pode ser reatribuída após a inicialização?,"Utilize a palavra-chave `const`. Exemplo: `const nome = ""João"";`"
O que é hoisting em JavaScript e como ele afeta as variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted e inicializadas com `undefined`, enquanto funções declaradas com a palavra-chave `function` são completamente hoisted. Variáveis com `let` e `const` também sofrem hoisting, mas não são inicializadas, gerando um erro se acessadas antes da declaração."
Qual a diferença entre `map` e `forEach` em arrays?,"`map` cria um novo array com os resultados da chamada de uma função fornecida para cada elemento no array original. `forEach` executa uma função fornecida uma vez para cada elemento do array, mas não retorna um novo array."
Como você impede que um evento HTML se propague para elementos pai?,Use o método `event.stopPropagation()`.
Como selecionar um elemento HTML pelo seu ID usando JavaScript?,"Use o método `document.getElementById(""idDoElemento"")`."
O que é um evento em JavaScript? Dê exemplos.,"Um evento é uma ação ou ocorrência que acontece no navegador, como um clique do mouse, um pressionamento de tecla, um carregamento de página, etc. Exemplos: `click`, `mouseover`, `keydown`, `load`."
Como adicionar um ouvinte de evento a um elemento HTML usando JavaScript?,"Use o método `addEventListener()`. Exemplo: `elemento.addEventListener(""click"", function() { console.log(""Clicado!""); });`"
O que é JSON (JavaScript Object Notation)?,"É um formato de dados leve para intercâmbio de dados. É baseado em um subconjunto da linguagem JavaScript, mas é independente da linguagem e pode ser usado com muitas outras linguagens de programação."
Como converter um objeto JavaScript em uma string JSON?,Use o método `JSON.stringify(objeto)`.
Como converter uma string JSON em um objeto JavaScript?,Use o método `JSON.parse(string)`.
O que são funções de primeira classe em JavaScript?,"Funções de primeira classe significa que as funções podem ser tratadas como qualquer outra variável. Elas podem ser passadas como argumentos para outras funções, retornadas como valores de outras funções e atribuídas a variáveis."
O que são funções de ordem superior em JavaScript?,Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam funções como resultado.
Como declarar uma função em JavaScript?,"Usando a palavra-chave `function` ou usando uma expressão de função (arrow function). Exemplo: `function somar(a, b) { return a + b; }` ou `const somar = (a, b) => a + b;`"
"Qual a diferença entre `var`, `let` e `const` ao declarar variáveis?","`var` tem escopo de função ou global, `let` e `const` têm escopo de bloco.  `var` permite redeclaração e reatribuição, `let` permite reatribuição, mas não redeclaração no mesmo escopo, e `const` não permite nem redeclaração nem reatribuição."
O que são template literals em JavaScript?,"São strings que permitem a incorporação de expressões JavaScript dentro da string, usando a sintaxe `${expressão}`. Delimitados por backticks (``)."
Como criar um array em JavaScript?,"Usando a notação de colchetes `[]` ou usando o construtor `new Array()`. Exemplo: `const numeros = [1, 2, 3];` ou `const numeros = new Array(1, 2, 3);`"
Como adicionar um elemento ao final de um array em JavaScript?,Use o método `push()`. Exemplo: `numeros.push(4);`
Como remover o último elemento de um array em JavaScript?,Use o método `pop()`. Exemplo: `numeros.pop();`
O que é um objeto em JavaScript?,"É uma coleção de propriedades, onde cada propriedade é um par chave-valor."
Como acessar uma propriedade de um objeto em JavaScript?,"Usando a notação de ponto (`.`) ou a notação de colchetes (`[]`). Exemplo: `objeto.nome` ou `objeto[""nome""]`."
Como criar um novo objeto a partir de um protótipo existente?,Usando o método `Object.create()`.
O que é herança prototípica em JavaScript?,É um mecanismo no qual os objetos herdam propriedades e métodos de seus protótipos.
O que é coerção de tipo em JavaScript?,É a conversão automática de um tipo de dado para outro pelo JavaScript.
O que é o objeto `Error` em JavaScript?,É um objeto que representa um erro que ocorreu durante a execução do código.
Como lançar um erro em JavaScript?,"Usando a palavra-chave `throw`. Exemplo: `throw new Error(""Mensagem de erro"");`"
O que é o modo estrito (strict mode) em JavaScript?,"É uma forma de aplicar uma semântica mais restrita ao JavaScript, prevenindo erros comuns e tornando o código mais seguro. É habilitado adicionando `""use strict"";` no início do script ou da função."
Quais são algumas das restrições impostas pelo modo estrito?,"Proíbe o uso de variáveis não declaradas, impede a atribuição a propriedades somente leitura e elimina algumas funcionalidades consideradas ""más práticas""."
O que é uma função anônima em JavaScript?,É uma função que não tem um nome. Geralmente usada em expressões de função ou como callbacks.
O que são funções de seta (arrow functions) em JavaScript?,São uma forma mais concisa de escrever funções anônimas. Elas também têm um comportamento diferente do `this` em relação às funções tradicionais.
Como usar a palavra-chave `return` em uma função?,"A palavra-chave `return` termina a execução da função e retorna um valor. Se `return` for usado sem um valor, retorna `undefined`."
O que é recursão em JavaScript?,É quando uma função chama a si mesma dentro de sua própria definição.
Como gerar um número aleatório em JavaScript?,"Use o método `Math.random()`, que retorna um número pseudoaleatório entre 0 (inclusive) e 1 (exclusivo)."
Como arredondar um número para o inteiro mais próximo em JavaScript?,Use o método `Math.round()`.
O que são strings em JavaScript?,São sequências de caracteres Unicode.
Como concatenar strings em JavaScript?,Usando o operador `+` ou o método `concat()`.
Como obter o comprimento de uma string em JavaScript?,Use a propriedade `length`. Exemplo: `string.length`.
Como extrair uma parte de uma string em JavaScript?,"Use os métodos `slice()`, `substring()` ou `substr()`."
Como criar uma expressão regular em JavaScript?,Usando a notação literal (entre barras `/`) ou usando o construtor `new RegExp()`.
Como verificar se uma string corresponde a uma expressão regular em JavaScript?,Use o método `test()` da expressão regular ou o método `search()` da string.
O que são loops em JavaScript?,São estruturas de controle que permitem executar um bloco de código repetidamente.
Quais são os tipos de loops em JavaScript?,"`for`, `while`, `do...while`, `for...in`, `for...of`."
Como interromper a execução de um loop em JavaScript?,Use a palavra-chave `break`.
Como pular para a próxima iteração de um loop em JavaScript?,Use a palavra-chave `continue`.
O que são condicionais em JavaScript?,São estruturas de controle que permitem executar um bloco de código com base em uma condição.
Quais são os tipos de condicionais em JavaScript?,"`if`, `else if`, `else`, `switch`."
O que é o operador lógico AND (`&&`) em JavaScript?,"Retorna `true` se ambas as expressões forem verdadeiras, caso contrário retorna `false`."
O que é o operador lógico OR (`||`) em JavaScript?,"Retorna `true` se pelo menos uma das expressões for verdadeira, caso contrário retorna `false`."
O que é o operador lógico NOT (`!`) em JavaScript?,Inverte o valor booleano de uma expressão.
O que é o operador de atribuição em JavaScript?,É o operador `=` que atribui um valor a uma variável.
Quais são os operadores de atribuição compostos em JavaScript?,"`+=`, `-=`, `*=`, `/=`, `%=`, `**=`."
O que é o operador de incremento (`++`) em JavaScript?,Incrementa o valor de uma variável em 1.
O que é o operador de decremento (`--`) em JavaScript?,Decrementa o valor de uma variável em 1.
O que é o operador de exponenciação (`**`) em JavaScript?,Eleva uma base a um expoente.
O que é o operador resto/módulo (`%`) em JavaScript?,Retorna o resto da divisão entre dois números.
O que é programação assíncrona em JavaScript?,É um modelo de programação que permite que o código continue executando sem esperar que uma operação de longa duração seja concluída.
Como lidar com o resultado de uma Promise?,Use os métodos `then()` (para sucesso) e `catch()` (para erro).
O que são `async` e `await` em JavaScript?,"`async` é usado para declarar uma função assíncrona, e `await` é usado para esperar que uma Promise seja resolvida dentro de uma função `async`."
Como obter o tamanho da janela do navegador em JavaScript?,Use as propriedades `window.innerWidth` e `window.innerHeight`.
Como redirecionar o usuário para outra página em JavaScript?,Use a propriedade `window.location.href`.
Como exibir um alerta ao usuário em JavaScript?,Use o método `window.alert()`.
Como exibir um prompt para o usuário em JavaScript?,Use o método `window.prompt()`.
Como obter confirmação do usuário em JavaScript?,Use o método `window.confirm()`.
Como criar um cookie em JavaScript?,Atribuindo um valor à propriedade `document.cookie`.
Como ler um cookie em JavaScript?,Acessando a propriedade `document.cookie`.
O que é o localStorage em JavaScript?,É uma API do navegador que permite armazenar dados no navegador do usuário de forma persistente.
Como armazenar dados no localStorage em JavaScript?,Use o método `localStorage.setItem()`.
Como recuperar dados do localStorage em JavaScript?,Use o método `localStorage.getItem()`.
O que é o sessionStorage em JavaScript?,"É semelhante ao localStorage, mas os dados são armazenados apenas durante a sessão do navegador."
Como remover um item do localStorage em JavaScript?,Use o método `localStorage.removeItem()`.
Como limpar todo o localStorage em JavaScript?,Use o método `localStorage.clear()`.
O que é um módulo em JavaScript?,É uma unidade de código reutilizável que pode ser importada e usada em outros arquivos JavaScript.
Como importar um módulo em JavaScript (ES Modules)?,Use a palavra-chave `import`. Exemplo: `import { minhaFuncao } from './meuModulo.js';`
Como exportar um módulo em JavaScript (ES Modules)?,Use a palavra-chave `export`. Exemplo: `export function minhaFuncao() { ... }` ou `export default minhaFuncao;`
Qual a diferença entre `export default` e `export named`?,"`export default` exporta um único valor padrão do módulo, enquanto `export named` exporta múltiplos valores com nomes específicos."
Como criar um objeto `Date` em JavaScript?,Usando o construtor `new Date()`.
Como obter o ano de um objeto `Date` em JavaScript?,Use o método `getFullYear()`.
Como obter o mês de um objeto `Date` em JavaScript?,"Use o método `getMonth()`. (Retorna um valor de 0 a 11, onde 0 é Janeiro)."
Como obter o dia do mês de um objeto `Date` em JavaScript?,Use o método `getDate()`.
Como obter o dia da semana de um objeto `Date` em JavaScript?,"Use o método `getDay()`. (Retorna um valor de 0 a 6, onde 0 é Domingo)."
Como formatar uma data em JavaScript?,"Usando os métodos do objeto `Date` e concatenando os resultados, ou usando bibliotecas de formatação de data."
O que é o método `parseInt()` em JavaScript?,Converte uma string para um número inteiro.
O que é o método `parseFloat()` em JavaScript?,Converte uma string para um número de ponto flutuante (decimal).
Qual a diferença entre `map()` e `reduce()` em arrays?,`map()` transforma cada elemento do array e retorna um novo array com os resultados. `reduce()` combina os elementos do array em um único valor.
Como verificar se um valor é um array em JavaScript?,Use o método `Array.isArray(valor)`.
Como clonar um array em JavaScript?,"Usando o método `slice()`, o operador spread (`...`), ou `Array.from()`."
Como encontrar um elemento em um array que satisfaça uma condição?,Use o método `find()`.
Como obter o índice de um elemento em um array que satisfaça uma condição?,Use o método `findIndex()`.
Como filtrar um array com base em uma condição?,Use o método `filter()`.
Como ordenar um array em JavaScript?,"Use o método `sort()`. (Por padrão, ordena lexicograficamente)."
Como inverter a ordem de um array em JavaScript?,Use o método `reverse()`.
Como remover elementos duplicados de um array em JavaScript?,Usando `Set` ou `filter()` com `indexOf()`.
Como juntar os elementos de um array em uma string?,Use o método `join()`.
O que são funções puras em JavaScript?,"São funções que sempre retornam o mesmo resultado para as mesmas entradas, e não têm efeitos colaterais."
O que são efeitos colaterais em programação?,"São modificações de estado fora do escopo da função, como alterar variáveis globais ou fazer requisições HTTP."
Como criar um objeto imutável em JavaScript?,Usando `Object.freeze()` ou bibliotecas como Immutable.js.
O que é a API Fetch em JavaScript?,É uma API moderna para fazer requisições HTTP no navegador.
Como fazer uma requisição GET usando a API Fetch?,`fetch('url').then(response => response.json()).then(data => console.log(data));`
Como fazer uma requisição POST usando a API Fetch?,"`fetch('url', { method: 'POST', body: JSON.stringify(data), headers: { 'Content-Type': 'application/json' } }).then(response => response.json()).then(data => console.log(data));`"
O que são cabeçalhos HTTP?,São informações adicionais enviadas com uma requisição ou resposta HTTP.
O que é o método `querySelector()` em JavaScript?,Seleciona o primeiro elemento dentro do documento que corresponde a um seletor CSS especificado.
O que é o método `querySelectorAll()` em JavaScript?,"Seleciona todos os elementos dentro do documento que correspondem a um seletor CSS especificado, retornando um NodeList."
Como adicionar uma classe CSS a um elemento usando JavaScript?,Use a propriedade `classList.add('nomeDaClasse')`.
Como remover uma classe CSS de um elemento usando JavaScript?,Use a propriedade `classList.remove('nomeDaClasse')`.
Como verificar se um elemento possui uma classe CSS específica?,Use o método `classList.contains('nomeDaClasse')`.
Como alternar uma classe CSS de um elemento usando JavaScript?,Use o método `classList.toggle('nomeDaClasse')`.
Como modificar o estilo CSS de um elemento usando JavaScript?,Use a propriedade `style`. Exemplo: `elemento.style.backgroundColor = 'red';`
Como obter o valor de um atributo HTML de um elemento usando JavaScript?,Use o método `getAttribute('nomeDoAtributo')`.
Como definir o valor de um atributo HTML de um elemento usando JavaScript?,"Use o método `setAttribute('nomeDoAtributo', 'valor')`."
Como criar um novo elemento HTML usando JavaScript?,Use o método `document.createElement('nomeDaTag')`.
Como adicionar um elemento HTML a outro elemento usando JavaScript?,Use o método `appendChild()` ou `insertBefore()`.
Como remover um elemento HTML do DOM usando JavaScript?,Use o método `removeChild()`.
O que são Data Attributes (atributos `data-*`) em HTML?,São atributos personalizados que permitem armazenar dados adicionais em elementos HTML.
Como acessar um Data Attribute em JavaScript?,Use a propriedade `dataset`. Exemplo: `elemento.dataset.meuDado`.
O que é event delegation em JavaScript?,"É uma técnica para adicionar um ouvinte de evento a um elemento pai, em vez de adicionar a cada elemento filho individualmente."
Quais são os benefícios do event delegation?,"Melhora o desempenho, reduz o consumo de memória e facilita o gerenciamento de eventos em elementos criados dinamicamente."
O que é debouncing em JavaScript?,"É uma técnica para limitar a frequência com que uma função é executada, adiando sua execução até que um determinado período de tempo tenha se passado sem novas invocações."
O que é throttling em JavaScript?,"É uma técnica para limitar a frequência com que uma função é executada, garantindo que ela seja executada no máximo uma vez a cada determinado período de tempo."
O que são iterators e generators em JavaScript?,"Iterators são objetos que definem uma sequência e como acessar seus valores um por vez. Generators são funções que podem ser pausadas e retomadas, permitindo a criação de iterators mais facilmente."
Como criar um iterator em JavaScript?,Implementando um objeto com um método `next()` que retorna um objeto com as propriedades `value` e `done`.
Como criar um generator em JavaScript?,Usando a palavra-chave `function*` e a palavra-chave `yield` para pausar a execução da função.
O que é metaprogramação em JavaScript?,"É a capacidade de escrever código que manipula outros códigos, como inspecionar, modificar ou até mesmo gerar código novo em tempo de execução.

Espero que esta lista seja útil e abranja uma variedade de conceitos importantes em JavaScript.  Se precisar de mais, é só pedir!"
Explique o conceito de hoisting em JavaScript.,"Hoisting é um comportamento do JavaScript onde declarações de variáveis e funções são movidas para o topo do seu escopo antes da execução do código. No entanto, apenas a declaração é movida, não a inicialização (para variáveis).

**4.**"
O que é um closure em JavaScript e como ele funciona?,"Um closure é a capacidade de uma função interna acessar variáveis da função externa que a envolve, mesmo depois que a função externa já terminou de executar. Ele ""lembra"" o ambiente léxico em que foi criado.

**5.**"
Como você impede que um evento padrão de um elemento HTML ocorra em JavaScript?,"Você pode usar o método `event.preventDefault()` dentro do manipulador de eventos.

**7.**"
Explique o que são template literals em JavaScript e como usá-los.,"Template literals são strings delimitadas por crases (` `) que permitem inserir expressões JavaScript dentro delas usando `${expressao}`. Eles também suportam strings multi-linha.

**8.**"
O que é a `strict mode` em JavaScript e como ativá-la?,"A `strict mode` é uma forma de impor uma análise mais rigorosa do código JavaScript, ajudando a prevenir erros comuns e práticas consideradas ruins. É ativada adicionando `""use strict"";` no início de um script ou função.

**9.**"
Explique o que é o método `filter()` em arrays JavaScript.,"`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.

**15.**"
O que faz o método `reduce()` em arrays JavaScript?,"`reduce()` executa uma função redutora (fornecida por você) em cada elemento do array, resultando em um único valor de saída.

**16.**"
Como você converte um valor para um número em JavaScript?,"Você pode usar as funções `Number()`, `parseInt()` ou `parseFloat()`.

**17.**"
Como você seleciona um elemento HTML usando JavaScript?,"Você pode usar métodos como `document.getElementById()`, `document.querySelector()` ou `document.querySelectorAll()`.

**19.**"
Como você altera o conteúdo de um elemento HTML usando JavaScript?,"Você pode usar a propriedade `textContent` ou `innerHTML` do elemento.

**20.**"
O que é um evento em JavaScript?,"Um evento é uma ação ou ocorrência que acontece no navegador, como um clique do mouse, o carregamento de uma página ou a digitação em um campo de texto.

**21.**"
Como você adiciona um ouvinte de evento a um elemento HTML usando JavaScript?,"Você pode usar o método `addEventListener()` no elemento.

**22.**"
Explique o conceito de bubbling de eventos em JavaScript.,"Bubbling é quando um evento acionado em um elemento filho ""borbulha"" para cima na árvore do DOM, acionando os manipuladores de evento dos elementos pais.

**23.**"
O que é o método `stopPropagation()` e quando você o usaria?,"`stopPropagation()` impede que um evento ""borbulhe"" para elementos pais no DOM, interrompendo a cadeia de eventos.  Você o usaria quando quiser que um evento seja tratado apenas no elemento atual.

**24.**"
Como você cria uma função em JavaScript?,"Você pode criar uma função usando a declaração de função (`function nomeDaFuncao() {}`) ou a expressão de função (`const nomeDaFuncao = function() {}`).

**25.**"
Qual a diferença entre uma declaração de função e uma expressão de função?,"Declarações de função são hoisted, enquanto expressões de função não são (ou seja, a expressão de função é hoist como uma variável, mas não será inicializada com a função).

**26.**"
Como você passa argumentos para uma função em JavaScript?,"Você passa argumentos dentro dos parênteses ao chamar a função: `nomeDaFuncao(argumento1, argumento2)`.

**28.**"
O que é o método `forEach()` em arrays JavaScript?,"`forEach()` executa uma função fornecida uma vez para cada elemento do array.  Diferente do `map()`, ele não retorna um novo array.

**33.**"
Como você remove o último elemento de um array em JavaScript?,"Você pode usar o método `pop()`.

**34.**"
Como você adiciona um elemento ao final de um array em JavaScript?,"Você pode usar o método `push()`.

**35.**"
Como você remove o primeiro elemento de um array em JavaScript?,"Você pode usar o método `shift()`.

**36.**"
Como você adiciona um elemento ao início de um array em JavaScript?,"Você pode usar o método `unshift()`.

**37.**"
O que é o método `splice()` em arrays JavaScript?,"`splice()` altera o conteúdo de um array removendo ou substituindo elementos existentes e/ou adicionando novos elementos no lugar.

**38.**"
Como você copia um array em JavaScript?,"Você pode usar o método `slice()` sem argumentos (`array.slice()`) ou o operador spread (`...array`).

**39.**"
O que é o operador spread (`...`) em JavaScript?,"O operador spread permite expandir um iterável (como um array, string ou objeto) em locais onde são esperados múltiplos argumentos (para chamadas de função) ou múltiplos elementos (para literais de array ou objetos).

**40.**"
Como você concatena arrays em JavaScript?,"Você pode usar o método `concat()` ou o operador spread (`...`).

**41.**"
O que é o método `join()` em arrays JavaScript?,"`join()` retorna uma string concatenando todos os elementos de um array, separados por um separador especificado (por padrão, uma vírgula).

**42.**"
Como você inverte a ordem dos elementos em um array em JavaScript?,"Você pode usar o método `reverse()`.

**43.**"
O que é o método `sort()` em arrays JavaScript?,"`sort()` ordena os elementos de um array no local e retorna o array ordenado.  Por padrão, ele ordena como strings.

**44.**"
Como você ordena um array de números corretamente em JavaScript?,"Você deve fornecer uma função de comparação ao método `sort()`: `array.sort((a, b) => a - b)`.

**45.**"
Como você gera um número aleatório em JavaScript?,"Você pode usar `Math.random()`, que retorna um número pseudo-aleatório entre 0 (inclusive) e 1 (exclusivo).

**47.**"
Como você arredonda um número para o inteiro mais próximo em JavaScript?,"Você pode usar `Math.round()`.

**48.**"
Como você arredonda um número para cima em JavaScript?,"Você pode usar `Math.ceil()`.

**49.**"
Como você arredonda um número para baixo em JavaScript?,"Você pode usar `Math.floor()`.

**50.**"
Como você obtém o ano atual usando o objeto `Date` em JavaScript?,"Você pode usar `new Date().getFullYear()`.

**52.**"
Como você obtém o mês atual usando o objeto `Date` em JavaScript?,"Você pode usar `new Date().getMonth()`.  (Lembre-se que os meses são baseados em zero, então janeiro é 0).

**53.**"
Como você obtém o dia do mês atual usando o objeto `Date` em JavaScript?,"Você pode usar `new Date().getDate()`.

**54.**"
O que é JSON?,"JSON (JavaScript Object Notation) é um formato leve de troca de dados. É fácil para humanos lerem e escreverem, e fácil para máquinas analisarem e gerarem.

**55.**"
Como você converte um objeto JavaScript para uma string JSON?,"Você pode usar o método `JSON.stringify()`.

**56.**"
Como você converte uma string JSON para um objeto JavaScript?,"Você pode usar o método `JSON.parse()`.

**57.**"
Como você exibe um alerta na janela do navegador usando JavaScript?,"Você pode usar `window.alert()` ou simplesmente `alert()`.

**59.**"
Como você define um timeout em JavaScript?,"Você pode usar a função `setTimeout()`.

**60.**"
Como você define um intervalo em JavaScript?,"Você pode usar a função `setInterval()`.

**61.**"
Como você limpa um timeout em JavaScript?,"Você pode usar a função `clearTimeout()`, passando o ID do timeout como argumento.

**62.**"
Como você limpa um intervalo em JavaScript?,"Você pode usar a função `clearInterval()`, passando o ID do intervalo como argumento.

**63.**"
Quais são os três estados possíveis de uma Promise?,"Pending (pendente), Fulfilled (cumprida) e Rejected (rejeitada).

**65.**"
Como você cria uma Promise em JavaScript?,"Você usa o construtor `new Promise((resolve, reject) => { ... })`.

**66.**"
Como você lida com o resultado de uma Promise cumprida?,"Você usa o método `.then()`.

**67.**"
Como você lida com o erro de uma Promise rejeitada?,"Você usa o método `.catch()`.

**68.**"
O que é o bloco `finally()` em Promises?,"O bloco `finally()` é executado independentemente de a Promise ser cumprida ou rejeitada. Geralmente é usado para realizar tarefas de limpeza.

**69.**"
O que são as palavras-chave `async` e `await` em JavaScript?,"`async` transforma uma função em uma função assíncrona, permitindo o uso de `await`. `await` pausa a execução da função assíncrona até que a Promise seja resolvida ou rejeitada.

**70.**"
Como você lida com erros em funções `async` e `await`?,"Você usa um bloco `try...catch`.

**71.**"
Como você exporta um módulo em JavaScript?,"Você pode usar `export default` para exportar um único valor ou `export` para exportar múltiplas variáveis, funções ou classes.

**73.**"
Como você importa um módulo em JavaScript?,"Você pode usar `import` para importar funcionalidades de outros módulos.

**74.**"
O que é o objeto `RegExp` em JavaScript?,"`RegExp` é um objeto embutido que representa expressões regulares, que são padrões usados para corresponder a combinações de caracteres em strings.

**75.**"
Como você verifica se uma string corresponde a uma expressão regular em JavaScript?,"Você pode usar o método `test()` do objeto `RegExp` ou o método `match()` da string.

**77.**"
"O que são os modificadores de expressões regulares em JavaScript (como `i`, `g`, `m`)?","*   `i`: Insensitive (ignora maiúsculas e minúsculas).
*   `g`: Global (encontra todas as correspondências, não apenas a primeira).
*   `m`: Multiline (permite que `^` e `$` correspondam ao início e ao fim de cada linha).

**78.**"
Como você substitui partes de uma string usando uma expressão regular em JavaScript?,"Você pode usar o método `replace()` da string.

**79.**"
O que é o método `trim()` em strings JavaScript?,"`trim()` remove espaços em branco do início e do fim de uma string.

**80.**"
Como você converte uma string para letras maiúsculas em JavaScript?,"Você pode usar o método `toUpperCase()`.

**81.**"
Como você converte uma string para letras minúsculas em JavaScript?,"Você pode usar o método `toLowerCase()`.

**82.**"
Como você encontra o índice de uma substring em uma string em JavaScript?,"Você pode usar o método `indexOf()`.

**83.**"
Como você extrai uma parte de uma string em JavaScript?,"Você pode usar os métodos `slice()`, `substring()` ou `substr()`.

**84.**"
O que é o método `charAt()` em strings JavaScript?,"`charAt()` retorna o caractere em um índice específico em uma string.

**85.**"
O que é o método `split()` em strings JavaScript?,"`split()` divide uma string em um array de substrings, com base em um separador especificado.

**86.**"
Como você verifica se uma string começa com uma determinada substring em JavaScript?,"Você pode usar o método `startsWith()`.

**87.**"
Como você verifica se uma string termina com uma determinada substring em JavaScript?,"Você pode usar o método `endsWith()`.

**88.**"
O que são objetos em JavaScript?,"Objetos são estruturas de dados que contêm pares de chave-valor, representando entidades com propriedades e comportamentos (métodos).

**91.**"
O que são arrays em JavaScript?,"Arrays são objetos que representam listas ordenadas de valores.

**92.**"
Como você declara um objeto literal em JavaScript?,"`const objeto = { chave1: valor1, chave2: valor2 };`

**93.**"
Como você acessa as propriedades de um objeto em JavaScript?,"Você pode usar a notação de ponto (`objeto.chave`) ou a notação de colchetes (`objeto['chave']`).

**94.**"
Como você adiciona uma nova propriedade a um objeto em JavaScript?,"Você pode usar a notação de ponto ou de colchetes para atribuir um valor a uma nova chave: `objeto.novaChave = valor;` ou `objeto['novaChave'] = valor;`

**95.**"
Como você remove uma propriedade de um objeto em JavaScript?,"Você pode usar o operador `delete`: `delete objeto.chave;`

**96.**"
O que é o operador `in` em JavaScript?,"O operador `in` retorna `true` se uma propriedade especificada existir no objeto e `false` caso contrário.

**97.**"
Como você usa destructuring com objetos em JavaScript?,"`const { chave1, chave2 } = objeto;`

**102.**"
Como você usa destructuring com arrays em JavaScript?,"`const [elemento1, elemento2] = array;`

**103.**"
O que é o operador rest (`...`) em JavaScript (além de spread)?,"Quando usado em parâmetros de função, o operador rest coleta todos os argumentos restantes em um array. Ex: `function minhaFuncao(...args) {}`.

**104.**"
O que é o objeto global `this` em JavaScript?,"O valor de `this` depende de como a função é chamada. No escopo global, `this` se refere ao objeto global (window no navegador). Dentro de uma função, o valor de `this` depende de como a função é chamada.

**105.**"
Como o `this` se comporta dentro de uma função normal em JavaScript?,"Se a função é chamada como um método de um objeto, `this` se refere ao objeto. Se a função é chamada sozinha, `this` se refere ao objeto global (ou `undefined` em strict mode).

**106.**"
Como o `this` se comporta dentro de uma arrow function em JavaScript?,"Arrow functions não têm seu próprio `this`. `this` é lexicamente vinculado ao `this` do contexto circundante.

**107.**"
O que são métodos de array imutáveis?,"São métodos que, ao serem utilizados, não alteram o array original, retornando um novo array modificado. Ex: `map`, `filter`, `slice`.

**108.**"
O que são métodos de array mutáveis?,"São métodos que, ao serem utilizados, alteram o array original. Ex: `push`, `pop`, `splice`, `sort`, `reverse`.

**109.**"
O que é o Garbage Collector (coletor de lixo) em JavaScript?,"É um processo automático que libera a memória que não está mais sendo usada pelo programa.

**110.**"
O que é o escopo léxico?,"O escopo léxico significa que o escopo de uma variável é determinado pela sua posição no código fonte.

**111.**"
O que são truthy e falsy values em JavaScript?,"Valores truthy são valores que são avaliados como `true` em um contexto booleano. Valores falsy são valores que são avaliados como `false` em um contexto booleano.

**113.**"
Quais são os valores falsy em JavaScript?,"`false`, `0`, `-0`, `0n`, `""""`, `null`, `undefined`, e `NaN`.

**114.**"
O que é NaN em JavaScript?,"NaN (Not a Number) é um valor numérico especial que representa um valor que não é um número.

**115.**"
Como você verifica se um valor é NaN em JavaScript?,"Você pode usar a função `isNaN()`, mas é preferível usar `Number.isNaN()` para uma verificação mais precisa.

**116.**"
O que são comentários em JavaScript?,"Comentários são trechos de texto que são ignorados pelo interpretador JavaScript. Eles são usados para explicar o código.

**117.**"
Como você escreve um comentário de uma linha em JavaScript?,"Você usa `//`.

**118.**"
Como você escreve um comentário de várias linhas em JavaScript?,"Você usa `/* ... */`.

**119.**"
O que são operadores aritméticos em JavaScript?,"São operadores que realizam operações matemáticas, como `+`, `-`, `*`, `/`, `%`, `**`.

**121.**"
O que são operadores de comparação em JavaScript?,"São operadores que comparam dois valores, como `==`, `===`, `!=`, `!==`, `>`, `<`, `>=`, `<=`.

**122.**"
O que são operadores lógicos em JavaScript?,"São operadores que combinam expressões booleanas, como `&&` (AND), `||` (OR), `!` (NOT).

**123.**"
O que são operadores bitwise em JavaScript?,"São operadores que realizam operações em nível de bit, como `&`, `|`, `^`, `~`, `<<`, `>>`, `>>>`.

**124.**"
O que são operadores de incremento e decremento em JavaScript?,"São operadores que aumentam ou diminuem o valor de uma variável em 1, como `++` e `--`.

**125.**"
O que é o operador de concatenação de strings em JavaScript?,"É o operador `+` que concatena duas ou mais strings.

**126.**"
O que são declarações condicionais em JavaScript?,"São instruções que permitem executar diferentes blocos de código com base em uma condição, como `if`, `else if`, `else`.

**127.**"
O que é a declaração `switch` em JavaScript?,"É uma declaração que permite executar diferentes blocos de código com base no valor de uma expressão.

**128.**"
O que é o loop `for` em JavaScript?,"É um loop que executa um bloco de código um número específico de vezes.

**130.**"
O que é o loop `while` em JavaScript?,"É um loop que executa um bloco de código enquanto uma condição for verdadeira.

**131.**"
O que é o loop `do...while` em JavaScript?,"É um loop que executa um bloco de código pelo menos uma vez e, em seguida, repete enquanto uma condição for verdadeira.

**132.**"
O que é a declaração `break` em JavaScript?,"A declaração `break` termina a execução de um loop ou `switch`.

**133.**"
O que é a declaração `continue` em JavaScript?,"A declaração `continue` pula a iteração atual de um loop e continua para a próxima iteração.

**134.**"
O que são erros em JavaScript?,"Erros são problemas que ocorrem durante a execução do código.

**135.**"
Quais são alguns tipos de erros comuns em JavaScript?,"`TypeError`, `ReferenceError`, `SyntaxError`, `RangeError`.

**138.**"
O que é o padrão de projeto Module Pattern em JavaScript?,"É um padrão para criar módulos em JavaScript usando closures para encapsular variáveis e funções privadas.

**139.**"
O que é o padrão de projeto Revealing Module Pattern em JavaScript?,"É uma variação do Module Pattern onde todas as variáveis e funções são privadas, e apenas um conjunto selecionado de funções é revelado publicamente.

**140.**"
O que é Currying em JavaScript?,"Currying é uma técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.

**141.**"
O que é a Temporal Dead Zone (TDZ)?,"A TDZ é a área no código onde uma variável declarada com `let` ou `const` existe, mas não pode ser acessada antes de sua declaração ser avaliada.

**143.**"
Como você acessa o protótipo de um objeto em JavaScript?,"Você pode usar `Object.getPrototypeOf(objeto)` ou `objeto.__proto__` (este último não é recomendado em código de produção).

**145.**"
Como você cria um objeto com um protótipo específico em JavaScript?,"Você pode usar `Object.create(prototipo)`.

**147.**"
O que é uma classe em JavaScript?,"Classes são uma sintaxe para criar objetos e lidar com herança prototípica. São, essencialmente, ""syntactic sugar"" sobre o sistema de protótipos existente.

**148.**"
O que é o construtor de uma classe em JavaScript?,"O construtor é um método especial dentro de uma classe que é chamado quando um novo objeto da classe é criado.  Ele inicializa as propriedades do objeto.

**150.**"
O que é o método `super()` em classes JavaScript?,"Dentro de uma classe filha (subclasse), `super()` é usado para chamar o construtor da classe pai (superclasse). Também é usado para acessar métodos da classe pai."
O que são closures em JavaScript e como elas funcionam?,"Closures são funções que ""lembram"" do ambiente léxico onde foram criadas, mesmo após esse ambiente não estar mais ativo. Isso permite que a função acesse variáveis que estavam em escopo quando ela foi definida, mesmo que a função seja executada em outro contexto."
O que é hoisting em JavaScript e como ele se aplica a variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis (com `var`) e funções para o topo do escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto funções declaradas com `function` são hoisted com a definição completa. `let` e `const` também são hoisted, mas não inicializadas, resultando em um erro se acessadas antes da declaração."
O que é o método `bind()` em JavaScript e qual é a sua utilidade?,"`bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido. Ele também pode predefinir alguns argumentos da função original. É útil para controlar o contexto de `this` em callbacks e outras situações."
Qual a diferença entre uma função declarativa e uma função expressiva em JavaScript?,"Uma função declarativa é definida usando a palavra-chave `function` seguida pelo nome da função. Uma função expressiva é atribuída a uma variável, por exemplo, `const minhaFuncao = function() {};`. Funções declarativas são hoisted, funções expressivas não."
O que são template literals em JavaScript e como eles são usados?,Template literals são strings delimitadas por backticks (``). Eles permitem interpolação de variáveis usando `${variavel}` e podem conter quebras de linha.
"Explique o conceito de ""truthy"" e ""falsy"" em JavaScript.","Valores ""truthy"" são valores que são avaliados como `true` em um contexto booleano. Valores ""falsy"" são avaliados como `false`. Exemplos de falsy são `false`, `0`, `''`, `null`, `undefined`, `NaN`. Todos os outros valores são truthy."
Como você pode verificar se um valor é um array em JavaScript?,Você pode usar `Array.isArray(valor)` para verificar se um valor é um array.
O que é o método `map()` em arrays JavaScript e qual a sua finalidade?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele não modifica o array original.
Qual a diferença entre `forEach()` e `map()` em arrays JavaScript?,"Ambos iteram sobre os elementos de um array. `forEach()` executa uma função para cada elemento, mas não retorna nada. `map()` executa uma função para cada elemento e retorna um novo array com os resultados."
O que é o método `filter()` em arrays JavaScript e qual a sua finalidade?,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em arrays JavaScript e qual a sua finalidade?,`reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
Explique o que é o Spread Operator (...) em JavaScript e como ele é usado.,"O Spread Operator permite que um iterável (como um array ou string) seja expandido em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados.  É usado para copiar arrays, combinar arrays e passar argumentos para funções."
O que é Destructuring em JavaScript e como ele facilita o trabalho com objetos e arrays?,Destructuring permite extrair valores de objetos e arrays e atribuí-los a variáveis de forma concisa.
O que são Promises em JavaScript e qual o problema que elas resolvem?,"Promises são objetos que representam o eventual resultado (completo ou falha) de uma operação assíncrona. Elas resolvem o problema do ""callback hell"" e tornam o código assíncrono mais legível e gerenciável."
"Explique os estados de uma Promise (pending, fulfilled, rejected).","Uma Promise tem três estados: `pending` (estado inicial, nem realizado nem rejeitado), `fulfilled` (operação concluída com sucesso) e `rejected` (operação falhou)."
O que são as palavras-chave `async` e `await` em JavaScript e como elas são usadas com Promises?,"`async` transforma uma função em uma função assíncrona, permitindo o uso de `await`. `await` pausa a execução da função assíncrona até que uma Promise seja resolvida ou rejeitada.  Simplifica a escrita e leitura de código assíncrono."
O que é o objeto `JSON` em JavaScript e como ele é usado?,"`JSON` (JavaScript Object Notation) é um formato de dados leve para trocar informações. Em JavaScript, o objeto `JSON` fornece métodos para converter objetos JavaScript em strings JSON (`JSON.stringify()`) e strings JSON em objetos JavaScript (`JSON.parse()`)."
O que são os métodos `parseInt()` e `parseFloat()` em JavaScript?,`parseInt()` converte uma string em um número inteiro. `parseFloat()` converte uma string em um número de ponto flutuante.
O que é o método `isNaN()` em JavaScript?,"`isNaN()` verifica se um valor é `NaN` (Not-a-Number). No entanto, ele tem comportamentos inesperados devido à conversão de tipo. É recomendado usar `Number.isNaN()` em vez disso."
O que é o operador `typeof` em JavaScript e o que ele retorna?,"`typeof` retorna uma string indicando o tipo de dado de um operando.  Retorna strings como ""number"", ""string"", ""boolean"", ""object"", ""undefined"", ""function"", ""symbol"" e ""bigint""."
O que é o método `Object.keys()` em JavaScript e qual a sua finalidade?,`Object.keys()` retorna um array contendo os nomes de todas as propriedades enumeráveis de um objeto.
O que é o método `Object.values()` em JavaScript e qual a sua finalidade?,`Object.values()` retorna um array contendo os valores de todas as propriedades enumeráveis de um objeto.
O que é o método `Object.entries()` em JavaScript e qual a sua finalidade?,"`Object.entries()` retorna um array de arrays, onde cada array interno contém o par chave-valor de uma propriedade enumerável de um objeto."
O que são Set e Map em JavaScript (ES6)?,"`Set` é uma coleção de valores únicos. `Map` é uma coleção de pares chave-valor, onde chaves podem ser de qualquer tipo de dado."
"Qual a diferença entre `let`, `const` e `var` em JavaScript?","`var` tem escopo de função ou global, pode ser redeclarada e hoisted com `undefined`. `let` tem escopo de bloco, não pode ser redeclarada no mesmo escopo e é hoisted mas não inicializada. `const` tem escopo de bloco, não pode ser reatribuída (mas pode ser modificada se for um objeto ou array) e é hoisted mas não inicializada."
O que é o iterador em JavaScript e como ele se relaciona com os Generators?,"Um iterador é um objeto que define uma sequência e retorna um valor por vez quando chamado. Generators implementam o protocolo iterador, permitindo que sejam usados em loops `for...of`."
O que é um WeakSet em JavaScript e qual a sua principal característica?,"`WeakSet` é uma coleção de objetos. A principal característica é que os objetos em um `WeakSet` são fracos, ou seja, se um objeto não tiver outras referências a ele, ele pode ser coletado pelo coletor de lixo, mesmo que esteja em um `WeakSet`."
O que é um WeakMap em JavaScript e qual a sua principal característica?,"`WeakMap` é uma coleção de pares chave-valor, onde as chaves devem ser objetos. As chaves são fracas, ou seja, se um objeto-chave não tiver outras referências a ele, ele pode ser coletado pelo coletor de lixo, mesmo que esteja em um `WeakMap`."
O que é a API de Reflection em JavaScript (Reflect)?,"A API `Reflect` fornece métodos para interceptar e personalizar operações fundamentais da linguagem JavaScript, como acesso a propriedades, criação de objetos e chamadas de função."
O que é o Proxy Object em JavaScript?,"Um `Proxy` object permite interceptar e personalizar operações em um objeto alvo (target). Você pode definir manipuladores para interceptar operações como leitura de propriedades, escrita de propriedades e chamadas de função."
Qual é o propósito do `use strict` em JavaScript?,"`""use strict""` ativa o modo estrito no JavaScript, que impõe regras mais rígidas e ajuda a evitar erros comuns. Por exemplo, proíbe o uso de variáveis não declaradas e atribuições a propriedades somente leitura."
Explique o conceito de Currying em JavaScript.,"Currying é uma técnica onde uma função que aceita múltiplos argumentos é transformada em uma sequência de funções, cada uma aceitando um único argumento.  Cada função retorna a próxima função na sequência até que todos os argumentos sejam fornecidos, momento em que a função original é executada."
O que é Composição de Funções em JavaScript?,Composição de funções é o processo de combinar duas ou mais funções para produzir uma nova função.  O resultado de uma função é passado como argumento para a próxima.
O que é Memoization em JavaScript?,Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras e retorna o resultado armazenado quando as mesmas entradas ocorrem novamente.
Explique o que são Higher-Order Functions em JavaScript.,"Higher-order functions são funções que podem receber outras funções como argumentos ou retornar funções como seus resultados.  Exemplos comuns são `map`, `filter` e `reduce`."
O que é programação declarativa em JavaScript?,"Programação declarativa é um paradigma de programação que se concentra em *o que* o programa deve realizar, em vez de *como* ele deve realizar.  O código é expresso em termos de lógica e funções, em vez de instruções passo a passo."
O que é programação imperativa em JavaScript?,Programação imperativa é um paradigma de programação que descreve *como* o programa deve realizar uma tarefa.  O código é expresso em termos de instruções passo a passo que modificam o estado do programa.
O que é o objeto `Math` em JavaScript e quais são algumas de suas funções?,"O objeto `Math` fornece propriedades e métodos para constantes e funções matemáticas. Exemplos de funções incluem `Math.random()`, `Math.floor()`, `Math.ceil()`, `Math.round()`, `Math.max()`, `Math.min()`."
O que é o método `Date.now()` em JavaScript?,"`Date.now()` retorna o número de milissegundos que se passaram desde 1º de janeiro de 1970, 00:00:00 UTC (o Epoch Unix)."
Como você formata datas em JavaScript?,"Você pode usar os métodos do objeto `Date` como `toLocaleDateString()`, `toLocaleTimeString()`, `toLocaleString()` ou usar bibliotecas externas para formatação mais avançada."
Como você cria um timer em JavaScript?,"Você pode usar as funções `setTimeout()` para executar um código uma vez após um atraso especificado, ou `setInterval()` para executar um código repetidamente em intervalos regulares."
Como você limpa um timer em JavaScript?,"Você pode usar `clearTimeout()` para cancelar um timer definido com `setTimeout()`, ou `clearInterval()` para cancelar um timer definido com `setInterval()`."
O que é um event listener em JavaScript?,Um event listener é uma função que é executada quando um evento específico ocorre. Você pode adicionar um event listener a um elemento usando o método `addEventListener()`.
O que é event bubbling em JavaScript?,"Event bubbling é um processo em que um evento acionado em um elemento se propaga para cima na árvore DOM, acionando os event listeners dos elementos pai."
O que é event capturing em JavaScript?,Event capturing é um processo em que um evento é capturado pelo elemento mais externo na árvore DOM antes de atingir o elemento alvo.  É o oposto de event bubbling e precisa ser explicitamente definido ao adicionar o event listener.
Como você previne o comportamento padrão de um evento em JavaScript?,"Você pode usar o método `preventDefault()` do objeto de evento para impedir o comportamento padrão, como a navegação de um link."
Como você interrompe a propagação de um evento em JavaScript?,Você pode usar o método `stopPropagation()` do objeto de evento para impedir que o evento se propague para cima na árvore DOM.
O que é o DOM (Document Object Model) em JavaScript?,O DOM (Document Object Model) é uma representação em árvore da estrutura de um documento HTML ou XML. JavaScript pode ser usado para acessar e manipular o DOM para modificar o conteúdo e a estrutura da página web.
"Como você adiciona, remove ou modifica atributos de elementos HTML usando JavaScript?","Você pode usar os métodos `setAttribute()`, `getAttribute()`, `removeAttribute()` para manipular atributos."
Como você cria novos elementos HTML usando JavaScript?,Você pode usar o método `document.createElement()` para criar novos elementos HTML.
Como você adiciona elementos HTML ao DOM usando JavaScript?,"Você pode usar os métodos `appendChild()`, `insertBefore()` para adicionar elementos ao DOM."
Como você remove elementos HTML do DOM usando JavaScript?,Você pode usar o método `removeChild()` para remover elementos do DOM.
Como você altera o estilo de elementos HTML usando JavaScript?,Você pode acessar e modificar as propriedades do objeto `style` de um elemento para alterar seu estilo.
O que é o construtor em uma classe JavaScript?,O construtor é um método especial dentro de uma classe que é executado quando um novo objeto da classe é criado. Ele é usado para inicializar as propriedades do objeto.
Como você cria uma instância de uma classe JavaScript?,Você usa a palavra-chave `new` seguida pelo nome da classe para criar uma nova instância da classe.
O que é herança em JavaScript e como ela funciona com classes?,"Herança é um mecanismo que permite que uma classe (subclasse ou classe derivada) herde propriedades e métodos de outra classe (superclasse ou classe base). Em JavaScript, você usa a palavra-chave `extends` para implementar herança entre classes."
O que é encapsulamento em programação orientada a objetos? JavaScript suporta encapsulamento?,"Encapsulamento é o princípio de agrupar dados (atributos) e os métodos que operam sobre esses dados em uma unidade (classe) e restringir o acesso direto aos dados de fora da unidade. JavaScript tem suporte limitado para encapsulamento, mas usa convenções (como usar `_` prefixado aos nomes das propriedades para indicar que são privadas) para simular esse comportamento."
O que é polimorfismo em programação orientada a objetos? JavaScript suporta polimorfismo?,"Polimorfismo é a capacidade de um objeto assumir muitas formas. Em JavaScript, polimorfismo é tipicamente alcançado através de herança e duck typing (se parece com um pato e grasna como um pato, então é um pato)."
O que é o método `toString()` em JavaScript?,`toString()` é um método que está presente em todos os objetos JavaScript. Ele retorna uma representação em string do objeto. Você pode sobrescrever esse método para fornecer uma representação personalizada.
O que é o método `valueOf()` em JavaScript?,"`valueOf()` é um método que retorna o valor primitivo do objeto. É usado implicitamente quando JavaScript precisa converter um objeto em um valor primitivo, como em operações matemáticas ou comparações."
"O que são os diferentes tipos de operadores em JavaScript (aritméticos, atribuição, comparação, lógicos, bitwise, etc.)?","JavaScript possui diversos tipos de operadores:
    *   Aritméticos: `+`, `-`, `*`, `/`, `%`, `**`
    *   Atribuição: `=`, `+=`, `-=`, `*=`, `/=`, `%=`, `**=`
    *   Comparação: `==`, `===`, `!=`, `!==`, `>`, `<`, `>=`, `<=`
    *   Lógicos: `&&`, `||`, `!`
    *   Bitwise: `&`, `|`, `^`, `~`, `<<`, `>>`, `>>>`
    *   Ternário: `? :`
    *   Outros: `typeof`, `instanceof`, `in`, `delete`, `void`"
O que é o operador `delete` em JavaScript?,"O operador `delete` remove uma propriedade de um objeto. Ele retorna `true` se a propriedade foi removida com sucesso, e `false` caso contrário. Ele não pode ser usado para deletar variáveis declaradas com `var`, `let` ou `const`."
O que é o operador `void` em JavaScript?,O operador `void` avalia uma expressão e retorna `undefined`. Ele é frequentemente usado para evitar que um link execute uma ação ao ser clicado.
O que são as funções Arrow (=>) em JavaScript?,"Arrow functions (funções de seta) são uma forma mais concisa de escrever funções em JavaScript. Elas têm uma sintaxe mais curta e não vinculam seu próprio `this`, `arguments`, `super` ou `new.target`."
O que é o conceito de 'this' em JavaScript e como ele se comporta em diferentes contextos?,"O `this` é uma palavra-chave que se refere ao objeto que está executando o código atual. Seu valor depende de como a função é chamada. Em uma função global, `this` se refere ao objeto global (window no navegador). Em um método de objeto, `this` se refere ao objeto. Com `call`, `apply`, `bind`, você pode definir explicitamente o valor de `this`."
Qual é a diferença entre `call` e `apply` em JavaScript?,"Ambos `call` e `apply` são usados para invocar uma função com um valor específico para `this`. A diferença é como os argumentos são passados: `call` recebe os argumentos individualmente, enquanto `apply` recebe um array de argumentos."
O que são closures e qual a sua relação com o conceito de escopo léxico?,"Closures são funções que ""lembram"" do ambiente léxico em que foram criadas, mesmo após o ambiente não estar mais ativo. Isso significa que a função interna tem acesso às variáveis declaradas na função externa, mesmo depois que a função externa foi executada. O escopo léxico define a visibilidade das variáveis com base em sua posição no código-fonte."
O que é o padrão Módulo em JavaScript e como ele é implementado?,O padrão módulo é uma forma de encapsular código JavaScript para evitar conflitos de nomes e fornecer privacidade. Ele é implementado usando funções de auto-execução (IIFE) para criar um escopo privado para variáveis e funções.
O que é o padrão Revealing Module em JavaScript?,"O padrão Revealing Module é uma variação do padrão módulo em que todas as variáveis e funções são mantidas privadas dentro do módulo, e apenas um conjunto selecionado de funções é retornado como uma interface pública."
O que é programação funcional em JavaScript?,"Programação funcional é um paradigma de programação que trata a computação como a avaliação de funções matemáticas e evita mudanças de estado e dados mutáveis. Em JavaScript, isso envolve o uso de funções puras, imutabilidade e funções de alta ordem."
O que são funções puras em programação funcional?,"Funções puras são funções que sempre retornam o mesmo resultado para as mesmas entradas, e não têm efeitos colaterais (não modificam o estado externo)."
O que é imutabilidade em programação funcional?,"Imutabilidade é o princípio de que os dados não devem ser modificados após serem criados. Em vez disso, novas versões dos dados são criadas com as modificações."
Quais são os riscos de usar recursão em JavaScript e como você pode evitá-los?,"O principal risco da recursão é o estouro da pilha (stack overflow) se a função recursiva não tiver uma condição de parada adequada. Para evitar isso, certifique-se de que a função tenha uma condição de parada clara e que o problema seja reduzido a cada chamada recursiva.  Em alguns casos, a iteração pode ser uma alternativa mais eficiente."
O que é o tratamento de exceções em JavaScript e como ele é implementado?,"Tratamento de exceções é um mecanismo para lidar com erros e situações inesperadas que ocorrem durante a execução de um programa. Em JavaScript, ele é implementado usando os blocos `try`, `catch` e `finally`."
O que é o bloco `try...catch` em JavaScript?,O bloco `try` contém o código que pode lançar uma exceção. O bloco `catch` contém o código que é executado se uma exceção for lançada dentro do bloco `try`.
O que é o bloco `finally` em JavaScript?,"O bloco `finally` contém o código que é sempre executado, independentemente de uma exceção ter sido lançada ou não dentro do bloco `try`. É usado para limpar recursos ou executar outras ações necessárias."
Como você lança uma exceção personalizada em JavaScript?,Você pode usar a palavra-chave `throw` seguida por um objeto de erro ou qualquer outro valor para lançar uma exceção personalizada.
"O que são os diferentes tipos de erros em JavaScript (SyntaxError, TypeError, ReferenceError, etc.)?","JavaScript tem vários tipos de erros integrados:
    *   `SyntaxError`: Ocorre quando há um erro de sintaxe no código.
    *   `TypeError`: Ocorre quando um valor não é do tipo esperado.
    *   `ReferenceError`: Ocorre quando uma variável não foi declarada.
    *   `RangeError`: Ocorre quando um valor está fora do intervalo permitido.
    *   `URIError`: Ocorre quando há um problema com o uso de funções URI.
    *   `EvalError`: (Obsoleto) Ocorre quando há um problema com o uso da função `eval()`."
O que é a função `eval()` em JavaScript e por que seu uso é geralmente desencorajado?,`eval()` executa uma string como código JavaScript. Seu uso é geralmente desencorajado porque pode ser perigoso (risco de segurança) e lento (afeta o desempenho). É preferível usar alternativas mais seguras e eficientes.
O que é o método `JSON.stringify()` em JavaScript e como ele é usado?,`JSON.stringify()` converte um objeto JavaScript em uma string JSON. É usado para serializar dados JavaScript para armazenamento ou transmissão.
O que é o método `JSON.parse()` em JavaScript e como ele é usado?,`JSON.parse()` analisa uma string JSON e a converte em um objeto JavaScript. É usado para desserializar dados JSON recebidos de uma fonte externa.
"O que é o conceito de ""AJAX"" em JavaScript? (Sem mencionar a palavra ""XMLHttpRequest"")","AJAX é uma técnica que permite que páginas web atualizem conteúdo de forma assíncrona, sem recarregar a página inteira. Isso envolve enviar e receber dados do servidor em segundo plano e atualizar partes específicas da página com os novos dados."
Como você faz uma requisição HTTP em JavaScript usando a API `fetch`?,A API `fetch` fornece uma interface para fazer requisições HTTP. Você pode usar `fetch()` para enviar uma requisição para um servidor e receber uma resposta.
Como você lida com respostas de requisições HTTP em JavaScript usando a API `fetch`?,"A API `fetch` retorna uma Promise que resolve com um objeto `Response`. Você pode usar os métodos `response.json()`, `response.text()`, `response.blob()` para extrair o corpo da resposta em diferentes formatos."
O que são os códigos de status HTTP e como eles são usados em JavaScript?,"Códigos de status HTTP são códigos numéricos que indicam o resultado de uma requisição HTTP. Eles são usados para informar o cliente se a requisição foi bem-sucedida, redirecionada ou encontrou um erro. (Ex: 200 OK, 404 Not Found, 500 Internal Server Error)"
O que é CORS (Cross-Origin Resource Sharing) e como ele afeta as requisições HTTP em JavaScript?,"CORS (Cross-Origin Resource Sharing) é um mecanismo de segurança que restringe requisições HTTP entre origens diferentes (domínio, protocolo, porta). Se CORS estiver habilitado, o navegador bloqueará requisições de origem cruzada, a menos que o servidor de destino envie cabeçalhos de resposta que permitam a requisição."
Como você lida com erros em requisições HTTP em JavaScript usando a API `fetch`?,"A API `fetch` lança um erro apenas para erros de rede. Para lidar com erros de status HTTP (como 404 ou 500), você precisa verificar a propriedade `response.ok` da resposta e lançar um erro manualmente se não for bem-sucedida."
O que é o Local Storage em JavaScript e como ele é usado?,Local Storage é uma API que permite que páginas web armazenem dados localmente no navegador do usuário. Os dados são persistentes entre sessões do navegador e podem ser acessados posteriormente.
O que é o Session Storage em JavaScript e como ele é usado?,"Session Storage é uma API semelhante ao Local Storage, mas os dados são armazenados apenas durante a sessão atual do navegador. Os dados são perdidos quando o navegador é fechado."
Qual a diferença entre Local Storage e Session Storage em JavaScript?,"A principal diferença é a persistência dos dados. Local Storage armazena dados permanentemente (a menos que sejam excluídos explicitamente), enquanto Session Storage armazena dados apenas durante a sessão atual do navegador."
Como você armazena dados no Local Storage e Session Storage em JavaScript?,"Você pode usar os métodos `localStorage.setItem()` e `sessionStorage.setItem()` para armazenar dados, e os métodos `localStorage.getItem()` e `sessionStorage.getItem()` para recuperar dados."
Como você remove dados do Local Storage e Session Storage em JavaScript?,"Você pode usar os métodos `localStorage.removeItem()` e `sessionStorage.removeItem()` para remover dados, e os métodos `localStorage.clear()` e `sessionStorage.clear()` para remover todos os dados."
O que são Cookies em JavaScript e como eles são usados?,"Cookies são pequenos arquivos de texto que um site armazena no navegador do usuário para lembrar informações sobre o usuário. Eles são usados para rastrear o comportamento do usuário, personalizar a experiência e armazenar informações de login."
Como você define um Cookie em JavaScript?,"Você pode definir um cookie atribuindo uma string ao `document.cookie`. A string deve conter o nome do cookie, o valor e outras opções, como a data de expiração."
Como você lê um Cookie em JavaScript?,Você pode ler todos os cookies atribuídos ao domínio atual acessando a propriedade `document.cookie`. A string retornada contém todos os cookies separados por ponto e vírgula.
Como você exclui um Cookie em JavaScript?,"Para excluir um cookie, você precisa defini-lo novamente com a mesma chave e um valor vazio, e definir a data de expiração para um tempo passado."
Como você cria e usa um Web Worker em JavaScript?,Você cria um Web Worker instanciando um novo objeto `Worker` e passando o caminho para um arquivo JavaScript que contém o código a ser executado em segundo plano. Você pode se comunicar com o Web Worker usando os métodos `postMessage()` e `onmessage`.
O que são Service Workers em JavaScript?,"Service Workers são scripts que atuam como proxies entre o navegador e o servidor. Eles podem interceptar requisições de rede, armazenar em cache recursos e fornecer notificações push. Eles são usados para criar aplicativos web progressivos (PWAs) que funcionam offline."
O que é hoisting em JavaScript e como ele afeta variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seu escopo antes da execução do código.  As variáveis são hoisted com o valor `undefined`, enquanto as funções são hoisted com sua definição completa (se declaradas com a palavra-chave `function`)."
Explique o conceito de closure em JavaScript.,Um closure é a capacidade de uma função de lembrar e acessar seu escopo léxico (o escopo onde a função foi definida) mesmo quando é executada fora desse escopo.
O que é um objeto em JavaScript e como você o cria?,Um objeto é uma coleção de pares chave-valor. Você pode criar objetos usando a notação literal de objeto `{}` ou usando o construtor `new Object()`.
O que são funções de primeira classe (first-class functions) em JavaScript?,"Funções de primeira classe significam que as funções podem ser tratadas como qualquer outro valor. Elas podem ser atribuídas a variáveis, passadas como argumentos para outras funções e retornadas como valores de outras funções."
O que são funções de ordem superior (higher-order functions) em JavaScript?,Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam funções como resultados.
Explique o método `map()` em JavaScript.,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
Explique o método `filter()` em JavaScript.,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
Explique o método `reduce()` em JavaScript.,O método `reduce()` aplica uma função (reducer) a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
Como você pode converter o objeto `arguments` em um array real?,Você pode usar `Array.from(arguments)` ou o operador spread `[...arguments]` para converter o objeto `arguments` em um array.
"Qual a diferença entre `var`, `let` e `const` ao declarar variáveis em JavaScript?","`var` tem escopo de função (ou global se declarada fora de uma função) e permite redeclaração e reatribuição. `let` tem escopo de bloco e permite reatribuição, mas não redeclaração no mesmo escopo. `const` tem escopo de bloco e não permite reatribuição (deve ser inicializada no momento da declaração)."
O que é um bloco em JavaScript?,"Um bloco é um conjunto de zero ou mais declarações delimitadas por chaves `{}`. Blocos são frequentemente usados com estruturas de controle como `if`, `else`, `for` e `while`."
Explique o que são template literals em JavaScript.,Template literals são strings delimitadas por crases (` `` `) que permitem a incorporação de expressões dentro da string usando `${expressão}`.  Elas também podem ser usadas para strings multi-linha.
O que é rest parameter em JavaScript?,Rest parameter (também usando `...`) permite que uma função receba um número indefinido de argumentos como um array.  Deve ser o último parâmetro na definição da função.
O que são promises em JavaScript?,"Promises representam o resultado eventual de uma operação assíncrona.  Elas podem estar em um dos três estados: pending (pendente), fulfilled (cumprida) ou rejected (rejeitada)."
Como você lida com erros em Promises em JavaScript?,Você pode usar o método `.catch()` para lidar com erros em Promises. Você também pode usar `try...catch` dentro de uma função `async`.
O que são funções `async/await` em JavaScript?,"`async/await` são uma sintaxe para trabalhar com Promises de forma mais legível e concisa.  A palavra-chave `async` declara uma função assíncrona, e a palavra-chave `await` espera que uma Promise seja resolvida."
O que é o método `JSON.stringify()` em JavaScript?,O método `JSON.stringify()` converte um objeto JavaScript em uma string JSON.
O que é o método `JSON.parse()` em JavaScript?,O método `JSON.parse()` analisa uma string JSON e a converte em um objeto JavaScript.
O que são expressões regulares em JavaScript?,Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings. Elas são usadas para pesquisa e substituição de texto.
O que são os métodos `test()` e `exec()` para expressões regulares em JavaScript?,`test()` retorna `true` se a expressão regular encontrar uma correspondência na string e `false` caso contrário. `exec()` retorna um array com informações sobre a correspondência ou `null` se não houver correspondência.
O que é o método `String.prototype.substring()` em JavaScript?,O método `substring()` retorna uma parte da string entre os índices inicial e final especificados (o final não é incluído).
O que é o método `String.prototype.slice()` em JavaScript?,"O método `slice()` retorna uma seção de uma string. É similar ao `substring()`, mas aceita índices negativos (contando a partir do final da string)."
O que é o método `String.prototype.trim()` em JavaScript?,O método `trim()` remove os espaços em branco do início e do final de uma string.
O que é o conceito de truthy e falsy em JavaScript?,"Valores ""truthy"" são valores que são avaliados como `true` em um contexto booleano (por exemplo, dentro de uma condição `if`). Valores ""falsy"" são valores que são avaliados como `false` em um contexto booleano."
O que é o tipo de dado `Symbol` em JavaScript?,`Symbol` é um tipo de dado primitivo que representa um identificador único e imutável. Eles são frequentemente usados como chaves de propriedade de objeto para evitar conflitos de nomes.
O que é o método `Array.isArray()` em JavaScript?,"O método `Array.isArray()` retorna `true` se o argumento é um array, caso contrário, retorna `false`."
O que é o conceito de imutabilidade em JavaScript?,"Imutabilidade significa que um valor, depois de criado, não pode ser modificado. Isso pode ajudar a evitar efeitos colaterais inesperados e tornar o código mais fácil de raciocinar."
Como você pode criar objetos imutáveis em JavaScript?,"Você pode usar `Object.freeze()` para congelar um objeto, impedindo que novas propriedades sejam adicionadas ou que as propriedades existentes sejam modificadas."
O que é deep copy (cópia profunda) e shallow copy (cópia superficial) em JavaScript?,"Uma shallow copy cria uma nova referência a um objeto, então as mudanças em um objeto refletirão no outro. Uma deep copy cria um novo objeto e copia todos os valores do objeto original recursivamente, então as mudanças em um não afetam o outro."
Como você pode realizar uma deep copy de um objeto em JavaScript?,"Você pode usar `JSON.parse(JSON.stringify(objeto))` (com limitações, como a perda de funções) ou bibliotecas especializadas."
O que é o conceito de eventos em JavaScript?,"Eventos são ações ou ocorrências que acontecem no navegador (por exemplo, um clique de mouse, uma tecla pressionada, uma página carregada)."
Como você adiciona um ouvinte de evento (event listener) a um elemento em JavaScript?,Você pode usar o método `addEventListener()` para anexar um manipulador de eventos a um elemento.
O que é o conceito de bubbling e capturing em eventos em JavaScript?,"Bubbling é quando um evento é disparado em um elemento e, em seguida, ""borbulha"" para cima na árvore do DOM, acionando manipuladores de eventos em elementos pais. Capturing é o oposto: o evento desce pela árvore do DOM antes de chegar ao elemento alvo."
Como você pode impedir a propagação de um evento (event propagation) em JavaScript?,Você pode usar o método `stopPropagation()` do objeto `event`.
Como você seleciona elementos no DOM usando JavaScript?,"Você pode usar métodos como `getElementById()`, `getElementsByClassName()`, `getElementsByTagName()`, `querySelector()` e `querySelectorAll()`."
Qual a diferença entre `querySelector()` e `querySelectorAll()` em JavaScript?,`querySelector()` retorna o primeiro elemento que corresponde a um seletor CSS especificado. `querySelectorAll()` retorna uma NodeList estática de todos os elementos que correspondem ao seletor CSS especificado.
Como você modifica o conteúdo de um elemento no DOM usando JavaScript?,"Você pode usar as propriedades `innerHTML`, `textContent` ou `innerText`."
Como você adiciona um novo elemento ao DOM usando JavaScript?,"Você pode criar um novo elemento usando `document.createElement()`, definir suas propriedades e, em seguida, adicioná-lo ao DOM usando métodos como `appendChild()`, `insertBefore()`."
Como você remove um elemento do DOM usando JavaScript?,Você pode usar o método `removeChild()` do elemento pai.
Como você modifica os atributos de um elemento no DOM usando JavaScript?,Você pode usar os métodos `setAttribute()` e `getAttribute()`.
Como você adiciona ou remove classes CSS de um elemento usando JavaScript?,"Você pode usar a propriedade `classList` do elemento, que fornece métodos como `add()`, `remove()`, `toggle()` e `contains()`."
Quais são os métodos comuns do objeto `console` em JavaScript?,"Os métodos comuns são `console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()` e `console.timeEnd()`."
Quais são os métodos para interagir com `localStorage` e `sessionStorage` em JavaScript?,"Os métodos são `setItem()`, `getItem()`, `removeItem()` e `clear()`."
O que é o operador de coalescência nula (nullish coalescing operator - `??`) em JavaScript?,"O operador de coalescência nula (`??`) retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`, caso contrário, retorna o operando da esquerda."
O que é o encadeamento opcional (optional chaining - `?.`) em JavaScript?,O operador de encadeamento opcional (`?.`) permite acessar propriedades de um objeto que podem ser `null` ou `undefined` sem causar um erro. Ele retorna `undefined` se uma propriedade na cadeia for `null` ou `undefined`.
Qual a diferença entre arrow functions e funções tradicionais em JavaScript em relação ao `this`?,"Em funções tradicionais, o valor de `this` é determinado por como a função é chamada. Em arrow functions, `this` herda o valor do escopo circundante."
O que é o método `yield` em generators em JavaScript?,O método `yield` é usado dentro de uma função generator para pausar a execução da função e retornar um valor.  A execução pode ser retomada posteriormente.
O que é o conceito de WeakMap e WeakSet em JavaScript?,"`WeakMap` e `WeakSet` são coleções que armazenam referências ""fracas"" aos seus elementos. Isso significa que, se não houver outras referências ao objeto além das mantidas pelo `WeakMap` ou `WeakSet`, o garbage collector pode liberar a memória ocupada pelo objeto."
O que é o objeto `Proxy` em JavaScript?,"O objeto `Proxy` permite interceptar e personalizar operações fundamentais em objetos (por exemplo, leitura de propriedades, atribuição de valores, enumeração)."
O que é reflection (Reflect API) em JavaScript?,A API Reflect fornece métodos para operações que interceptam e personalizam o comportamento fundamental de objetos JavaScript.
O que são modules em JavaScript (ES Modules)?,"ES Modules são uma forma de organizar e modularizar o código JavaScript. Eles permitem importar e exportar funções, objetos e valores entre diferentes arquivos."
Qual a diferença entre `export default` e `export` nomeado em JavaScript?,"`export default` exporta um único valor padrão do module.  `export` (nomeado) exporta vários valores, cada um com um nome específico."
O que é o padrão de projeto Module em JavaScript?,"O padrão de projeto Module é uma forma de encapsular o código em um objeto JavaScript, expondo apenas uma interface pública e mantendo os detalhes de implementação privados."
O que é IIFE (Immediately Invoked Function Expression) em JavaScript?,Uma IIFE é uma função JavaScript que é executada assim que é definida. É usada para criar um escopo privado para variáveis e funções.
O que é strict mode em JavaScript?,Strict mode é um modo de execução que impõe regras mais rígidas no código JavaScript. Ele ajuda a prevenir erros comuns e torna o código mais fácil de manter.
Como você ativa o strict mode em JavaScript?,"Você ativa o strict mode adicionando a string `""use strict"";` no início de um script ou função."
"O que são ""side effects"" (efeitos colaterais) em JavaScript?","Side effects são alterações no estado do programa que não são diretamente relacionadas ao valor retornado por uma função.  Exemplos incluem modificar variáveis globais, alterar o DOM ou fazer chamadas de rede."
"O que é o princípio de ""Least Astonishment"" (menor surpresa) em JavaScript?","O princípio de ""Least Astonishment"" sugere que o comportamento de um programa deve ser o menos surpreendente possível para o usuário (ou desenvolvedor). Isso significa que o código deve se comportar de forma intuitiva e previsível."
O que é a diferença entre uma função declarada e uma função expressa em Javascript?,"Uma função declarada é definida usando a palavra-chave `function` seguida por um nome.  Uma função expressa é definida como parte de uma expressão, geralmente atribuída a uma variável. Funções declaradas são hoisted, enquanto funções expressas não são."
"O que significa dizer que JavaScript é uma linguagem ""single-threaded""?",Significa que JavaScript tem apenas uma pilha de chamadas e um loop de eventos.  Ele só pode executar uma tarefa de cada vez.
"Como JavaScript lida com operações assíncronas, dado que é single-threaded?","JavaScript usa um loop de eventos (event loop) e funções de callback para lidar com operações assíncronas. Operações demoradas são delegadas a APIs do navegador, e callbacks são executados quando a operação é concluída."
O que é um callback hell em JavaScript?,Callback hell é uma situação onde múltiplas operações assíncronas aninhadas criam um código difícil de ler e manter devido ao excesso de callbacks aninhados.
Como Promises ajudam a evitar o callback hell?,"Promises permitem encadear operações assíncronas usando `.then()`, tornando o código mais linear e legível."
Qual a importância de evitar o uso de `eval()` em JavaScript?,"O uso de `eval()` pode ser perigoso porque permite a execução de código arbitrário, o que pode levar a vulnerabilidades de segurança e problemas de desempenho."
O que é JSONP (JSON with Padding) e quando é usado?,JSONP é uma técnica para contornar a política de mesma origem (same-origin policy) em navegadores antigos. Ele usa a tag `<script>` para carregar dados de um domínio diferente. É uma alternativa menos segura aos CORS.
O que é CORS (Cross-Origin Resource Sharing) e como ele funciona?,CORS é um mecanismo de segurança do navegador que permite que uma página web faça requisições para um domínio diferente do qual a página se originou. Ele usa cabeçalhos HTTP para controlar quais domínios têm permissão para acessar recursos.
O que é a política de mesma origem (same-origin policy) em navegadores?,"A política de mesma origem é uma restrição de segurança que impede que scripts de uma origem acessem recursos de outra origem. Uma origem é definida pelo protocolo, domínio e porta."
"O que é ""scope"" em JavaScript?",Scope define a visibilidade e acessibilidade de variáveis e funções em diferentes partes do código.
Quais são os tipos de scope em JavaScript?,"Os tipos de scope são: global scope, function scope (ou local scope, para `var`), e block scope (para `let` e `const`)."
O que são variáveis globais em JavaScript e como elas devem ser usadas?,"Variáveis globais são declaradas fora de qualquer função e são acessíveis de qualquer parte do código. Elas devem ser usadas com moderação, pois podem causar conflitos de nomes e dificultar a manutenção do código."
O que é o garbage collector em JavaScript?,O garbage collector é um processo automático que libera a memória que não está mais sendo usada por um programa JavaScript.
"O que é ""memory leak"" (vazamento de memória) em JavaScript?","Um memory leak ocorre quando a memória que não está mais sendo usada não é liberada pelo garbage collector, resultando em um aumento contínuo do uso de memória e, potencialmente, em problemas de desempenho."
O que é um polyfill em JavaScript?,Um polyfill é um trecho de código que fornece a funcionalidade que falta em versões mais antigas de navegadores. Ele permite usar funcionalidades mais recentes mesmo em navegadores que não as suportam nativamente.
O que são shims em JavaScript?,"Shims são similares a polyfills, mas geralmente são mais amplos e podem incluir correções para comportamentos inconsistentes em diferentes navegadores."
"O que é a diferença entre eventos ""load"" e ""DOMContentLoaded"" em JavaScript?","O evento `DOMContentLoaded` é disparado quando o HTML inicial do documento é completamente carregado e analisado, sem esperar por stylesheets, imagens ou subframes. O evento `load` é disparado quando todos os recursos (imagens, stylesheets, etc.) foram carregados."
O que são mixins em JavaScript?,Mixins são uma forma de reutilizar código em múltiplas classes ou objetos. Eles permitem adicionar propriedades e métodos a uma classe ou objeto sem usar herança.
O que é o princípio DRY (Don't Repeat Yourself) em programação?,"O princípio DRY afirma que cada parte do conhecimento deve ter uma representação única, inequívoca e autoritária dentro de um sistema. Em outras palavras, evite duplicar código."
"O que é o princípio KISS (Keep It Simple, Stupid) em programação?","O princípio KISS afirma que a maioria dos sistemas funcionam melhor se forem mantidos simples em vez de complicados; portanto, a simplicidade deve ser um objetivo fundamental no design e complexidade desnecessária deve ser evitada."
"O que é ""code smell"" (cheiro de código) em JavaScript?","Um ""code smell"" é um padrão no código que pode indicar um problema mais profundo. Exemplos incluem código duplicado, classes grandes demais, e nomes de variáveis pouco descritivos."
O que é refatoração de código em JavaScript?,"Refatoração de código é o processo de melhorar a estrutura interna do código sem alterar seu comportamento externo. É feito para tornar o código mais legível, manutenível e extensível."
O que são testes unitários em JavaScript?,"Testes unitários são testes automatizados que verificam se as menores unidades de código (funções, classes, etc.) funcionam corretamente."
Quais são algumas bibliotecas ou frameworks comuns para testes unitários em JavaScript?,Jest e Mocha são bibliotecas populares para testes unitários em JavaScript.
O que é TDD (Test-Driven Development) em JavaScript?,TDD é uma abordagem de desenvolvimento onde você escreve os testes antes de escrever o código da funcionalidade. Isso ajuda a garantir que o código atenda aos requisitos e que seja testável.
O que é BDD (Behavior-Driven Development) em JavaScript?,BDD é uma extensão do TDD que usa uma linguagem mais natural para descrever o comportamento esperado do código.
O que é a diferença entre programação imperativa e programação declarativa em Javascript?,"A programação imperativa envolve descrever *como* realizar uma tarefa, passo a passo. A programação declarativa envolve descrever *o que* se quer realizar, sem especificar os passos."
O que é composição de funções em programação funcional?,Composição de funções é o processo de combinar duas ou mais funções para criar uma nova função.
"O que é o conceito de ""currying"" (currificação) em programação funcional?",Currying é a técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.
"O que são ""monads"" em programação funcional?",Monads são um padrão de projeto que permite encadear operações que podem falhar ou ter efeitos colaterais de forma controlada.
"Explique o que é o conceito de ""promises"" e como eles são usados para lidar com operações assíncronas.","Promises são objetos que representam o resultado eventual de uma operação assíncrona. Eles são usados para evitar callback hell e tornar o código assíncrono mais legível e manutenível. Eles têm três estados: pendente, cumprido e rejeitado."
"O que é o objeto global ""this"" em JavaScript quando o código é executado fora de qualquer função?","Em um ambiente de navegador, o objeto global ""this"" refere-se ao objeto ""window"". Em Node.js, ele se refere ao objeto global."
Explique o padrão de módulo revelador (revealing module pattern) em Javascript.,"O padrão de módulo revelador é um design pattern em Javascript que permite definir um conjunto de funções e variáveis privadas dentro de um módulo, revelando apenas algumas funções públicas para o exterior."
Como você pode verificar se uma variável foi definida em JavaScript?,"Você pode usar o operador `typeof` para verificar se uma variável foi definida. Se a variável não foi definida, `typeof` retornará `""undefined""`. Você também pode tentar acessar a variável dentro de um bloco `try...catch` para capturar um `ReferenceError`."
O que são template strings com tags em JavaScript?,"Template strings com tags são uma forma avançada de usar template literals. Uma tag é uma função que é chamada com o template string como argumento, permitindo personalizar o processo de interpolação."
O que é a API Web Storage e quais são suas principais características?,"A API Web Storage fornece mecanismos para navegadores armazenarem pares chave/valor localmente, de forma mais intuitiva que o uso de cookies. As principais características são localStorage (armazenamento persistente) e sessionStorage (armazenamento para a sessão atual)."
Explique o conceito de “debounce” e “throttle” em JavaScript.,Debounce e throttle são técnicas para limitar a frequência com que uma função é chamada. Debounce espera um certo tempo após a última chamada para executar a função. Throttle executa a função no máximo uma vez dentro de um determinado período.
O que são generators assíncronos e como eles se diferenciam dos generators síncronos?,Generators assíncronos permitem gerar valores assíncronos (promises) usando `yield`. Eles usam a palavra-chave `async` na definição da função e `await` dentro do corpo para esperar pela resolução das promises. Generators síncronos geram valores síncronos.
O que são os Service Workers e qual a sua utilidade?,"Service Workers são scripts que rodam em background, separados da página web, e permitem funcionalidades como notificações push, cache offline e sincronização em background."
Como você pode converter um valor para booleano em JavaScript de forma explícita?,Você pode usar a função `Boolean()` ou o operador de negação dupla `!!` (ex: `!!valor`).
"O que é ""tree shaking"" e como ele beneficia o desenvolvimento web?","Tree shaking é um processo de otimização que remove o código não utilizado (dead code) de um projeto JavaScript durante o processo de build. Ele reduz o tamanho do bundle final, melhorando o tempo de carregamento da página.

Espero que essa lista seja útil!  Tentei garantir que as perguntas fossem diferentes e cobrissem uma ampla gama de tópicos fundamentais em JavaScript."
O que são closures em JavaScript e qual a sua importância?,"Closures são funções que ""lembram"" o ambiente léxico onde foram criadas, mesmo após esse ambiente ter terminado. Elas permitem que funções acessem variáveis de escopos externos, útil para encapsulamento de dados e criação de funções com estado."
Como você impediria a propagação de um evento no DOM?,Usando o método `event.stopPropagation()` no objeto do evento.
Qual a finalidade do método `preventDefault()` em JavaScript?,"Impede a ação padrão associada a um evento, como o envio de um formulário ou a navegação em um link."
O que é a coerção de tipo em JavaScript? Dê um exemplo.,"É a conversão automática de um tipo de dado para outro. Exemplo: `1 + ""2""` resulta em `""12""` (conversão do número para string)."
Como funciona o operador `typeof` em JavaScript?,"Retorna uma string indicando o tipo de dado de um operando. Exemplo: `typeof 10` retorna `""number""`."
O que é uma função construtora em JavaScript?,É uma função usada com o operador `new` para criar objetos. Ela define propriedades e métodos que serão compartilhados por todas as instâncias criadas.
O que é o `this` em JavaScript e como seu valor é determinado?,"`this` se refere ao contexto de execução atual. Seu valor depende de como a função é chamada: pode ser o objeto, o objeto global (window/global) ou indefinido (em strict mode)."
O que são arrow functions e qual a sua principal diferença em relação às funções tradicionais?,"São funções com uma sintaxe mais concisa. A principal diferença é que elas não possuem seu próprio `this`, herdando o `this` do contexto circundante."
Qual a função do operador spread (`...`) em JavaScript?,Pode ser usado para expandir um array ou objeto em seus elementos individuais.
Explique o que são as palavras-chave `async` e `await` em JavaScript.,"`async` define uma função assíncrona, que sempre retorna uma promise. `await` pausa a execução da função até que a promise seja resolvida ou rejeitada."
O que é o objeto `JSON` em JavaScript?,É um objeto nativo que fornece métodos para serializar (converter para string) e desserializar (converter de string) dados em formato JSON.
Como você pode converter um objeto JavaScript em uma string JSON?,Usando o método `JSON.stringify()`.
Como você pode converter uma string JSON em um objeto JavaScript?,Usando o método `JSON.parse()`.
O que são event listeners em JavaScript?,"São funções que ""escutam"" eventos (como cliques, mudanças, etc.) em elementos HTML e executam um código quando o evento ocorre."
Como você adiciona um event listener a um elemento HTML?,Usando o método `addEventListener()`.
Como você remove um event listener de um elemento HTML?,Usando o método `removeEventListener()`.
O que é bubbling e capturing em eventos do DOM?,"Bubbling é a ordem em que os eventos se propagam do elemento alvo para seus ancestrais. Capturing é o oposto, eventos propagando do documento para o elemento alvo."
Qual a diferença entre `getAttribute()` e `property` ao acessar atributos de um elemento HTML?,"`getAttribute()` retorna o valor do atributo definido no HTML. `property` retorna o valor da propriedade do objeto DOM, que pode ser diferente do atributo HTML devido a manipulações via JavaScript."
Qual a finalidade dos métodos `test()` e `exec()` em expressões regulares?,"`test()` verifica se a expressão regular corresponde à string, retornando `true` ou `false`. `exec()` executa a pesquisa na string e retorna um array com os resultados ou `null`."
Explique o que são grupos de captura em expressões regulares.,São partes da expressão regular delimitadas por parênteses `(...)` que permitem extrair subcadeias correspondentes àqueles padrões.
"Qual a diferença entre declarar uma variável com `var`, `let` e `const`?","`var` tem escopo de função ou global e é hoisted. `let` e `const` têm escopo de bloco e não são hoisted (há uma ""zona morta temporal""). `const` declara uma variável que não pode ser reatribuída após a inicialização."
"O que é o ""strict mode"" em JavaScript?","É um modo de execução que impõe regras mais rigorosas, ajudando a evitar erros comuns e tornando o código mais seguro. É ativado adicionando `""use strict"";` no início do script ou função."
Explique o que é o operador ternário em JavaScript.,É uma forma concisa de escrever uma declaração `if...else`: `condição ? valor_se_verdadeiro : valor_se_falso`.
O que é um array em JavaScript?,"É uma coleção ordenada de elementos, que podem ser de diferentes tipos de dados."
O que é o método `slice()` em arrays JavaScript?,Cria uma cópia superficial de uma parte de um array.
Como você concatena dois arrays em JavaScript?,Usando o método `concat()`.
Como você inverte a ordem dos elementos em um array JavaScript?,Usando o método `reverse()`.
Como você ordena os elementos de um array JavaScript?,"Usando o método `sort()`. Por padrão, ele ordena como strings. Você pode fornecer uma função de comparação para ordenação numérica ou de outros tipos."
Como você acessa o valor de uma propriedade em um objeto JavaScript?,Usando a notação de ponto ( `objeto.propriedade` ) ou a notação de colchetes ( `objeto['propriedade']` ).
Como você adiciona uma nova propriedade a um objeto JavaScript?,Atribuindo um valor a um nome de propriedade que ainda não existe no objeto: `objeto.novaPropriedade = valor;` ou `objeto['novaPropriedade'] = valor;`.
Como você remove uma propriedade de um objeto JavaScript?,Usando o operador `delete`: `delete objeto.propriedade;`.
O que são métodos em objetos JavaScript?,São funções que são propriedades de um objeto.
O que são getters e setters em objetos JavaScript?,Getters são métodos que permitem acessar o valor de uma propriedade de forma controlada. Setters são métodos que permitem modificar o valor de uma propriedade de forma controlada.
Como você cria um getter em um objeto JavaScript?,Usando a palavra-chave `get` antes do nome do método dentro da definição do objeto.
Como você cria um setter em um objeto JavaScript?,Usando a palavra-chave `set` antes do nome do método dentro da definição do objeto.
O que é a palavra-chave `class` em JavaScript?,"É uma sintaxe para criar objetos usando um modelo similar a outras linguagens orientadas a objetos, mas que ainda se baseia no sistema de protótipos."
Como você cria uma instância de uma classe em JavaScript?,Usando o operador `new`: `const objeto = new MinhaClasse();`.
Como você define um método em uma classe JavaScript?,Simplesmente definindo uma função dentro do corpo da classe.
O que é herança em classes JavaScript?,É a capacidade de uma classe (subclasse) herdar propriedades e métodos de outra classe (superclasse).
Como você implementa herança em classes JavaScript?,Usando a palavra-chave `extends`: `class Subclasse extends Superclasse { ... }`.
Quais são os tipos de módulos em JavaScript?,"Antigamente, eram comuns CommonJS (Node.js) e AMD. Atualmente, o padrão é ECMAScript Modules (ES Modules)."
Como você importa um módulo em JavaScript (ES Modules)?,Usando a palavra-chave `import`: `import { funcao } from './meuModulo.js';`.
Como você exporta um módulo em JavaScript (ES Modules)?,Usando a palavra-chave `export`: `export function minhaFuncao() { ... };` ou `export default minhaFuncao;`.
Qual a diferença entre `export` e `export default` em ES Modules?,"`export` permite exportar vários valores nomeados. `export default` exporta um único valor como padrão, permitindo que seja importado com qualquer nome."
Como você gera um número aleatório entre 0 e 1 em JavaScript?,Usando o método `Math.random()`.
Como você eleva um número a uma potência em JavaScript?,Usando o método `Math.pow()` ou o operador `**`.
Como você cria um novo objeto `Date` em JavaScript?,Usando o construtor `new Date()`.
Como você obtém o ano de um objeto `Date` em JavaScript?,Usando o método `getFullYear()`.
Como você obtém o mês de um objeto `Date` em JavaScript?,Usando o método `getMonth()`. (Note que os meses são indexados de 0 a 11).
Como você obtém o dia do mês de um objeto `Date` em JavaScript?,Usando o método `getDate()`.
Como você obtém a hora de um objeto `Date` em JavaScript?,Usando o método `getHours()`.
Como você obtém os minutos de um objeto `Date` em JavaScript?,Usando o método `getMinutes()`.
Como você obtém os segundos de um objeto `Date` em JavaScript?,Usando o método `getSeconds()`.
Como você obtém os milissegundos de um objeto `Date` em JavaScript?,Usando o método `getMilliseconds()`.
O que é o método `getTime()` em objetos `Date` JavaScript?,Retorna o número de milissegundos desde 1 de janeiro de 1970 00:00:00 UTC.
O que é o objeto `window` em JavaScript (em navegadores)?,É o objeto que representa a janela do navegador. É o objeto global no contexto do navegador.
Como você exibe um alerta na tela usando JavaScript?,Usando o método `window.alert()`.
Como você exibe um prompt para o usuário inserir um valor usando JavaScript?,Usando o método `window.prompt()`.
Como você redireciona o usuário para outra página usando JavaScript?,Atribuindo um novo URL à propriedade `window.location.href`.
O que é o objeto `document` em JavaScript (em navegadores)?,É uma propriedade do objeto `window` que representa o documento HTML carregado na janela do navegador.
Como você define um cookie usando JavaScript?,Atribuindo um valor à propriedade `document.cookie`.
Como você lê um cookie usando JavaScript?,Acessando a propriedade `document.cookie`.
O que é o Local Storage em JavaScript?,É uma forma de armazenar dados no navegador do usuário de forma persistente (os dados permanecem mesmo após o navegador ser fechado).
Como você armazena dados no Local Storage usando JavaScript?,"Usando o método `localStorage.setItem(chave, valor)`."
Como você recupera dados do Local Storage usando JavaScript?,Usando o método `localStorage.getItem(chave)`.
Como você remove dados do Local Storage usando JavaScript?,Usando o método `localStorage.removeItem(chave)`.
O que é o Session Storage em JavaScript?,"É semelhante ao Local Storage, mas os dados são armazenados apenas durante a sessão do navegador (são removidos quando o navegador é fechado)."
Como você armazena dados no Session Storage usando JavaScript?,"Usando o método `sessionStorage.setItem(chave, valor)`."
Como você recupera dados do Session Storage usando JavaScript?,Usando o método `sessionStorage.getItem(chave)`.
O que é o tratamento de erros em JavaScript?,"É o processo de lidar com erros que ocorrem durante a execução do código, prevenindo que o programa pare de funcionar abruptamente."
Como você implementa o tratamento de erros em JavaScript?,Usando o bloco `try...catch...finally`.
O que é o bloco `try` em JavaScript?,Contém o código que pode gerar uma exceção.
O que é o bloco `catch` em JavaScript?,Contém o código que será executado se uma exceção for lançada no bloco `try`.
Como você lança uma exceção manualmente em JavaScript?,Usando a palavra-chave `throw`.
O que é programação orientada a objetos (POO) em JavaScript?,"É um paradigma de programação que organiza o código em torno de ""objetos"", que contêm dados (propriedades) e comportamentos (métodos)."
Quais são os principais princípios da POO?,"Encapsulamento, Herança, Polimorfismo e Abstração."
O que é encapsulamento em POO?,É a prática de ocultar os detalhes internos de um objeto e expor apenas uma interface para interagir com ele.
O que é polimorfismo em POO?,É a capacidade de um objeto assumir várias formas.
O que é abstração em POO?,"É o processo de simplificar a representação de um objeto, mostrando apenas os detalhes relevantes e ocultando os detalhes complexos."
Quais são os métodos de array que retornam um novo array ao invés de modificar o original?,"`map()`, `filter()`, `slice()`, `concat()`."
Como você cria uma cópia profunda de um objeto em JavaScript?,Usando `JSON.parse(JSON.stringify(objeto))` (para objetos que não contêm funções ou referências circulares) ou usando bibliotecas externas como Lodash (método `_.cloneDeep()`).
Quais são os cuidados que devemos ter ao usar recursão?,Garantir que haja uma condição de parada para evitar loops infinitos e estouro da pilha de chamadas.
Como você define um generator em JavaScript?,Usando a palavra-chave `function*`.
O que é o método `next()` em iterators?,Retorna um objeto com as propriedades `value` (o próximo valor na sequência) e `done` (um booleano indicando se a sequência terminou).
O que é o protocolo iterable em JavaScript?,É um protocolo que permite que objetos sejam iterados usando loops `for...of` e outros mecanismos de iteração. Um objeto é iterável se possui um método com a chave `Symbol.iterator` que retorna um objeto iterator.
"O que é o padrão de projeto ""Module Pattern"" em JavaScript?","É uma forma de encapsular código JavaScript em um objeto, criando um escopo privado para variáveis e funções e expondo apenas uma interface pública."
"O que é o padrão de projeto ""Singleton"" em JavaScript?",É um padrão que garante que apenas uma instância de uma classe seja criada e fornece um ponto de acesso global a essa instância.
"O que é o padrão de projeto ""Observer"" em JavaScript?","É um padrão que define uma dependência um-para-muitos entre objetos, de forma que quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
"O que é o padrão de projeto ""Factory"" em JavaScript?",É um padrão que fornece uma interface para criar objetos sem especificar suas classes concretas.
O que é o conceito de higher-order functions (funções de ordem superior) em JavaScript?,São funções que recebem outras funções como argumentos ou retornam outras funções como resultado.
Dê exemplos de higher-order functions nativas do JavaScript.,"`map()`, `filter()`, `reduce()`, `forEach()`, `sort()`."
O que é a diferença entre programação imperativa e declarativa em JavaScript?,"A programação imperativa especifica *como* realizar uma tarefa, passo a passo. A programação declarativa especifica *o que* realizar, sem detalhar o processo."
Dê exemplos de programação declarativa em JavaScript.,"Usar `map()`, `filter()` e `reduce()` para manipular arrays ao invés de usar loops `for` tradicionais."
Onde as funções anônimas são comumente usadas?,"Como callbacks em event listeners, argumentos para higher-order functions ou como funções imediatamente invocadas (IIFEs)."
O que é uma IIFE (Immediately Invoked Function Expression)?,É uma função anônima que é executada imediatamente após sua criação.
Qual a finalidade das IIFEs?,Criar um escopo isolado para evitar conflitos de nomes e encapsular variáveis.
"Explique o conceito de ""event delegation"" em JavaScript.","É uma técnica onde você adiciona um event listener a um elemento pai em vez de adicionar listeners individuais a cada elemento filho. O evento ""bolha"" (bubbles up) até o elemento pai, que então determina qual elemento filho disparou o evento."
Quais são as vantagens de usar event delegation?,"Melhor desempenho (menos listeners), facilita o gerenciamento de eventos em elementos criados dinamicamente."
"O que é um ""polyfill"" em JavaScript?","É um código que implementa uma funcionalidade que não está disponível em versões mais antigas de navegadores, permitindo que o código mais recente funcione corretamente em ambientes mais antigos."
Como você declara uma variável em JavaScript usando a palavra-chave `const`?,"`const minhaVariavel = ""valor"";`  Variáveis declaradas com `const` devem ser inicializadas e não podem ser reatribuídas."
Qual a diferença entre os operadores `==` e `===` em JavaScript?,"`==` compara valores após realizar conversão de tipo (se necessário), enquanto `===` compara valores e tipos sem conversão. `===` é geralmente preferível para evitar resultados inesperados."
Como você pode verificar o tipo de dado de uma variável em JavaScript?,Usando o operador `typeof`.  Por exemplo: `typeof minhaVariavel;`
Explique o conceito de closures em JavaScript.,"Uma closure é a capacidade de uma função interna acessar variáveis do escopo de sua função externa, mesmo após a função externa ter retornado.  Ela ""lembra"" o ambiente em que foi criada."
Como você cria uma função anônima em JavaScript?,`function() { // Código da função }`. Funções anônimas não têm nome.
O que é uma Immediately Invoked Function Expression (IIFE)?,É uma função anônima que é executada imediatamente após sua criação. Exemplo: `(function() { // Código })();` Usada para criar escopos isolados.
Como você pode clonar um objeto em JavaScript (cópia superficial)?,"Usando `Object.assign({}, objetoOriginal)` ou o spread operator `...` (ex: `{...objetoOriginal}`)."
Qual a diferença entre `slice()` e `splice()` em JavaScript?,"`slice()` retorna uma cópia de uma parte de um array sem modificar o original, enquanto `splice()` modifica o array removendo ou substituindo elementos."
Como você pode ordenar um array em JavaScript?,"Usando o método `sort()`. Por padrão, ele ordena como strings, então é importante fornecer uma função de comparação para ordenar números corretamente."
O que é o método `String.prototype.toUpperCase()` em JavaScript?,Retorna uma nova string com todos os caracteres convertidos para maiúsculas.
Como você pode encontrar a posição de uma substring dentro de uma string em JavaScript?,Usando o método `indexOf()`. Retorna -1 se a substring não for encontrada.
Como você pode dividir uma string em um array de substrings em JavaScript?,Usando o método `split()`.
Explique o conceito de template literals em JavaScript.,"São strings delimitadas por backticks (`), que permitem a interpolação de expressões dentro da string usando `${}`."
"Qual a diferença entre `var`, `let` e `const` em relação ao escopo?","`var` tem escopo de função ou global, enquanto `let` e `const` têm escopo de bloco."
Como você lida com erros em JavaScript usando `try...catch`?,"O código que pode gerar um erro é colocado dentro do bloco `try`. Se um erro ocorrer, o bloco `catch` é executado."
Como você lança um erro personalizado em JavaScript?,Usando a palavra-chave `throw` seguido de um objeto `Error` ou uma mensagem de erro.
O que é o bloco `finally` em um bloco `try...catch...finally`?,"O bloco `finally` é sempre executado após os blocos `try` e `catch`, independentemente de um erro ter ocorrido ou não."
Quais são os estados de uma promise em JavaScript?,"Pendente (pending), Cumprida (fulfilled) e Rejeitada (rejected)."
Como você cria uma promise em JavaScript?,"Usando o construtor `new Promise((resolve, reject) => { // Código assíncrono });`"
Como você lida com o resultado de uma promise cumprida em JavaScript?,Usando o método `.then()`.
Como você lida com o resultado de uma promise rejeitada em JavaScript?,Usando o método `.catch()`.
O que é JSON em JavaScript?,JSON (JavaScript Object Notation) é um formato de dados leve para troca de dados. É baseado em um subconjunto da sintaxe JavaScript.
Como você converte um objeto JavaScript em uma string JSON?,Usando o método `JSON.stringify()`.
O que são grupos de captura em expressões regulares?,"São partes do padrão delimitadas por parênteses `()`, que capturam a substring correspondente para posterior uso."
O que são quantificadores em expressões regulares?,"Símbolos que especificam quantas ocorrências de um padrão devem ser encontradas (ex: `*`, `+`, `?`, `{n}`, `{n,}`, `{n,m}`)."
Como você obtém o ano atual a partir de um objeto `Date` em JavaScript?,Usando o método `getFullYear()`.
Como você define o dia de um objeto `Date` em JavaScript?,Usando o método `setDate()`.
Como você define um cookie em JavaScript?,Manipulando a propriedade `document.cookie`.
Como você lê um cookie em JavaScript?,Acessando a propriedade `document.cookie`.
Como você armazena dados no localStorage em JavaScript?,"Usando o método `localStorage.setItem('chave', 'valor')`."
Como você recupera dados do localStorage em JavaScript?,Usando o método `localStorage.getItem('chave')`.
O que é o objeto `event` passado para um event listener em JavaScript?,"É um objeto que contém informações sobre o evento que ocorreu, como o elemento que disparou o evento, as coordenadas do mouse, etc."
O que é o método `preventDefault()` no objeto `event` em JavaScript?,"Impede o comportamento padrão de um evento. Por exemplo, impedir que um link redirecione para outra página."
O que é o método `stopPropagation()` no objeto `event` em JavaScript?,Impede que o evento se propague para elementos pai no DOM (fase de bubbling).
Como você seleciona um elemento HTML pelo seu ID em JavaScript?,Usando o método `document.getElementById('idDoElemento')`.
Como você seleciona elementos HTML por sua classe em JavaScript?,Usando o método `document.getElementsByClassName('nomeDaClasse')`. Retorna uma HTMLCollection.
Como você seleciona elementos HTML por sua tag em JavaScript?,Usando o método `document.getElementsByTagName('nomeDaTag')`. Retorna uma HTMLCollection.
Como você altera o texto de um elemento HTML em JavaScript?,Acessando a propriedade `textContent` ou `innerText` do elemento.
Como você altera o HTML interno de um elemento HTML em JavaScript?,Acessando a propriedade `innerHTML` do elemento.
Como você cria um novo elemento HTML em JavaScript?,Usando o método `document.createElement('nomeDaTag')`.
Como você adiciona um novo elemento HTML a outro elemento no DOM em JavaScript?,"Usando os métodos `appendChild()`, `insertBefore()` ou `insertAdjacentElement()`."
Como você remove um elemento HTML do DOM em JavaScript?,Usando o método `removeChild()` do elemento pai.
Como você altera os atributos de um elemento HTML em JavaScript?,Usando os métodos `setAttribute()` e `getAttribute()`.
Como você adiciona ou remove classes CSS de um elemento HTML em JavaScript?,"Acessando a propriedade `classList` do elemento e usando os métodos `add()`, `remove()` ou `toggle()`."
Como você exibe um alerta ao usuário em JavaScript?,Usando o método `window.alert('mensagem')`.
Como você solicita uma confirmação ao usuário em JavaScript?,Usando o método `window.confirm('pergunta')`.
Como você solicita uma entrada de dados ao usuário em JavaScript?,"Usando o método `window.prompt('pergunta', 'valorPadrao')`."
Como você redireciona o usuário para outra página em JavaScript?,Acessando a propriedade `window.location.href` e atribuindo a URL desejada.
Como você abre uma nova janela do navegador em JavaScript?,"Usando o método `window.open('url', 'nomeDaJanela', 'opcoes')`."
Como você exibe uma mensagem no console do navegador em JavaScript?,Usando o método `console.log('mensagem')`.
Como você exibe um aviso no console do navegador em JavaScript?,Usando o método `console.warn('aviso')`.
Como você exibe um erro no console do navegador em JavaScript?,Usando o método `console.error('erro')`.
O que é um getter e setter em JavaScript?,"São métodos especiais que permitem acessar e modificar propriedades de um objeto como se fossem propriedades normais, mas com lógica adicional.  Definidos usando `get` e `set` dentro de um objeto."
O que é prototype em JavaScript?,Todo objeto em JavaScript herda propriedades e métodos de seu prototype.  É um mecanismo de herança prototipal.
O que é o método `instanceof` em JavaScript?,Verifica se um objeto é uma instância de uma determinada classe ou construtor.
O que são efeitos colaterais em programação funcional?,"São alterações no estado fora do escopo da função, como modificar variáveis globais, interagir com o DOM ou realizar operações de entrada/saída. Programação funcional busca minimizar efeitos colaterais."
O que é Recursão em JavaScript?,Uma função recursiva é uma função que chama a si mesma dentro de sua própria definição. É usada para resolver problemas que podem ser divididos em subproblemas menores do mesmo tipo.
O que é o Stack Overflow em JavaScript?,"Ocorre quando uma função recursiva chama a si mesma um número excessivo de vezes sem atingir um caso base, levando ao preenchimento da pilha de chamadas (call stack) e ao travamento do programa."
O que é um Iterator em JavaScript?,É um objeto que permite percorrer uma coleção de dados (como um array ou objeto) um elemento por vez.  Possui um método `next()` que retorna um objeto com as propriedades `value` (o valor do próximo elemento) e `done` (um booleano indicando se a iteração terminou).
O que é um Generator em JavaScript?,"É um tipo especial de função que pode ser pausada e retomada durante a execução, permitindo a criação de iteradores personalizados de forma mais fácil.  Declarada usando `function*`."
O que é o método `yield` em Generators?,Pausa a execução do generator e retorna um valor. A execução pode ser retomada posteriormente.
O que são collections em JavaScript? Dê exemplos.,"São estruturas de dados que armazenam grupos de dados relacionados. Exemplos: Arrays, Sets, Maps e WeakMaps."
O que é um Set em JavaScript?,É uma coleção de valores *únicos*.  Não permite duplicatas.
O que é um Map em JavaScript?,"É uma coleção de pares chave-valor, onde as chaves podem ser de qualquer tipo de dado."
O que é um WeakMap em JavaScript?,"Similar ao Map, mas as chaves devem ser objetos e são mantidas ""fracamente"", o que significa que o garbage collector pode coletá-las se não houver outras referências a elas. Útil para associar dados a objetos sem impedir que sejam coletados."
O que é um WeakSet em JavaScript?,"Similar ao Set, mas só pode conter objetos e as referências aos objetos são ""fracas"", permitindo que o garbage collector os colete."
O que são TypedArrays em JavaScript?,"São objetos semelhantes a arrays que fornecem um mecanismo para acessar dados binários brutos em um formato estruturado.  Exemplos: `Int8Array`, `Uint16Array`, `Float32Array`."
O que é o objeto `Symbol` em JavaScript?,É um tipo de dado primitivo que representa um identificador único e imutável. Usado para criar propriedades de objeto que não colidem com outras propriedades.
O que são iterables e iterators em JavaScript e como eles se relacionam?,"Um iterable é um objeto que pode ser iterado sobre (ex: array, string, Map, Set). Ele possui um método `[Symbol.iterator]()` que retorna um iterator. O iterator é um objeto que define como os valores do iterable serão acessados sequencialmente, através do método `next()`."
Como você previne a extensão de um objeto em JavaScript?,Usando `Object.preventExtensions(objeto)`. Impede que novas propriedades sejam adicionadas ao objeto.
Como você sela um objeto em JavaScript?,Usando `Object.seal(objeto)`. Impede que novas propriedades sejam adicionadas e que as propriedades existentes sejam removidas.
Como você congela um objeto em JavaScript?,"Usando `Object.freeze(objeto)`. Impede que novas propriedades sejam adicionadas, que as propriedades existentes sejam removidas e que os valores das propriedades existentes sejam alterados."
O que é a Strict Mode em JavaScript?,"É um modo restrito de execução que impõe regras mais rígidas ao código JavaScript, ajudando a prevenir erros comuns e a melhorar a segurança. Ativado adicionando `""use strict"";` no início do script ou função."
Quais são alguns dos benefícios de usar Strict Mode em JavaScript?,"Impede o uso de variáveis não declaradas, proíbe a atribuição a propriedades somente leitura, lança erros em atribuições silenciosamente falhas, etc."
Como você define uma propriedade não enumerável em um objeto JavaScript?,"Usando `Object.defineProperty(objeto, 'propriedade', {enumerable: false, ...})`. Propriedades não enumeráveis não aparecem em loops `for...in` ou `Object.keys()`."
O que é Debouncing em JavaScript?,É uma técnica para limitar a taxa na qual uma função é executada. Garante que uma função não seja executada com frequência superior a um determinado intervalo. Útil para lidar com eventos como redimensionamento de janela ou entrada de texto em um campo de pesquisa.
O que é Throttling em JavaScript?,"Semelhante ao Debouncing, o Throttling também limita a taxa na qual uma função é executada. No entanto, garante que a função seja executada pelo menos uma vez dentro de um determinado intervalo, mesmo que o evento continue ocorrendo."
O que é Object Composition em JavaScript?,"É uma técnica para construir objetos combinando outros objetos menores (ou funções), em vez de usar herança de classe. Favorece a reutilização de código por meio da delegação."
O que é um Proxy em JavaScript?,"É um objeto que intercepta e personaliza operações fundamentais de outros objetos (como leitura de propriedades, atribuição, criação de objetos, etc.). Permite adicionar comportamentos como validação, logging ou virtualização."
O que é Garbage Collection em JavaScript?,É um processo automático que libera a memória que não está mais sendo usada por um programa. O coletor de lixo identifica e remove objetos que não são mais acessíveis.
O que são Memory Leaks em JavaScript?,"Ocorrem quando um programa aloca memória, mas não a libera quando ela não é mais necessária, levando ao consumo excessivo de memória e, eventualmente, ao travamento do programa."
O que é Event Loop em JavaScript?,É um mecanismo que permite ao JavaScript executar operações assíncronas sem bloquear o thread principal. Ele monitora a pilha de chamadas (call stack) e a fila de tarefas (task queue) e move as tarefas da fila para a pilha quando a pilha está vazia.
O que é o Call Stack (Pilha de Chamadas) em JavaScript?,"É uma estrutura de dados que armazena informações sobre as funções que estão sendo executadas no momento. Quando uma função é chamada, ela é adicionada ao topo da pilha. Quando a função retorna, ela é removida da pilha."
O que é a Task Queue (Fila de Tarefas) em JavaScript?,É uma fila que contém tarefas assíncronas que estão prontas para serem executadas. Essas tarefas são adicionadas à pilha de chamadas quando a pilha está vazia.
O que são Microtasks em JavaScript e como se diferenciam das Tasks?,"Microtasks são tarefas de alta prioridade que devem ser executadas o mais rápido possível após a tarefa atual ser concluída, antes do navegador renderizar ou lidar com outros eventos. Promises e `MutationObserver` usam a fila de microtasks. Tasks, por outro lado, têm uma prioridade menor e são enfileiradas na fila de tarefas."
O que é Object.is() em JavaScript?,"Determina se dois valores são o mesmo valor. É semelhante ao operador `===`, mas trata `NaN` como igual a `NaN` e `-0` como diferente de `+0`."
O que são Named Export e Default Export em ES Modules?,"Named exports permitem exportar múltiplos valores de um módulo usando seus nomes. Default export permite exportar um único valor (pode ser uma função, classe, objeto, etc.) como o valor padrão do módulo."
Como você importa módulos em JavaScript usando ES Modules?,"Usando a palavra-chave `import`. Exemplo: `import { nomeDaFuncao } from './meuModulo.js';` ou `import valorPadrao from './meuModulo.js';`

Espero que estas perguntas e respostas sejam úteis para aprofundar seu conhecimento em JavaScript!"
O que é o operador `typeof` e quais valores ele pode retornar?,"`typeof` é um operador que retorna uma string indicando o tipo de um operando. Pode retornar: `""undefined""`, `""boolean""`, `""number""`, `""string""`, `""bigint""`, `""symbol""`, `""function""` e `""object""`.  `typeof null` retorna `""object""` (uma peculiaridade histórica)."
"O que é o método `call()`, `apply()` e `bind()` em JavaScript?","`call()` e `apply()` invocam uma função com um determinado valor `this` e argumentos.  `call()` recebe argumentos individualmente, enquanto `apply()` recebe os argumentos como um array.  `bind()` cria uma nova função que, quando chamada, tem seu valor `this` definido como o valor fornecido."
Explique o conceito de prototipagem em JavaScript.,"Em JavaScript, os objetos herdam propriedades de seus protótipos. Cada objeto tem um protótipo, e esse protótipo pode ter seu próprio protótipo, criando uma cadeia de protótipos. Isso permite que os objetos herdem propriedades e métodos de outros objetos."
O que é o objeto `Math` e cite alguns de seus métodos úteis.,"`Math` é um objeto embutido que possui propriedades e métodos para constantes e funções matemáticas. Métodos úteis incluem: `Math.random()`, `Math.floor()`, `Math.ceil()`, `Math.round()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`."
O que são arrow functions e como elas diferem das funções regulares em JavaScript?,"Arrow functions são uma sintaxe mais curta para escrever funções. Elas não têm seu próprio `this` (herdam o `this` do contexto envolvente), não podem ser usadas como construtoras (não podem ser instanciadas com `new`), e não têm o objeto `arguments`."
O que são template literals em JavaScript e como usá-los?,Template literals são strings delimitadas por backticks (`). Elas permitem a interpolação de variáveis usando `${}` e podem conter strings de várias linhas sem a necessidade de concatenação ou caracteres de escape.
Explique o conceito de desestruturação em JavaScript.,Desestruturação é uma forma de extrair valores de objetos ou arrays e atribuí-los a variáveis de forma concisa.
O que é o operador `spread` e como ele pode ser usado?,O operador `spread` ( `...` ) expande um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados. Útil para clonar arrays/objetos e passar argumentos para funções.
O que são Promises em JavaScript e como elas lidam com operações assíncronas?,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas podem estar em um dos três estados: pending, fulfilled ou rejected.  Permitem encadear operações assíncronas usando `.then()` (para sucesso) e `.catch()` (para erros)."
O que é `async/await` em JavaScript e como se relaciona com Promises?,`async/await` é um açúcar sintático sobre Promises que torna o código assíncrono mais fácil de ler e escrever. `async` declara uma função assíncrona que retorna implicitamente uma Promise. `await` pausa a execução da função até que uma Promise seja resolvida.
O que é um Set em JavaScript e qual sua principal característica?,Um `Set` é uma coleção de valores únicos. Sua principal característica é que ele não permite valores duplicados.
O que é um Map em JavaScript e como ele difere de um objeto JavaScript comum?,"Um `Map` é uma coleção de pares chave-valor onde chaves podem ser de qualquer tipo de dado (ao contrário de objetos JavaScript, onde as chaves são sempre strings ou Symbols). Maps também mantêm a ordem de inserção das chaves."
Explique o conceito de eventos em JavaScript.,"Eventos são ações ou ocorrências que acontecem em um navegador (por exemplo, um clique do mouse, o carregamento de uma página). JavaScript permite responder a esses eventos executando código."
Como você adiciona e remove ouvintes de eventos em JavaScript?,Você usa os métodos `addEventListener()` para adicionar um ouvinte de evento e `removeEventListener()` para removê-lo.
O que é event bubbling e event capturing em JavaScript?,"Event bubbling é o processo em que um evento acionado em um elemento se propaga para cima na árvore DOM, acionando os ouvintes de evento nos elementos pais. Event capturing é o processo inverso, onde o evento se propaga para baixo na árvore DOM."
O que é o método `preventDefault()` e quando você o usaria?,"`preventDefault()` impede a ação padrão associada a um evento. Por exemplo, impedir que um link siga seu destino padrão ou que um formulário seja enviado."
"Como você adiciona, remove ou modifica classes CSS de um elemento usando JavaScript?","Você pode usar a propriedade `classList` de um elemento, que possui métodos como `add()`, `remove()`, `toggle()` e `contains()`."
O que é o objeto `navigator` em JavaScript?,"O objeto `navigator` contém informações sobre o navegador do usuário, como o nome do navegador, a versão, o sistema operacional e os recursos suportados."
O que são cookies em JavaScript e como você os usa?,"Cookies são pequenos arquivos de texto que os sites armazenam no computador do usuário para lembrar informações sobre ele, como preferências ou dados de login. Em JavaScript, você pode acessar e manipular cookies usando a propriedade `document.cookie`."
O que é o Local Storage em JavaScript e como ele difere dos cookies?,"O Local Storage é um mecanismo de armazenamento web que permite armazenar dados localmente no navegador do usuário. Diferentemente dos cookies, os dados armazenados no Local Storage não são enviados para o servidor com cada solicitação e têm uma capacidade de armazenamento maior."
O que é Session Storage em JavaScript e como ele difere do Local Storage?,"O Session Storage é semelhante ao Local Storage, mas os dados armazenados são excluídos quando a sessão do navegador termina (quando o navegador é fechado)."
O que é o objeto `location` em JavaScript e como você o usa?,O objeto `location` contém informações sobre a URL atual do documento e fornece métodos para redirecionar o usuário para uma nova URL.
O que é hoisting de funções em JavaScript?,"A declaração de uma função é ""hoisted"" para o topo do seu escopo, o que significa que você pode chamar a função antes de ela ser definida no código.  Isso se aplica a declarações de função, mas não a expressões de função atribuídas a variáveis."
O que é um callback function em JavaScript?,Um callback function é uma função que é passada como argumento para outra função e é executada após a conclusão da função principal.
O que é composição de funções em JavaScript?,Composição de funções é o processo de combinar duas ou mais funções para produzir uma nova função.
O que é um objeto literal em JavaScript?,"Um objeto literal é uma forma de criar um objeto em JavaScript usando a sintaxe de chave-valor: `{ chave1: valor1, chave2: valor2 }`."
O que é o método `Object.assign()` e como ele é usado?,O método `Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto de destino.
O que é o método `Object.create()` e como ele é usado?,O método `Object.create()` cria um novo objeto com o protótipo especificado.
O que são classes em JavaScript (introduzidas no ES6)?,Classes em JavaScript são um açúcar sintático sobre o sistema de prototipagem existente. Elas fornecem uma maneira mais clara e concisa de criar objetos e definir herança.
Como você define um construtor em uma classe JavaScript?,Você usa o método `constructor()` dentro da classe.
Como você define métodos em uma classe JavaScript?,Você define métodos dentro da classe usando a sintaxe `nomeDoMetodo() { ... }`.
Como você chama o construtor da classe pai em uma classe filha?,Você usa a palavra-chave `super()` dentro do construtor da classe filha.
Como você exporta um valor de um módulo JavaScript?,Você usa a palavra-chave `export`. Você pode usar `export default` para exportar um único valor padrão ou `export` para exportar vários valores nomeados.
Como você importa um valor para um módulo JavaScript?,"Você usa a palavra-chave `import`. Você pode usar `import NomeDoValor from './caminho/do/modulo'` para importar um valor padrão ou `import { NomeDoValor1, NomeDoValor2 } from './caminho/do/modulo'` para importar valores nomeados."
Quais são alguns metacaracteres comuns usados em expressões regulares?,"Alguns metacaracteres comuns incluem: `.` (qualquer caractere), `*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `^` (início da string), `$` (fim da string), `[]` (conjunto de caracteres), `\d` (dígito), `\w` (caractere alfanumérico)."
O que são flags em expressões regulares e cite alguns exemplos.,"Flags modificam o comportamento da expressão regular. Exemplos: `g` (global, encontra todas as ocorrências), `i` (case-insensitive, ignora maiúsculas e minúsculas), `m` (multiline, permite que `^` e `$` correspondam ao início e ao fim de cada linha)."
O que é o método `test()` do objeto `RegExp`?,O método `test()` verifica se uma string corresponde a um padrão de expressão regular e retorna `true` ou `false`.
O que é o método `exec()` do objeto `RegExp`?,O método `exec()` executa uma pesquisa por uma correspondência em uma string e retorna um array com informações sobre a correspondência ou `null` se nenhuma correspondência for encontrada.
O que é o método `match()` da string?,O método `match()` da string procura por uma correspondência de uma expressão regular em uma string e retorna um array com os resultados ou `null` se nenhuma correspondência for encontrada.
O que é o método `replace()` da string?,O método `replace()` substitui uma parte de uma string por outra string ou por o resultado de uma função.
O que é o método `search()` da string?,O método `search()` procura por uma correspondência de uma expressão regular em uma string e retorna o índice da primeira correspondência ou -1 se nenhuma correspondência for encontrada.
O que é o método `split()` da string?,"O método `split()` divide uma string em um array de substrings, usando um separador especificado."
"Como você obtém o ano, mês, dia, hora, minutos, segundos e milissegundos de um objeto `Date`?","Você pode usar métodos como `getFullYear()`, `getMonth()`, `getDate()`, `getHours()`, `getMinutes()`, `getSeconds()` e `getMilliseconds()`."
O que é UTC (Tempo Universal Coordenado)?,UTC é o padrão de tempo primário pelo qual o mundo regula relógios e tempo. É usado como base para todos os fusos horários.
Como você obtém a hora UTC de um objeto `Date`?,"Você pode usar métodos como `getUTCDate()`, `getUTCHours()`, `getUTCMinutes()`, `getUTCSeconds()`, `getUTCMilliseconds()`."
Quais são os tipos de erros comuns em JavaScript?,"Alguns tipos de erros comuns incluem: `EvalError`, `RangeError`, `ReferenceError`, `SyntaxError`, `TypeError`, `URIError`, `InternalError`."
Como você lança um erro em JavaScript?,Você usa a palavra-chave `throw` seguida de um objeto `Error` ou outro valor.
"O que é o modo estrito (`""use strict""`) em JavaScript e quais seus benefícios?","O modo estrito é uma forma de executar o JavaScript de forma mais restrita. Ele elimina alguns comportamentos silenciosos do JavaScript e lança erros em vez disso, ajudando a prevenir erros e tornando o código mais fácil de depurar."
Quais são algumas restrições impostas pelo modo estrito?,"Algumas restrições incluem: variáveis devem ser declaradas antes de serem usadas, a atribuição a propriedades somente leitura lança um erro, a atribuição a variáveis não declaradas lança um erro, `this` dentro de uma função é `undefined` se a função não for chamada como um método de objeto."
O que é o garbage collection em JavaScript?,"Garbage collection é o processo automático de liberar memória que não está mais sendo usada por um programa. O motor JavaScript realiza o garbage collection automaticamente, liberando a memória alocada para objetos que não são mais acessíveis."
O que são memory leaks em JavaScript e como você pode evitá-los?,"Memory leaks ocorrem quando a memória alocada para objetos não é liberada, mesmo que esses objetos não sejam mais usados. Isso pode levar a problemas de desempenho e, eventualmente, ao travamento do navegador. Para evitar memory leaks, é importante liberar referências desnecessárias a objetos e evitar ciclos de referência."
O que são Generators no Javascript e qual o caso de uso deles?,"Generators são funções que podem pausar e retomar a execução, permitindo gerar uma sequência de valores sob demanda sem precisar armazená-los todos na memória de uma vez. São úteis para lidar com grandes conjuntos de dados, operações assíncronas e para criar iteradores personalizados."
Qual a diferença entre `Array.map()` e `Array.forEach()`?,"`Array.map()` cria um novo array com os resultados da aplicação de uma função a cada elemento do array original. `Array.forEach()` executa uma função para cada elemento do array, mas não retorna um novo array.  `map` retorna um novo array, enquanto `forEach` não retorna nada (undefined)."
Qual a diferença entre `Array.filter()` e `Array.find()`?,"`Array.filter()` cria um novo array com todos os elementos que passam em um teste fornecido por uma função. `Array.find()` retorna o *primeiro* elemento do array que satisfaz uma função de teste fornecida.  `filter` retorna um novo array, `find` retorna um único elemento ou `undefined`."
O que é transpilação em JavaScript?,Transpilação é o processo de converter código de uma versão do JavaScript para outra (geralmente de uma versão mais recente para uma versão mais antiga) ou de uma linguagem que se assemelha ao JavaScript (como TypeScript ou JSX) para JavaScript.
O que é o operador `??` (nullish coalescing operator) e como ele funciona?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Caso contrário, retorna o operando do lado esquerdo. É útil para fornecer valores padrão para variáveis que podem ser nulas ou indefinidas."
O que é o operador `?.` (optional chaining operator) e como ele funciona?,"O operador `?.` permite acessar propriedades de um objeto sem ter que verificar explicitamente se cada propriedade intermediária existe. Se uma propriedade na cadeia for `null` ou `undefined`, o operador retorna `undefined` em vez de lançar um erro."
O que são WeakMap e WeakSet em JavaScript e quais são suas características?,"`WeakMap` e `WeakSet` são variações de `Map` e `Set` que mantêm referências ""fracas"" aos seus objetos. Isso significa que, se um objeto referenciado por um `WeakMap` ou `WeakSet` não tiver outras referências fortes, ele poderá ser coletado pelo garbage collector, e a entrada correspondente no `WeakMap` ou `WeakSet` será removida automaticamente. Úteis para evitar memory leaks em cenários onde a vida útil das chaves/valores deve ser independente do mapa/set."
Como você cria um iterator personalizado em JavaScript?,"Para criar um iterator personalizado, você precisa implementar um objeto com um método `next()` que retorna um objeto com as propriedades `value` e `done`.  O iterable precisa ter um método com a chave `Symbol.iterator` que retorna o iterator."
O que são generator functions em JavaScript?,"Generator functions são funções especiais que podem ser pausadas e retomadas. Elas retornam um objeto generator, que é um tipo de iterator.  Usam a palavra-chave `yield` para pausar a execução e retornar um valor."
O que é uma tagged template literal?,"Uma tagged template literal é uma forma avançada de usar template literals. Você precede o template literal com o nome de uma função (a ""tag""). Essa função recebe o array de strings literais e os valores interpolados como argumentos, permitindo que você personalize o processamento do template literal."
O que é Reflect API em JavaScript?,"O Reflect API fornece métodos que correspondem aos operadores e instruções do JavaScript, permitindo que você manipule o comportamento padrão da linguagem de forma mais programática. É frequentemente usado em conjunto com Proxies."
O que é destructuring com aliases?,Destructuring com aliases permite renomear as variáveis extraídas durante a desestruturação de objetos ou arrays.  Por exemplo: `const { propriedade: novoNome } = objeto;`.
O que são Dynamic Imports?,"Dynamic Imports permitem importar módulos JavaScript de forma assíncrona usando a função `import()`. Isso é útil para carregar módulos sob demanda, o que pode melhorar o desempenho da página."
Qual a diferença entre event delegation e event bubbling?,"Event bubbling é o processo onde um evento disparado em um elemento se propaga para seus elementos pais na árvore DOM. Event delegation é uma técnica que utiliza o event bubbling para adicionar um único event listener a um elemento pai, em vez de adicionar listeners individuais a cada elemento filho. Isso é especialmente útil quando você tem muitos elementos filhos ou quando os elementos filhos são adicionados dinamicamente."
O que é CORS (Cross-Origin Resource Sharing) e como ele afeta o JavaScript?,"CORS é um mecanismo de segurança do navegador que restringe as solicitações HTTP de um script em execução em uma origem para um recurso em uma origem diferente. Em JavaScript, isso pode impedir que scripts de um domínio acessem recursos de outro domínio, a menos que o servidor remoto configure corretamente os cabeçalhos CORS."
Como você pode contornar problemas de CORS em JavaScript?,"As opções incluem: configurar corretamente os cabeçalhos CORS no servidor, usar um proxy no servidor, ou usar JSONP (uma técnica mais antiga com limitações)."
Explique o conceito de debouncing em JavaScript.,"Debouncing é uma técnica para limitar a taxa em que uma função é executada. Ela garante que a função seja executada apenas após um certo período de inatividade. É útil para lidar com eventos que são disparados com frequência, como eventos de redimensionamento da janela ou eventos de digitação em um campo de texto."
Explique o conceito de throttling em JavaScript.,"Throttling é uma técnica para limitar a taxa em que uma função é executada, mas, ao contrário do debouncing, ela garante que a função seja executada em intervalos regulares, mesmo que o evento continue a ser disparado com frequência."
O que é o IndexedDB em JavaScript?,IndexedDB é um sistema de banco de dados NoSQL transacional embutido no navegador. Permite armazenar grandes quantidades de dados estruturados e realizar consultas complexas.
O que é o Cache API em JavaScript?,"O Cache API permite armazenar e recuperar recursos da web, como arquivos HTML, CSS, JavaScript e imagens. É usado para implementar caches offline e melhorar o desempenho de sites e aplicativos web."
Qual a diferença entre `clientWidth/clientHeight` e `offsetWidth/offsetHeight` de um elemento?,"`clientWidth/clientHeight` retorna a largura/altura *interna* visível de um elemento (incluindo o padding, mas excluindo bordas, barras de rolagem e margin). `offsetWidth/offsetHeight` retorna a largura/altura *total* de um elemento (incluindo padding, bordas e barra de rolagem, mas excluindo margin)."
Como funciona a otimização de tail call (Tail Call Optimization - TCO) em JavaScript (se suportada)?,"Tail Call Optimization é uma otimização do compilador que permite que chamadas recursivas de funções no final de outra função sejam executadas sem adicionar um novo frame à pilha de chamadas. Isso evita o estouro da pilha em funções recursivas profundas. No entanto, o suporte para TCO em JavaScript é inconsistente e dependente do motor JavaScript.  O modo estrito é normalmente necessário para habilitar o TCO onde suportado."
Explique a diferença entre deep copy e shallow copy e porque isso é importante no JavaScript.,"Uma *shallow copy* cria um novo objeto que compartilha as mesmas referências dos objetos originais. Mudanças nos objetos originais refletem no shallow copy. Uma *deep copy* cria um novo objeto e copia recursivamente todos os objetos referenciados, criando objetos totalmente independentes. É importante entender a diferença para evitar efeitos colaterais inesperados ao modificar objetos."
O que é o SharedArrayBuffer e como ele é usado para a computação paralela no JavaScript?,"`SharedArrayBuffer` permite que múltiplos Web Workers acessem e manipulem a mesma área da memória. Isso permite realizar computação paralela em JavaScript, onde diferentes workers podem trabalhar em diferentes partes dos dados simultaneamente. Requer cuidados com a sincronização e a utilização de Atomics para evitar condições de corrida."
O que é o Temporal API e como ele visa melhorar o tratamento de datas e horários em JavaScript?,"A Temporal API é uma nova API JavaScript proposta para substituir o objeto `Date`. Ele visa fornecer uma API mais moderna, consistente e fácil de usar para trabalhar com datas, horários, fusos horários e durações."
O que é um Resizable ArrayBuffer e como ele difere de um ArrayBuffer normal?,Um `Resizable ArrayBuffer` permite redimensionar o tamanho do buffer de memória alocado após a sua criação. ArrayBuffers normais têm um tamanho fixo que não pode ser alterado. Isso pode ser útil em situações onde a quantidade de dados a serem armazenados é desconhecida no momento da criação do buffer.
O que é o BigInt em JavaScript e quando você o usaria?,`BigInt` é um tipo de dado numérico que permite representar inteiros de
"Explique o conceito de ""closure"" em JavaScript.","Um closure é a capacidade de uma função em JavaScript de acessar variáveis de seu escopo léxico circundante, mesmo depois que a função externa já terminou de ser executada. Isso permite que a função interna ""lembre"" as variáveis do ambiente onde foi criada."
O que é o método `bind()` em JavaScript e como ele é usado?,"O método `bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido e os argumentos fornecidos antes de qualquer argumento fornecido quando a nova função é chamada. É usado para definir o contexto `this` de uma função explicitamente."
"Explique o que é ""event delegation"" em JavaScript.","Event delegation é uma técnica para lidar com eventos em que, em vez de adicionar ouvintes de eventos a elementos individuais, você adiciona um único ouvinte a um elemento pai. O evento ""bolha"" para o elemento pai, e o ouvinte determina qual elemento filho disparou o evento."
O que é o método `map()` em arrays JavaScript e como ele funciona?,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele não modifica o array original.
Qual a função do operador `typeof` em JavaScript?,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando. Exemplos: `typeof 42` retorna ""number"", `typeof ""hello""` retorna ""string"", `typeof null` retorna ""object"" (uma peculiaridade histórica)."
"Explique o que é ""strict mode"" em JavaScript e como habilitá-lo.","""Strict mode"" é uma forma de impor uma análise mais rigorosa do código JavaScript, ajudando a prevenir erros comuns e tornando o código mais seguro. É habilitado adicionando `""use strict"";` no início de um script ou função."
O que é o método `reduce()` em arrays JavaScript e qual seu propósito?,"O método `reduce()` executa uma função redutora (fornecida) em cada elemento do array, resultando em um único valor de saída. É usado para acumular valores de um array em um único resultado."
"Qual a diferença entre `var`, `let` e `const` na declaração de variáveis em JavaScript?","`var` tem escopo de função ou global, e pode ser redeclarada e reatribuída. `let` tem escopo de bloco e pode ser reatribuída. `const` também tem escopo de bloco e não pode ser reatribuída após a inicialização."
Como você pode interromper a execução de um loop em JavaScript?,Você pode usar a palavra-chave `break` para interromper a execução de um loop.
O que é o método `filter()` em arrays JavaScript e como ele funciona?,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. Ele retorna um novo array contendo apenas os elementos que satisfazem a condição.
O que é o objeto `window` em JavaScript e qual sua importância?,"O objeto `window` é o objeto global no ambiente do navegador, representando a janela do navegador. Ele fornece acesso a várias propriedades e métodos relacionados à janela, como `document`, `alert`, `console`, `location`, etc."
Como você pode adicionar um novo elemento ao final de um array em JavaScript?,Você pode usar o método `push()` para adicionar um ou mais elementos ao final de um array.
O que é o método `slice()` em arrays JavaScript e como ele é usado?,O método `slice()` retorna uma cópia rasa de uma porção de um array em um novo array. Ele recebe dois argumentos opcionais: o índice inicial e o índice final (não incluso) da porção a ser extraída.
O que é o método `forEach()` em arrays JavaScript e como ele funciona?,O método `forEach()` executa uma função fornecida uma vez para cada elemento em um array. Ele não retorna um novo array e é usado principalmente para iterar sobre os elementos e executar alguma ação em cada um.
Como você pode remover o último elemento de um array em JavaScript?,Você pode usar o método `pop()` para remover o último elemento de um array. Ele retorna o elemento removido.
O que é uma função de callback em JavaScript?,Uma função de callback é uma função que é passada como um argumento para outra função e é executada após a conclusão de alguma operação ou evento.
Qual a diferença entre `setTimeout()` e `setInterval()` em JavaScript?,`setTimeout()` executa uma função uma vez após um determinado período de tempo (em milissegundos). `setInterval()` executa uma função repetidamente em intervalos regulares (em milissegundos).
O que é o operador ternário em JavaScript e como ele é usado?,O operador ternário é uma forma abreviada de escrever uma instrução `if...else`. Sua sintaxe é `condição ? expressão_se_verdadeiro : expressão_se_falso`.
O que é o método `concat()` em arrays JavaScript e como ele é usado?,O método `concat()` é usado para juntar dois ou mais arrays em um novo array. Ele não modifica os arrays originais.
O que é JSON e qual sua utilidade em JavaScript?,"JSON (JavaScript Object Notation) é um formato de dados leve e fácil de ler e escrever. É usado para transmitir dados entre um servidor e uma aplicação web. Em JavaScript, você pode usar `JSON.stringify()` para converter um objeto JavaScript em uma string JSON e `JSON.parse()` para converter uma string JSON de volta em um objeto JavaScript."
O que é o método `padStart()` em strings JavaScript e como ele funciona?,"O método `padStart()` preenche o início de uma string com um caractere especificado (ou espaço em branco, por padrão) até atingir um comprimento especificado."
O que é o método `padEnd()` em strings JavaScript e como ele funciona?,"O método `padEnd()` preenche o final de uma string com um caractere especificado (ou espaço em branco, por padrão) até atingir um comprimento especificado."
O que é o operador de coalescência nula (`??`) em JavaScript?,"O operador de coalescência nula (`??`) retorna seu operando do lado direito quando seu operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna seu operando do lado esquerdo. Ele é útil para fornecer um valor padrão para uma variável que pode ser nula ou indefinida."
O que é o encadeamento opcional (`?.`) em JavaScript?,"O encadeamento opcional (`?.`) permite acessar propriedades de um objeto que pode ser `null` ou `undefined` sem lançar um erro. Se a propriedade anterior no encadeamento for `null` ou `undefined`, a expressão retorna `undefined` imediatamente."
Qual é a finalidade do `use strict`?,"O `use strict` habilita o modo estrito no JavaScript, tornando o código mais seguro e robusto ao impor regras mais rigorosas para a sintaxe e o comportamento da linguagem. Isso ajuda a detectar erros comuns mais cedo e impede o uso de funcionalidades problemáticas."
Como você pode encontrar o índice de um elemento em um array?,Use o método `indexOf()`. Ele retorna o primeiro índice no qual o elemento pode ser encontrado no array ou -1 se ele não estiver presente.
Qual é a diferença entre `shift()` e `unshift()`?,`shift()` remove o primeiro elemento de um array e retorna esse elemento. `unshift()` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
Como verificar se um objeto tem uma propriedade específica?,Use o método `hasOwnProperty('nomeDaPropriedade')`. Ele retorna `true` se o objeto tem a propriedade especificada e `false` caso contrário.
Explique como funciona o método `Object.keys()`.,O método `Object.keys()` retorna um array com os nomes de todas as propriedades enumeráveis de um determinado objeto.
O que é o operador spread (`...`) e para que serve?,"O operador spread (`...`) permite expandir um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados. Ele é usado para copiar arrays, combinar arrays e passar argumentos para funções."
Como você pode inverter a ordem dos elementos em um array?,Use o método `reverse()`. Ele inverte a ordem dos elementos no array.
Qual é o propósito do método `Array.from()`?,O método `Array.from()` cria uma nova instância de Array a partir de um objeto semelhante a um array ou iterável.
Como você pode remover elementos duplicados de um array?,Você pode usar o objeto `Set`. Exemplo: `[...new Set(arrayComDuplicados)]`.  Sets armazenam apenas valores únicos.
O que é o método `trim()` e qual sua utilidade?,O método `trim()` remove espaços em branco do início e do final de uma string. É útil para limpar dados de entrada do usuário.
"Explique o conceito de ""currying"" em JavaScript.",Currying é uma técnica em programação funcional que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada. Cada chamada de função retorna uma nova função que espera o próximo argumento.
Como você pode verificar se uma variável é do tipo `Number`?,Você pode usar `typeof variavel === 'number'` ou `Number.isFinite(variavel)`. `Number.isFinite()` é mais robusto porque distingue entre números finitos e `NaN` ou `Infinity`.
O que é o método `Object.freeze()` e qual seu propósito?,"O método `Object.freeze()` congela um objeto. Um objeto congelado não pode mais ter suas propriedades alteradas: novas propriedades não podem ser adicionadas, propriedades existentes não podem ser removidas, seus valores não podem ser alterados e a reconfigurabilidade de suas propriedades não pode ser alterada. Ele retorna o objeto congelado."
O que é o método `Object.seal()` e qual seu propósito?,"O método `Object.seal()` sela um objeto, impedindo que novas propriedades sejam adicionadas a ele e marcando todas as propriedades existentes como não configuráveis. Os valores das propriedades presentes ainda podem ser alterados, desde que sejam graváveis."
Qual é a diferença entre `Object.freeze()` e `Object.seal()`?,"`Object.freeze()` impede qualquer alteração no objeto, incluindo a alteração dos valores das propriedades existentes. `Object.seal()` impede a adição ou remoção de propriedades, mas permite a modificação dos valores das propriedades existentes."
O que são WeakSets e qual a sua utilidade?,"WeakSets são coleções de objetos (apenas objetos, não valores primitivos) nas quais cada objeto ocorre apenas uma vez e que não impede o objeto de ser coletado pelo coletor de lixo, se não houver outras referências a ele."
O que são WeakMaps e qual a sua utilidade?,"WeakMaps são coleções de pares chave/valor em que as chaves são objetos (apenas objetos, não valores primitivos) e os valores podem ser de qualquer tipo. Assim como no WeakSet, a presença de uma chave no WeakMap não impede que o objeto seja coletado pelo coletor de lixo se não houver outras referências a ele."
O que é o método `toLocaleString()` e como ele é usado?,"O método `toLocaleString()` retorna uma string com uma representação sensível à localidade deste número. Ele permite formatar números, datas e moedas de acordo com as convenções de uma determinada localidade."
O que é BigInt em JavaScript?,"BigInt é um tipo de dado numérico que permite representar inteiros com precisão arbitrária, além do limite de `Number.MAX_SAFE_INTEGER`. Ele é criado adicionando `n` ao final de um número literal (ex: `123n`) ou usando a função `BigInt()`."
Como você pode iterar sobre as propriedades de um objeto?,Você pode usar um loop `for...in` para iterar sobre as propriedades enumeráveis de um objeto.
O que são funções de ordem superior (Higher-Order Functions)?,Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam funções como resultados.
Explique o que é programação assíncrona em JavaScript.,"Programação assíncrona permite que um programa execute várias tarefas simultaneamente sem bloquear a thread principal. Isso é importante para realizar operações de longa duração, como solicitações de rede, sem congelar a interface do usuário."
O que são Promises em JavaScript e como elas são usadas?,"Promises são objetos que representam o resultado eventual (sucesso ou falha) de uma operação assíncrona. Elas têm três estados: pendente (pending), cumprida (fulfilled) e rejeitada (rejected). Elas são usadas para lidar com operações assíncronas de forma mais organizada do que callbacks aninhados."
Como você lida com erros em Promises?,Você usa o método `.catch()` para lidar com erros em Promises. O `.catch()` é anexado ao final da cadeia de Promises e é executado se qualquer uma das Promises na cadeia for rejeitada.
O que são `async/await` em JavaScript e como eles simplificam a programação assíncrona?,"`async/await` são palavras-chave que simplificam a escrita de código assíncrono. `async` define uma função assíncrona, e `await` pausa a execução da função até que uma Promise seja resolvida. Isso torna o código assíncrono mais fácil de ler e escrever, parecendo código síncrono."
Qual é a função do método `Promise.all()`?,"O método `Promise.all()` recebe um array de Promises e retorna uma nova Promise que é cumprida quando todas as Promises no array são cumpridas, ou rejeitada se qualquer uma das Promises no array for rejeitada."
O que é o método `Promise.race()`?,O método `Promise.race()` recebe um array de Promises e retorna uma nova Promise que é cumprida ou rejeitada assim que a primeira Promise no array for cumprida ou rejeitada.
O que são symbols em JavaScript e qual a sua utilidade?,Symbols são um tipo de dado primitivo que representa um identificador único. Eles são usados para criar propriedades de objeto que são privadas e não podem ser acessadas ou modificadas por outros códigos.
O que é o método `Proxy` em JavaScript e para que serve?,"O objeto `Proxy` permite interceptar e personalizar operações fundamentais em objetos (por exemplo, leitura de propriedade, atribuição, enumeração, invocação de função, etc.). É usado para criar comportamentos personalizados para objetos, como validação de acesso, logging, ou virtualização."
Qual a diferença entre `map` e `forEach` em JavaScript?,"`map` retorna um novo array com os resultados da aplicação de uma função a cada elemento do array original. `forEach` executa uma função para cada elemento do array, mas não retorna um novo array (retorna `undefined`).  `forEach` é usado para iterar e realizar ações, enquanto `map` é usado para transformar os elementos de um array."
O que é o método `Array.prototype.flat()` e para que serve?,"O método `Array.prototype.flat()` cria um novo array com todos os elementos sub-array concatenados nele recursivamente até a profundidade especificada. Ele é útil para ""achatar"" arrays aninhados."
O que é o método `Array.prototype.flatMap()` e para que serve?,"O método `Array.prototype.flatMap()` é idêntico ao método `map()` seguido pelo método `flat()` de profundidade 1. Ele é útil para mapear cada elemento para um novo array e, em seguida, achatar o resultado em um novo array."
O que são classes em JavaScript?,Classes em JavaScript são um modelo sintático para criar objetos. Elas são construídas sobre o sistema de protótipos e oferecem uma maneira mais clara e organizada de definir e criar objetos.
Como você herda propriedades e métodos de uma classe pai em JavaScript?,"Você usa a palavra-chave `extends` para indicar que uma classe herda de outra. Dentro da classe filha, você pode usar a palavra-chave `super()` para chamar o construtor da classe pai e acessar suas propriedades e métodos."
O que é o modificador `static` em classes JavaScript?,O modificador `static` define um método estático para a classe. Métodos estáticos são chamados diretamente na classe (em vez de em instâncias da classe) e geralmente são usados para funções utilitárias relacionadas à classe.
O que é o padrão de módulo em JavaScript?,"O padrão de módulo é uma técnica para organizar o código JavaScript em unidades reutilizáveis e isoladas, chamadas módulos. Ele usa closures para encapsular o estado interno do módulo e expor apenas uma interface pública para outros códigos."
O que é o escopo global em JavaScript?,O escopo global é o escopo mais externo em um programa JavaScript. Variáveis declaradas fora de qualquer função ou bloco têm escopo global e podem ser acessadas de qualquer lugar no código.
O que é o escopo de função em JavaScript?,O escopo de função é o escopo criado dentro de uma função. Variáveis declaradas dentro de uma função têm escopo de função e só podem ser acessadas dentro dessa função.
O que é o escopo de bloco em JavaScript?,O escopo de bloco é o escopo criado dentro de um bloco de código (delimitado por chaves `{}`). Variáveis declaradas com `let` ou `const` dentro de um bloco têm escopo de bloco e só podem ser acessadas dentro desse bloco.
O que é uma função pura?,Uma função pura é uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais (não modifica nenhum estado fora da função).
Qual a importância de evitar efeitos colaterais em funções JavaScript?,"Evitar efeitos colaterais torna o código mais previsível, fácil de testar e depurar. Funções sem efeitos colaterais são mais fáceis de raciocinar e podem ser reutilizadas em diferentes partes do programa sem causar problemas inesperados."
O que é memoization?,Memoization é uma técnica de otimização que armazena em cache os resultados de chamadas de função caras e retorna o resultado em cache quando as mesmas entradas ocorrem novamente. Isso pode melhorar significativamente o desempenho de funções que são chamadas repetidamente com as mesmas entradas.
Como você pode implementar memoization em JavaScript?,"Você pode criar um cache (um objeto ou Map) para armazenar os resultados das chamadas de função. Antes de executar a função, verifique se o resultado já está no cache. Se estiver, retorne o resultado em cache. Caso contrário, execute a função, armazene o resultado no cache e retorne o resultado."
O que são web workers?,Web Workers permitem executar scripts em threads de fundo separadas do thread principal do navegador. Isso permite realizar tarefas computacionalmente intensivas sem bloquear a interface do usuário.
Como você pode se comunicar com um web worker?,Você pode usar o método `postMessage()` para enviar mensagens para o web worker e o evento `onmessage` para receber mensagens do web worker.
O que são service workers?,"Service workers são scripts que são executados em segundo plano e atuam como um proxy entre o navegador e a rede. Eles podem ser usados para implementar recursos como cache offline, notificações push e sincronização em segundo plano."
Como você pode selecionar um elemento HTML usando JavaScript?,"Você pode usar os métodos `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()` e `document.querySelector()`/`document.querySelectorAll()` para selecionar elementos HTML."
Como você pode modificar o conteúdo de um elemento HTML usando JavaScript?,"Você pode usar a propriedade `textContent` ou `innerHTML` para modificar o conteúdo de um elemento HTML. `textContent` define o texto do elemento, enquanto `innerHTML` define o HTML interno do elemento."
Como você pode adicionar um novo elemento HTML a uma página usando JavaScript?,"Você pode usar os métodos `document.createElement()` para criar um novo elemento, `document.createTextNode()` para criar um nó de texto e `appendChild()` para adicionar o novo elemento ao DOM."
Como você pode remover um elemento HTML de uma página usando JavaScript?,Você pode usar o método `removeChild()` do elemento pai para remover um elemento filho do DOM.
Como você pode adicionar um ouvinte de evento a um elemento HTML usando JavaScript?,"Você pode usar o método `addEventListener()` para adicionar um ouvinte de evento a um elemento HTML. O método `addEventListener()` recebe o nome do evento (por exemplo, ""click"", ""mouseover"") e uma função de callback que será executada quando o evento ocorrer."
Como você pode remover um ouvinte de evento de um elemento HTML usando JavaScript?,Você pode usar o método `removeEventListener()` para remover um ouvinte de evento de um elemento HTML.
O que é a propagação de eventos (event bubbling) em JavaScript?,A propagação de eventos (event bubbling) é o processo pelo qual um evento disparado em um elemento filho se propaga para seus elementos pais na árvore do DOM. Isso significa que os ouvintes de evento anexados aos elementos pais também serão executados quando o evento for disparado no elemento filho.
Como você pode impedir a propagação de eventos em JavaScript?,Você pode usar o método `stopPropagation()` do objeto de evento para impedir a propagação de eventos.
O que são Formulários em HTML e como interagir com eles via JavaScript?,"Formulários são elementos HTML usados para coletar dados do usuário. Interagimos com eles via JavaScript capturando o evento `submit` do formulário, acessando os valores dos campos usando `document.getElementById()` ou `document.querySelector()` e suas propriedades `value`. Podemos também validar os dados antes de enviar."
O que é o método `JSON.stringify()` e qual sua finalidade?,`JSON.stringify()` converte um objeto JavaScript em uma string JSON. É usado para transmitir dados entre um servidor e uma aplicação web ou para armazenar dados em formatos como `localStorage`.
O que é o método `JSON.parse()` e qual sua finalidade?,`JSON.parse()` analisa uma string JSON e a converte em um objeto JavaScript. É usado para receber dados formatados como JSON e convertê-los em objetos manipuláveis em JavaScript.
Como você pode ler e escrever cookies em JavaScript?,"Você pode acessar os cookies usando a propriedade `document.cookie`. Para escrever um cookie, você atribui uma string com o nome, valor e opções do cookie (como tempo de expiração) a `document.cookie`. Para ler, você parseia a string `document.cookie` para encontrar o cookie desejado."
O que é uma expressão regular (regex) em JavaScript?,"Uma expressão regular (regex) é um padrão usado para corresponder a combinações de caracteres em strings. É uma forma poderosa de pesquisar, substituir e validar texto."
Quais são alguns métodos de string que usam expressões regulares em JavaScript?,"Métodos como `search()`, `replace()`, `match()` e `split()` podem usar expressões regulares para realizar operações de pesquisa e manipulação de strings."
O que são quantificadores em expressões regulares? Dê exemplos.,"Quantificadores especificam quantas vezes um elemento (caractere, grupo, etc.) deve ocorrer para que haja uma correspondência. Exemplos: `*` (zero ou mais), `+` (um ou mais), `?` (zero ou um), `{n}` (exatamente n vezes), `{n,}` (n ou mais vezes), `{n,m}` (entre n e m vezes)."
O que são classes de caracteres em expressões regulares? Dê exemplos.,"Classes de caracteres definem um conjunto de caracteres que podem ser usados para corresponder. Exemplos: `[abc]` (qualquer um dos caracteres a, b ou c), `[a-z]` (qualquer caractere de a a z), `[0-9]` (qualquer dígito de 0 a 9), `.` (qualquer caractere, exceto quebras de linha)."
O que são caracteres de escape em expressões regulares e por que são usados?,"Caracteres de escape são usados para corresponder a caracteres especiais (como `.` , `*` , `+` , `?` , `\` , `[`, `]`, `(`, `)`, `{`, `}`, `^`, `$`, `|`) que têm um significado especial nas expressões regulares. Você usa uma barra invertida `\` antes do caractere para ""escapar"" seu significado especial e fazê-lo corresponder ao próprio caractere literal. Ex: `\.` corresponde ao caractere ponto."
O que são lookarounds (positive/negative lookahead/lookbehind) em expressões regulares?,"Lookarounds são asserções que verificam se um padrão está presente antes ou depois de outro padrão, sem incluir o padrão lookaround na correspondência final.
   * **Lookahead:** `(?=pattern)` (positive), `(?!pattern)` (negative) - Verifica se o padrão segue ou não.
   * **Lookbehind:** `(?<=pattern)` (positive), `(?<!pattern)` (negative) - Verifica se o padrão precede ou não."
O que são flags em expressões regulares em JavaScript?,"Flags modificam o comportamento de uma expressão regular. As flags são adicionadas após a barra final da expressão regular (ex: `/pattern/gi`). Alguns exemplos são:
   * `g` (global): Encontra todas as correspondências, em vez de parar após a primeira.
   * `i` (ignore case): Ignora a distinção entre maiúsculas e minúsculas.
   * `m` (multiline): Permite que `^` e `$` correspondam ao início e ao fim de cada linha (em vez de apenas o início e o fim de toda a string).
   * `s` (dotAll): Permite que `.` corresponda a qualquer caractere, incluindo quebras de linha."
Como você pode validar um endereço de e-mail usando uma expressão regular em JavaScript?,"Um exemplo (simplificado) de expressão regular para validar um e-mail é: `/^[^\s@]+@[^\s@]+\.[^\s@]+$/`. Esta regex verifica se há pelo menos um caractere não espaço ou `@` antes do `@`, seguido por pelo menos um caractere não espaço ou `@` depois do `@`, seguido por um ponto e, finalmente, pelo menos um caractere não espaço ou `@` após o ponto. Lembre-se que validações de e-mail complexas exigem regex mais robustas."
O que é a função `eval()` em JavaScript e quais são os riscos de usá-la?,"A função `eval()` avalia uma string como código JavaScript. No entanto, o uso de `eval()` é geralmente desencorajado, pois pode apresentar sérios riscos de segurança, como a execução de código malicioso se a string a ser avaliada for derivada de entrada do"
O que é o escopo léxico em JavaScript?,"Escopo léxico significa que o escopo de uma variável em JavaScript é determinado pela sua posição no código-fonte, e não pelo contexto de execução."
Como você pode prevenir a modificação de um objeto em JavaScript?,"Você pode usar `Object.freeze(obj)` para tornar um objeto imutável, impedindo que novas propriedades sejam adicionadas, existentes sejam removidas ou que seus valores sejam alterados."
O que é a função `parseInt()` e qual sua finalidade?,"`parseInt()` converte uma string em um número inteiro. Opcionalmente, aceita um segundo argumento que especifica a base numérica (radix) a ser usada na conversão."
O que são closures em JavaScript?,"Closures são funções que ""lembram"" o ambiente (escopo léxico) em que foram criadas, mesmo depois que o escopo externo já foi encerrado. Elas permitem que uma função acesse variáveis de um escopo externo."
"Explique o conceito de ""hoisting"" em JavaScript.","Hoisting é um comportamento no JavaScript onde as declarações de variáveis (`var`) e funções são movidas para o topo de seus respectivos escopos durante a fase de compilação.  Entretanto, a inicialização das variáveis com `var` não é hoisted, resultando em `undefined` até que a linha de código com a atribuição seja executada."
Qual é o método `reduce()` em arrays JavaScript e para que serve?,"`reduce()` executa uma função ""redutora"" (fornecida por você) em cada elemento do array, resultando em um único valor de saída. Ele pode ser usado para somar elementos, concatenar strings, etc."
Explique o que são Promises em JavaScript.,Promises representam o resultado eventual (sucesso ou falha) de uma operação assíncrona. Elas ajudam a lidar com código assíncrono de forma mais organizada do que callbacks.
O que é o operador `spread` (...) em JavaScript?,"O operador spread expande um array ou objeto em elementos individuais. Ele pode ser usado para criar cópias de arrays e objetos, concatenar arrays e passar argumentos para funções."
Como você clona um objeto em JavaScript? Quais os tipos de cópia existentes?,"Você pode usar `Object.assign({}, objetoOriginal)` para fazer uma cópia superficial (shallow copy) ou o operador spread `{...objetoOriginal}` para o mesmo efeito. Para uma cópia profunda (deep copy), você pode usar `JSON.parse(JSON.stringify(objetoOriginal))`, mas isso não funciona para objetos com funções."
"O que é o ""strict mode"" em JavaScript e como habilitá-lo?","""Strict mode"" é um modo restritivo de JavaScript que impõe regras mais rigorosas, ajudando a detectar erros e evitar práticas ruins. Ele é habilitado adicionando a string `""use strict"";` no início do arquivo ou da função."
Como você pode lidar com erros em JavaScript?,Você pode usar blocos `try...catch` para capturar e tratar exceções que ocorrem durante a execução do código.
Qual a diferença entre `forEach` e `map` em JavaScript?,"`forEach` itera sobre os elementos de um array e executa uma função para cada elemento. Ele não retorna nada. `map` também itera sobre os elementos de um array e executa uma função para cada elemento, mas retorna um novo array com os resultados."
"Qual a diferença entre `call`, `apply` e `bind` em JavaScript?","`call` e `apply` são usados para invocar uma função com um determinado valor para `this`. `call` recebe os argumentos separadamente, enquanto `apply` recebe os argumentos como um array. `bind` cria uma nova função com o `this` definido para um determinado valor, mas não invoca a função imediatamente."
O que é programação orientada a protótipos em JavaScript?,"É um paradigma onde os objetos herdam propriedades e métodos de outros objetos (protótipos). Em vez de classes, JavaScript usa protótipos para definir as características dos objetos."
O que é o protótipo de um objeto em JavaScript?,O protótipo é um objeto do qual outro objeto herda propriedades e métodos. Todo objeto em JavaScript tem um protótipo (exceto o objeto criado com `Object.create(null)`).
O que é a cadeia de protótipos em JavaScript?,"É uma série de protótipos conectados entre si, onde cada objeto tem um protótipo, e esse protótipo pode ter outro protótipo, e assim por diante. Quando uma propriedade é acessada em um objeto, JavaScript procura na cadeia de protótipos até encontrar a propriedade ou chegar ao final da cadeia (que é `null`)."
Como você cria um objeto em JavaScript usando a notação literal?,"Usando chaves `{}` e definindo as propriedades dentro das chaves, como por exemplo: `let objeto = { nome: ""Exemplo"", idade: 30 };`"
Como você cria um objeto em JavaScript usando a palavra-chave `new` e uma função construtora?,"Definindo uma função com a primeira letra maiúscula (por convenção) e usando a palavra-chave `new` para criar uma instância do objeto, como por exemplo: `function Pessoa(nome, idade) { this.nome = nome; this.idade = idade; } let pessoa1 = new Pessoa(""João"", 25);`"
O que são funções anônimas em JavaScript?,São funções que não têm nome. Elas são frequentemente usadas como argumentos para outras funções ou atribuídas a variáveis. Exemplo: `let minhaFuncao = function() { /* código */ };`
O que são funções de alta ordem (Higher-Order Functions) em JavaScript?,"São funções que recebem outras funções como argumentos ou retornam outras funções como resultados. Exemplos comuns são `map`, `filter` e `reduce`."
"Como você adiciona um ""event listener"" a um elemento HTML usando JavaScript?",Você pode usar o método `addEventListener()`.
"O que é ""event bubbling"" em JavaScript?",É o processo em que um evento disparado em um elemento se propaga para os elementos pais na árvore DOM.
"O que é ""event capturing"" em JavaScript?","É o processo em que um evento disparado em um elemento se propaga para os elementos filhos na árvore DOM, antes de chegar ao elemento alvo.  É menos comum que bubbling."
"O que é ""event delegation"" em JavaScript?","É uma técnica em que você adiciona um ""event listener"" a um elemento pai e usa a propriedade `event.target` para determinar qual elemento filho disparou o evento. Isso pode melhorar o desempenho, especialmente quando você tem muitos elementos filhos."
O que é o objeto `location` em JavaScript?,"É uma propriedade do objeto `window` que contém informações sobre o URL da página atual. Ele permite que você redirecione o usuário para outra página, recarregue a página atual, etc."
Como você cria um cookie em JavaScript?,Você pode usar a propriedade `document.cookie` para definir o valor de um cookie.
Como você exclui um cookie em JavaScript?,Você pode definir a data de expiração do cookie para uma data passada.
Como você limpa todo o Local Storage usando JavaScript?,Você pode usar o método `localStorage.clear()`.
O que é o operador de coalescência nula (Nullish Coalescing Operator - `??`) em JavaScript?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Caso contrário, retorna o operando do lado esquerdo.  É diferente do operador `||` que considera valores falsy (como 0 ou """") como equivalentes a `null` ou `undefined`."
O que é o encadeamento opcional (Optional Chaining - `?.`) em JavaScript?,"O operador `?.` permite acessar propriedades de um objeto que pode ser `null` ou `undefined` sem causar um erro. Se o objeto for `null` ou `undefined`, o operador retorna `undefined`."
O que são Map e Set em JavaScript?,"`Map` é uma coleção de pares chave-valor, onde as chaves podem ser de qualquer tipo de dado. `Set` é uma coleção de valores únicos, também de qualquer tipo de dado."
Qual a diferença entre Map e um objeto literal em JavaScript?,"As chaves em um `Map` podem ser de qualquer tipo de dado (incluindo objetos), enquanto em um objeto literal, as chaves são sempre strings ou símbolos. A ordem das chaves é preservada em um `Map`, mas não é garantida em um objeto literal.  Map tem métodos específicos para gerenciar seus elementos (set, get, delete, has)."
Qual a diferença entre Set e um array em JavaScript?,"Um `Set` armazena apenas valores únicos, enquanto um array pode conter valores duplicados. A ordem dos elementos não é garantida em um `Set`.  Set tem métodos otimizados para verificar a existência de um elemento (has)."
Como você faz uma requisição GET usando a API Fetch?,`fetch('url').then(response => response.json()).then(data => console.log(data));`
Como você faz uma requisição POST usando a API Fetch?,"`fetch('url', { method: 'POST', body: JSON.stringify(data), headers: { 'Content-Type': 'application/json' } }).then(response => response.json()).then(data => console.log(data));`"
Como você importa um módulo em JavaScript usando a sintaxe `import`?,`import { nomeDaFuncao } from './caminho/para/o/modulo.js';`
Como você exporta um módulo em JavaScript usando a sintaxe `export`?,`export function nomeDaFuncao() { /* código */ }` ou `export default nomeDaFuncao;`
Quais são alguns métodos comuns do objeto `console`?,"`console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`."
Quais são alguns metacaracteres comuns em expressões regulares?,"`.` (qualquer caractere), `*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `[]` (conjunto de caracteres), `^` (início da string), `$` (fim da string)."
Como você testa se uma string corresponde a uma expressão regular em JavaScript?,Você pode usar o método `test()` da expressão regular ou o método `match()` da string.
O que são os métodos `toUpperCase()` e `toLowerCase()` em strings JavaScript?,`toUpperCase()` converte uma string para letras maiúsculas. `toLowerCase()` converte uma string para letras minúsculas.
O que é o método `substring()` em strings JavaScript?,Retorna uma parte de uma string entre os índices inicial e final especificados.
O que é o método `slice()` em strings JavaScript?,"Semelhante a `substring()`, mas também aceita índices negativos, que indicam posições a partir do final da string."
O que é o método `padStart()` em strings JavaScript?,"Preenche o início de uma string com um caractere especificado (ou espaço em branco, por padrão) até atingir um comprimento determinado."
O que é o método `padEnd()` em strings JavaScript?,"Preenche o final de uma string com um caractere especificado (ou espaço em branco, por padrão) até atingir um comprimento determinado."
O que são WeakSet e WeakMap em JavaScript?,"`WeakSet` e `WeakMap` são coleções que armazenam objetos fracamente. Isso significa que, se um objeto armazenado em um `WeakSet` ou `WeakMap` não for mais referenciado em nenhum outro lugar, ele pode ser coletado pelo coletor de lixo (garbage collector), e a entrada correspondente no `WeakSet` ou `WeakMap` será removida automaticamente. Eles não permitem iteração. As chaves dos WeakMap só podem ser objetos."
Dê um exemplo de destructuring de um objeto.,"`const { nome, idade } = pessoa;` (onde `pessoa` é um objeto com propriedades `nome` e `idade`)."
Dê um exemplo de destructuring de um array.,"`const [primeiro, segundo] = numeros;` (onde `numeros` é um array)."
O que é o operador rest (`...`) em JavaScript?,"Quando usado como parâmetro de uma função, o operador rest coleta todos os argumentos restantes em um array. Por exemplo: `function minhaFuncao(param1, ...rest) { console.log(rest); }`."
O que é a palavra-chave `this` dentro de uma classe em JavaScript?,Refere-se à instância do objeto que está sendo criada.
O que é herança em JavaScript (usando classes)?,É a capacidade de uma classe (subclasse) herdar propriedades e métodos de outra classe (superclasse).
Como você implementa herança em JavaScript usando classes?,Usando a palavra-chave `extends`. Por exemplo: `class Cachorro extends Animal { /* ... */ }`
O que é o método `super()` em JavaScript?,É usado dentro do construtor de uma subclasse para chamar o construtor da superclasse. Também pode ser usado para acessar métodos da superclasse.
Como você define um getter em JavaScript?,Usando a palavra-chave `get` antes do nome do método.
Como você define um setter em JavaScript?,Usando a palavra-chave `set` antes do nome do método.
O que são Symbol em JavaScript?,Symbols são um tipo de dado primitivo que representa um identificador único. Eles são usados para criar propriedades privadas em objetos e para evitar conflitos de nomes.
Como você cria um Symbol em JavaScript?,Usando a função `Symbol()`.
O que é o spread operator com objetos?,"Permite criar cópias de objetos ou combinar múltiplos objetos em um só, de forma concisa. `const novoObjeto = { ...objeto1, ...objeto2 };`"
O que são tagged templates?,"Permitem processar template literals com uma função tag, oferecendo controle sobre a interpolação e formatação da string final."
O que é um proxy em JavaScript?,"Um proxy é um objeto que atua como intermediário para outro objeto. Ele permite interceptar e personalizar operações no objeto original, como acesso a propriedades, atribuição de valores e chamadas de métodos."
O que são os handlers de um proxy em JavaScript?,"São funções que definem o comportamento do proxy para diferentes operações. Exemplos: `get`, `set`, `apply`, `construct`."
O que é Reflect em JavaScript?,`Reflect` é um objeto embutido que fornece métodos para interceptar e personalizar operações JavaScript. Ele é usado em conjunto com Proxies.
O que é tail call optimization (TCO) em JavaScript?,"É uma otimização que permite que as chamadas recursivas no final de uma função não acumulem frames na pilha de chamadas, evitando estouros de pilha (stack overflow).  Nem todos os ambientes JavaScript implementam TCO."
O que é o operador `globalThis` em JavaScript?,"`globalThis` é uma propriedade que sempre se refere ao objeto global, independentemente do ambiente de execução (navegador, Node.js, etc.)."
Qual a diferença entre `Function.prototype.apply()` e `Reflect.apply()`?,"`Function.prototype.apply()` invoca uma função com um dado valor `this` e argumentos fornecidos como um array (o que pode ser complicado se o array for muito grande). `Reflect.apply()` executa a mesma tarefa, mas de uma forma mais elegante e eficiente, principalmente ao lidar com arrays de argumentos grandes."
O que é o método `Object.hasOwn()` em JavaScript?,"Retorna um booleano indicando se o objeto possui a propriedade especificada como uma propriedade direta (não herdada da cadeia de protótipos). Substitui `Object.prototype.hasOwnProperty()`, sendo uma forma mais segura e recomendada."
Qual é o papel do Garbage Collector em JavaScript?,O Garbage Collector é um processo automático que libera a memória que não está mais sendo usada pelo programa. Ele identifica os objetos que não são mais referenciados e os remove da memória. Isso ajuda a evitar vazamentos de memória e a manter o desempenho do programa.
O que é o método `Array.prototype.flat()` em JavaScript?,Cria um novo array com todos os elementos sub-array concatenados nele recursivamente até a profundidade especificada.
O que é o método `Array.prototype.flatMap()` em JavaScript?,"Mapeia cada elemento usando uma função de mapeamento e, em seguida, achata o resultado em um novo array. É idêntico a um `map()` seguido por um `flat()` de profundidade 1, mas `flatMap()` geralmente é bastante útil e um pouco mais eficiente."
Explique a diferença entre os operadores `==` e `===` em JavaScript.,"`==` (igualdade abstrata) compara apenas o valor, realizando conversão de tipo se necessário. `===` (igualdade estrita) compara valor e tipo, sem conversão de tipo."
Qual é o escopo de uma variável declarada com `var` dentro de uma função?,Escopo de função. A variável é acessível dentro de toda a função onde foi declarada.
Qual o resultado de `typeof null` em JavaScript e por que isso acontece?,"O resultado é `""object""`. Isso é um bug histórico do JavaScript que nunca foi corrigido para evitar quebrar a compatibilidade com versões antigas."
Qual é a diferença entre `let` e `var` em termos de escopo?,"`let` tem escopo de bloco (limitado a um bloco de código, como um loop `for` ou um bloco `if`), enquanto `var` tem escopo de função."
Como você pode prevenir que uma variável seja globalmente acessível em JavaScript?,Declare a variável dentro de uma função ou bloco usando `let` ou `const`.
O que acontece se você tentar usar uma variável `const` antes de sua declaração?,"Isso resultará em um `ReferenceError`, pois variáveis `const` não são inicializadas com um valor padrão como `undefined`."
Qual é o tipo de dado de um array em JavaScript?,"`object`. Arrays são um tipo especial de objeto em JavaScript.

**Conjunto 2: Funções**"
O que é uma função de ordem superior (higher-order function)?,Uma função de ordem superior é uma função que aceita outra função como um argumento ou retorna uma função como seu resultado.
O que é o objeto `arguments` dentro de uma função?,"`arguments` é um objeto semelhante a um array que contém todos os argumentos passados para a função, mesmo que a função não tenha parâmetros declarados para eles."
Explique o que é closure em JavaScript.,Closure é a capacidade de uma função de lembrar e acessar o escopo léxico (o escopo onde foi definida) mesmo quando a função é executada fora desse escopo.
Qual é a diferença entre uma função declarada e uma função expressa em JavaScript?,"Uma função declarada é definida usando a palavra-chave `function` seguida por um nome, enquanto uma função expressa é uma função anônima atribuída a uma variável. Funções declaradas são hoisted, enquanto funções expressas não."
O que é uma função Immediately Invoked Function Expression (IIFE)?,Uma IIFE é uma função que é definida e executada imediatamente após a sua criação. É comumente usada para criar um escopo privado para variáveis.
Como você chama uma função recursivamente em JavaScript?,A função chama a si mesma dentro de seu próprio corpo. É importante ter uma condição de parada para evitar um loop infinito.
Como você pode acessar o contexto `this` dentro de uma função em JavaScript?,"O valor de `this` depende de como a função é chamada.  Em uma função normal, `this` se refere ao objeto global (window em navegadores) ou é `undefined` em modo estrito. Em métodos de objetos, `this` se refere ao objeto.

**Conjunto 3: Objetos e Arrays**"
Como você cria uma cópia superficial (shallow copy) de um objeto em JavaScript?,"Usando o operador spread: `const copiaObjeto = { ...meuObjeto };` ou o método `Object.assign({}, meuObjeto);`"
Como você concatena strings em JavaScript?,Usando o operador `+` ou template literals (crase): `` `String 1 ${variavel} String 2` ``.
O que é `NaN` em JavaScript?,`NaN` (Not-a-Number) é um valor numérico que representa um valor que não é um número. É frequentemente o resultado de operações matemáticas inválidas.
Como você verifica se um valor é `NaN` em JavaScript?,"Usando a função `isNaN()`. No entanto, `Number.isNaN()` é mais preciso, pois não tenta converter o valor antes de verificar."
Como você formata um número para um número fixo de casas decimais em JavaScript?,Usando o método `toFixed(numeroDeCasasDecimais)`.
Qual é a diferença entre `Number.parseInt()` e o operador unário `+` ao converter strings em números?,"`Number.parseInt()` tenta analisar a string e retorna o primeiro número inteiro que encontra, ignorando caracteres não numéricos após o número inicial.  O operador `+` tenta converter toda a string em um número e retorna `NaN` se a string não puder ser convertida em um número válido."
O que são template literals (string templates) em JavaScript e qual a sua vantagem?,"Template literals são strings delimitadas por crases (``). Eles permitem a interpolação de variáveis diretamente na string, tornando a concatenação mais legível e simples."
Como você verifica se uma string contém uma determinada substring em JavaScript?,"Usando o método `String.includes()`.

**Conjunto 5: Operadores e Expressões**"
Qual é a precedência de operadores em JavaScript?,A precedência de operadores define a ordem em que os operadores são avaliados em uma expressão. Parênteses podem ser usados para forçar uma ordem de avaliação diferente.
O que é uma expressão em JavaScript?,"Uma expressão é qualquer combinação de valores, variáveis, operadores e funções que resulta em um valor."
O que é um statement (declaração) em JavaScript?,"Um statement é uma instrução que realiza uma ação.  Exemplos: declarações de variáveis, atribuições, estruturas de controle de fluxo."
Qual é a diferença entre uma expressão e um statement em JavaScript?,"Uma expressão avalia para um valor, enquanto um statement realiza uma ação. Statements geralmente contêm expressões."
Qual o resultado da expressão `0 == false` e por quê?,"O resultado é `true` porque o operador `==` realiza a conversão de tipo. `false` é convertido para 0, e 0 é igual a 0.

**Conjunto 6: Estruturas de Controle de Fluxo**"
Qual é a sintaxe da estrutura de controle `if/else` em JavaScript?,"```javascript
if (condicao) {
  // Código a ser executado se a condição for verdadeira
} else {
  // Código a ser executado se a condição for falsa
}
```"
Qual é a sintaxe da estrutura de controle `switch` em JavaScript?,"```javascript
switch (expressao) {
  case valor1:
    // Código a ser executado se expressao === valor1
    break;
  case valor2:
    // Código a ser executado se expressao === valor2
    break;
  default:
    // Código a ser executado se nenhum dos casos corresponder
}
```"
O que é a palavra-chave `break` em um loop ou estrutura `switch` em JavaScript?,`break` sai imediatamente do loop ou estrutura `switch`.
O que é a palavra-chave `continue` em um loop em JavaScript?,`continue` pula a iteração atual do loop e passa para a próxima iteração.
Qual é a sintaxe do loop `for` em JavaScript?,`for (inicialização; condição; incremento/decremento) { // Código a ser executado }`
Qual é a sintaxe do loop `while` em JavaScript?,`while (condicao) { // Código a ser executado enquanto a condição for verdadeira }`
Qual é a sintaxe do loop `do...while` em JavaScript?,`do { // Código a ser executado pelo menos uma vez } while (condicao);`
Qual é a diferença entre os loops `while` e `do...while` em JavaScript?,"O loop `while` verifica a condição antes de executar o código, enquanto o loop `do...while` executa o código pelo menos uma vez antes de verificar a condição."
Como você itera sobre as propriedades de um objeto usando um loop `for...in` em JavaScript?,`for (const propriedade in objeto) { // Código para acessar objeto[propriedade] }`
Como você itera sobre os elementos de um array usando um loop `for...of` em JavaScript?,"`for (const elemento of array) { // Código para acessar elemento }`

**Conjunto 7: Manipulação de Arrays (Avançado)**"
Qual a diferença entre os métodos `push()` e `unshift()` em arrays JavaScript?,"`push()` adiciona um ou mais elementos ao final do array, enquanto `unshift()` adiciona um ou mais elementos ao início do array."
Qual a diferença entre os métodos `pop()` e `shift()` em arrays JavaScript?,"`pop()` remove o último elemento do array, enquanto `shift()` remove o primeiro elemento do array."
O que o método `splice()` faz em um array JavaScript?,"`splice()` altera o conteúdo de um array removendo, substituindo ou adicionando elementos."
Como você pode concatenar dois arrays em JavaScript?,"Usando o método `concat()` ou o operador spread (`...`). Exemplo: `array1.concat(array2)` ou `[...array1, ...array2]`."
Como você pode inverter a ordem dos elementos em um array JavaScript?,Usando o método `reverse()`.
O que o método `join()` faz em um array JavaScript?,"Retorna uma string concatenando todos os elementos do array, separados por um separador especificado (por padrão, uma vírgula)."
Como você encontra o índice de um elemento em um array JavaScript?,"Usando o método `indexOf()`.  Se o elemento não for encontrado, retorna -1."
Como você verifica se um elemento existe em um array JavaScript (retornando um booleano)?,Usando o método `includes()`.
Explique o conceito de imutabilidade ao trabalhar com arrays em JavaScript e como implementá-lo.,"Imutabilidade significa que você não modifica o array original, mas cria um novo array com as alterações. Métodos como `map()`, `filter()`, `slice()` e o operador spread ajudam a manter a imutabilidade."
Qual é a estrutura `try...catch...finally` em JavaScript e qual a sua finalidade?,"`try` contém o código que pode lançar uma exceção. `catch` captura a exceção e executa o código para lidar com o erro. `finally` executa o código sempre, independentemente de ocorrer uma exceção ou não."
O que é um `TypeError` em JavaScript?,Um `TypeError` é um erro que ocorre quando uma operação ou função é usada em um valor de um tipo inesperado.
O que é um `ReferenceError` em JavaScript?,Um `ReferenceError` é um erro que ocorre quando você tenta usar uma variável que não foi declarada.
O que é um `SyntaxError` em JavaScript?,Um `SyntaxError` é um erro que ocorre quando o código JavaScript não segue a sintaxe correta da linguagem.
Qual é a diferença entre erros de tempo de compilação e erros de tempo de execução em JavaScript?,"JavaScript é uma linguagem interpretada, então não existe um passo de compilação tradicional. Erros de sintaxe são detectados antes da execução (durante a análise do código), enquanto erros de tempo de execução ocorrem durante a execução do código."
Como você pode usar o bloco `finally` em um `try...catch`?,"O bloco `finally` é executado sempre após o `try` e o `catch`, independentemente de uma exceção ter sido lançada ou capturada. É útil para limpar recursos, como fechar arquivos ou conexões de banco de dados."
O que acontece se uma exceção não for capturada em um bloco `try...catch`?,"A exceção se propaga para o escopo superior. Se não for capturada em nenhum escopo, o programa pode ser interrompido."
Como você pode criar um objeto de erro personalizado em JavaScript?,Criando uma classe que herda de `Error` e definindo suas próprias propriedades e métodos.
"O que é o modo estrito (`""use strict""`) em JavaScript e como ele afeta o tratamento de erros?","O modo estrito é uma forma de executar o JavaScript de forma mais ""segura"". Ele impõe regras mais rigorosas, como proibir o uso de variáveis não declaradas, e torna alguns erros silenciosos em erros explícitos, facilitando a detecção de bugs.

**Conjunto 9: Manipulação de Datas e Horários**"
Como você obtém o dia da semana de um objeto `Date` em JavaScript?,"Usando o método `getDay()`.  Domingo é 0, Segunda é 1, etc."
Como você formata uma data em JavaScript para uma string legível?,"Usando métodos como `toLocaleDateString()`, `toLocaleTimeString()`, `toLocaleString()`, ou bibliotecas de formatação de data."
Como você adiciona dias a uma data em JavaScript?,"Obtendo o valor numérico da data usando `getTime()`, adicionando o número de milissegundos correspondente ao número de dias e criando um novo objeto `Date` com o novo valor."
O que é o Epoch Time (Tempo Unix) em JavaScript?,"É o número de milissegundos que se passaram desde 1º de janeiro de 1970, 00:00:00 UTC."
Como você define a hora e os minutos de um objeto `Date` em JavaScript?,"Usando os métodos `setHours()` e `setMinutes()`.

**Conjunto 10: Funções Avançadas e Escopo**"
O que são funções geradoras em JavaScript?,Funções geradoras são funções que podem pausar sua execução e retomá-la posteriormente. Elas são definidas usando a sintaxe `function*()` e usam a palavra-chave `yield` para pausar a execução e retornar um valor.
O que é a palavra-chave `yield` em JavaScript?,"A palavra-chave `yield` é usada dentro de funções geradoras para pausar a execução da função e retornar um valor. Quando a função é retomada, a execução continua a partir do ponto onde foi pausada."
Como você pode criar um escopo privado em JavaScript antes da introdução de `let` e `const`?,Usando uma IIFE (Immediately Invoked Function Expression). Isso cria um escopo de função isolado onde as variáveis declaradas não são acessíveis fora da função.
"O que são os métodos `call()`, `apply()` e `bind()` em JavaScript?","São métodos que permitem controlar o valor de `this` dentro de uma função e passar argumentos para a função. `call()` e `apply()` invocam a função imediatamente, enquanto `bind()` retorna uma nova função com o valor de `this` fixado."
Qual é a diferença entre `call()` e `apply()` em JavaScript?,"Ambos os métodos chamam uma função com um valor `this` especificado. A principal diferença é como os argumentos são passados: `call()` recebe argumentos separados por vírgulas, enquanto `apply()` recebe um array de argumentos."
Explique o padrão de módulo em JavaScript.,O padrão de módulo é uma forma de organizar o código JavaScript em unidades reutilizáveis e encapsuladas. Ele usa closures para criar escopos privados e expor apenas as partes do módulo que devem ser acessíveis externamente.
Explique o que é uma closure em JavaScript.,"Uma closure é uma função que tem acesso ao escopo de outra função, mesmo depois que a função externa já terminou de executar. Isso permite que a função interna ""lembre"" das variáveis e do ambiente da função externa."
Como você impede que um evento HTML se propague para elementos pais?,Usando o método `event.stopPropagation()` dentro do manipulador de eventos.
O que é o objeto `arguments` em uma função JavaScript?,"É um objeto similar a um array que contém todos os argumentos passados para uma função, mesmo que a função não os declare explicitamente nos seus parâmetros."
Como criar um novo objeto em JavaScript utilizando a notação literal?,"Usando chaves `{}` e definindo as propriedades dentro, como: `const objeto = { propriedade1: valor1, propriedade2: valor2 };`"
Como verificar se uma variável é um array em JavaScript?,Usando `Array.isArray(variavel)`.
O que é JSON e como você converte um objeto JavaScript para JSON?,"JSON (JavaScript Object Notation) é um formato de dados leve e legível por humanos. Para converter um objeto JavaScript para JSON, usa-se o método `JSON.stringify(objeto)`."
Como converter uma string JSON de volta para um objeto JavaScript?,Usando o método `JSON.parse(stringJSON)`.
Como você adiciona um ouvinte de eventos (event listener) a um elemento HTML em JavaScript?,"Usando o método `addEventListener()` no elemento HTML, especificando o tipo de evento e a função a ser executada quando o evento ocorrer.  Exemplo: `elemento.addEventListener('click', minhaFuncao);`"
Como alterar o texto dentro de um elemento HTML usando JavaScript?,Atribuindo um novo valor à propriedade `textContent` ou `innerText` do elemento.
Como adicionar uma classe CSS a um elemento HTML usando JavaScript?,Usando o método `classList.add('nomeDaClasse')` do elemento.
Como remover uma classe CSS de um elemento HTML usando JavaScript?,Usando o método `classList.remove('nomeDaClasse')` do elemento.
"O que são loops `for`, `while` e `do...while` em JavaScript?","São estruturas de controle que permitem repetir um bloco de código várias vezes. `for` é usado quando o número de repetições é conhecido, `while` repete enquanto uma condição for verdadeira, e `do...while` executa o bloco de código pelo menos uma vez antes de verificar a condição."
Como você sai de um loop `for` ou `while` antes do tempo em JavaScript?,Usando a palavra-chave `break`.
Como pular para a próxima iteração em um loop `for` ou `while` em JavaScript?,Usando a palavra-chave `continue`.
O que é uma função auto-invocável (IIFE) em JavaScript?,É uma função que é executada imediatamente após ser definida.  Usada para criar escopos isolados e evitar conflitos de nomes. Exemplo: `(function() { /* código */ })();`
"Qual a diferença entre `var`, `let` e `const` para declarar variáveis em JavaScript?","`var` tem escopo de função ou global, `let` tem escopo de bloco, e `const` também tem escopo de bloco e declara uma variável constante (seu valor não pode ser reatribuído)."
O que é o strict mode em JavaScript e como ele é ativado?,"É um modo restritivo que impõe regras mais rígidas para o código, ajudando a prevenir erros comuns e a tornar o código mais seguro. É ativado adicionando a string `""use strict"";` no início do script ou função."
O que é o operador spread (...) em JavaScript?,"É usado para expandir um iterável (como um array ou string) em elementos individuais. Pode ser usado para copiar arrays, combinar arrays ou passar múltiplos argumentos para uma função."
O que é o operador rest (...) em JavaScript?,É usado para coletar um número variável de argumentos em uma função em um array.
Como criar uma cópia superficial (shallow copy) de um objeto em JavaScript?,Usando o operador spread (`...`) ou o método `Object.assign()`.
Como criar uma cópia profunda (deep copy) de um objeto em JavaScript?,Usando `JSON.parse(JSON.stringify(objeto))` ou usando bibliotecas externas (que foi explicitamente pedido para não mencionar).
O que é uma Promise em JavaScript?,É um objeto que representa a conclusão (ou falha) eventual de uma operação assíncrona e seu valor resultante.
Quais são os estados possíveis de uma Promise?,"Pendente (pending), Cumprida (fulfilled) e Rejeitada (rejected)."
Qual a diferença entre `map()` e `forEach()` em arrays JavaScript?,"`map()` retorna um novo array com os resultados da função, enquanto `forEach()` simplesmente executa a função para cada elemento e não retorna nada."
Como você adiciona um elemento no final de um array em JavaScript?,Usando o método `push()`.
Como você adiciona um elemento no início de um array em JavaScript?,Usando o método `unshift()`.
Como você junta todos os elementos de um array em uma string em JavaScript?,Usando o método `join()`.
Como você ordena os elementos de um array em JavaScript?,"Usando o método `sort()`.  Por padrão, ordena lexicograficamente (como strings)."
Como comparar dois objetos em JavaScript para ver se eles são iguais?,"Objetos são comparados por referência. Para comparar os valores dentro dos objetos, é necessário iterar sobre as propriedades e compará-las individualmente, ou converter ambos para JSON e comparar as strings JSON."
Como gerar um número aleatório entre 0 e 1 em JavaScript?,Usando o método `Math.random()`.
Como arredondar um número para o inteiro mais próximo para cima em JavaScript?,Usando o método `Math.ceil()`.
Como arredondar um número para o inteiro mais próximo para baixo em JavaScript?,Usando o método `Math.floor()`.
Como obter o ano atual usando o objeto `Date`?,Usando o método `getFullYear()`.
Como obter o mês atual usando o objeto `Date`?,"Usando o método `getMonth()`. (Retorna um valor de 0 a 11, onde 0 é Janeiro)."
Como obter o dia do mês atual usando o objeto `Date`?,Usando o método `getDate()`.
Como testar se uma string corresponde a uma expressão regular em JavaScript?,Usando o método `test()` da expressão regular ou o método `search()` da string.
Como encontrar todas as ocorrências de uma expressão regular em uma string em JavaScript?,Usando o método `match()` com a flag `g` (global) na expressão regular.
Como substituir partes de uma string que correspondem a uma expressão regular em JavaScript?,Usando o método `replace()` com a expressão regular como primeiro argumento.
O que são atributos HTML?,"São propriedades que fornecem informações adicionais sobre os elementos HTML, como `id`, `class`, `src`, `href`, etc."
Como obter o valor de um atributo de um elemento HTML usando JavaScript?,Usando o método `getAttribute('nomeDoAtributo')` do elemento.
Como definir o valor de um atributo de um elemento HTML usando JavaScript?,"Usando o método `setAttribute('nomeDoAtributo', 'novoValor')` do elemento."
O que são atributos de dados (data attributes) em HTML?,São atributos personalizados que permitem armazenar dados privados específicos para o elemento.  Eles começam com o prefixo `data-`.
Como acessar um atributo de dados de um elemento HTML usando JavaScript?,"Usando a propriedade `dataset` do elemento, como `elemento.dataset.nomeDoAtributo`. (O atributo ""data-nome-do-atributo"" é acessado como ""nomeDoAtributo"")."
Como obter a largura da janela do navegador em JavaScript?,Usando `window.innerWidth`.
Como obter a altura da janela do navegador em JavaScript?,Usando `window.innerHeight`.
Como redirecionar o usuário para outra página usando JavaScript?,Atribuindo uma nova URL à propriedade `window.location.href`.
Como exibir um alerta na tela do usuário usando JavaScript?,Usando a função `alert('mensagem')`.
Como exibir um prompt para o usuário inserir dados usando JavaScript?,"Usando a função `prompt('mensagem', 'valorPadrao')`."
Como exibir uma caixa de confirmação para o usuário usando JavaScript?,Usando a função `confirm('mensagem')`.
Como imprimir uma mensagem no console usando JavaScript?,Usando `console.log('mensagem')`.
Como imprimir um aviso (warning) no console usando JavaScript?,Usando `console.warn('mensagem')`.
Como imprimir um erro no console usando JavaScript?,Usando `console.error('mensagem')`.
Como cancelar um `setTimeout()` em JavaScript?,Usando a função `clearTimeout()` e passando o ID retornado por `setTimeout()` como argumento.
Como cancelar um `setInterval()` em JavaScript?,Usando a função `clearInterval()` e passando o ID retornado por `setInterval()` como argumento.
Como definir um cookie usando JavaScript?,Atribuindo um valor a `document.cookie` com o formato `nome=valor; expires=data; path=/`.
Como ler um cookie usando JavaScript?,"Acessando a propriedade `document.cookie`, que retorna uma string com todos os cookies separados por `; `."
Como armazenar dados no Local Storage usando JavaScript?,"Usando o método `localStorage.setItem('chave', 'valor')`.  Os valores são armazenados como strings."
Como recuperar dados do Local Storage usando JavaScript?,Usando o método `localStorage.getItem('chave')`.
Como remover um item do Local Storage usando JavaScript?,Usando o método `localStorage.removeItem('chave')`.
Como armazenar dados no Session Storage usando JavaScript?,"Usando o método `sessionStorage.setItem('chave', 'valor')`."
Como recuperar dados do Session Storage usando JavaScript?,Usando o método `sessionStorage.getItem('chave')`.
Qual a principal diferença entre Local Storage e Session Storage?,"Local Storage armazena os dados permanentemente, enquanto Session Storage armazena os dados apenas durante a sessão do navegador."
Como importar um módulo em JavaScript?,Usando a declaração `import` (se estiver usando módulos ES) ou a função `require()` (se estiver usando CommonJS).
Como exportar um módulo em JavaScript?,Usando a declaração `export` (se estiver usando módulos ES) ou o objeto `module.exports` (se estiver usando CommonJS).
Como fazer destructuring de um objeto em JavaScript?,"Usando a sintaxe `{ propriedade1, propriedade2 } = objeto;`"
Como fazer destructuring de um array em JavaScript?,"Usando a sintaxe `[elemento1, elemento2] = array;`"
Qual a sintaxe de uma arrow function em JavaScript?,`(parametros) => expressao;` ou `(parametros) => { // bloco de código }`
Como o `this` se comporta em arrow functions em JavaScript?,"Em arrow functions, `this` é lexicamente vinculado, ou seja, herda o valor de `this` do contexto circundante."
Como verificar se uma string começa com uma determinada substring em JavaScript?,Usando o método `startsWith('substring')`.
Como verificar se uma string termina com uma determinada substring em JavaScript?,Usando o método `endsWith('substring')`.
O que é o método `includes()` em strings JavaScript?,"Retorna `true` se uma string contém uma determinada substring, caso contrário, retorna `false`."
O que é o método `findIndex()` em arrays JavaScript?,"Retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1."
O que é o método `some()` em arrays JavaScript?,"Testa se pelo menos um elemento no array passa no teste implementado pela função fornecida. Retorna `true` se encontrar tal elemento, caso contrário, retorna `false`."
O que é o método `every()` em arrays JavaScript?,"Testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna `true` se todos os elementos passarem, caso contrário, retorna `false`."
Para que serve o tipo de dado `Symbol` em JavaScript?,É frequentemente usado para criar propriedades privadas em objetos ou para evitar colisões de nomes em bibliotecas.
Qual a principal vantagem de usar WeakMaps e WeakSets?,"Ajudam a evitar vazamentos de memória, pois não impedem que os objetos sejam coletados pelo garbage collector."
O que é o padrão de projeto Revealing Module em JavaScript?,"É uma variação do padrão Module em que todas as variáveis e funções são definidas no escopo privado, e apenas um objeto literal com ponteiros para as funções que devem ser públicas é retornado."
Explique o conceito de programação orientada a objetos (POO) em JavaScript.,"JavaScript suporta POO através de protótipos. Permite criar objetos com propriedades (dados) e métodos (funções), herança de propriedades e métodos de outros objetos (protótipos), encapsulamento (ocultar detalhes de implementação) e polimorfismo (objetos de diferentes classes podem responder ao mesmo método de maneiras diferentes)."
Como criar um objeto com um protótipo específico em JavaScript?,Usando o método `Object.create(prototipo)`.
Como declarar um generator em JavaScript?,"Usando o asterisco (`*`) após a palavra-chave `function`, como `function* minhaFuncaoGeradora() { ... }`."
O que é a palavra-chave `yield` em generators JavaScript?,É usada para pausar a execução do generator e retornar um valor.
O que é um iterável em JavaScript?,"É um objeto que pode retornar um iterador.  Arrays, strings e Maps são iteráveis."
Como tornar um objeto iterável em JavaScript?,"Implementando o método `Symbol.iterator` no objeto, que deve retornar um iterador."
Como o garbage collector funciona em JavaScript?,Ele monitora os objetos em memória e identifica aqueles que não são mais acessíveis (não têm referências a eles). Esses objetos são então marcados como elegíveis para coleta e a memória que eles ocupam é liberada.
O que são vazamentos de memória em JavaScript?,"Ocorrem quando um programa aloca memória, mas não a libera quando ela não é mais necessária, resultando em um consumo crescente de memória ao longo do tempo."
Como evitar vazamentos de memória em JavaScript?,"Evitando referências circulares, removendo listeners de eventos quando não forem mais necessários, liberando referências a objetos grandes quando não forem mais usados e utilizando WeakMaps/WeakSets."
Qual a principal vantagem de usar Web Workers?,"Melhoram a capacidade de resposta da interface do usuário, especialmente para tarefas computacionalmente intensivas."
Como comunicar dados entre a thread principal e um Web Worker?,Usando o método `postMessage()`.
O que é o CORS (Cross-Origin Resource Sharing)?,É um mecanismo de segurança do navegador que restringe requisições HTTP de scripts originados de um domínio para outro domínio diferente.
Como lidar com erros de CORS em JavaScript?,Configurando o cabeçalho `Access-Control-Allow-Origin` no servidor que está fornecendo o recurso.
O que é XSS (Cross-Site Scripting)?,É uma vulnerabilidade de segurança que permite que invasores injetem scripts maliciosos em páginas da web visualizadas por outros usuários.
Como se proteger contra ataques XSS em JavaScript?,"Escapando ou codificando a entrada do usuário antes de exibi-la em uma página da web, usando Content Security Policy (CSP) e evitando o uso de `eval()`."
O que é CSRF (Cross-Site Request Forgery)?,É um ataque que força um usuário autenticado a executar ações não intencionais em uma aplicação web.
Como se proteger contra ataques CSRF em JavaScript?,"Usando tokens CSRF, validando o cabeçalho `Origin` ou `Referer` nas requisições e usando o atributo `SameSite` em cookies."
O que é programação reativa em JavaScript?,É um paradigma de programação que lida com fluxos de dados assíncronos e a propagação da mudança.
O que são Observables em programação reativa com JavaScript?,São fluxos de dados que emitem valores ao longo do tempo e podem ser observados por assinantes.
O que são streams em JavaScript?,Streams são uma forma de lidar com dados sequenciais de forma assíncrona. Permitem processar grandes quantidades de dados sem precisar carregá-los completamente na memória.
O que são eventos personalizados em JavaScript?,São eventos criados e disparados pelo desenvolvedor para sinalizar ocorrências específicas na aplicação.
Como criar e disparar um evento personalizado em JavaScript?,"Usando o construtor `new Event('nomeDoEvento')` para criar o evento e o método `dispatchEvent(evento)` no elemento para dispará-lo.

Espero que esta lista expandida de perguntas e respostas seja útil!"
Como se declara uma variável em JavaScript?,"Utiliza-se as palavras-chave `var`, `let` ou `const`, seguidas pelo nome da variável. Ex: `let nome = ""João"";`"
"Qual a diferença entre `var`, `let` e `const` no escopo de variáveis?","`var` tem escopo de função ou global, `let` tem escopo de bloco e `const` também tem escopo de bloco, mas declara uma constante (seu valor não pode ser reatribuído após a inicialização)."
O que é Hoisting em JavaScript?,"É o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do seu escopo antes da execução do código. No entanto, apenas a declaração é movida, não a inicialização."
Como converter uma string para um número em JavaScript?,"Utilize `parseInt()` (para inteiros), `parseFloat()` (para números de ponto flutuante) ou o operador `+` unário. Ex: `parseInt(""10"")`, `parseFloat(""3.14"")`, `+""5""`."
Como criar uma função anônima em JavaScript?,"`(function() { console.log(""Função anônima""); })();` ou `() => { console.log(""Função anônima arrow""); }`"
Como criar um objeto em JavaScript?,"Utilize a notação literal de objeto: `let pessoa = { nome: ""Maria"", idade: 30 };` ou o construtor `new Object()`."
O que é uma template literal em JavaScript?,É uma string que permite a incorporação de expressões dentro dela usando `${}`. Delimitada por backticks (``).
Qual a utilidade das template literals?,"Facilitam a interpolação de variáveis e expressões dentro de strings, tornando o código mais legível."
Como acessar um elemento em um array JavaScript?,"Utilizando o índice do elemento, começando em 0. Ex: `meuArray[0]` acessa o primeiro elemento."
O que é o método `push()` em arrays JavaScript?,Adiciona um ou mais elementos ao final do array e retorna o novo comprimento do array.
O que é o método `pop()` em arrays JavaScript?,Remove o último elemento de um array e retorna esse elemento. Modifica o comprimento do array.
O que é o método `shift()` em arrays JavaScript?,Remove o primeiro elemento de um array e retorna esse elemento. Modifica o comprimento do array.
O que é o método `unshift()` em arrays JavaScript?,Adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
O que é o método `concat()` em arrays JavaScript?,Combina dois ou mais arrays e retorna um novo array.
O que é o método `indexOf()` em arrays JavaScript?,"Retorna o primeiro índice em que um determinado elemento pode ser encontrado no array, ou -1 se não estiver presente."
O que é o método `lastIndexOf()` em arrays JavaScript?,"Retorna o último índice em que um determinado elemento pode ser encontrado no array, ou -1 se não estiver presente."
Como obter o valor absoluto de um número em JavaScript?,Utilize `Math.abs()`.
Como criar uma nova data em JavaScript?,"Utilize `new Date()`. Pode ser criado sem argumentos (data e hora atuais), com uma string de data ou com valores de ano, mês, dia, etc."
Como obter o ano de uma data em JavaScript?,Utilize o método `getFullYear()`.
Como obter o mês de uma data em JavaScript?,Utilize o método `getMonth()`. Retorna um valor entre 0 (Janeiro) e 11 (Dezembro).
Como obter o dia do mês de uma data em JavaScript?,Utilize o método `getDate()`.
Como obter o dia da semana de uma data em JavaScript?,Utilize o método `getDay()`. Retorna um valor entre 0 (Domingo) e 6 (Sábado).
Como converter um objeto JavaScript para JSON?,Utilize o método `JSON.stringify()`.
Como converter uma string JSON para um objeto JavaScript?,Utilize o método `JSON.parse()`.
Como selecionar um elemento HTML pelo ID usando JavaScript?,"Utilize o método `document.getElementById(""idDoElemento"")`."
Como selecionar um elemento HTML pela classe usando JavaScript?,"Utilize o método `document.getElementsByClassName(""nomeDaClasse"")`. Retorna uma HTMLCollection."
Como selecionar elementos HTML pela tag name usando JavaScript?,"Utilize o método `document.getElementsByTagName(""nomeDaTag"")`. Retorna uma HTMLCollection."
Como alterar o texto de um elemento HTML usando JavaScript?,Utilize a propriedade `textContent` ou `innerText` do elemento.
Como alterar o HTML interno de um elemento usando JavaScript?,Utilize a propriedade `innerHTML` do elemento.
Como adicionar um novo elemento HTML ao DOM usando JavaScript?,"Crie o elemento com `document.createElement()`, configure suas propriedades e adicione-o ao DOM com `appendChild()`."
Como adicionar um atributo a um elemento HTML usando JavaScript?,"Utilize o método `setAttribute(""nomeDoAtributo"", ""valorDoAtributo"")`."
Como remover um atributo de um elemento HTML usando JavaScript?,"Utilize o método `removeAttribute(""nomeDoAtributo"")`."
O que é o objeto `event` em um manipulador de eventos?,É um objeto que contém informações sobre o evento que ocorreu.
Como prevenir o comportamento padrão de um evento em JavaScript?,Utilize o método `preventDefault()` do objeto `event`.
Como interromper a propagação de um evento em JavaScript?,Utilize o método `stopPropagation()` do objeto `event`.
O que é bubbling de eventos em JavaScript?,É o processo em que um evento acionado em um elemento se propaga para seus elementos pais na árvore DOM.
O que é capturing de eventos em JavaScript?,É o processo em que um evento acionado em um elemento se propaga para seus elementos filhos na árvore DOM. É o oposto do bubbling. (Menos comum).
O que é um loop `for` em JavaScript?,É uma estrutura de controle que permite repetir um bloco de código um número específico de vezes.
Qual a sintaxe básica de um loop `for` em JavaScript?,`for (inicialização; condição; incremento) { // código a ser executado }`
O que é um loop `while` em JavaScript?,É uma estrutura de controle que permite repetir um bloco de código enquanto uma condição for verdadeira.
Qual a sintaxe básica de um loop `while` em JavaScript?,`while (condição) { // código a ser executado }`
O que é um loop `do...while` em JavaScript?,"É semelhante ao loop `while`, mas garante que o bloco de código seja executado pelo menos uma vez, mesmo que a condição seja falsa desde o início."
Qual a sintaxe básica de um loop `do...while` em JavaScript?,`do { // código a ser executado } while (condição);`
O que é a instrução `break` em JavaScript?,"Interrompe a execução de um loop (for, while, do...while) ou de uma instrução `switch`."
O que é a instrução `continue` em JavaScript?,Interrompe a iteração atual de um loop e continua com a próxima iteração.
O que é a palavra-chave `this` em JavaScript?,Refere-se ao objeto ao qual uma função pertence. Seu valor depende de como a função é chamada.
Como acessar o protótipo de um objeto em JavaScript?,"Utilize a propriedade `__proto__` (não padrão, mas amplamente suportada) ou `Object.getPrototypeOf()`."
Como adicionar uma propriedade ou método ao protótipo de um objeto em JavaScript?,"`Objeto.prototype.novaPropriedade = ""valor"";` ou `Objeto.prototype.novoMetodo = function() { ... };`"
"O que é o modo estrito (`""use strict"";`) em JavaScript?","É uma forma de introduzir uma semântica mais restrita ao JavaScript, ajudando a evitar erros comuns e a escrever código mais seguro."
Quais são algumas das restrições impostas pelo modo estrito em JavaScript?,"Variáveis não declaradas lançam erros, atribuições a propriedades somente leitura lançam erros, a palavra-chave `this` dentro de funções não vinculadas assume o valor `undefined` e o uso de `eval` é mais restrito."
O que são exceções em JavaScript?,São erros que ocorrem durante a execução do código.
Como lançar uma exceção em JavaScript?,"Utilize a palavra-chave `throw`. Ex: `throw new Error(""Mensagem de erro"");`"
Como tratar exceções em JavaScript?,Utilize o bloco `try...catch`.
Qual a finalidade do bloco `finally` em um bloco `try...catch`?,"O bloco `finally` é executado sempre, independentemente de uma exceção ser lançada ou não no bloco `try`."
Quais são os estados possíveis de uma promise?,"`pending` (pendente), `fulfilled` (cumprida) e `rejected` (rejeitada)."
Como criar uma promise em JavaScript?,"`new Promise((resolve, reject) => { ... });`"
Como lidar com o sucesso de uma promise?,Utilize o método `then()`.
Como lidar com a falha de uma promise?,Utilize o método `catch()`.
O que é o método `finally()` em promises?,Define um callback a ser executado quando a promise é resolvida (cumprida ou rejeitada).
Como declarar uma função assíncrona em JavaScript?,Utilize a palavra-chave `async` antes da declaração da função. Ex: `async function minhaFuncao() { ... }`
O que faz a palavra-chave `await` em JavaScript?,Suspende a execução da função assíncrona até que a promise seja resolvida (cumprida ou rejeitada).
Como exportar um módulo em JavaScript? (ES Modules),Utilize as palavras-chave `export` (nomeado) ou `export default` (padrão).
Como importar um módulo em JavaScript? (ES Modules),"Utilize a palavra-chave `import`. Ex: `import { funcao } from ""./modulo.js"";` ou `import moduloPadrao from ""./modulo.js"";`"
Como imprimir uma mensagem no console do navegador usando JavaScript?,"Utilize `console.log(""Mensagem"");`."
Quais são outros métodos úteis do objeto `console` além de `console.log()`?,"`console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`."
Qual a sintaxe básica do método `setTimeout()` em JavaScript?,"`setTimeout(funcaoCallback, atrasoEmMilissegundos);`"
Qual a sintaxe básica do método `setInterval()` em JavaScript?,"`setInterval(funcaoCallback, intervaloEmMilissegundos);`"
Como parar um `setTimeout()` ou `setInterval()` em JavaScript?,"Utilize as funções `clearTimeout()` e `clearInterval()`, respectivamente, passando o ID retornado por `setTimeout()` ou `setInterval()` como argumento."
Quais são os usos comuns do operador spread em JavaScript?,"Clonar arrays, combinar arrays, passar argumentos para funções e criar objetos com base em outros objetos."
Como realizar destructuring de um objeto em JavaScript?,"`const { propriedade1, propriedade2 } = objeto;`"
Como realizar destructuring de um array em JavaScript?,"`const [elemento1, elemento2] = array;`"
O que são Generators em Javascript?,"Funções que podem ser pausadas e retomadas, permitindo retornar múltiplos valores ao longo do tempo. São definidas com `function*` e usam a palavra-chave `yield`."
O que é o método `Symbol` em Javascript?,"Cria um valor único e imutável, usado como chave de propriedade de objeto para evitar colisões de nomes."
Qual a diferença entre `map` e `object` em Javascript?,"`Map` permite chaves de qualquer tipo (incluindo objetos), mantém a ordem de inserção e tem métodos mais convenientes para manipular pares chave-valor. Objetos Javascript convertem chaves para strings e não mantêm a ordem de inserção garantida."
O que são WeakMaps e WeakSets em Javascript?,"São coleções que mantêm referências ""fracas"" a objetos. Isso significa que, se não houver outras referências a um objeto armazenado em um WeakMap ou WeakSet, o objeto pode ser coletado pelo garbage collector, e a entrada correspondente no WeakMap/WeakSet será removida."
O que são Proxies em Javascript?,"Permitem interceptar e customizar operações fundamentais em objetos, como leitura, escrita e deleção de propriedades."
O que é Currying em Javascript?,É uma técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.
O que é Composição de Funções em Javascript?,É o processo de combinar duas ou mais funções para produzir uma nova função. O resultado de uma função é passado como argumento para a próxima.
Explique a diferença entre programação imperativa e declarativa em Javascript.,"Programação imperativa detalha *como* realizar uma tarefa (passo a passo), enquanto programação declarativa descreve *o que* deve ser feito, sem especificar os passos."
O que são Higher-Order Functions em Javascript?,São funções que recebem outras funções como argumentos ou retornam funções como resultado.
O que é Memoization em Javascript?,É uma técnica de otimização que armazena os resultados de chamadas de funções caras e retorna o resultado armazenado quando as mesmas entradas ocorrem novamente.
O que é recursão em Javascript?,"É quando uma função chama a si mesma para resolver um problema, dividindo-o em subproblemas menores até atingir um caso base."
O que é TCO (Tail Call Optimization) em Javascript?,É uma otimização que permite que uma função recursiva que faz uma chamada recursiva no final de sua execução seja executada sem aumentar o tamanho da pilha de chamadas. Javascript não tem suporte universal para TCO.
O que é o padrão Módulo Revelador (Revealing Module Pattern) em JavaScript?,É um padrão de projeto que usa closures para criar módulos com propriedades e métodos privados e públicos.
O que é uma String Tagged Template Literal?,"Permite customizar a forma como template literals são processadas, passando a string e as expressões interpoladas para uma função."
O que é o operador Nullish Coalescing (??) em Javascript?,"Retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`, caso contrário, retorna o operando da esquerda."
O que é Optional Chaining (?.) em Javascript?,"Permite acessar propriedades aninhadas de um objeto sem precisar verificar explicitamente se cada nível da propriedade existe, evitando erros quando uma propriedade é `null` ou `undefined`."
Qual a finalidade do `delete` operator em Javascript?,Remove uma propriedade de um objeto.
O que é NaN em JavaScript? Como verificar se um valor é NaN?,NaN (Not a Number) é um valor que representa o resultado de uma operação numérica inválida. Utilize `Number.isNaN()` para verificar se um valor é NaN (é mais confiável que `isNaN()`).
O que são side effects (efeitos colaterais) em Javascript?,"Modificações no estado de um programa que não estão diretamente relacionadas ao valor retornado por uma função. Funções com side effects podem alterar variáveis externas, modificar o DOM ou realizar operações de I/O.

Espero que esta lista seja útil!"
O que é o operador `void` em JavaScript e qual sua utilidade?,"O operador `void` avalia uma expressão e retorna `undefined`. É útil para prevenir que uma função retorne um valor, especialmente em URLs como `javascript:void(0)`."
O que é um closure em JavaScript e por que ele é útil?,"Um closure é a combinação de uma função e o ambiente léxico em que essa função foi declarada. Ele permite que uma função acesse variáveis do escopo externo, mesmo após a função externa ter retornado. É útil para encapsulamento e criação de funções persistentes."
O que são template literals (template strings) em JavaScript?,Template literals são strings delimitadas por backticks (`). Eles permitem interpolação de variáveis e expressões diretamente dentro da string usando `${expressao}`.
Explique o que é event bubbling em JavaScript.,"Event bubbling é o processo em que um evento disparado em um elemento do DOM ""borbulha"" ou se propaga para cima na árvore do DOM, disparando os manipuladores de evento dos elementos pai."
"Qual a diferença entre `let`, `const` e `var` para declarar variáveis?",`var` tem escopo de função ou global e permite redeclaração. `let` tem escopo de bloco e não permite redeclaração dentro do mesmo escopo. `const` também tem escopo de bloco e não permite reatribuição após a inicialização.
Como você pode copiar um objeto em JavaScript? Quais as diferenças entre shallow copy e deep copy?,"Você pode usar `Object.assign({}, obj)` ou o operador spread `{...obj}` para uma shallow copy. Para uma deep copy, você pode usar `JSON.parse(JSON.stringify(obj))` ou uma função recursiva. Shallow copy copia apenas as referências, enquanto deep copy cria um novo objeto com todos os valores copiados."
O que é a função `parseInt()` em JavaScript e como ela funciona?,"`parseInt()` converte uma string em um número inteiro. Ele analisa a string até encontrar um caractere que não pode ser convertido em número, e retorna o inteiro resultante. Ele recebe um segundo argumento opcional, a base numérica (radix)."
Explique o que é currying em JavaScript.,"Currying é uma técnica em que uma função que recebe vários argumentos é transformada em uma sequência de funções, cada uma recebendo um único argumento."
O que é um Immediately Invoked Function Expression (IIFE) em JavaScript?,Um IIFE é uma função que é definida e executada imediatamente. É frequentemente usado para criar um escopo privado e evitar a poluição do escopo global.
Qual a diferença entre `setAttribute()` e `.property` ao manipular atributos de elementos HTML com JavaScript?,"`setAttribute()` define o atributo no HTML, que é sempre uma string. `.property` define a propriedade do objeto DOM correspondente, que pode ser de diferentes tipos (string, number, boolean, object)."
Como você pode adicionar um evento a um elemento HTML usando JavaScript?,"Você pode usar `element.addEventListener('evento', function)`."
O que é um template literal tagged em JavaScript?,"Um template literal tagged é um template literal precedido por uma função (a ""tag""). A função tag recebe o array de strings e os valores interpolados como argumentos e pode processá-los de forma personalizada."
O que é destructuring assignment em JavaScript?,Destructuring assignment é uma expressão JavaScript que permite descompactar valores de arrays ou propriedades de objetos em variáveis distintas.
"Explique o conceito de ""rest parameters"" em JavaScript.",Rest parameters permitem que uma função receba um número indefinido de argumentos como um array. Eles são representados por `...nomeDoArray`.
"Explique o conceito de ""spread syntax"" em JavaScript.",Spread syntax permite expandir um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados.
O que é o método `reduce()` em arrays JavaScript e como ele funciona?,`reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzir o array a um único valor.
Qual a diferença entre usar `querySelector()` e `querySelectorAll()` em JavaScript?,`querySelector()` retorna o primeiro elemento dentro do documento que corresponde ao seletor especificado. `querySelectorAll()` retorna uma lista de nós estática (NodeList) representando todos os elementos que correspondem ao seletor especificado.
Como você pode remover um elemento HTML do DOM usando JavaScript?,Você pode usar `element.remove()` ou `parentElement.removeChild(element)`.
O que é um event listener passivo em JavaScript?,"Um event listener passivo indica ao navegador que o manipulador de eventos não chamará `preventDefault()`. Isso permite que o navegador otimize o desempenho da rolagem, por exemplo. É especificado usando a opção `{ passive: true }` em `addEventListener`."
Qual a diferença entre usar `innerHTML` e `textContent` em JavaScript?,"`innerHTML` obtém ou define o conteúdo HTML de um elemento, enquanto `textContent` obtém ou define o conteúdo textual de um elemento. `textContent` é geralmente preferível por ser mais seguro (evita ataques XSS) e mais rápido."
O que são flags em expressões regulares JavaScript? Dê exemplos.,"Flags modificam o comportamento da expressão regular. Exemplos incluem:
*   `g`: global (encontra todas as correspondências, não apenas a primeira)
*   `i`: ignore case (ignora maiúsculas e minúsculas)
*   `m`: multiline (permite que `^` e `$` correspondam ao início e fim de cada linha)"
O que é o método `test()` de um objeto `RegExp` em JavaScript?,O método `test()` testa se uma string corresponde à expressão regular. Retorna `true` se houver uma correspondência e `false` caso contrário.
O que é o método `exec()` de um objeto `RegExp` em JavaScript?,O método `exec()` procura uma correspondência em uma string para a expressão regular especificada. Retorna um array com informações sobre a correspondência ou `null` se não houver correspondência.
O que é o método `match()` de uma string em JavaScript?,O método `match()` retorna um array contendo os resultados da correspondência de uma string contra uma expressão regular. Retorna `null` se não houver correspondência.
O que é o método `replace()` de uma string em JavaScript?,O método `replace()` retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por um substituto.
Como você pode lançar uma exceção em JavaScript?,Você pode usar a palavra-chave `throw` seguida de um valor (geralmente um objeto `Error`). Ex: `throw new Error('Mensagem de erro')`.
Como você pode lidar com exceções em JavaScript?,"Você pode usar um bloco `try...catch`. O código que pode lançar uma exceção é colocado dentro do bloco `try`, e o código para lidar com a exceção é colocado dentro do bloco `catch`."
Quais são os principais tipos de erros em JavaScript?,"Alguns tipos comuns de erros incluem: `SyntaxError`, `TypeError`, `ReferenceError`, `RangeError`, `URIError`."
O que é o modo estrito em JavaScript? Como habilitá-lo?,"O modo estrito é uma forma de aplicar uma semântica mais rigorosa ao JavaScript. Ele ajuda a evitar erros comuns e torna o código mais seguro. É habilitado adicionando `""use strict"";` no início de um script ou função."
Qual a diferença entre `Object.freeze()` e `Object.seal()`?,"`Object.freeze()` impede a adição, remoção e alteração de propriedades. `Object.seal()` impede apenas a adição e remoção de propriedades, mas permite a alteração dos valores das propriedades existentes."
O que é um prototype em JavaScript?,"Em JavaScript, cada objeto tem um prototype. O prototype é outro objeto do qual o objeto herda propriedades e métodos."
Como você pode acessar o prototype de um objeto em JavaScript?,Você pode usar `Object.getPrototypeOf(obj)` ou `obj.__proto__`.
O que é a cadeia de protótipos (prototype chain) em JavaScript?,A cadeia de protótipos é a sequência de objetos protótipos que são percorridos quando uma propriedade ou método é procurado em um objeto.
O que é o método `hasOwnProperty()` em JavaScript?,O método `hasOwnProperty()` retorna um booleano indicando se o objeto possui a propriedade especificada como uma propriedade direta (não herdada da cadeia de protótipos).
O que é um construtor em JavaScript?,Um construtor é uma função que é usada para criar objetos. Ele normalmente inicializa as propriedades do novo objeto.
Como você pode criar um objeto usando um construtor em JavaScript?,Você pode usar a palavra-chave `new` seguida do nome do construtor. Ex: `const obj = new MyConstructor();`
Qual é o valor de `this` em uma função chamada como um método de um objeto?,O valor de `this` é o objeto que possui o método.
Qual é o valor de `this` em uma função chamada no escopo global (fora de um objeto)?,"No modo não estrito, o valor de `this` é o objeto global (window no navegador). No modo estrito, o valor de `this` é `undefined`."
Como você pode selecionar um elemento HTML pelo seu ID usando JavaScript?,Você pode usar o método `document.getElementById('idDoElemento')`.
Como você pode selecionar elementos HTML por sua classe usando JavaScript?,Você pode usar o método `document.getElementsByClassName('nomeDaClasse')`. Isso retorna um HTMLCollection.
Como você pode selecionar elementos HTML por sua tag name usando JavaScript?,Você pode usar o método `document.getElementsByTagName('nomeDaTag')`. Isso retorna um HTMLCollection.
Como você pode criar um novo elemento HTML usando JavaScript?,Você pode usar o método `document.createElement('nomeDaTag')`.
Como você pode adicionar um elemento HTML ao DOM usando JavaScript?,Você pode usar o método `parentElement.appendChild(novoElemento)`.
Como você pode modificar o conteúdo textual de um elemento HTML usando JavaScript?,Você pode usar a propriedade `element.textContent = 'novoTexto'`.
Como você pode modificar os atributos de um elemento HTML usando JavaScript?,"Você pode usar o método `element.setAttribute('nomeDoAtributo', 'valorDoAtributo')`."
Como você pode modificar o estilo CSS de um elemento HTML usando JavaScript?,Você pode usar a propriedade `element.style.propriedadeCSS = 'valor'`.
Como você pode navegar na árvore do DOM usando JavaScript?,"Você pode usar propriedades como `parentNode`, `childNodes`, `firstChild`, `lastChild`, `nextSibling` e `previousSibling`."
Quais são alguns eventos comuns em JavaScript?,"Alguns eventos comuns incluem: `click`, `mouseover`, `mouseout`, `keydown`, `keyup`, `submit`, `load`, `DOMContentLoaded`."
Como você pode anexar um manipulador de evento a um elemento HTML usando JavaScript?,"Você pode usar o método `element.addEventListener('nomeDoEvento', function)`."
O que é o objeto `event` em um manipulador de eventos JavaScript?,"O objeto `event` contém informações sobre o evento que ocorreu, como o elemento que disparou o evento, as coordenadas do mouse e a tecla pressionada."
Como você pode prevenir o comportamento padrão de um evento em JavaScript?,Você pode usar o método `event.preventDefault()`.
Como você pode impedir a propagação de um evento em JavaScript?,Você pode usar o método `event.stopPropagation()`.
Qual a diferença entre `stopPropagation()` e `stopImmediatePropagation()`?,`stopPropagation()` impede que o evento se propague para elementos pais. `stopImmediatePropagation()` impede que o evento se propague para elementos pais e também impede que outros manipuladores de evento no mesmo elemento sejam executados.
O que é o evento `DOMContentLoaded` em JavaScript?,"O evento `DOMContentLoaded` é disparado quando o documento HTML foi completamente carregado e analisado, sem esperar por folhas de estilo, imagens e subframes para terminar o carregamento."
O que é o evento `load` em JavaScript?,"O evento `load` é disparado quando o documento HTML e todos os seus recursos (como imagens, folhas de estilo e scripts) foram completamente carregados."
Como você pode criar um Web Worker em JavaScript?,Você pode criar um Web Worker instanciando o objeto `Worker` com o caminho para um arquivo JavaScript que contém o código a ser executado no thread de fundo. Ex: `const worker = new Worker('worker.js');`
Como você pode se comunicar entre a thread principal e um Web Worker?,"Você pode usar o método `postMessage()` para enviar mensagens entre a thread principal e o Web Worker, e o evento `message` para receber mensagens."
Como você pode armazenar dados no Local Storage usando JavaScript?,"Você pode usar o método `localStorage.setItem('chave', 'valor')`."
Como você pode recuperar dados do Local Storage usando JavaScript?,Você pode usar o método `localStorage.getItem('chave')`.
Como você pode remover dados do Local Storage usando JavaScript?,Você pode usar o método `localStorage.removeItem('chave')`.
Qual a diferença entre Local Storage e Session Storage?,"Local Storage persiste os dados mesmo após o navegador ser fechado, enquanto Session Storage armazena os dados apenas para a duração da sessão do navegador."
Como você pode acessar os cookies usando JavaScript?,Você pode acessar os cookies usando a propriedade `document.cookie`.
Como você pode definir um cookie usando JavaScript?,Você pode definir um cookie atribuindo um valor à propriedade `document.cookie`.
Como você declara um generator em JavaScript?,Você declara um generator usando a sintaxe `function* nomeDoGenerator() { ... }`.
Como você itera sobre um generator em JavaScript?,Você pode iterar sobre um generator usando um loop `for...of` ou chamando o método `next()` do generator.
O que são Iterators em JavaScript?,"Iterators são objetos que permitem percorrer uma coleção de dados, um elemento por vez. Eles têm um método `next()` que retorna um objeto com as propriedades `value` (o valor do próximo elemento) e `done` (um booleano indicando se a iteração está completa)."
Como você pode criar um iterator personalizado em JavaScript?,Você pode criar um iterator personalizado definindo um objeto com um método `next()` que retorna um objeto com as propriedades `value` e `done`.
O que são Maps em JavaScript?,Maps são coleções de pares chave-valor onde as chaves podem ser de qualquer tipo de dado (incluindo objetos).
Como você cria um Map em JavaScript?,Você pode criar um Map usando a sintaxe `const meuMap = new Map();`.
Como você adiciona um par chave-valor a um Map em JavaScript?,"Você pode usar o método `meuMap.set('chave', 'valor');`."
Como você recupera um valor de um Map em JavaScript?,Você pode usar o método `meuMap.get('chave');`.
Como você verifica se um Map tem uma chave em JavaScript?,Você pode usar o método `meuMap.has('chave');`.
Como você remove um par chave-valor de um Map em JavaScript?,Você pode usar o método `meuMap.delete('chave');`.
O que são Sets em JavaScript?,Sets são coleções de valores únicos. Eles garantem que não haja elementos duplicados na coleção.
Como você cria um Set em JavaScript?,Você pode criar um Set usando a sintaxe `const meuSet = new Set();`.
Como você adiciona um valor a um Set em JavaScript?,Você pode usar o método `meuSet.add('valor');`.
Como você verifica se um Set tem um valor em JavaScript?,Você pode usar o método `meuSet.has('valor');`.
Como você remove um valor de um Set em JavaScript?,Você pode usar o método `meuSet.delete('valor');`.
O que é a diferença entre um Map e um Object em JavaScript?,"Maps permitem chaves de qualquer tipo de dado, enquanto Objects normalmente usam strings como chaves. Maps também preservam a ordem de inserção, enquanto a ordem das propriedades de um objeto não é garantida. Maps também têm métodos integrados para obter o tamanho e iterar sobre os elementos."
O que é a diferença entre um Set e um Array em JavaScript?,"Sets armazenam apenas valores únicos, enquanto Arrays podem conter elementos duplicados. Sets não têm uma ordem específica, enquanto Arrays são ordenados."
O que são funções assíncronas geradoras (async generator functions) em JavaScript?,"São funções geradoras que permitem usar `await` dentro delas. Elas retornam um objeto que conforma com o protocolo AsyncIterator, permitindo iterar sobre valores assíncronos."
Como se declara uma função assíncrona geradora em JavaScript?,Usando a sintaxe `async function* nomeDaFuncao() { ... }`.
O que é o operador de exponenciação (**) em JavaScript?,"O operador de exponenciação (**) calcula a base elevada ao expoente. Por exemplo, `2 ** 3` resulta em 8."
O que são os módulos ES (ES Modules) em JavaScript?,"ES Modules são o sistema de módulos padrão no JavaScript, introduzido no ECMAScript 2015 (ES6). Eles permitem organizar o código em arquivos separados e importar e exportar funcionalidades entre eles."
Como você exporta uma função ou variável de um módulo ES em JavaScript?,Você pode usar a palavra-chave `export` antes da declaração da função ou variável. Ex: `export function minhaFuncao() { ... }` ou `export const minhaVariavel = 10;`.
Como você importa uma função ou variável de um módulo ES em JavaScript?,Você pode usar a palavra-chave `import` seguida do nome da função ou variável e o caminho para o módulo. Ex: `import { minhaFuncao } from './meuModulo.js';`.
Qual a diferença entre exportações nomeadas (named exports) e exportações padrão (default exports) em módulos ES?,"Exportações nomeadas permitem exportar vários valores de um módulo, e você precisa importar os nomes exatos exportados. Exportações padrão permitem exportar um único valor de um módulo, e você pode escolher qualquer nome ao importar."
Como você importa uma exportação padrão de um módulo ES em JavaScript?,Você pode usar a sintaxe `import nomeDaVariavel from './meuModulo.js';`.
Explique o que é uma WeakMap em JavaScript.,"Uma WeakMap é uma coleção de pares chave-valor onde as chaves devem ser objetos e não são enumeráveis. A principal diferença entre WeakMap e Map é que as chaves de uma WeakMap são fracamente referenciadas, o que significa que, se não houver outras referências para a chave (o objeto), o coletor de lixo pode liberar a memória ocupada por esse objeto e sua entrada correspondente na WeakMap. Isso evita vazamentos de memória."
Explique o que é uma WeakSet em JavaScript.,"Uma WeakSet é uma coleção de objetos únicos, semelhante a um Set, mas com a restrição de que só pode conter objetos e as referências aos objetos são fracas.  Se não houver outras referências para um objeto em um WeakSet, ele pode ser coletado pelo garbage collector."
Qual a principal diferença entre WeakMap/WeakSet e Map/Set em relação ao garbage collection?,"WeakMap e WeakSet não impedem que suas chaves (objetos) sejam coletados pelo garbage collector se não houver outras referências a eles, enquanto Map e Set mantêm referências fortes, impedindo a coleta do garbage collector."
O que são Symbols globais em JavaScript?,"Symbols globais são Symbols que são registrados em um registro global, permitindo que eles sejam acessados de diferentes partes do código. Você pode criar um Symbol global usando `Symbol.for('chave')`, que retorna o Symbol existente com essa chave ou cria um novo se não existir."
O que é o método `Symbol.keyFor()` em JavaScript?,"O método `Symbol.keyFor()` retorna a chave associada a um Symbol global. Se o Symbol não for global, ele retorna `undefined`."
Quais operações aritméticas são suportadas com BigInts?,"BigInts suportam operações aritméticas como adição (+), subtração (-), multiplicação (*), divisão (/), resto (%), e exponenciação (**). No entanto, BigInts não podem ser misturados com Numbers em"
