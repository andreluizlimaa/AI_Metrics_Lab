Pergunta,Resposta
Qual a diferença entre `undefined` e `null` em JavaScript?,"`undefined` significa que uma variável foi declarada mas ainda não recebeu um valor. `null` é um valor de atribuição que representa a ausência intencional de qualquer valor de objeto ou primitivo. `undefined` geralmente indica um estado inicial ou um erro, enquanto `null` é uma atribuição explícita."
Como funciona o operador `typeof` em JavaScript e quais os tipos que ele pode retornar?,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando.  Os tipos que ele pode retornar incluem: ""undefined"", ""boolean"", ""number"", ""string"", ""symbol"", ""bigint"", ""function"", e ""object"". Note que `typeof null` retorna ""object"" (um bug histórico)."
O que é hoisting em JavaScript e como ele afeta a declaração de variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seus respectivos escopos durante a fase de compilação. Isso significa que você pode usar uma variável ou função *antes* de sua declaração no código, mas apenas a *declaração* é movida, não a inicialização. Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto `let` e `const` não são inicializadas e acessar antes da declaração resulta em um `ReferenceError`. Funções declaradas usando a sintaxe `function declaration` são completamente hoisted, enquanto `function expression` estão sujeitas ao mesmo hoisting que as variáveis."
Explique o conceito de closure em JavaScript.,"Um closure é a capacidade de uma função lembrar e acessar variáveis de seu escopo léxico, mesmo quando a função é executada fora desse escopo. Em outras palavras, uma função interna tem acesso às variáveis da função externa onde foi definida, mesmo depois que a função externa terminou de executar."
O que é o objeto `arguments` em JavaScript e como ele pode ser usado?,"Dentro de uma função, `arguments` é um objeto semelhante a um array que contém todos os argumentos passados para a função. Ele permite acessar argumentos por índice (por exemplo, `arguments[0]`, `arguments[1]`) e tem uma propriedade `length` indicando o número de argumentos. No entanto, `arguments` não é um array verdadeiro e não possui os métodos de array (como `forEach`, `map`, etc.) diretamente.  Em funções arrow, `arguments` não está disponível."
Qual a diferença entre `==` e `===` em JavaScript?,"`==` é o operador de igualdade abstrata, que realiza a conversão de tipo antes de comparar os valores. `===` é o operador de igualdade estrita, que compara os valores sem conversão de tipo.  Portanto, `===` é geralmente recomendado para evitar comportamentos inesperados devido à coerção de tipo."
Como você pode criar um novo objeto em JavaScript usando a sintaxe de literal de objeto?,"A sintaxe de literal de objeto é usar chaves `{}` para definir um objeto e pares chave-valor dentro das chaves. Por exemplo: `let person = { name: ""John"", age: 30 };`."
"Explique o conceito de ""truthy"" e ""falsy"" em JavaScript.","Em JavaScript, ""truthy"" e ""falsy"" são valores que, quando avaliados em um contexto booleano (por exemplo, em uma condição `if`), se comportam como `true` ou `false`, respectivamente. Valores falsy incluem `false`, `0`, `""""` (string vazia), `null`, `undefined`, e `NaN`. Todos os outros valores são considerados truthy."
O que são funções de primeira classe em JavaScript?,"Funções de primeira classe significam que as funções podem ser tratadas como qualquer outra variável. Elas podem ser atribuídas a variáveis, passadas como argumentos para outras funções e retornadas como valores de outras funções."
Como você pode criar um array em JavaScript?,"Você pode criar um array usando a sintaxe de literal de array `[]`, por exemplo, `let myArray = [1, 2, 3];`, ou usando o construtor `new Array()`, por exemplo, `let myArray = new Array(1, 2, 3);`. A forma literal é geralmente preferida."
O que é o método `map` em arrays JavaScript e como ele funciona?,O método `map` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele não modifica o array original.
Como você pode adicionar um elemento ao final de um array em JavaScript?,Você pode usar o método `push()` para adicionar um elemento ao final de um array. Por exemplo: `myArray.push(4);`.
O que é o método `filter` em arrays JavaScript e como ele funciona?,O método `filter` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. Ele não modifica o array original.
Como você pode remover o último elemento de um array em JavaScript?,Você pode usar o método `pop()` para remover o último elemento de um array. O método `pop()` retorna o elemento removido.
O que é o método `reduce` em arrays JavaScript e como ele funciona?,"O método `reduce` executa uma função reducer (fornecida) em cada elemento do array, resultando em um único valor de retorno. A função reducer recebe dois argumentos: um acumulador e o valor atual."
Como você pode encontrar o índice de um elemento em um array em JavaScript?,"Você pode usar o método `indexOf()` para encontrar o índice da primeira ocorrência de um elemento em um array. Se o elemento não for encontrado, `indexOf()` retorna `-1`."
O que é o método `forEach` em arrays JavaScript e como ele funciona?,"O método `forEach` executa uma função fornecida uma vez para cada elemento do array. Diferente de `map`, `forEach` não cria um novo array. Ele é usado principalmente para realizar efeitos colaterais."
Como você pode verificar se um array inclui um determinado elemento em JavaScript?,Você pode usar o método `includes()` para verificar se um array inclui um determinado elemento. `includes()` retorna `true` se o elemento estiver presente e `false` caso contrário.
"Qual a diferença entre `let`, `const` e `var` ao declarar variáveis em JavaScript?","`var` tem escopo de função ou escopo global, enquanto `let` e `const` têm escopo de bloco. `let` permite reatribuição, enquanto `const` cria uma variável cujo valor não pode ser reatribuído após a inicialização."
Explique o que são template literals em JavaScript e como eles são usados.,Template literals são strings delimitadas por backticks (``) que permitem a incorporação de expressões JavaScript dentro da string usando `${expression}`. Eles também suportam strings de várias linhas.
O que é destructuring em JavaScript e como ele pode ser usado com objetos e arrays?,"Destructuring é uma expressão JavaScript que permite descompactar valores de arrays ou propriedades de objetos em variáveis distintas. Por exemplo: `let [a, b] = [1, 2];` ou `let { name, age } = { name: ""John"", age: 30 };`."
O que são arrow functions em JavaScript e quais são suas principais diferenças em relação às funções tradicionais?,"Arrow functions são uma sintaxe mais concisa para escrever funções em JavaScript. Elas têm algumas diferenças importantes: não têm seu próprio `this` (herdam o `this` do escopo envolvente), não têm o objeto `arguments` e não podem ser usadas como construtoras (não podem ser chamadas com `new`)."
O que é o operador spread (`...`) em JavaScript e como ele pode ser usado?,O operador spread permite expandir um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados. Ele também pode ser usado para criar cópias rasas de arrays e objetos.
O que é o operador rest (`...`) em JavaScript e como ele pode ser usado?,"O operador rest é usado para coletar um número indefinido de argumentos em uma função como um array. Ele também pode ser usado para desestruturar arrays e objetos, coletando o restante dos elementos ou propriedades em um novo array ou objeto."
Explique o conceito de default parameters em funções JavaScript.,"Default parameters permitem definir valores padrão para parâmetros de função que serão usados se o argumento correspondente não for fornecido ou for `undefined` durante a chamada da função. Exemplo: `function greet(name = ""Guest"") { ... }`."
O que são generators em JavaScript e como eles funcionam?,"Generators são funções que podem ser pausadas e retomadas, permitindo a produção de múltiplos valores ao longo do tempo. Elas são definidas usando a palavra-chave `function*` e usam a palavra-chave `yield` para retornar valores."
O que são iterators em JavaScript e como eles são usados?,Iterators são objetos que definem uma sequência e retornam um valor por vez. Eles possuem um método `next()` que retorna um objeto com duas propriedades: `value` (o próximo valor da sequência) e `done` (um booleano indicando se a sequência terminou).  Iterators são usados por loops `for...of`.
Como você pode criar um loop `for...of` em JavaScript?,"O loop `for...of` é usado para iterar sobre os valores de um objeto iterável, como um array, string, Map, Set, etc. Por exemplo: `for (let value of myArray) { ... }`."
O que são Maps em JavaScript e como eles diferem dos objetos regulares?,"Maps são coleções de pares chave-valor, onde as chaves podem ser de qualquer tipo de dado (incluindo objetos). Ao contrário dos objetos regulares, Maps mantêm a ordem de inserção das chaves e têm propriedades e métodos específicos para manipulação (como `set`, `get`, `has`, `delete`, `size`)."
O que são Sets em JavaScript e como eles são usados?,"Sets são coleções de valores únicos. Eles não permitem valores duplicados. Sets possuem métodos como `add`, `delete`, `has`, e `size` para manipular os elementos."
O que é o método `Object.keys()` em JavaScript e como ele funciona?,O método `Object.keys()` retorna um array com todas as chaves (nomes de propriedades) de um objeto. A ordem das chaves no array retornado é a mesma que a ordem em que as propriedades são iteradas manualmente.
O que é o método `Object.values()` em JavaScript e como ele funciona?,O método `Object.values()` retorna um array com todos os valores das propriedades de um objeto. A ordem dos valores no array retornado é a mesma que a ordem em que as propriedades são iteradas manualmente.
O que é o método `Object.entries()` em JavaScript e como ele funciona?,"O método `Object.entries()` retorna um array de arrays, onde cada sub-array contém o par chave-valor de uma propriedade de um objeto. A ordem dos pares chave-valor no array retornado é a mesma que a ordem em que as propriedades são iteradas manualmente."
Como você pode criar uma cópia rasa de um objeto em JavaScript?,"Você pode criar uma cópia rasa de um objeto usando o operador spread (`...`) ou o método `Object.assign()`. Por exemplo: `let newObj = { ...originalObj };` ou `let newObj = Object.assign({}, originalObj);`."
Como você pode criar uma cópia profunda de um objeto em JavaScript?,"Para criar uma cópia profunda de um objeto, você precisa recursivamente copiar todas as propriedades e seus valores, incluindo objetos aninhados e arrays. Uma maneira de fazer isso é usando `JSON.parse(JSON.stringify(obj))`, mas isso não funciona com funções, datas ou objetos que contêm referências circulares. Para uma solução mais robusta, você pode usar uma biblioteca como Lodash (`_.cloneDeep()`)."
"O que é o conceito de ""imutabilidade"" em JavaScript e por que ele é importante?","Imutabilidade significa que um objeto não pode ser modificado após sua criação. Em JavaScript, isso é importante porque ajuda a evitar efeitos colaterais inesperados, torna o código mais fácil de depurar e testar e permite otimizações de desempenho."
Como você pode tornar um objeto imutável em JavaScript?,"Você pode usar `Object.freeze()` para tornar um objeto imutável. Isso impede que novas propriedades sejam adicionadas, propriedades existentes sejam removidas ou seus valores sejam modificados. No entanto, `Object.freeze()` apenas torna o objeto *raso* imutável; objetos aninhados ainda podem ser modificados."
"O que é ""currying"" em JavaScript?","Currying é uma técnica em programação funcional que transforma uma função que recebe múltiplos argumentos em uma sequência de funções, cada uma recebendo um único argumento. Em vez de chamar a função com todos os argumentos de uma vez, você chama a primeira função com o primeiro argumento, que retorna uma nova função esperando o próximo argumento, e assim por diante, até que todos os argumentos tenham sido fornecidos."
"O que é ""composição de funções"" em JavaScript?","Composição de funções é o processo de combinar duas ou mais funções para produzir uma nova função. O resultado de cada função é passado como argumento para a próxima, formando um fluxo de transformação de dados."
"Explique o conceito de ""higher-order functions"" em JavaScript.",Higher-order functions são funções que podem receber outras funções como argumentos ou retornar funções como seus resultados. Elas são um conceito fundamental na programação funcional e permitem abstrações poderosas e reutilização de código.
O que é o objeto `Math` em JavaScript e quais são alguns de seus métodos úteis?,"O objeto `Math` é um objeto embutido que fornece propriedades e métodos para operações matemáticas. Alguns métodos úteis incluem `Math.random()`, `Math.floor()`, `Math.ceil()`, `Math.round()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`."
Como você pode gerar um número aleatório entre um intervalo específico em JavaScript?,"Você pode usar a seguinte fórmula: `Math.floor(Math.random() * (max - min + 1)) + min;`, onde `min` e `max` são os limites inferior e superior do intervalo, respectivamente."
O que é o objeto `Date` em JavaScript e como ele é usado?,"O objeto `Date` é usado para trabalhar com datas e horários em JavaScript. Ele permite criar, formatar e manipular datas."
Como você pode obter o timestamp atual em JavaScript?,Você pode obter o timestamp atual em milissegundos usando `Date.now()` ou `new Date().getTime()`.
Como você pode formatar uma data em JavaScript?,"Você pode usar métodos do objeto `Date` como `toLocaleDateString()`, `toLocaleTimeString()`, `toLocaleString()`, ou criar sua própria função de formatação usando métodos como `getFullYear()`, `getMonth()`, `getDate()`, `getHours()`, `getMinutes()`, `getSeconds()`.  Para formatação mais complexa, bibliotecas como Moment.js (embora em desuso) ou date-fns são úteis."
O que são expressões regulares (RegEx) em JavaScript e como elas são usadas?,"Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings. Elas são usadas para pesquisa, substituição e validação de strings."
Como você pode criar uma expressão regular em JavaScript?,"Você pode criar uma expressão regular usando um literal (entre barras `/`) ou usando o construtor `new RegExp()`. Por exemplo: `/pattern/` ou `new RegExp(""pattern"")`."
Quais são alguns metacaracteres comuns usados em expressões regulares em JavaScript?,"Alguns metacaracteres comuns incluem: `.` (qualquer caractere), `*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `[]` (conjunto de caracteres), `[^]` (conjunto de caracteres negado), `\d` (dígito), `\w` (caractere alfanumérico), `\s` (espaço em branco)."
O que são quantificadores em expressões regulares em JavaScript?,"Quantificadores especificam quantas ocorrências de um caractere ou grupo de caracteres devem ser correspondidas. Exemplos: `*` (zero ou mais), `+` (um ou mais), `?` (zero ou um), `{n}` (exatamente n vezes), `{n,}` (n ou mais vezes), `{n,m}` (entre n e m vezes)."
O que são grupos de captura em expressões regulares em JavaScript?,Grupos de captura são partes de uma expressão regular que são colocadas entre parênteses `()`. Eles permitem capturar as partes correspondentes da string para uso posterior.
Como você pode usar o método `match()` em JavaScript para encontrar correspondências de uma expressão regular em uma string?,"O método `match()` retorna um array com as correspondências encontradas ou `null` se nenhuma correspondência for encontrada. Se a expressão regular tiver o flag `g` (global), ele retorna todas as correspondências. Caso contrário, ele retorna apenas a primeira correspondência e grupos de captura."
Como você pode usar o método `replace()` em JavaScript com uma expressão regular para substituir partes de uma string?,O método `replace()` substitui partes de uma string que correspondem a uma expressão regular por uma nova string. Você pode usar grupos de captura na string de substituição para referenciar as partes correspondentes.
O que são callbacks em JavaScript?,"Callbacks são funções passadas como argumentos para outras funções, que são então invocadas (chamadas de volta) dentro da função externa para completar uma ação ou operação. São essenciais para programação assíncrona."
Explique o conceito de programação assíncrona em JavaScript.,"A programação assíncrona permite que o JavaScript execute múltiplas operações simultaneamente sem bloquear a thread principal. Isso é crucial para evitar que a interface do usuário fique travada durante operações demoradas, como solicitações de rede ou leitura de arquivos."
O que são Promises em JavaScript e como elas são usadas?,"Promises são objetos que representam o eventual resultado (ou falha) de uma operação assíncrona. Elas têm três estados: `pending` (pendente), `fulfilled` (resolvida) e `rejected` (rejeitada). Promises permitem encadear operações assíncronas de forma mais legível e evitar o ""callback hell""."
Como você pode criar uma Promise em JavaScript?,"Você pode criar uma Promise usando o construtor `new Promise((resolve, reject) => { ... })`, onde `resolve` é uma função para resolver a Promise com um valor e `reject` é uma função para rejeitar a Promise com um motivo."
"O que são os métodos `then()`, `catch()` e `finally()` em Promises JavaScript?","`then()` é usado para lidar com o resultado bem-sucedido (resolvido) de uma Promise. `catch()` é usado para lidar com a falha (rejeição) de uma Promise. `finally()` é executado sempre, independentemente de a Promise ter sido resolvida ou rejeitada."
O que são `async` e `await` em JavaScript e como eles são usados?,"`async` e `await` são palavras-chave que simplificam a escrita de código assíncrono em JavaScript. `async` é usado para definir uma função assíncrona, que sempre retorna uma Promise. `await` é usado dentro de uma função `async` para pausar a execução até que uma Promise seja resolvida ou rejeitada."
O que é o Event Loop em JavaScript e como ele funciona?,"O Event Loop é um mecanismo que permite ao JavaScript lidar com operações assíncronas de forma eficiente. Ele monitora a pilha de chamadas e a fila de tarefas (task queue). Quando a pilha de chamadas está vazia, o Event Loop pega a primeira tarefa da fila de tarefas e a coloca na pilha de chamadas para execução."
"O que é o conceito de ""single-threaded"" em JavaScript?","""Single-threaded"" significa que o JavaScript executa código em uma única thread (linha de execução) por vez. Isso significa que se uma operação bloquear a thread principal, toda a aplicação ficará travada. É por isso que a programação assíncrona é tão importante em JavaScript."
O que é o objeto `window` em JavaScript e qual é seu propósito?,"O objeto `window` representa a janela do navegador. É o objeto global no ambiente do navegador e fornece acesso a várias funcionalidades, como manipulação do DOM, histórico do navegador, cookies, temporizadores, etc."
O que é o objeto `document` em JavaScript e qual é seu propósito?,"O objeto `document` representa a página HTML carregada no navegador. Ele fornece acesso ao DOM (Document Object Model), que é uma representação estruturada da página HTML como uma árvore de nós. Através do `document`, você pode manipular o conteúdo e a estrutura da página."
O que é o DOM (Document Object Model) em JavaScript?,"O DOM (Document Object Model) é uma representação orientada a objetos de um documento HTML ou XML. Ele permite que programas JavaScript acessem e manipulem o conteúdo, a estrutura e o estilo do documento."
Como você pode selecionar elementos HTML usando JavaScript?,"Você pode selecionar elementos HTML usando métodos do objeto `document`, como `getElementById()`, `getElementsByClassName()`, `getElementsByTagName()`, `querySelector()`, `querySelectorAll()`."
Qual a diferença entre `querySelector()` e `querySelectorAll()` em JavaScript?,`querySelector()` retorna o primeiro elemento que corresponde a um seletor CSS especificado. `querySelectorAll()` retorna uma NodeList com todos os elementos que correspondem ao seletor CSS especificado.
Como você pode modificar o conteúdo de um elemento HTML usando JavaScript?,"Você pode modificar o conteúdo de um elemento HTML usando propriedades como `innerHTML`, `textContent`, ou `innerText`."
Como você pode adicionar um novo elemento HTML ao DOM usando JavaScript?,"Você pode criar um novo elemento usando `document.createElement()`, definir suas propriedades (como `textContent`, `className`, etc.) e então adicioná-lo ao DOM usando métodos como `appendChild()`, `insertBefore()`."
Como você pode remover um elemento HTML do DOM usando JavaScript?,Você pode remover um elemento HTML do DOM usando o método `removeChild()` do elemento pai ou o método `remove()` do próprio elemento.
O que são eventos em JavaScript e como eles são usados?,"Eventos são ações ou ocorrências que acontecem no navegador, como cliques do mouse, carregamento de página, envio de formulário, etc. JavaScript permite que você responda a esses eventos executando código quando eles acontecem."
Como você pode adicionar um listener de evento a um elemento HTML usando JavaScript?,"Você pode adicionar um listener de evento usando o método `addEventListener()` do elemento. Por exemplo: `element.addEventListener(""click"", function() { ... });`."
O que é o objeto `event` em JavaScript e quais são algumas de suas propriedades úteis?,"O objeto `event` é passado como argumento para a função de callback de um listener de evento. Ele contém informações sobre o evento que ocorreu, como o tipo do evento, o elemento alvo, as coordenadas do mouse, etc. Algumas propriedades úteis incluem `type`, `target`, `clientX`, `clientY`, `preventDefault()`, `stopPropagation()`."
O que é o método `preventDefault()` do objeto `event` em JavaScript?,"O método `preventDefault()` impede o comportamento padrão associado a um evento. Por exemplo, ele pode impedir o envio de um formulário ou a navegação para um novo link."
O que é o método `stopPropagation()` do objeto `event` em JavaScript?,O método `stopPropagation()` impede que um evento se propague para elementos pais no DOM (fase de bubbling).
"O que é ""event bubbling"" em JavaScript?","""Event bubbling"" é o processo em que um evento disparado em um elemento se propaga para seus elementos pais no DOM, acionando os listeners de evento associados a esses elementos pais."
"O que é ""event capturing"" em JavaScript?","""Event capturing"" é o processo oposto ao ""event bubbling"". Em vez de começar no elemento alvo e subir na árvore DOM, o evento começa no elemento raiz e desce até o elemento alvo.  É menos comum que o bubbling."
"O que é ""event delegation"" em JavaScript e por que ele é útil?","""Event delegation"" é uma técnica em que você adiciona um listener de evento a um elemento pai em vez de a múltiplos elementos filhos. Isso é útil para melhorar o desempenho, especialmente quando você tem muitos elementos filhos ou quando os elementos filhos são adicionados dinamicamente."
O que são cookies em JavaScript e como eles são usados?,"Cookies são pequenos arquivos de texto que os sites armazenam no navegador do usuário para lembrar informações sobre o usuário, como preferências, informações de login, etc. Eles podem ser acessados e manipulados usando JavaScript."
Como você pode definir um cookie em JavaScript?,Você pode definir um cookie atribuindo um valor a `document.cookie`. A string deve estar no formato `name=value; expires=date; path=path; domain=domain; secure`.
Como você pode ler um cookie em JavaScript?,Você pode ler todos os cookies acessando a propriedade `document.cookie`. A string retornada contém todos os cookies separados por ponto e vírgula. Você precisa analisar a string para obter o valor de um cookie específico.
O que é o Local Storage em JavaScript e como ele difere dos cookies?,"Local Storage é um mecanismo de armazenamento web que permite armazenar dados no navegador do usuário persistentemente (mesmo depois que o navegador é fechado). Ao contrário dos cookies, o Local Storage não é enviado para o servidor a cada solicitação e tem uma capacidade de armazenamento muito maior."
Como você pode salvar dados no Local Storage usando JavaScript?,"Você pode salvar dados no Local Storage usando o método `localStorage.setItem(key, value)`, onde `key` é o nome da chave e `value` é o valor a ser salvo (que deve ser uma string)."
Como você pode recuperar dados do Local Storage usando JavaScript?,"Você pode recuperar dados do Local Storage usando o método `localStorage.getItem(key)`, onde `key` é o nome da chave."
Como você pode remover dados do Local Storage usando JavaScript?,"Você pode remover dados do Local Storage usando o método `localStorage.removeItem(key)`, onde `key` é o nome da chave."
O que é o Session Storage em JavaScript e como ele difere do Local Storage?,"Session Storage é semelhante ao Local Storage, mas os dados são armazenados apenas durante a sessão do navegador. Quando o navegador é fechado, os dados são apagados."
O que é JSON (JavaScript Object Notation) e como ele é usado em JavaScript?,"JSON é um formato de dados leve e fácil de ler, usado para transmitir dados entre um servidor e um navegador. Ele é baseado na sintaxe de objetos JavaScript, mas é independente da linguagem."
Como você pode converter um objeto JavaScript em uma string JSON?,Você pode usar o método `JSON.stringify()` para converter um objeto JavaScript em uma string JSON.
Como você pode converter uma string JSON em um objeto JavaScript?,Você pode usar o método `JSON.parse()` para converter uma string JSON em um objeto JavaScript.
O que são erros em JavaScript e como você pode lidar com eles?,Erros são problemas que ocorrem durante a execução do código JavaScript. Você pode lidar com erros usando blocos `try...catch` para capturar e tratar as exceções lançadas pelo código.
Como você pode lançar um erro manualmente em JavaScript?,"Você pode lançar um erro manualmente usando a palavra-chave `throw`. Por exemplo: `throw new Error(""Mensagem de erro"");`."
O que é o bloco `try...catch...finally` em JavaScript e como ele funciona?,"O bloco `try` contém o código que pode lançar uma exceção. O bloco `catch` captura a exceção (se ocorrer) e executa o código para lidar com o erro. O bloco `finally` é executado sempre, independentemente de uma exceção ter sido lançada ou não."
O que é o objeto `console` em JavaScript e quais são alguns de seus métodos úteis?,"O objeto `console` fornece acesso ao console de depuração do navegador. Alguns métodos úteis incluem `console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`."
Como você pode depurar código JavaScript usando o console do navegador?,"Você pode usar `console.log()` para imprimir valores de variáveis e mensagens no console. Você também pode usar a ferramenta de depuração do navegador para definir breakpoints, inspecionar variáveis e executar o código passo a passo."
O que são Source Maps em JavaScript e como eles são usados?,"Source Maps são arquivos que mapeiam o código JavaScript minificado e transpilado de volta para o código fonte original. Isso facilita a depuração do código em produção, pois você pode ver o código original em vez do código minificado."
"O que são ""strict mode"" em JavaScript e como você pode habilitá-lo?","""Strict mode"" é um modo restrito de execução do JavaScript que impõe regras mais rígidas e elimina alguns comportamentos considerados perigosos ou propensos a erros. Você pode habilitá-lo adicionando a diretiva `""use strict"";` no início de um script ou função."
"Quais são algumas vantagens de usar ""strict mode"" em JavaScript?","Algumas vantagens incluem: prevenir o uso de variáveis não declaradas, lançar erros em atribuições a propriedades somente leitura, eliminar alguns comportamentos ambíguos, melhorar a segurança do código."
O que são closures e como eles se relacionam com o garbage collection em JavaScript?,"Closures permitem que funções internas acessem variáveis do escopo externo, mesmo após a função externa ter terminado de executar. Isso pode impedir que as variáveis do escopo externo sejam coletadas pelo garbage collector, pois elas ainda estão sendo referenciadas pela função interna."
O que é o garbage collection em JavaScript e como ele funciona?,Garbage collection é o processo automático de liberar memória que não está mais sendo usada pelo programa. O JavaScript tem um garbage collector que rastreia objetos e remove aqueles que não são mais referenciados por nenhuma variável ou outro objeto.
Quais são as formas de evitar memory leaks em JavaScript?,"Para evitar memory leaks, é importante: remover listeners de eventos quando não forem mais necessários, liberar referências a objetos grandes quando não forem mais usados, evitar criar referências circulares entre objetos, e ter cuidado com closures que podem manter variáveis em memória por mais tempo do que o necessário."
O que é o operador `void` em JavaScript e como ele é usado?,O operador `void` avalia uma expressão e retorna `undefined`. Ele é frequentemente usado para evitar que um link execute o comportamento padrão (como navegar para uma nova página) ou para garantir que uma função não retorne nenhum valor.
Explique o que é memoization em JavaScript e como ela pode melhorar o desempenho.,Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras e retorna o resultado armazenado em cache quando as mesmas entradas ocorrem novamente. Isso pode melhorar significativamente o desempenho de funções que são chamadas repetidamente com os mesmos argumentos.
Como você pode criar uma função memoized em JavaScript?,Você pode criar uma função memoized usando um objeto para armazenar os resultados em cache. A chave do objeto pode ser uma string que representa os argumentos da função e o valor pode ser o resultado da função.
O que é um Polyfill em JavaScript e por que ele é usado?,Um polyfill é um código (geralmente JavaScript) que fornece funcionalidade moderna em navegadores mais antigos que não a suportam nativamente. Ele permite que você use recursos novos sem se preocupar com a compatibilidade com navegadores legados.
O que é transpilação em JavaScript e qual a diferença para um Polyfill?,"Transpilação é o processo de converter código de uma versão do JavaScript (ou uma linguagem que se converte em JavaScript) para uma versão mais antiga, de forma que possa ser executada em navegadores mais antigos. Diferente de um polyfill que adiciona *funcionalidade*, a transpilação muda a *sintaxe* do código. Babel é uma ferramenta popular para transpilação."
O que são Web Workers em JavaScript e como eles são usados?,"Web Workers permitem executar scripts JavaScript em threads de background, separados da thread principal do navegador. Isso evita que operações demoradas bloqueiem a interface do usuário."
Quais são as limitações de Web Workers em JavaScript?,Web Workers não têm acesso direto ao DOM. Eles se comunicam com a thread principal por meio de mensagens (usando o método `postMessage()`).
O que são módulos em JavaScript e como eles são usados?,"Módulos são unidades de código reutilizáveis que encapsulam funcionalidades específicas. Eles ajudam a organizar o código, evitar conflitos de nomes e melhorar a capacidade de manutenção."
Como você pode exportar um módulo em JavaScript?,"Você pode usar as palavras-chave `export` (nomeado) ou `export default` (padrão) para exportar valores, funções, classes ou objetos de um módulo."
Como você pode importar um módulo em JavaScript?,"Você pode usar a palavra-chave `import` para importar valores, funções, classes ou objetos de um módulo."
Qual a diferença entre `export` e `export default` em JavaScript?,"`export` permite exportar múltiplos valores, funções, classes ou objetos nomeados. `export default` permite exportar um único valor padrão. Ao importar um módulo exportado com `export`, você deve usar o mesmo nome usado na exportação. Ao importar um módulo exportado com `export default`, você pode usar qualquer nome."
O que é o padrão CommonJS e como ele difere dos módulos ES (ECMAScript)?,CommonJS é um sistema de módulos usado principalmente no Node.js. Ele usa as funções `require()` para importar módulos e o objeto `module.exports` para exportar módulos. Os módulos ES são o padrão nativo de módulos do JavaScript e usam as palavras-chave `import` e `export`.
O que é o padrão AMD (Asynchronous Module Definition) em JavaScript?,AMD é um sistema de módulos assíncrono usado principalmente em navegadores. Ele usa a função `define()` para definir módulos e permite carregar módulos de forma assíncrona. RequireJS é uma implementação popular de AMD.
O que são IIFE (Immediately Invoked Function Expressions) em JavaScript e por que eles são usados?,IIFE são funções que são definidas e
Qual a diferença entre `null` e `undefined` em JavaScript?,"`null` é um valor de atribuição. Representa a ausência intencional de valor. `undefined` significa que uma variável foi declarada, mas ainda não recebeu um valor."
Como você declara uma variável em JavaScript que não pode ser reatribuída após a inicialização?,Utiliza-se a palavra-chave `const`.
O que é hoisting em JavaScript?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do seu escopo antes da execução do código.  É importante notar que apenas a *declaração* é movida, não a inicialização."
Como se define uma função anônima em JavaScript?,Uma função anônima é definida sem um nome. Exemplo: `function() { // código da função }`. Geralmente é atribuída a uma variável ou passada como argumento para outra função.
O que são closures em JavaScript?,"Closures são funções que ""lembram"" o ambiente lexical onde foram criadas, mesmo quando executadas fora desse ambiente. Elas têm acesso às variáveis da função externa, mesmo após a função externa ter retornado."
Como se cria um objeto literal em JavaScript?,"Utiliza-se chaves `{}` e pares chave-valor separados por vírgulas. Exemplo: `let pessoa = { nome: ""João"", idade: 30 };`"
O que é o operador ternário em JavaScript?,"É um operador condicional abreviado, escrito como `condição ? expressão_se_verdadeiro : expressão_se_falso;`."
Como se itera sobre as propriedades de um objeto em JavaScript?,Utiliza-se o loop `for...in`. Exemplo: `for (let propriedade in objeto) { console.log(propriedade); }`
O que é o método `map()` em arrays JavaScript e o que ele retorna?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele retorna um novo array com o mesmo número de elementos que o array original.
Como se adiciona um elemento ao final de um array em JavaScript?,Utiliza-se o método `push()`.
Qual é o propósito do método `pop()` em arrays JavaScript?,Remove o último elemento de um array e retorna esse elemento.
O que é o método `slice()` em arrays JavaScript?,"Retorna uma cópia de uma parte do array, delimitada por um índice inicial e um índice final (não inclusivo). Não modifica o array original."
Como se converte uma string em um número em JavaScript?,"Pode-se usar `parseInt()`, `parseFloat()` ou o operador unário `+`."
O que é o método `toFixed()` em JavaScript?,"Formata um número, arredondando-o para um número específico de casas decimais. Retorna uma string."
Como se verifica se uma variável é um array em JavaScript?,Utiliza-se `Array.isArray(variavel)`.
O que é o operador `typeof` em JavaScript?,Retorna uma string indicando o tipo de dado de um operando.
O que é o método `concat()` em arrays JavaScript?,Retorna um novo array resultante da concatenação de dois ou mais arrays.
Como se remove elementos duplicados de um array em JavaScript?,Pode-se usar `[...new Set(array)]`.
O que é o método `forEach()` em arrays JavaScript?,Executa uma função fornecida uma vez para cada elemento no array. Não retorna nada.
"Qual a diferença entre `let`, `const` e `var` em JavaScript?",`var` tem escopo de função ou global. `let` e `const` têm escopo de bloco. `const` também impede a reatribuição da variável após a inicialização.
O que é a função `setTimeout()` em JavaScript?,Executa uma função ou trecho de código após um determinado atraso em milissegundos.
O que é a função `setInterval()` em JavaScript?,Executa uma função ou trecho de código repetidamente em intervalos regulares de tempo (em milissegundos).
Como se para a execução de um `setInterval()` em JavaScript?,Utiliza-se a função `clearInterval()` e o ID retornado por `setInterval()`.
O que é o objeto `Math` em JavaScript?,É um objeto nativo que fornece funções matemáticas e constantes.
Como se gera um número aleatório entre 0 e 1 em JavaScript?,Utiliza-se `Math.random()`.
Como se arredonda um número para o inteiro mais próximo em JavaScript?,Utiliza-se `Math.round()`.
O que é o método `String.prototype.toUpperCase()` em JavaScript?,Converte uma string para letras maiúsculas.
O que é o método `String.prototype.toLowerCase()` em JavaScript?,Converte uma string para letras minúsculas.
Como se obtém o comprimento de uma string em JavaScript?,Utiliza-se a propriedade `length`.
O que é o método `String.prototype.substring()` em JavaScript?,Retorna uma parte da string entre dois índices especificados.
O que é o método `String.prototype.replace()` em JavaScript?,Substitui uma parte da string por outra string.
Como se divide uma string em um array de substrings em JavaScript?,Utiliza-se o método `String.prototype.split()`.
O que são template literals (template strings) em JavaScript?,São strings que permitem a interpolação de variáveis e expressões dentro da string usando crases (`` ` ``) e `${}`.
O que é o operador spread (`...`) em JavaScript?,Permite expandir um iterável (como um array ou string) em locais onde múltiplos argumentos ou elementos são esperados.
O que é destructuring em JavaScript?,É uma sintaxe que permite extrair valores de objetos ou arrays e atribuí-los a variáveis.
Como se define um valor padrão para um parâmetro de função em JavaScript?,Utiliza-se a sintaxe `function minhaFuncao(parametro = valorPadrao) { ... }`.
O que são arrow functions em JavaScript?,"São uma forma mais concisa de escrever funções em JavaScript, utilizando a sintaxe `() => {}`. Elas herdam o `this` do contexto envolvente."
O que é o método `Array.prototype.filter()` em JavaScript?,Cria um novo array com todos os elementos que passam em um teste implementado por uma função fornecida.
O que é o método `Array.prototype.reduce()` em JavaScript?,Aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o método `Array.prototype.find()` em JavaScript?,"Retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
O que é o método `Array.prototype.findIndex()` em JavaScript?,"Retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1."
O que é o método `Array.prototype.some()` em JavaScript?,"Testa se pelo menos um elemento no array passa no teste implementado pela função fornecida. Retorna `true` se encontrar tal elemento; caso contrário, retorna `false`."
O que é o método `Array.prototype.every()` em JavaScript?,"Testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna `true` se todos os elementos passarem no teste; caso contrário, retorna `false`."
O que é o operador `in` em JavaScript?,Retorna `true` se a propriedade especificada estiver no objeto especificado.
O que é o operador `instanceof` em JavaScript?,Testa se um objeto tem em sua cadeia de protótipos a propriedade prototype de um construtor.
O que são generators em JavaScript?,"São funções que podem ser pausadas e retomadas, permitindo a criação de iteradores personalizados. Usam a palavra-chave `yield`."
O que são Promises em JavaScript?,"São objetos que representam a eventual conclusão (ou falha) de uma operação assíncrona, e seu valor resultante."
Quais são os estados de uma Promise em JavaScript?,"Pendente (pending), Cumprida (fulfilled) e Rejeitada (rejected)."
O que são as palavras-chave `async` e `await` em JavaScript?,"`async` define uma função assíncrona, que sempre retorna uma Promise. `await` pausa a execução da função assíncrona até que a Promise seja resolvida ou rejeitada."
O que é tratamento de erros em JavaScript e como é geralmente feito?,É o processo de identificar e lidar com erros que ocorrem durante a execução do código. Geralmente feito com blocos `try...catch`.
O que é o bloco `finally` em um bloco `try...catch` em JavaScript?,"É um bloco de código que sempre é executado, independentemente de ocorrer ou não um erro no bloco `try`."
O que são expressões regulares (RegEx) em JavaScript?,São padrões usados para corresponder a combinações de caracteres em strings.
Como se cria uma expressão regular em JavaScript?,Usando literais ( `/padrão/` ) ou o construtor `new RegExp('padrão')`.
O que é o método `String.prototype.match()` em JavaScript?,Procura por uma correspondência entre uma expressão regular e uma string e retorna um array com os resultados ou `null` se não houver correspondência.
O que é o método `String.prototype.search()` em JavaScript?,Procura por uma correspondência entre uma expressão regular e uma string e retorna o índice da primeira correspondência ou -1 se não houver correspondência.
Quais são alguns modificadores comuns em expressões regulares em JavaScript?,"`i` (ignorar maiúsculas/minúsculas), `g` (global, encontrar todas as correspondências) e `m` (multilinhas)."
O que é o método `encodeURIComponent()` em JavaScript?,Codifica um URI (Uniform Resource Identifier) para que ele possa ser transmitido pela Internet.
O que é o método `decodeURIComponent()` em JavaScript?,Decodifica um URI que foi codificado usando `encodeURIComponent()`.
O que é o objeto `Date` em JavaScript?,É um objeto nativo que representa um único momento no tempo.
Como se obtém a data e hora atual em JavaScript?,`new Date()`.
Como se obtém o ano de um objeto `Date` em JavaScript?,Utiliza-se o método `getFullYear()`.
Como se obtém o mês de um objeto `Date` em JavaScript?,"Utiliza-se o método `getMonth()`. Retorna um valor de 0 a 11 (0 = Janeiro, 11 = Dezembro)."
Como se obtém o dia do mês de um objeto `Date` em JavaScript?,Utiliza-se o método `getDate()`.
O que é o método `JSON.stringify()` em JavaScript?,Converte um objeto JavaScript em uma string JSON.
O que é o método `JSON.parse()` em JavaScript?,Converte uma string JSON em um objeto JavaScript.
O que é o `this` em JavaScript?,É uma palavra-chave que se refere ao contexto de execução atual. Seu valor depende de como a função é chamada.
Qual a diferença do valor de `this` em funções normais e arrow functions?,"Em funções normais, `this` é dinâmico e depende de como a função é chamada. Em arrow functions, `this` é léxico, ou seja, herda o `this` do contexto envolvente."
Como se pode forçar o valor de `this` dentro de uma função em JavaScript?,"Utilizando os métodos `call()`, `apply()` ou `bind()`."
O que é o método `call()` em JavaScript?,Chama uma função com um dado valor `this` e argumentos fornecidos individualmente.
O que é o método `apply()` em JavaScript?,Chama uma função com um dado valor `this` e argumentos fornecidos como um array.
O que é o método `bind()` em JavaScript?,"Cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido."
O que é o strict mode em JavaScript?,"É um modo restrito de execução do JavaScript que impõe regras mais rigorosas e ajuda a evitar erros comuns. É ativado adicionando `""use strict"";` no início do script ou da função."
O que são objetos globais em JavaScript? Dê exemplos.,"São objetos que estão disponíveis em todos os contextos de execução. Exemplos: `window` (em navegadores), `global` (em Node.js), `Math`, `Date`, `Array`, `String`."
O que são IIFEs (Immediately Invoked Function Expressions) em JavaScript?,São funções que são criadas e executadas imediatamente após sua definição. São usadas para criar escopos isolados e evitar conflitos de nomes. Exemplo: `(function() { // código })();`
O que é o padrão de módulo em JavaScript?,"É um padrão de design que permite encapsular o código e expor apenas as partes necessárias para o exterior, criando um módulo autocontido."
Como se cria um módulo em JavaScript usando IIFE?,Envolvendo o código em uma IIFE e retornando um objeto com as propriedades e métodos que se deseja expor.
O que é o método `Object.keys()` em JavaScript?,Retorna um array com os nomes das propriedades enumeráveis de um objeto.
O que é o método `Object.values()` em JavaScript?,Retorna um array com os valores das propriedades enumeráveis de um objeto.
O que é o método `Object.entries()` em JavaScript?,"Retorna um array de arrays, onde cada subarray contém a chave e o valor de uma propriedade enumerável de um objeto."
O que é o método `Object.assign()` em JavaScript?,Copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto destino.
O que é o método `Object.freeze()` em JavaScript?,"Congela um objeto, impedindo que novas propriedades sejam adicionadas, que propriedades existentes sejam removidas e que seus valores sejam modificados."
O que é o método `Object.seal()` em JavaScript?,"Veda um objeto, impedindo que novas propriedades sejam adicionadas e que propriedades existentes sejam removidas, mas permitindo que seus valores sejam modificados."
O que é o прототип em JavaScript?,É um objeto associado a cada função e objeto em JavaScript. Ele fornece propriedades e métodos que podem ser herdados por outros objetos.
Como funciona a herança prototípica em JavaScript?,"Quando se tenta acessar uma propriedade ou método em um objeto, o JavaScript primeiro procura no próprio objeto. Se não encontrar, procura no protótipo do objeto, e assim por diante, até chegar ao protótipo do protótipo (a cadeia de protótipos)."
Como se define o protótipo de um objeto em JavaScript?,Usando a propriedade `prototype` do construtor do objeto ou usando o método `Object.setPrototypeOf()`.
O que é a palavra-chave `class` em JavaScript?,"É uma sintaxe mais clara e concisa para criar objetos e herança prototípica em JavaScript, introduzida no ECMAScript 2015 (ES6)."
Como se cria uma classe em JavaScript?,"Utiliza-se a palavra-chave `class` seguida do nome da classe e, dentro das chaves, define-se o construtor e os métodos da classe."
O que é o construtor de uma classe em JavaScript?,É um método especial dentro da classe que é chamado quando um novo objeto da classe é criado. É usado para inicializar as propriedades do objeto.
Como se herda de outra classe em JavaScript?,Utiliza-se a palavra-chave `extends`.
O que é a palavra-chave `super` em JavaScript?,É usada dentro de uma classe filha para chamar o construtor da classe pai ou acessar métodos da classe pai.
O que são getters e setters em JavaScript?,"São métodos especiais dentro de uma classe que permitem acessar e modificar propriedades de um objeto de forma controlada. Getters são usados para obter o valor de uma propriedade, e setters são usados para definir o valor de uma propriedade."
O que são métodos estáticos em JavaScript?,"São métodos que pertencem à classe em si, e não a instâncias da classe. São chamados diretamente na classe, e não em objetos criados a partir da classe."
O que é o padrão Observer em JavaScript?,"É um padrão de projeto de software que define uma dependência um-para-muitos entre objetos, de forma que quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
O que é o padrão Singleton em JavaScript?,É um padrão de projeto de software que restringe a instanciação de uma classe a um único objeto. Isso é útil quando é necessário ter uma única instância de um objeto para coordenar ações em todo o sistema.
O que é o padrão Factory em JavaScript?,"É um padrão de projeto de software que fornece uma interface para criar objetos em uma superclasse, mas permite que as subclasses alterem o tipo de objetos que serão criados."
O que são WeakMaps em JavaScript?,"São coleções de pares chave/valor onde as chaves devem ser objetos. As referências aos objetos nas chaves são ""fracas"", o que significa que, se não houver outras referências ao objeto, ele pode ser coletado pelo coletor de lixo."
O que são WeakSets em JavaScript?,"São coleções de objetos. Assim como WeakMaps, as referências aos objetos são ""fracas"", o que significa que, se não houver outras referências ao objeto, ele pode ser coletado pelo coletor de lixo."
O que são Iterators em JavaScript?,São objetos que definem uma sequência e retornam um valor por vez. Eles implementam um método `next()` que retorna um objeto com as propriedades `value` (o próximo valor da sequência) e `done` (um booleano indicando se a sequência terminou).
O que são Iterables em JavaScript?,São objetos que podem ser iterados usando um loop `for...of`. Eles implementam um método `Symbol.iterator()` que retorna um objeto iterador.
O que é o método `Symbol.iterator` em JavaScript?,"É um símbolo especial que define o iterador padrão para um objeto. Quando um objeto implementa esse método, ele se torna iterável e pode ser usado em loops `for...of`."
O que é o Garbage Collector em JavaScript?,É um processo automático que libera a memória que não está mais sendo usada pelo programa. Ele identifica e remove objetos que não têm mais referências a eles.
O que são Memory Leaks em JavaScript?,"São situações em que a memória não é liberada corretamente pelo coletor de lixo, levando ao aumento do uso de memória ao longo do tempo e, eventualmente, podendo causar lentidão ou travamento do programa."
Como evitar Memory Leaks em JavaScript?,"Evitando referências circulares, removendo ouvintes de eventos desnecessários, liberando referências a objetos grandes quando não forem mais necessários, e utilizando ferramentas de análise de memória para identificar problemas."
O que é o Event Loop em JavaScript?,"É um mecanismo que permite que o JavaScript execute operações assíncronas de forma não bloqueante. Ele gerencia a fila de tarefas e a pilha de chamadas, garantindo que o código seja executado em ordem e que as operações assíncronas sejam tratadas quando estiverem prontas."
O que é a Call Stack em JavaScript?,"É uma estrutura de dados que rastreia a sequência de funções que estão sendo executadas em um determinado momento. Quando uma função é chamada, ela é adicionada à pilha. Quando a função termina de ser executada, ela é removida da pilha."
O que é a Task Queue em JavaScript?,"É uma fila que contém as tarefas assíncronas que estão esperando para serem executadas. Quando uma operação assíncrona é concluída, sua função de callback é adicionada à fila. O Event Loop pega as tarefas da fila e as coloca na Call Stack quando a Call Stack está vazia."
O que são microtasks em JavaScript?,São tarefas que têm prioridade sobre as tarefas normais na Task Queue. Promises e `MutationObserver` usam microtasks.
Qual a ordem de prioridade de execução das tarefas no Event Loop?,1. Call Stack. 2. Microtask Queue. 3. Task Queue.
O que é o método `Object.create()` em JavaScript?,"Cria um novo objeto, usando um objeto existente como protótipo."
O que é a diferença entre herança clássica e prototípica em JavaScript?,"A herança clássica (comum em outras linguagens) se baseia em classes, enquanto a herança prototípica se baseia em protótipos de objetos. Em JavaScript, a herança é prototípica."
O que é Currying em JavaScript?,Currying é uma técnica de transformação de uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.
O que é Memoization em JavaScript?,Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras e retorna o resultado armazenado em cache quando as mesmas entradas ocorrem novamente.
O que são side effects em JavaScript?,"São alterações de estado que uma função faz fora do seu escopo local. Exemplos: modificar variáveis globais, fazer chamadas de API, manipular o DOM."
O que são funções puras em JavaScript?,São funções que não têm side effects e sempre retornam o mesmo resultado para as mesmas entradas.
O que é Composição de Funções em JavaScript?,É uma técnica de combinar duas ou mais funções para criar uma nova função. O resultado de uma função é passado como argumento para a próxima função.
O que é a programação reativa em JavaScript?,É um paradigma de programação que lida com fluxos de dados assíncronos e a propagação da mudança. Observables são um conceito central na programação reativa.
O que são Observables em JavaScript?,São fluxos de dados que podem emitir valores ao longo do tempo. Os observadores se inscrevem nos Observables para receber notificações quando novos valores são emitidos.
O que são sujeitos (Subjects) em JavaScript (em programação reativa)?,São um tipo especial de Observable que permite que os valores sejam multicast para vários observadores.
O que são operadores em programação reativa em JavaScript?,"São funções que transformam, filtram ou combinam Observables."
O que é a diferença entre `Observable.subscribe()` e `Observable.pipe()`?,`subscribe()` é usado para iniciar a emissão de valores de um Observable e receber notificações. `pipe()` é usado para aplicar operadores a um Observable para transformá-lo.
O que é o DOM (Document Object Model)?,É uma representação em árvore dos elementos HTML de uma página web. JavaScript pode usar o DOM para manipular o conteúdo e a estrutura da página.
Como se seleciona um elemento HTML pelo seu ID usando JavaScript?,Utiliza-se o método `document.getElementById('idDoElemento')`.
Como se seleciona múltiplos elementos HTML por sua classe usando JavaScript?,Utiliza-se o método `document.getElementsByClassName('nomeDaClasse')`.
Como se seleciona elementos HTML usando seletores CSS em JavaScript?,Utiliza-se o método `document.querySelector('seletorCSS')` (para selecionar o primeiro elemento que corresponde) ou `document.querySelectorAll('seletorCSS')` (para selecionar todos os elementos que correspondem).
Como se altera o conteúdo de um elemento HTML usando JavaScript?,Utiliza-se a propriedade `textContent` ou `innerHTML` do elemento.
Como se adiciona um novo elemento HTML ao DOM usando JavaScript?,"Cria-se o elemento com `document.createElement()`, define-se suas propriedades e atributos, e então o adiciona ao DOM usando métodos como `appendChild()`."
Como se remove um elemento HTML do DOM usando JavaScript?,Utiliza-se o método `removeChild()` do elemento pai.
Como se adiciona ou remove classes CSS de um elemento HTML usando JavaScript?,"Utiliza-se a propriedade `classList` do elemento, que tem métodos como `add()`, `remove()` e `toggle()`."
Como se define um estilo CSS diretamente em um elemento HTML usando JavaScript?,Utiliza-se a propriedade `style` do elemento. Exemplo: `elemento.style.color = 'red';`
O que são eventos em JavaScript?,"São ações ou ocorrências que acontecem no navegador, como cliques, movimentos do mouse, pressionamento de teclas, carregamento de páginas, etc."
Como se adiciona um ouvinte de evento a um elemento HTML usando JavaScript?,"Utiliza-se o método `addEventListener('nomeDoEvento', funçãoDeCallback)`."
O que é a diferença entre `addEventListener()` e `onclick`?,"`addEventListener()` permite adicionar múltiplos ouvintes de eventos a um mesmo elemento, enquanto `onclick` permite apenas um. `addEventListener()` também oferece mais controle sobre o bubbling e capturing."
O que é bubbling de eventos em JavaScript?,"É o processo em que um evento disparado em um elemento se propaga para cima na árvore do DOM, ativando ouvintes de eventos em seus elementos pais."
O que é capturing de eventos em JavaScript?,"É o processo em que um evento se propaga para baixo na árvore do DOM, ativando ouvintes de eventos em seus elementos pais antes de chegar ao elemento alvo. É o oposto de bubbling."
Como se previne o comportamento padrão de um evento em JavaScript?,Utiliza-se o método `preventDefault()` do objeto de evento.
Como se interrompe a propagação de um evento em JavaScript?,Utiliza-se o método `stopPropagation()` do objeto de evento.
O que é event delegation em JavaScript?,É uma técnica de adicionar um ouvinte de evento a um elemento pai em vez de adicionar ouvintes de evento a vários elementos filhos. Isso pode melhorar o desempenho e simplificar o código.
O que é AJAX (Asynchronous JavaScript and XML)?,"É uma técnica que permite que as páginas web se comuniquem com um servidor em segundo plano, sem precisar recarregar a página inteira."
Como se faz uma requisição AJAX usando a API `fetch` em JavaScript?,Utiliza-se a função `fetch('url')` que retorna uma Promise que é resolvida com a resposta do servidor.
O que são cabeçalhos (Headers) em uma requisição HTTP?,"São informações adicionais que são enviadas com a requisição ou resposta HTTP. Eles fornecem informações sobre o tipo de conteúdo, o método HTTP usado, o estado da requisição, etc."
O que são métodos HTTP? Dê exemplos.,"São verbos que definem a ação que deve ser realizada em um recurso no servidor. Exemplos: GET (obter um recurso), POST (criar um novo recurso), PUT (atualizar um recurso existente), DELETE (excluir um recurso)."
O que são códigos de status HTTP? Dê exemplos.,"São códigos numéricos que indicam o estado da requisição HTTP. Exemplos: 200 (OK), 404 (Não Encontrado), 500 (Erro Interno do Servidor)."
O que são cookies?,"São pequenos arquivos de texto que os sites armazenam no computador do usuário para lembrar informações sobre ele, como preferências de idioma, informações de login, etc."
O que é Local Storage?,É uma API que permite que os sites armazenem dados no navegador do usuário de forma persistente. Os dados ficam armazenados mesmo após o navegador ser fechado.
O que é Session Storage?,"É semelhante ao Local Storage, mas os dados são armazenados apenas durante a sessão do navegador. Quando o navegador é fechado, os dados são perdidos."
Qual a diferença entre Local Storage e Session Storage?,"Local Storage armazena dados de forma persistente, enquanto Session Storage armazena dados apenas durante a sessão do navegador."
O que é CORS (Cross-Origin Resource Sharing)?,"É um mecanismo de segurança que restringe o acesso a recursos de um domínio diferente do domínio da página web atual. Ele impede que scripts de um domínio acessem dados de outro domínio, a menos que o servidor do outro domínio permita explicitamente."
Como habilitar o CORS em um servidor?,Configurando o cabeçalho `Access-Control-Allow-Origin` na resposta HTTP do servidor.
O que é o JSONP (JSON with Padding)?,É uma técnica antiga para contornar as restrições de CORS usando a tag `<script>`. Ela envolve a solicitação de dados em um formato JSON envolto em uma função de callback. É menos segura e menos flexível que o CORS.
O que são Web Workers?,"São scripts JavaScript que são executados em segundo plano, separadamente do thread principal do navegador. Eles podem ser usados para realizar tarefas pesadas sem bloquear a interface do usuário."
Como se cria um Web Worker em JavaScript?,"Criando um arquivo JavaScript separado que contém o código do worker, e então criando um objeto `Worker` no thread principal, passando o caminho do arquivo do worker como argumento."
Como se comunica entre o thread principal e um Web Worker?,Usando o método `postMessage()` para enviar mensagens e o evento `message` para receber mensagens.
O que é Code Splitting?,"É uma técnica para dividir o código de uma aplicação em vários bundles menores que podem ser carregados sob demanda. Isso pode melhorar o desempenho inicial da aplicação, pois o navegador não precisa carregar todo o código de uma vez."
O que são Módulos ES (ES Modules)?,São um sistema de módulos padrão para JavaScript que permite organizar o código em arquivos separados e importá-los e exportá-los conforme necessário.
Quais são as palavras-chave `import` e `export` em ES Modules?,"`import` é usado para importar módulos de outros arquivos, e `export` é usado para exportar funções, classes ou variáveis de um módulo.

Espero que esta lista seja útil e cubra uma ampla gama de tópicos importantes em JavaScript. Se precisar de mais alguma coisa, é só pedir!"
O que são closures em JavaScript e por que são úteis?,"Um closure é a combinação de uma função com o ambiente lexical (escopo) onde essa função foi criada. Isso significa que a função ""lembra"" das variáveis que estavam em seu escopo no momento da sua criação, mesmo depois que o escopo original não estiver mais ativo. São úteis para encapsulamento, privacidade de dados e criação de funções ""factory"" (fábricas de funções)."
Explique o conceito de hoisting em JavaScript.,"Hoisting é um comportamento no JavaScript onde as declarações de variáveis (usando `var`) e funções são movidas para o topo do seu escopo antes da execução do código. No entanto, a inicialização das variáveis (atribuição de valores) não é movida. Com `let` e `const`, as variáveis são hoisted, mas não podem ser acessadas antes da declaração (ReferenceError)."
O que é o objeto `arguments` em JavaScript?,"Dentro de uma função JavaScript, `arguments` é um objeto semelhante a um array que contém todos os argumentos passados para a função. Não é um array real, mas pode ser iterado usando um loop `for` tradicional ou convertido para um array usando `Array.from(arguments)` ou o operador spread `[...arguments]`."
Como você pode verificar se uma variável é um array em JavaScript?,"Você pode usar `Array.isArray(variable)` para verificar se uma variável é um array. Também é possível usar `variable instanceof Array`, mas essa abordagem pode falhar se o array foi criado em outro contexto (iframe, por exemplo)."
O que é o método `bind()` em JavaScript e como ele é usado?,"O método `bind()` cria uma nova função que, quando chamada, tem sua palavra-chave `this` definida para o valor fornecido.  Ele também permite predefinir argumentos para a função original. É usado principalmente para controlar o contexto de `this` dentro de funções."
Explique o que é Event Bubbling em JavaScript.,"Event Bubbling é o processo em que um evento disparado em um elemento DOM se propaga (sobe) pela árvore DOM, disparando os mesmos event listeners em cada elemento pai até chegar ao elemento raiz (`document`)."
O que é Event Capturing em JavaScript?,"Event Capturing é o oposto do Event Bubbling. Em vez de começar no elemento alvo e subir a árvore DOM, o Event Capturing começa no elemento raiz (`document`) e desce a árvore até o elemento alvo, disparando os event listeners no caminho."
Qual a diferença entre `setTimeout` e `setInterval` em JavaScript?,`setTimeout` executa uma função apenas uma vez após um determinado atraso (em milissegundos). `setInterval` executa uma função repetidamente em intervalos regulares (em milissegundos).
O que é o método `forEach()` e como ele funciona?,"`forEach()` é um método de array que executa uma função fornecida uma vez para cada elemento do array. Ele recebe uma função de callback como argumento, que recebe o elemento atual, o índice e o array como parâmetros."
Qual a diferença entre `map()` e `forEach()` em JavaScript?,"Ambos `map()` e `forEach()` iteram sobre um array. `forEach()` executa uma função para cada elemento, mas não retorna nada (ou retorna `undefined`). `map()` também executa uma função para cada elemento, mas retorna um *novo* array com os resultados da aplicação da função a cada elemento."
Como você pode clonar um objeto em JavaScript?,"Para uma cópia superficial, você pode usar `Object.assign({}, originalObject)` ou o operador spread `{...originalObject}`. Para uma cópia profunda (que clona objetos aninhados), você pode usar `JSON.parse(JSON.stringify(originalObject))` (com algumas limitações, como perda de funções e objetos Date)."
Explique como funciona o `this` em JavaScript.,"O valor de `this` em JavaScript depende de como a função é chamada. Em uma função global, `this` se refere ao objeto global (window no navegador, global no Node.js). Em um método de objeto, `this` se refere ao objeto que possui o método. Em uma função chamada com `call`, `apply` ou `bind`, `this` é definido pelo primeiro argumento."
O que é uma função construtora em JavaScript?,"Uma função construtora é uma função usada para criar objetos. Quando uma função é chamada com a palavra-chave `new`, ela se torna um construtor. A função construtora inicializa as propriedades do novo objeto e associa o `this` ao novo objeto."
Como você cria um objeto em JavaScript usando a sintaxe literal de objeto?,"A sintaxe literal de objeto usa chaves `{}` para definir um objeto. As propriedades são definidas dentro das chaves como pares chave-valor, separados por dois pontos `:`. Exemplo: `const pessoa = { nome: ""João"", idade: 30 };`."
O que é o protótipo em JavaScript?,"Cada objeto em JavaScript tem um protótipo. O protótipo é outro objeto do qual o objeto atual herda propriedades e métodos. Quando você tenta acessar uma propriedade de um objeto, o JavaScript primeiro procura na própria propriedade do objeto. Se não a encontrar, ele procura no protótipo do objeto, e assim por diante, até chegar ao protótipo final, que é `null`."
Explique o que são funções de primeira classe (First-Class Functions) em JavaScript.,"Funções de primeira classe significam que as funções em JavaScript são tratadas como qualquer outra variável. Elas podem ser atribuídas a variáveis, passadas como argumentos para outras funções e retornadas como valores de outras funções."
"Qual a diferença entre `var`, `let` e `const` em JavaScript?","`var` tem escopo de função ou escopo global. `let` e `const` têm escopo de bloco. `var` é hoisted e pode ser acessado antes da declaração (retorna `undefined`). `let` e `const` são hoisted, mas não podem ser acessados antes da declaração (ReferenceError). `const` declara uma variável cujo valor não pode ser reatribuído após a inicialização."
O que é desestruturação (destructuring) em JavaScript?,"Desestruturação é uma forma de extrair valores de objetos ou arrays e atribuí-los a variáveis de forma concisa. Por exemplo, `const { nome, idade } = pessoa;` extrai as propriedades `nome` e `idade` do objeto `pessoa`."
Explique o que é o operador spread em JavaScript.,O operador spread (`...`) permite expandir um iterável (como um array ou string) em locais onde se espera múltiplos argumentos (em chamadas de função) ou múltiplos elementos (em literais de array e objeto).
Como você itera sobre as propriedades de um objeto em JavaScript?,"Você pode usar um loop `for...in` para iterar sobre as chaves de um objeto. Por exemplo: `for (let chave in objeto) { console.log(chave, objeto[chave]); }`."
O que é o método `reduce()` em JavaScript e como ele funciona?,"`reduce()` é um método de array que aplica uma função (reducer) a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor. A função reducer recebe o acumulador, o elemento atual, o índice e o array como parâmetros."
O que são funções assíncronas (`async/await`) em JavaScript?,"`async/await` são construções sintáticas que facilitam o trabalho com código assíncrono em JavaScript, tornando-o mais legível e semelhante a código síncrono. `async` declara uma função assíncrona que sempre retorna uma Promise. `await` pausa a execução da função assíncrona até que a Promise seja resolvida ou rejeitada."
O que é uma Promise em JavaScript?,"Uma Promise é um objeto que representa o eventual (futuro) resultado de uma operação assíncrona. Uma Promise pode estar em um dos três estados: pendente (pending), resolvida (fulfilled) ou rejeitada (rejected)."
Como você lida com erros em Promises em JavaScript?,Você pode usar o método `.catch()` para lidar com erros em Promises. O método `.catch()` é chamado quando a Promise é rejeitada. Você também pode usar o bloco `try...catch` dentro de uma função `async` para lidar com erros lançados por `await`.
"Qual a diferença entre `call()`, `apply()` e `bind()` em JavaScript?","Todos os três são usados para definir o valor de `this` dentro de uma função. `call()` e `apply()` invocam a função imediatamente. `call()` recebe os argumentos individualmente, enquanto `apply()` recebe os argumentos como um array. `bind()` retorna uma nova função com o `this` definido e os argumentos predefinidos, mas não a invoca imediatamente."
O que é o padrão de módulo (module pattern) em JavaScript?,"O padrão de módulo é uma forma de encapsular código JavaScript, fornecendo privacidade (variáveis e funções privadas) e um namespace para evitar conflitos de nomes globais. Ele geralmente usa closures para manter o estado privado."
Explique o que é a função `Object.create()` em JavaScript.,`Object.create()` cria um novo objeto com o protótipo especificado e propriedades opcionais. É uma maneira de criar herança prototipal em JavaScript.
O que é herança prototipal em JavaScript?,"Herança prototipal é um mecanismo no JavaScript onde os objetos herdam propriedades e métodos de outros objetos através de seus protótipos. Um objeto pode herdar propriedades e métodos de outro objeto, criando uma cadeia de protótipos."
O que é currying em JavaScript?,"Currying é uma técnica que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada. Cada função intermediária retorna outra função que espera o próximo argumento, até que todos os argumentos sejam fornecidos e a função original seja executada."
O que é memoization em JavaScript?,Memoization é uma técnica de otimização que armazena em cache os resultados de chamadas de função caras e retorna o resultado armazenado em cache quando as mesmas entradas ocorrem novamente. Isso pode melhorar significativamente o desempenho de funções recursivas ou computacionalmente intensivas.
O que é o objeto `Map` em JavaScript?,"O objeto `Map` armazena pares chave-valor, onde qualquer valor (objetos e valores primitivos) pode ser usado como chave ou valor.  Ele mantém a ordem de inserção das chaves. Diferentemente de objetos tradicionais, as chaves no `Map` podem ser de qualquer tipo de dado."
O que é o objeto `Set` em JavaScript?,"O objeto `Set` permite armazenar valores únicos de qualquer tipo, sejam valores primitivos ou referências de objetos. Ele garante que não haja valores duplicados dentro do conjunto."
Como você converte uma string para um número em JavaScript?,"Você pode usar `parseInt()`, `parseFloat()` ou o operador unário `+`. `parseInt()` converte para um inteiro, `parseFloat()` converte para um número de ponto flutuante, e o operador `+` tenta converter a string para um número."
Como você converte um número para uma string em JavaScript?,"Você pode usar o método `toString()` do número ou concatenar o número com uma string vazia (`"""" + numero`)."
O que é Truthy e Falsy em JavaScript?,"Em JavaScript, Truthy são valores que são avaliados como `true` em um contexto booleano, e Falsy são valores que são avaliados como `false`. Os valores Falsy incluem: `false`, `0`, `""""` (string vazia), `null`, `undefined` e `NaN`. Todos os outros valores são Truthy."
O que é NaN em JavaScript?,"NaN (Not-a-Number) é um valor especial que representa um resultado indefinido ou não representável de uma operação numérica. Por exemplo, `0/0` ou `parseInt(""abc"")` resultam em NaN. NaN é uma propriedade do objeto global."
Como você verifica se um valor é NaN em JavaScript?,"Você pode usar a função `isNaN()`. No entanto, `isNaN()` pode ter um comportamento inesperado porque tenta converter o valor para um número primeiro. É mais seguro usar `Number.isNaN()`, que verifica se o valor é estritamente NaN sem tentar convertê-lo."
O que é um IIFE (Immediately Invoked Function Expression) em JavaScript?,"Um IIFE (Expressão de Função Invocada Imediatamente) é uma função JavaScript que é definida e executada imediatamente após a sua criação. Ele é usado para criar um escopo privado, protegendo variáveis e funções internas de interferência externa."
O que é 'use strict' em JavaScript?,"`'use strict'` é uma diretiva que habilita o modo estrito em JavaScript. O modo estrito impõe um conjunto mais restritivo de regras para o código, ajudando a prevenir erros comuns e tornando o código mais seguro e fácil de depurar."
O que são higher-order functions em JavaScript?,Higher-order functions são funções que recebem outras funções como argumentos ou retornam outras funções como resultados. Elas são um conceito fundamental na programação funcional e permitem criar código mais abstrato e reutilizável.
O que é recursão em JavaScript?,Recursão é uma técnica de programação onde uma função chama a si mesma dentro de sua própria definição. É usado para resolver problemas que podem ser divididos em subproblemas menores e semelhantes.
Como você interrompe a propagação de um evento em JavaScript?,Você pode usar o método `event.stopPropagation()` para impedir que um evento se propague para os elementos pais na árvore DOM (Event Bubbling). Você também pode usar `event.stopImmediatePropagation()` para impedir que outros event listeners no mesmo elemento sejam executados.
Como você previne o comportamento padrão de um evento em JavaScript?,"Você pode usar o método `event.preventDefault()` para impedir que o navegador execute a ação padrão associada a um evento. Por exemplo, você pode impedir que um link siga o URL ou que um formulário seja enviado."
O que é type coercion em JavaScript?,"Type coercion é a conversão automática (implícita) de valores de um tipo de dados para outro pelo JavaScript. Isso pode ocorrer durante operações aritméticas, comparações ou outras operações."
O que é a diferença entre funções declaradas e expressões de função em JavaScript?,Uma declaração de função é definida usando a palavra-chave `function` seguida pelo nome da função. Ela é hoisted para o topo do seu escopo. Uma expressão de função é criada atribuindo uma função anônima a uma variável. Ela não é hoisted.
O que são promessas (Promises) em JavaScript e como elas ajudam com o código assíncrono?,"Promessas são objetos que representam o resultado eventual (sucesso ou falha) de uma operação assíncrona. Elas ajudam a evitar o ""callback hell"" (aninhamento excessivo de callbacks) e tornam o código assíncrono mais fácil de ler e gerenciar."
O que são objetos proxy em JavaScript?,"Objetos Proxy permitem interceptar e personalizar operações fundamentais em objetos (como leitura, escrita, enumeração, etc.). Eles são usados para criar comportamentos personalizados para objetos, como validação, logging ou virtualização."
O que são WeakMap e WeakSet em JavaScript e qual a sua utilidade?,"`WeakMap` e `WeakSet` são versões fracas de `Map` e `Set`. A diferença é que as chaves de um `WeakMap` devem ser objetos (e não podem ser tipos primitivos) e os valores em um `WeakSet` devem ser objetos. Se um objeto usado como chave em um `WeakMap` ou como valor em um `WeakSet` não for mais referenciado por nenhum outro lugar no código, ele pode ser coletado pelo garbage collector, liberando a memória. Isso evita vazamentos de memória."
Como você pode comparar dois objetos em JavaScript para verificar se são iguais?,"A comparação direta de objetos (`obj1 === obj2`) verifica apenas se as referências são iguais, não se os conteúdos são iguais. Para comparar os conteúdos, você precisa iterar sobre as propriedades e comparar os valores ou usar bibliotecas especializadas para comparações profundas. `JSON.stringify(obj1) === JSON.stringify(obj2)` pode funcionar para objetos simples, mas tem limitações (ordem das propriedades, funções, etc.)."
O que é o Garbage Collector (Coletor de Lixo) em JavaScript e como ele funciona?,"O Garbage Collector é um processo automático que libera a memória ocupada por objetos que não são mais usados pelo programa. O JavaScript usa um garbage collector ""mark-and-sweep"" (marcar e limpar) que identifica quais objetos são alcançáveis a partir das raízes (variáveis globais, pilha de execução, etc.) e marca esses objetos como ""vivos"". Em seguida, ele limpa a memória ocupada pelos objetos não marcados como ""vivos""."
O que é strict mode em JavaScript e quais suas vantagens?,"Strict mode é um modo restritivo em JavaScript que ajuda a escrever código mais seguro e limpo. Ele elimina alguns comportamentos ""silenciosos"" do JavaScript (que não lançam erros, mas podem causar problemas) e lança erros em vez disso. Algumas vantagens são: impede o uso de variáveis não declaradas, proíbe a atribuição a propriedades somente leitura e aumenta a segurança."
Explique o conceito de Shadowing de variáveis em JavaScript.,"Shadowing de variáveis ocorre quando uma variável declarada dentro de um escopo interno (como uma função ou bloco) tem o mesmo nome de uma variável declarada em um escopo externo. A variável interna ""sombra"" a variável externa dentro do escopo interno, tornando a variável externa inacessível nesse escopo."
Como você seleciona um elemento HTML no DOM usando JavaScript?,"Você pode usar métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`, `document.querySelector()` e `document.querySelectorAll()` para selecionar elementos HTML no DOM."
Como você modifica o conteúdo de um elemento HTML no DOM usando JavaScript?,"Você pode usar a propriedade `textContent` ou `innerHTML` para modificar o conteúdo de um elemento HTML. `textContent` define o conteúdo de texto do elemento, enquanto `innerHTML` define o conteúdo HTML do elemento."
Como você adiciona um novo elemento HTML ao DOM usando JavaScript?,"Você pode criar um novo elemento usando `document.createElement()`, definir suas propriedades e, em seguida, adicioná-lo ao DOM usando métodos como `appendChild()`, `insertBefore()` ou `insertAdjacentHTML()`."
Como você remove um elemento HTML do DOM usando JavaScript?,Você pode remover um elemento HTML usando o método `removeChild()` do elemento pai ou o método `remove()` do próprio elemento.
O que são atributos de dados (data attributes) em HTML e como você os acessa em JavaScript?,"Atributos de dados são atributos personalizados que você pode adicionar a elementos HTML usando o prefixo `data-`. Eles permitem armazenar dados adicionais sobre o elemento. Você pode acessá-los em JavaScript usando a propriedade `dataset` do elemento. Por exemplo, `element.dataset.nomeDoAtributo`."
Como você adiciona um event listener a um elemento HTML usando JavaScript?,"Você pode usar o método `addEventListener()` para adicionar um event listener a um elemento HTML. O método recebe o nome do evento (por exemplo, ""click"", ""mouseover"") e a função de callback que será executada quando o evento ocorrer."
Como você remove um event listener de um elemento HTML usando JavaScript?,Você pode usar o método `removeEventListener()` para remover um event listener de um elemento HTML. Você precisa passar o mesmo nome de evento e a mesma função de callback que foram usados ao adicionar o event listener.
O que são cookies em JavaScript?,"Cookies são pequenos arquivos de texto que são armazenados no navegador do usuário por um site. Eles são usados para armazenar informações sobre o usuário, como preferências, dados de login ou itens no carrinho de compras."
"Como você define, lê e exclui cookies em JavaScript?","Você pode acessar e manipular cookies usando a propriedade `document.cookie`. Para definir um cookie, você atribui uma string com o formato ""nome=valor; expires=data; path=caminho"" a `document.cookie`. Para ler os cookies, você analisa a string `document.cookie`. Para excluir um cookie, você define o valor do cookie para uma string vazia e define a data de expiração para um tempo passado."
O que é o Local Storage e o Session Storage em JavaScript?,"Local Storage e Session Storage são APIs de armazenamento web que permitem armazenar dados localmente no navegador do usuário. Local Storage armazena dados permanentemente (a menos que sejam explicitamente excluídos), enquanto Session Storage armazena dados apenas durante a sessão atual do navegador."
"Como você armazena, lê e remove dados do Local Storage e do Session Storage em JavaScript?","Você pode usar os métodos `localStorage.setItem()`, `localStorage.getItem()` e `localStorage.removeItem()` para armazenar, ler e remover dados do Local Storage, respectivamente. Você pode usar os métodos `sessionStorage.setItem()`, `sessionStorage.getItem()` e `sessionStorage.removeItem()` para armazenar, ler e remover dados do Session Storage."
O que é JSON (JavaScript Object Notation)?,"JSON (JavaScript Object Notation) é um formato leve de intercâmbio de dados. É baseado em um subconjunto da linguagem JavaScript e é fácil para humanos lerem e escreverem, e fácil para máquinas analisarem e gerarem."
Como você converte um objeto JavaScript para JSON e vice-versa?,Você pode usar o método `JSON.stringify()` para converter um objeto JavaScript para JSON. Você pode usar o método `JSON.parse()` para converter uma string JSON para um objeto JavaScript.
Como você faz uma requisição AJAX usando o objeto `XMLHttpRequest` em JavaScript?,"Você cria uma nova instância de `XMLHttpRequest`, define o método HTTP (GET, POST, PUT, DELETE, etc.) e o URL, adiciona um event listener para o evento `onload` para lidar com a resposta do servidor e, em seguida, envia a requisição usando o método `send()`."
O que é a API `fetch` em JavaScript e como ela é usada para fazer requisições HTTP?,A API `fetch` é uma interface moderna para fazer requisições HTTP assíncronas em JavaScript. Ela retorna uma Promise que resolve para a resposta do servidor. Ela é mais fácil de usar e mais poderosa do que o objeto `XMLHttpRequest`.
Como você lida com erros em requisições `fetch` em JavaScript?,Você pode usar o método `.catch()` para lidar com erros na Promise retornada por `fetch()`. Você também pode verificar o status da resposta usando a propriedade `response.ok` e lançar um erro se o status não for bem-sucedido.
O que são CORS (Cross-Origin Resource Sharing)?,CORS (Cross-Origin Resource Sharing) é um mecanismo de segurança do navegador que restringe requisições HTTP feitas de um domínio para outro domínio diferente (cross-origin). Ele impede que sites maliciosos acessem recursos de outros sites sem permissão.
Como você lida com problemas de CORS em JavaScript?,"Você pode habilitar o CORS no servidor definindo os cabeçalhos HTTP apropriados na resposta do servidor, como `Access-Control-Allow-Origin`. Você também pode usar um proxy no seu servidor para fazer a requisição para o outro domínio e, em seguida, retornar a resposta para o seu cliente."
O que é um service worker em JavaScript?,"Um service worker é um script JavaScript que roda em segundo plano, separado da página web, e atua como um proxy entre a página web e a rede. Ele permite implementar funcionalidades como cache offline, notificações push e sincronização em segundo plano."
Como você registra um service worker em JavaScript?,Você pode usar o método `navigator.serviceWorker.register()` para registrar um service worker. O método recebe o URL do script do service worker como argumento.
"O que é o conceito de ""event loop"" em JavaScript?","O event loop é um mecanismo que permite ao JavaScript lidar com operações assíncronas de forma não bloqueante. Ele monitora a pilha de chamadas e a fila de callbacks. Quando a pilha de chamadas está vazia, o event loop move o primeiro callback da fila para a pilha, permitindo que ele seja executado."
"O que é o objeto global em JavaScript (window no navegador, global no Node.js)?","O objeto global é um objeto que existe em todos os escopos em JavaScript. No navegador, o objeto global é a janela (`window`). No Node.js, o objeto global é chamado `global`. Ele contém propriedades e métodos que estão disponíveis globalmente, como `setTimeout()`, `console.log()` e `parseInt()`."
O que é a diferença entre `null` e `object` quando typeof é aplicado?,"`typeof null` retorna ""object"", que é um bug histórico no JavaScript. Na verdade, `null` é um tipo primitivo. `typeof` retorna ""object"" para qualquer objeto, incluindo objetos criados com a sintaxe literal de objeto ou instâncias de classes."
"Explique o conceito de ""Shallow Copy"" (Cópia Superficial) em JavaScript.","Uma cópia superficial cria um novo objeto, mas não copia recursivamente os objetos aninhados. Em vez disso, ela copia as referências aos objetos aninhados do objeto original para o novo objeto. Portanto, se você modificar um objeto aninhado no novo objeto, a mudança também será refletida no objeto original."
"Explique o conceito de ""Deep Copy"" (Cópia Profunda) em JavaScript.",Uma cópia profunda cria um novo objeto e copia recursivamente todos os objetos aninhados do objeto original para o novo objeto. Isso significa que o novo objeto é completamente independente do objeto original e as modificações em um não afetam o outro.
Como você pode verificar se um objeto possui uma determinada propriedade em JavaScript?,Você pode usar o método `hasOwnProperty()` do objeto para verificar se ele possui uma determinada propriedade diretamente (não herdada da cadeia de protótipos). Também pode usar o operador `in` para verificar se a propriedade existe no objeto ou em sua cadeia de protótipos.
Como você cria uma expressão regular em JavaScript?,"Você pode criar uma expressão regular usando a sintaxe literal (entre barras `/`) ou usando o construtor `RegExp()`. Por exemplo: `/padrão/` ou `new RegExp(""padrão"")`."
Quais são os principais métodos para usar expressões regulares em JavaScript?,"Os principais métodos são: `test()` (verifica se uma string corresponde ao padrão), `exec()` (executa uma pesquisa por uma correspondência e retorna informações sobre a correspondência), `match()` (retorna um array com as correspondências) e `replace()` (substitui as correspondências por outra string)."
O que são os quantificadores em expressões regulares?,"Quantificadores especificam quantas vezes um determinado elemento deve ocorrer para que uma correspondência seja encontrada. Exemplos: `*` (zero ou mais vezes), `+` (uma ou mais vezes), `?` (zero ou uma vez), `{n}` (exatamente n vezes), `{n,}` (pelo menos n vezes), `{n,m}` (entre n e m vezes)."
O que são classes de caracteres em expressões regulares?,"Classes de caracteres representam um conjunto de caracteres que podem corresponder a um determinado ponto em uma string. Exemplos: `.` (qualquer caractere, exceto nova linha), `\d` (dígito), `\w` (caractere de palavra), `\s` (espaço em branco), `[abc]` (qualquer um dos caracteres a, b ou c)."
O que são grupos de captura em expressões regulares?,"Grupos de captura são partes de uma expressão regular que são colocadas entre parênteses `()`. Eles permitem capturar as partes da string que correspondem a esses grupos, para que possam ser acessadas posteriormente."
O que são lookarounds (positive e negative lookahead/lookbehind) em expressões regulares?,"Lookarounds são asserções que permitem verificar se um determinado padrão está presente antes ou depois de outro padrão, sem incluir o padrão verificado no resultado da correspondência. Lookahead verifica à frente, lookbehind verifica para trás. Positive lookaround requer que o padrão esteja presente, negative lookaround requer que o padrão *não* esteja presente."
Como você usa modificadores (flags) em expressões regulares em JavaScript?,"Modificadores (flags) alteram o comportamento de uma expressão regular. Os modificadores mais comuns são: `i` (ignora a diferenciação entre maiúsculas e minúsculas), `g` (encontra todas as correspondências, não apenas a primeira) e `m` (permite correspondências em várias linhas)."
O que é o método `padStart()` e `padEnd()` em JavaScript?,"`padStart()` e `padEnd()` são métodos de string que preenchem uma string com outro string (repetidamente, se necessário) para que a string resultante atinja um determinado comprimento. `padStart()` preenche do início da string, enquanto `padEnd()` preenche do final."
O que é o operador de coalescência nula (`??`) em JavaScript?,"O operador de coalescência nula (`??`) retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Caso contrário, ele retorna o operando do lado esquerdo. Ele é usado para fornecer um valor padrão para uma variável que pode ser nula ou indefinida."
O que é o operador de encadeamento opcional (`?.`) em JavaScript?,"O operador de encadeamento opcional (`?.`) permite acessar propriedades de objetos aninhados sem ter que verificar explicitamente se cada nível do objeto existe. Se um nível do objeto for `null` ou `undefined`, o operador retorna `undefined` em vez de lançar um erro."
O que é o conceito de Imutabilidade em JavaScript e como ele é importante?,"Imutabilidade significa que, uma vez que um objeto é criado, seu estado (suas propriedades) não pode ser alterado.  É importante porque simplifica o rastreamento de mudanças, previne efeitos colaterais inesperados e facilita a implementação de otimizações."
Como você pode criar objetos imutáveis em JavaScript?,"Você pode criar objetos imutáveis usando `Object.freeze()`, que impede que novas propriedades sejam adicionadas e que as propriedades existentes sejam modificadas ou removidas. No entanto, `Object.freeze()` faz apenas uma cópia superficial. Para imutabilidade profunda, você precisaria usar bibliotecas ou técnicas de cópia profunda e `Object.freeze()` recursivamente."
O que são iterators e iterables em JavaScript?,"Um iterable é um objeto que define como seus elementos podem ser iterados (percorridos). Ele deve ter um método `Symbol.iterator` que retorna um objeto iterator. Um iterator é um objeto que define como acessar os elementos de um iterable, um por um. Ele deve ter um método `next()` que retorna um objeto com as propriedades `value` (o próximo elemento) e `done` (um booleano indicando se a iteração está completa)."
Como você cria um iterator personalizado em JavaScript?,Você cria um objeto com um método `Symbol.iterator` que retorna um objeto com um método `next()`. O método `next()` deve retornar um objeto com as propriedades `value` e `done`.
O que é uma coleção em JavaScript?,"Uma coleção é um tipo de dado que armazena um conjunto de dados.  Exemplos incluem arrays, objetos, Sets e Maps. Cada tipo de coleção tem suas próprias características em termos de como os dados são armazenados e acessados."
Qual a diferença entre um Array e um Set em JavaScript?,"Um Array é uma lista ordenada de valores, que podem ser duplicados. Um Set é uma coleção de valores únicos, sem uma ordem específica. Sets oferecem performance melhor para verificar se um elemento já existe na coleção."
Qual a diferença entre um Objeto e um Map em JavaScript?,"Ambos Objeto e Map armazenam pares chave-valor, mas"
"O que é o ""hoisting"" em JavaScript e como ele afeta as variáveis declaradas com `var`, `let` e `const`?","Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted e inicializadas com `undefined`. Variáveis declaradas com `let` e `const` são hoisted, mas não são inicializadas (ficam em um ""temporal dead zone"") até que a declaração seja alcançada no código, resultando em um erro se forem acessadas antes."
"O que é uma ""closure"" em JavaScript?","Uma closure é a combinação de uma função e o ambiente léxico no qual essa função foi declarada. Em outras palavras, uma closure permite que uma função interna acesse variáveis do escopo de uma função externa, mesmo após a função externa ter terminado sua execução."
"Explique o conceito de ""currying"" em JavaScript.","Currying é uma técnica em JavaScript (e em programação funcional em geral) que transforma uma função que recebe múltiplos argumentos em uma sequência de funções, onde cada função recebe um único argumento. Cada função retorna a próxima função na sequência até que todos os argumentos sejam fornecidos, momento em que a função original é executada."
"O que são ""template literals"" e quais são suas vantagens?","Template literals são strings literais delimitadas por acentos graves (``). Eles permitem a interpolação de expressões JavaScript e strings multi-linha, tornando o código mais legível e conciso. A interpolação é feita usando `${expressão}`."
Descreva o que é o objeto `arguments` em JavaScript.,"`arguments` é um objeto array-like (não é um array real) disponível dentro de todas as funções não-arrow, contendo os argumentos passados para a função. Pode ser acessado por índice (arguments[0], arguments[1], etc.) e possui uma propriedade `length`."
"O que é ""event bubbling"" e ""event capturing"" no DOM?","Event bubbling é o processo em que um evento disparado em um elemento DOM se propaga para cima na árvore DOM, acionando os manipuladores de eventos dos elementos pai. Event capturing é o processo inverso, onde o evento é capturado pelo elemento mais externo antes de chegar ao elemento alvo."
"O que é a ""temporal dead zone"" em JavaScript?","A ""temporal dead zone"" (TDZ) é a área no código onde uma variável declarada com `let` ou `const` existe, mas não pode ser acessada antes de sua declaração ser alcançada no código. Acessar a variável na TDZ resulta em um `ReferenceError`."
Explique o uso do operador `void` em JavaScript.,O operador `void` avalia uma expressão e retorna `undefined`. É frequentemente usado para evitar que o navegador siga um link `javascript:` ou para suprimir o valor de retorno de uma função.
"O que é ""strict mode"" em JavaScript e como ativá-lo?","""Strict mode"" é um modo restrito de execução do JavaScript que impõe regras mais rígidas, ajuda a evitar erros comuns e torna o código mais otimizado. É ativado adicionando `""use strict"";` no início de um script ou função."
Como funciona o garbage collection em JavaScript?,"O garbage collection em JavaScript é um processo automático que libera a memória alocada para objetos que não são mais referenciados. O motor JavaScript rastreia objetos e, quando um objeto não é mais acessível a partir da raiz (por exemplo, variáveis globais), ele é marcado para coleta de lixo e sua memória é liberada."
"O que são ""proxies"" em JavaScript?","Proxies permitem interceptar e personalizar operações fundamentais em objetos, como leitura, escrita, enumeração e chamadas de função. Eles são criados usando o construtor `Proxy` e um manipulador (handler) que define o comportamento das operações interceptadas."
Descreva o propósito e o uso do método `Object.freeze()` em JavaScript.,`Object.freeze()` impede que novas propriedades sejam adicionadas a um objeto e impede que as propriedades existentes sejam removidas ou alteradas. O objeto congelado torna-se imutável.
Explique a diferença entre as funções `map()` e `forEach()` em arrays.,"`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. `forEach()` executa uma função fornecida uma vez para cada elemento do array, mas não retorna um novo array."
"O que são ""generators"" em JavaScript e como eles funcionam?","Generators são funções que podem ser pausadas e retomadas, permitindo que produzam múltiplos valores ao longo do tempo. São definidas usando a sintaxe `function*` e usam a palavra-chave `yield` para retornar um valor e pausar a execução."
"Qual a diferença entre `apply()`, `call()` e `bind()` em JavaScript?","`apply()` e `call()` são usados para invocar uma função com um determinado valor `this` e argumentos. `apply()` recebe os argumentos como um array, enquanto `call()` recebe os argumentos individualmente. `bind()` cria uma nova função com o valor `this` especificado, mas não invoca a função imediatamente."
"O que é um ""promise"" em JavaScript e como ele resolve o problema do ""callback hell""?","Um promise é um objeto que representa o resultado eventual de uma operação assíncrona. Ele pode estar em um dos três estados: pendente, cumprido (resolved) ou rejeitado (rejected). Promises ajudam a evitar o ""callback hell"" encadeando operações assíncronas usando `.then()` e `.catch()`."
Explique o uso de `async` e `await` em JavaScript.,"`async` e `await` são palavras-chave que simplificam o trabalho com promises. `async` declara uma função como assíncrona, permitindo que use `await` dentro dela. `await` pausa a execução da função até que a promise seja resolvida ou rejeitada, retornando o valor resolvido ou lançando o erro rejeitado."
"O que são ""modules"" em JavaScript (ES Modules)?",ES Modules são a forma padrão de modularizar o código JavaScript. Eles permitem dividir o código em arquivos separados (módulos) e importar/exportar funcionalidades entre eles usando `import` e `export`.
Descreva o uso do método `reduce()` em arrays.,`reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
"O que é ""debounce"" e ""throttle"" e quando devemos usá-los?","Debounce e throttle são técnicas para limitar a taxa de execução de uma função, geralmente em resposta a eventos frequentes como rolagem ou redimensionamento. Debounce atrasa a execução da função até que um certo período de inatividade tenha passado. Throttle executa a função no máximo uma vez a cada certo período de tempo."
Como funciona o operador `??` (nullish coalescing operator) em JavaScript?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Caso contrário, retorna o operando do lado esquerdo. É diferente do `||` (operador OR lógico) que retorna o operando do lado direito se o operando do lado esquerdo for ""falsy"" (por exemplo, `0`, `""""`, `false`)."
"O que são ""weak references"" (WeakMap e WeakSet) e qual a sua utilidade?","WeakMap e WeakSet são coleções que mantêm referências ""fracas"" aos seus objetos. Isso significa que, se não houver outras referências a um objeto armazenado em um WeakMap ou WeakSet, o garbage collector pode liberar a memória do objeto, e a entrada no WeakMap/WeakSet será automaticamente removida. São úteis para associar dados a objetos DOM sem impedir que eles sejam coletados pelo garbage collector."
"O que é ""Tail Call Optimization"" (TCO) e como o JavaScript lida com isso?","Tail Call Optimization (TCO) é uma otimização que permite que uma chamada de função no final de outra função (uma ""tail call"") seja executada sem adicionar um novo quadro à pilha de chamadas. Isso evita o estouro da pilha em chamadas recursivas. O JavaScript moderno geralmente não implementa TCO de forma confiável."
Descreva como funciona o método `Object.create()` em JavaScript.,`Object.create()` cria um novo objeto com o objeto especificado como seu protótipo. Isso permite criar uma cadeia de protótipos e implementar herança prototípica.
"O que são ""symbols"" em JavaScript e quais são seus casos de uso?",Symbols são um tipo de dado primitivo introduzido no ES6 que representam um identificador único e imutável. São frequentemente usados para adicionar propriedades privadas a objetos ou para evitar conflitos de nomes em propriedades de objetos.
Qual a diferença entre `Array.isArray()` e `instanceof Array` em JavaScript?,"`Array.isArray()` verifica se um valor é um array de forma mais precisa do que `instanceof Array`. `instanceof Array` pode falhar em alguns casos, especialmente quando lidando com arrays de diferentes contextos (por exemplo, diferentes frames em um navegador)."
"O que é ""destructuring"" em JavaScript?",Destructuring é uma expressão JavaScript que permite extrair valores de objetos ou arrays e atribuí-los a variáveis de forma concisa.
Como funciona o operador spread (`...`) em JavaScript?,"O operador spread (`...`) pode ser usado para expandir um iterável (como um array ou string) em elementos individuais. Ele é usado em diversos contextos, como passar argumentos para funções, criar cópias de arrays e objetos, e juntar arrays."
"O que é um ""iterator"" e um ""iterable"" em JavaScript?","Um ""iterable"" é um objeto que pode ser iterado, ou seja, seus elementos podem ser acessados sequencialmente (ex: Arrays, Strings, Maps, Sets). Um ""iterator"" é um objeto que define uma sequência e, ao ser chamado repetidamente (através do método `next()`), retorna um objeto com duas propriedades: `value` (o próximo valor da sequência) e `done` (um booleano indicando se a sequência terminou)."
"Explique o conceito de ""hoisting"" para funções em JavaScript.","Funções declaradas usando a sintaxe `function declaration` são hoisted, o que significa que elas podem ser chamadas antes de serem declaradas no código. Funções declaradas usando `function expression` (ex: `const myFunction = function() {}`) são hoisted como variáveis, e portanto, não podem ser chamadas antes da declaração."
"O que é um ""Map"" e como ele se diferencia de um objeto literal em JavaScript?","Um `Map` é uma coleção de pares chave-valor, onde tanto as chaves quanto os valores podem ser de qualquer tipo de dado (incluindo objetos). Diferente de objetos literais, as chaves em um `Map` podem ser de qualquer tipo de dado, e a ordem de inserção das chaves é preservada."
"O que é um ""Set"" em JavaScript?",Um `Set` é uma coleção de valores únicos. Isso significa que um `Set` nunca conterá valores duplicados.
Como funciona o método `Object.assign()` em JavaScript?,`Object.assign()` copia os valores de todas as propriedades enumeráveis próprias de um ou mais objetos de origem para um objeto de destino. Ele retorna o objeto de destino. É usado para copiar propriedades de um objeto para outro.
"O que é um ""regex"" (regular expression) em JavaScript e como ele é usado?","Uma regex (regular expression) é um padrão para combinar sequências de caracteres em strings. Elas são usadas para buscar, substituir e validar texto."
"O que são ""event listeners"" em JavaScript e como eles são usados?","Event listeners são funções que ""escutam"" eventos específicos que ocorrem em elementos HTML (ex: click, mouseover, etc.). Quando o evento ocorre, o event listener é executado."
Descreva o uso do método `preventDefault()` em JavaScript.,"`preventDefault()` impede o comportamento padrão de um evento. Por exemplo, em um formulário, impede o envio padrão; em um link, impede a navegação para outra página."
Como funciona o método `stopPropagation()` em JavaScript?,`stopPropagation()` impede que um evento se propague para os elementos pais na árvore DOM (evita o bubbling).
"O que é ""DOM traversal"" em JavaScript?","DOM traversal é o processo de navegar pela estrutura do DOM (Document Object Model) para encontrar, acessar ou manipular elementos HTML."
Explique como usar `querySelector()` e `querySelectorAll()` em JavaScript.,"`querySelector()` retorna o primeiro elemento dentro do documento que corresponde ao seletor CSS especificado. `querySelectorAll()` retorna todos os elementos dentro do documento que correspondem ao seletor CSS especificado, como um NodeList."
O que é o objeto `window` em JavaScript?,"O objeto `window` representa a janela do navegador. É o objeto global em ambientes de navegador e contém propriedades e métodos para interagir com a janela, como `window.alert()`, `window.document`, `window.location`, etc."
Como funciona o método `setTimeout()` em JavaScript?,`setTimeout()` executa uma função ou trecho de código após um determinado atraso (em milissegundos).
O que é o método `setInterval()` em JavaScript?,"`setInterval()` executa uma função ou trecho de código repetidamente, em intervalos de tempo especificados (em milissegundos)."
Descreva o uso de `JSON.stringify()` e `JSON.parse()` em JavaScript.,`JSON.stringify()` converte um objeto JavaScript em uma string JSON. `JSON.parse()` converte uma string JSON de volta em um objeto JavaScript.
"O que é ""localStorage"" e ""sessionStorage"" em JavaScript?","`localStorage` e `sessionStorage` são APIs de armazenamento web que permitem armazenar dados no navegador do usuário. `localStorage` armazena dados permanentemente (a menos que sejam explicitamente removidos), enquanto `sessionStorage` armazena dados apenas durante a sessão do navegador."
"Explique o conceito de ""AJAX"" em JavaScript.","AJAX (Asynchronous JavaScript and XML) é uma técnica que permite que páginas web atualizem conteúdo de forma assíncrona, sem precisar recarregar a página inteira."
"O que é ""CORS"" (Cross-Origin Resource Sharing) e como ele afeta as requisições AJAX?",CORS (Cross-Origin Resource Sharing) é um mecanismo de segurança que restringe requisições HTTP de um script que é executado em uma origem para um recurso em uma origem diferente. É usado para prevenir ataques de cross-site scripting (XSS).
O que é a API `Fetch` em JavaScript e como ela é usada?,A API `Fetch` fornece uma interface para buscar recursos através da rede. Ela retorna um `Promise` que resolve para a resposta da requisição.
"Qual a diferença entre ""call stack"" e ""event loop"" em JavaScript?","A ""call stack"" é uma estrutura de dados que rastreia a execução de funções no JavaScript. O ""event loop"" é um mecanismo que monitora a call stack e a fila de eventos (event queue). Quando a call stack está vazia, o event loop pega o próximo evento da fila de eventos e o coloca na call stack para ser executado."
"O que é ""callback hell"" e como ele pode ser evitado usando promises e async/await?","""Callback hell"" é um padrão de código onde callbacks aninhados tornam o código difícil de ler e manter. Promises e async/await simplificam o tratamento de operações assíncronas e ajudam a evitar o callback hell."
"Explique o conceito de ""prototypal inheritance"" em JavaScript.","Prototypal inheritance é um mecanismo em JavaScript onde objetos herdam propriedades e métodos de outros objetos através de seus protótipos. Cada objeto tem um protótipo, e a cadeia de protótipos é percorrida para encontrar propriedades e métodos."
"O que são ""classes"" em JavaScript (ES6)?","Classes em JavaScript (introduzidas no ES6) são uma forma de sintaxe para criar objetos e implementar herança prototípica. Elas são, na verdade, ""syntactic sugar"" sobre a herança prototípica existente, tornando-a mais fácil de usar."
O que é o operador `super` em JavaScript (dentro de classes)?,O operador `super` é usado dentro de classes para chamar o construtor da classe pai ou para acessar métodos da classe pai.
"Explique o que é ""shadow DOM"".","Shadow DOM é uma tecnologia que permite encapsular o CSS e JavaScript de um componente web, isolando-o do resto da página. Isso evita conflitos de estilo e script."
"O que são ""Custom Elements"" em JavaScript?","Custom Elements permitem que você crie seus próprios elementos HTML personalizados, estendendo a funcionalidade do HTML padrão."
Descreva como funciona o método `Array.from()` em JavaScript.,`Array.from()` cria um novo array a partir de um objeto array-like ou iterable.
"O que são ""tagged templates"" em JavaScript?","Tagged templates são uma forma de usar template literals com uma função ""tag"" que processa o template literal antes de retornar a string final. A função tag recebe o array de strings literais e os valores interpolados como argumentos."
Como você pode verificar se um objeto tem uma propriedade específica em JavaScript?,"Você pode usar os operadores `in` ou `hasOwnProperty()` para verificar se um objeto tem uma propriedade específica. `in` verifica se a propriedade existe no objeto ou em sua cadeia de protótipos, enquanto `hasOwnProperty()` verifica apenas se a propriedade existe diretamente no objeto, sem olhar para a cadeia de protótipos."
"O que é ""memoization"" em JavaScript e como ela é usada?","Memoization é uma técnica de otimização que armazena em cache os resultados de chamadas de função caras para que, quando a mesma entrada ocorrer novamente, o resultado possa ser retornado do cache em vez de ser recalculado."
"O que é ""code splitting"" e por que é importante?","Code splitting é a prática de dividir o código de um aplicativo em vários pacotes menores que podem ser carregados sob demanda. Isso pode melhorar significativamente o desempenho do carregamento inicial, pois o navegador precisa baixar e analisar menos código no início."
"O que é ""tree shaking"" e como ele funciona?",Tree shaking é uma técnica de otimização que remove o código não utilizado de um pacote JavaScript durante o processo de construção. Ele analisa o código para determinar quais funções e variáveis são realmente usadas e descarta o resto.
"Explique o conceito de ""functional programming"" em JavaScript.","Programação funcional é um paradigma de programação que trata a computação como a avaliação de funções matemáticas e evita a mudança de estado e dados mutáveis. Funções são tratadas como cidadãos de primeira classe, podendo ser passadas como argumentos para outras funções e retornadas como valores."
"O que são ""pure functions"" em JavaScript?","Uma ""pure function"" é uma função que sempre retorna o mesmo resultado para as mesmas entradas, e não tem efeitos colaterais (não modifica variáveis fora de seu escopo)."
"O que são ""higher-order functions"" em JavaScript?","""Higher-order functions"" são funções que recebem outras funções como argumentos ou retornam outras funções como resultados."
"O que é ""immutability"" em JavaScript e por que é importante?","Immutability significa que, depois de criado, o estado de um objeto não pode ser alterado. Isso ajuda a evitar efeitos colaterais indesejados e torna o código mais fácil de entender e depurar."
Quais são algumas maneiras de criar objetos imutáveis em JavaScript?,"Você pode usar `Object.freeze()`, a biblioteca Immutable.js, ou abordagens funcionais como `map`, `filter` e `reduce` para criar novas cópias de objetos com as modificações desejadas."
"O que é ""recursion"" em JavaScript?",Recursion é uma técnica de programação onde uma função chama a si mesma para resolver um problema.
Qual é o risco de usar recursão sem um caso base adequado?,"Se uma função recursiva não tiver um caso base adequado para parar a recursão, ela continuará se chamando indefinidamente, levando a um estouro da pilha (stack overflow)."
Como você pode debugar o código JavaScript no navegador?,"A maioria dos navegadores modernos possui ferramentas de desenvolvedor (geralmente acessadas pressionando F12) que permitem definir breakpoints, inspecionar variáveis, examinar a pilha de chamadas e percorrer o código passo a passo."
"O que é o ""console"" em JavaScript e como ele é usado para depuração?","O objeto `console` fornece acesso ao console de depuração do navegador. Ele possui métodos como `console.log()`, `console.warn()`, `console.error()`, e `console.table()` para exibir informações e mensagens de erro durante a depuração."
"O que são ""breakpoints"" e como eles são usados na depuração de JavaScript?",Breakpoints são marcadores colocados no código que fazem com que a execução do programa pause quando atingidos. Isso permite que você inspecione o estado do programa em um ponto específico.
"O que é um ""try...catch"" block em JavaScript e como ele é usado para lidar com erros?","Um bloco `try...catch` é usado para lidar com exceções em JavaScript. O código dentro do bloco `try` é executado e, se uma exceção for lançada, o código dentro do bloco `catch` é executado."
"O que é um ""finally"" block em JavaScript e quando ele é executado?","Um bloco `finally` é executado sempre após o bloco `try` e o bloco `catch`, independentemente de uma exceção ter sido lançada ou não. É usado para realizar limpeza ou liberar recursos."
"O que é um ""throw"" statement em JavaScript e como ele é usado para lançar exceções?","Um statement `throw` é usado para lançar uma exceção em JavaScript. Você pode lançar qualquer valor como uma exceção, mas geralmente é recomendado lançar um objeto `Error`."
"O que são ""error objects"" em JavaScript e quais propriedades eles têm?","Objetos de erro em JavaScript são instâncias da classe `Error` ou de suas subclasses (ex: `TypeError`, `ReferenceError`). Eles geralmente têm propriedades como `name` (o tipo de erro), `message` (uma descrição do erro) e `stack` (o rastreamento da pilha de chamadas)."
"O que é o ""event loop"" e como ele lida com tarefas assíncronas?","O event loop é um ciclo infinito que monitora a call stack e a fila de eventos (event queue). Quando a call stack está vazia, o event loop move o próximo evento da fila de eventos para a call stack para ser executado. Isso permite que o JavaScript execute tarefas assíncronas sem bloquear a thread principal."
Como você pode lidar com erros em promises usando `.catch()`?,O método `.catch()` em promises é usado para lidar com erros que ocorrem durante a execução da promise. Ele recebe uma função como argumento que é executada se a promise for rejeitada.
Como você pode lidar com erros em funções `async/await` usando `try...catch`?,Você pode usar um bloco `try...catch` ao redor do código que usa `await` para capturar exceções lançadas por promises rejeitadas.
"O que é o ""this"" keyword em JavaScript e como ele se comporta em diferentes contextos?","A palavra-chave `this` se refere ao contexto de execução atual. Seu valor depende de como a função é chamada. Em um método de objeto, `this` se refere ao objeto. Em uma função global, `this` se refere ao objeto global (window no navegador, global no Node.js). O valor de `this` pode ser explicitamente definido usando `call`, `apply` ou `bind`."
"Como você pode vincular o valor de ""this"" em uma função usando `call()`, `apply()` e `bind()`?","`call()` e `apply()` invocam a função imediatamente com o valor `this` especificado e argumentos (passados individualmente para `call()` e como um array para `apply()`). `bind()` cria uma nova função com o valor `this` especificado, mas não invoca a função imediatamente."
"O que são ""arrow functions"" em JavaScript e como elas se diferenciam das funções regulares?",Arrow functions são uma sintaxe mais concisa para definir funções em JavaScript. Uma das principais diferenças é que arrow functions não têm seu próprio valor de `this`. Eles herdam o valor de `this` do contexto léxico circundante.
Como você pode criar um escopo privado para variáveis em JavaScript usando closures?,Você pode criar um escopo privado para variáveis em JavaScript envolvendo o código em uma função anônima auto-executável (IIFE - Immediately Invoked Function Expression). As variáveis dentro da função são acessíveis apenas dentro da função e de quaisquer closures criadas dentro dela.
"O que é ""IIFE"" (Immediately Invoked Function Expression) e qual é o seu uso?",IIFE (Immediately Invoked Function Expression) é uma função JavaScript que é executada assim que é definida. É usada para criar um escopo privado e evitar conflitos de nomes no escopo global.
"O que é um ""generator function"" e como ela pode ser usada para criar iteradores personalizados?","Uma ""generator function"" é uma função que pode ser pausada e retomada durante a execução. Ela usa a palavra-chave `yield` para retornar um valor e pausar a execução. Generators podem ser usados para criar iteradores personalizados que produzem uma sequência de valores sob demanda."
"O que é o ""event delegation"" e quais são seus benefícios?","Event delegation é uma técnica onde você adiciona um event listener a um elemento pai em vez de adicionar listeners individuais a cada um de seus filhos. Isso pode melhorar o desempenho, especialmente quando você tem muitos elementos filhos ou quando os elementos filhos são adicionados dinamicamente."
"O que são ""MutationObserver"" e como eles podem ser usados para monitorar mudanças no DOM?","MutationObserver é uma API que permite observar mudanças no DOM, como a adição ou remoção de elementos, a alteração de atributos ou o texto de um nó. Eles são usados para reagir a mudanças no DOM de forma assíncrona."
"O que é o ""requestAnimationFrame"" e como ele é usado para animações suaves no navegador?",`requestAnimationFrame` é uma API que solicita ao navegador que execute uma função antes do próximo repintar da tela. Isso permite que você crie animações suaves e sincronizadas com a taxa de atualização da tela.
"O que é ""Web Workers"" em JavaScript e como eles são usados para executar tarefas em segundo plano?","Web Workers permitem que você execute scripts JavaScript em threads em segundo plano, separados da thread principal do navegador. Isso evita que tarefas demoradas bloqueiem a interface do usuário."
"O que são ""Service Workers"" em JavaScript e como eles são usados para criar aplicativos web offline?","Service Workers são scripts que são executados em segundo plano e atuam como um proxy entre o navegador e a rede. Eles podem interceptar requisições de rede, armazenar em cache recursos e fornecer funcionalidades offline."
"O que é o ""Canvas API"" em JavaScript e como ele é usado para desenhar gráficos e imagens?",O Canvas API fornece uma interface para desenhar gráficos e imagens usando JavaScript. Ele permite que você crie gráficos vetoriais e rasterizados dinamicamente.
"O que é o ""SVG"" (Scalable Vector Graphics) e como ele é usado em JavaScript?",SVG (Scalable Vector Graphics) é um formato baseado em XML para descrever gráficos vetoriais. Você pode manipular elementos SVG usando JavaScript para criar gráficos dinâmicos e interativos.
"O que é o ""Web Audio API"" em JavaScript e como ele é usado para criar áudio interativo?","O Web Audio API fornece uma interface para manipular áudio em JavaScript. Ele permite que você crie efeitos sonoros, analise áudio e sintetize som."
"O que é o ""Geolocation API"" em JavaScript e como ele é usado para obter a localização do usuário?",O Geolocation API fornece uma interface para acessar a localização geográfica do usuário (com permissão do usuário).
"O que é a ""History API"" em JavaScript e como ela é usada para manipular o histórico do navegador?",A History API permite que você manipule o histórico do navegador sem recarregar a página. Isso é usado para criar aplicativos de página única (SPAs) com navegação fluida.
"O que é o ""Drag and Drop API"" em JavaScript e como ele é usado para criar interfaces de arrastar e soltar?",O Drag and Drop API fornece uma interface para criar interfaces de arrastar e soltar em JavaScript.
"O que é o ""Fullscreen API"" em JavaScript e como ele é usado para exibir elementos em tela cheia?",O Fullscreen API permite que você coloque um elemento em tela cheia.
"O que é o ""Clipboard API"" em JavaScript e como ele é usado para copiar e colar texto?",O Clipboard API fornece uma interface para acessar a área de transferência do sistema (com permissão do usuário) para copiar e colar texto e imagens.
"O que é o ""Battery API"" em JavaScript e como ele é usado para obter informações sobre a bateria do dispositivo?",O Battery API (agora obsoleta e não recomendada para uso em produção devido a preocupações com privacidade) fornecia informações sobre o estado da bateria do dispositivo.
"O que é o ""Web Speech API"" em JavaScript e como ele é usado para reconhecimento de voz e síntese de fala?",O Web Speech API fornece interfaces para reconhecimento de voz (speech recognition) e síntese de fala (text-to-speech).
"O que são ""polyfills"" e como eles são usados para fornecer suporte a recursos modernos do JavaScript em navegadores mais antigos?",Polyfills são trechos de código que fornecem a funcionalidade de recursos modernos do JavaScript em navegadores mais antigos que não os suportam nativamente.
"O que são ""transpilers"" e como eles são usados para converter código JavaScript moderno em código compatível com navegadores mais antigos?",Transpilers são ferramentas que convertem código JavaScript escrito em uma versão mais recente da linguagem (ex: ES6+) para uma versão mais antiga (ex: ES5) que é compatível com navegadores mais antigos. Babel é um transpiler popular.
"O que é o ""DocumentFragment"" e qual a sua utilidade para otimizar a manipulação do DOM?","DocumentFragment é um nó DOM leve que pode conter uma árvore de nós. Ele não faz parte da árvore DOM principal e, portanto, as operações realizadas em um DocumentFragment são mais rápidas do que as operações realizadas diretamente no DOM. Ele é frequentemente usado para construir grandes estruturas de DOM antes de adicioná-las ao documento principal."
Como criar uma cópia profunda (deep copy) de um objeto em JavaScript?,"Uma cópia profunda cria um novo objeto com todas as suas propriedades copiadas recursivamente, incluindo objetos aninhados e arrays.  Uma forma de fazer isso é usar `JSON.parse(JSON.stringify(objeto))`, mas isso não funciona com funções, datas ou objetos que contêm referências circulares. Outras opções incluem usar bibliotecas como Lodash ou implementar uma função de cópia profunda recursiva."
"O que é ""Internationalization (i18n)"" e ""Localization (l10n)"" em JavaScript?",Internationalization (i18n) é o processo de projetar e desenvolver aplicativos para que possam ser facilmente adaptados a diferentes idiomas e regiões. Localization (l10n) é o processo de adaptar um aplicativo internacionalizado para uma região ou idioma específico.
"O que é o ""Intl API"" em JavaScript e como ele é usado para formatar datas, números e moedas com base em diferentes localidades?","O Intl API fornece objetos e métodos para realizar tarefas de internacionalização, como formatar datas, números, moedas e classificar strings de acordo com diferentes localidades."
"O que são ""web components"" e quais as tecnologias que os compõem?","Web Components são um conjunto de tecnologias que permitem criar elementos HTML reutilizáveis ​​e encapsulados. As principais tecnologias que os compõem são: Custom Elements, Shadow DOM, HTML Templates e ES Modules."
Como detectar a largura e altura da viewport no JavaScript?,"Você pode usar `window.innerWidth` e `window.innerHeight` para obter a largura e altura internas da janela do navegador (a área da viewport, excluindo barras de ferramentas e bordas). Para obter a largura e altura externas (incluindo barras de ferramentas), você pode usar `window.outerWidth` e `window.outerHeight`."
Como obter a posição de um elemento na página usando JavaScript?,"Você pode usar o método `getBoundingClientRect()` para obter a posição e o tamanho de um elemento em relação à viewport. O objeto retornado tem propriedades como `top`, `left`, `right`, `bottom`, `width` e `height`. Para obter a posição em relação ao documento, você pode adicionar o deslocamento de rolagem da janela (window.pageXOffset e window.pageYOffset) às propriedades `top` e `left`."
Como verificar se um elemento está visível na viewport usando JavaScript?,"Uma forma de verificar se um elemento está visível na viewport é usar `getBoundingClientRect()` para obter sua posição e tamanho, e então comparar esses valores com as dimensões da viewport (window.innerWidth e window.innerHeight) e o deslocamento de rolagem da página (window.pageXOffset e window.pageYOffset)."
Como adicionar e remover classes CSS de um elemento usando JavaScript?,"Você pode usar a propriedade `classList` de um elemento para adicionar, remover ou alternar classes CSS. Por exemplo: `element.classList.add('classe');`, `element.classList.remove('classe');`, `element.classList.toggle('classe');`."
"O que são ""data attributes"" (atributos `data-*`) em HTML e como eles são usados em JavaScript?",Data attributes são atributos HTML personalizados que começam com o prefixo `data-`. Eles são usados para armazenar dados adicionais em elementos HTML que podem ser acessados e manipulados usando JavaScript.
Qual é a diferença entre `null` e `undefined` em JavaScript?,"`null` é um valor de atribuição que representa a ausência intencional de um valor. `undefined` significa que uma variável foi declarada, mas ainda não recebeu um valor."
"Como você declara uma variável em JavaScript usando `let`, `const` e `var`? Quais as diferenças?","`var` é a forma mais antiga, tem escopo de função ou global. `let` e `const` têm escopo de bloco. `const` também declara uma variável que não pode ser reatribuída após a inicialização."
O que são tipos de dados primitivos em JavaScript? Cite exemplos.,"São tipos de dados imutáveis que não são objetos. Exemplos: `string`, `number`, `boolean`, `null`, `undefined`, `symbol`, `bigint`."
O que é o operador `typeof` e para que é usado?,"É um operador unário que retorna uma string indicando o tipo de dado de um operando.  Ex: `typeof 42` retorna `""number""`."
Como você cria um comentário de uma linha e um comentário de múltiplas linhas em JavaScript?,Comentário de uma linha: `// Este é um comentário`. Comentário de múltiplas linhas: `/* Este é um comentário que se estende por várias linhas */`.
Explique a diferença entre atribuição por valor e atribuição por referência em JavaScript.,Primitivos são atribuídos por valor (uma cópia é criada). Objetos e arrays são atribuídos por referência (a variável aponta para o mesmo local na memória).
O que são template literals em JavaScript e como eles funcionam?,São strings delimitadas por crases (``). Permitem interpolação de variáveis e expressões diretamente na string usando `${}`.
Como você concatena strings em JavaScript?,"Usando o operador `+` ou template literals. Exemplo: `""Olá "" + ""Mundo""` ou `""Olá ${nome}""`."
O que é uma função em JavaScript?,Um bloco de código reutilizável projetado para executar uma tarefa específica.
Como você define e chama uma função em JavaScript?,Definição: `function minhaFuncao() { /* código */ }`. Chamada: `minhaFuncao();`.
O que são parâmetros e argumentos de uma função?,Parâmetros são as variáveis listadas na definição da função. Argumentos são os valores passados para a função quando ela é chamada.
O que é o operador `return` em uma função?,"Ele especifica o valor que a função retorna ao chamador. Se não houver `return`, a função retorna `undefined`."
O que é uma função anônima em JavaScript?,"Uma função sem nome, geralmente atribuída a uma variável ou passada como argumento para outra função."
O que é uma função auto-invocada (IIFE)?,Uma função que é definida e executada imediatamente após sua criação. Ex: `(function() { /* código */ })();`.
O que é o escopo de uma variável em JavaScript?,O escopo define onde uma variável pode ser acessada dentro do código.
Quais são os tipos de escopo em JavaScript?,"Escopo global, escopo de função e escopo de bloco (introduzido com `let` e `const`)."
O que é closure em JavaScript?,"Closure é a capacidade de uma função de acessar variáveis em seu escopo léxico, mesmo quando a função é executada fora desse escopo."
O que é o objeto `arguments` em uma função?,"É um objeto semelhante a um array que contém todos os argumentos passados para a função, independentemente dos parâmetros definidos.

**Conjunto 3: Objetos e Arrays**"
O que é um objeto em JavaScript?,"Uma coleção de propriedades, onde cada propriedade é uma chave (string) associada a um valor."
Como você cria um objeto em JavaScript?,Usando a notação literal de objeto: `var meuObjeto = {};` ou usando o construtor `new Object()`.
Como você acessa as propriedades de um objeto?,Usando a notação de ponto (`.`) ou a notação de colchetes (`[]`). Ex: `meuObjeto.propriedade` ou `meuObjeto['propriedade']`.
O que é o operador `this` em JavaScript?,`this` se refere ao objeto em que a função está sendo executada. Seu valor depende de como a função é chamada.
O que é um array em JavaScript?,"Uma coleção ordenada de valores, que podem ser de qualquer tipo de dado."
Como você cria um array em JavaScript?,Usando a notação literal de array: `var meuArray = [];` ou usando o construtor `new Array()`.
Como você acessa os elementos de um array?,"Usando o índice do elemento, começando em 0. Ex: `meuArray[0]`."
Quais são alguns métodos comuns para manipular arrays em JavaScript?,"`push()`, `pop()`, `shift()`, `unshift()`, `slice()`, `splice()`, `concat()`, `join()`, `indexOf()`, `includes()`, `map()`, `filter()`, `reduce()`."
O que é o método `map()` em arrays e para que é usado?,Cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em arrays e para que é usado?,"Cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.

**Conjunto 4: Operadores e Estruturas de Controle**"
Quais são os operadores aritméticos em JavaScript?,"`+` (adição), `-` (subtração), `*` (multiplicação), `/` (divisão), `%` (resto), `**` (exponenciação)."
Quais são os operadores de comparação em JavaScript?,"`==` (igual), `!=` (diferente), `>` (maior que), `<` (menor que), `>=` (maior ou igual), `<=` (menor ou igual), `===` (estritamente igual), `!==` (estritamente diferente)."
Quais são os operadores lógicos em JavaScript?,"`&&` (AND lógico), `||` (OR lógico), `!` (NOT lógico)."
O que é uma instrução `if...else` em JavaScript?,Permite executar um bloco de código se uma condição for verdadeira e outro bloco de código se a condição for falsa.
O que é uma instrução `switch` em JavaScript?,Permite executar diferentes blocos de código com base no valor de uma expressão.
O que é um loop `for` em JavaScript?,Permite repetir um bloco de código um número específico de vezes.
O que é um loop `while` em JavaScript?,Permite repetir um bloco de código enquanto uma condição for verdadeira.
O que é um loop `do...while` em JavaScript?,"Semelhante ao `while`, mas garante que o bloco de código seja executado pelo menos uma vez."
O que são as palavras-chave `break` e `continue` em loops?,"`break` sai do loop imediatamente. `continue` pula a iteração atual e passa para a próxima.

**Conjunto 5: Manipulação de Strings e Números**"
Como você obtém o comprimento de uma string em JavaScript?,Usando a propriedade `length`. Ex: `minhaString.length`.
Quais são alguns métodos comuns para manipular strings em JavaScript?,"`toUpperCase()`, `toLowerCase()`, `substring()`, `slice()`, `replace()`, `trim()`, `indexOf()`, `split()`."
Como você verifica se um valor é um número em JavaScript?,Usando `isNaN()` (verifica se NÃO é um número).  `Number.isNaN()` é uma versão mais estrita.
Como você formata um número em JavaScript?,Usando métodos como `toFixed()` (fixa o número de casas decimais) ou `toLocaleString()` (formata de acordo com a localidade).
O que é o objeto `Math` em JavaScript e para que é usado?,É um objeto embutido que fornece constantes e funções matemáticas.
Quais são algumas funções comuns do objeto `Math`?,"`Math.random()`, `Math.round()`, `Math.ceil()`, `Math.floor()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`."
Como você gera um número aleatório entre dois valores em JavaScript?,`Math.floor(Math.random() * (max - min + 1)) + min;`.
Como você arredonda um número para o inteiro mais próximo em JavaScript?,Usando `Math.round()`.
Como você obtém a raiz quadrada de um número em JavaScript?,"Usando `Math.sqrt()`.

**Conjunto 6: Eventos e o DOM**"
Como você seleciona um elemento HTML usando JavaScript?,"Usando métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`, `document.querySelector()`, `document.querySelectorAll()`."
Como você modifica o conteúdo de um elemento HTML usando JavaScript?,Usando a propriedade `innerHTML` ou `textContent`.
Como você modifica os atributos de um elemento HTML usando JavaScript?,Usando os métodos `setAttribute()` e `getAttribute()`.
Como você adiciona um ouvinte de evento a um elemento HTML usando JavaScript?,Usando o método `addEventListener()`.
Quais são alguns eventos comuns em JavaScript?,"`click`, `mouseover`, `mouseout`, `keydown`, `keyup`, `submit`, `load`, `DOMContentLoaded`."
O que é o objeto `event` em um manipulador de evento?,"Contém informações sobre o evento que ocorreu, como o elemento que o disparou, as coordenadas do mouse, etc."
Como você previne o comportamento padrão de um evento?,Usando o método `preventDefault()` do objeto `event`.
O que é bubbling e capturing em eventos?,"Bubbling é quando o evento ""sobe"" pela árvore DOM, do elemento mais interno para o mais externo. Capturing é o oposto, o evento ""desce"" pela árvore.

**Conjunto 7: Tratamento de Erros e Debugging**"
O que é um erro em JavaScript?,Uma indicação de que algo inesperado aconteceu durante a execução do código.
Quais são os tipos comuns de erros em JavaScript?,"`SyntaxError`, `TypeError`, `ReferenceError`, `RangeError`, `EvalError`."
Como você lida com erros em JavaScript usando `try...catch`?,O bloco `try` contém o código que pode gerar um erro. O bloco `catch` contém o código que será executado se um erro ocorrer.
O que é o bloco `finally` em um bloco `try...catch...finally`?,"O bloco `finally` sempre é executado, independentemente de um erro ter ocorrido ou não."
Como você lança um erro manualmente em JavaScript?,Usando a palavra-chave `throw`. Ex: `throw new Error('Mensagem de erro');`.
O que é o console em JavaScript e para que é usado?,"É um objeto que fornece acesso ao console de depuração do navegador. Usado para exibir mensagens, avisos, erros e outras informações."
Quais são alguns métodos comuns do objeto `console`?,"`console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`."
Como você usa o debugger do navegador para depurar código JavaScript?,Inserindo a palavra-chave `debugger` no código ou usando as ferramentas de desenvolvedor do navegador para definir breakpoints.
O que são breakpoints em depuração?,"Pontos no código onde a execução é interrompida, permitindo que você inspecione o estado das variáveis e execute o código passo a passo."
Qual a importância de tratamento de erros em aplicações JavaScript?,"Evitar que a aplicação quebre inesperadamente, fornecer feedback ao usuário e facilitar a identificação e correção de bugs.

**Conjunto 8: Funções Avançadas e Recursão**"
O que são funções de ordem superior em JavaScript?,Funções que recebem outras funções como argumentos ou retornam funções como resultados.
O que é uma função callback?,Uma função passada como argumento para outra função e que é executada após a conclusão de alguma operação.
Quais são os riscos de usar recursão?,Potencial para estouro de pilha (stack overflow) se a condição de parada não for definida corretamente ou se a recursão for muito profunda.
O que é uma função pura?,Uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais (não modifica variáveis externas).
O que são arrow functions em JavaScript e quais as suas vantagens?,Uma sintaxe mais concisa para definir funções anônimas. Elas herdam o valor de `this` do contexto circundante e não têm seu próprio `arguments`.
O que é o operador rest (`...`) em JavaScript?,Permite agrupar um número indefinido de argumentos em um array. Usado em definições de funções para receber múltiplos argumentos.
O que é o operador `??` (nullish coalescing operator) em JavaScript?,Retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`.
O que é o operador `?.` (optional chaining operator) em JavaScript?,Permite acessar propriedades de um objeto sem ter que verificar explicitamente se cada nível da cadeia de propriedades existe. Retorna `undefined` se uma propriedade não existir.
O que é um iterador em JavaScript?,"Um objeto que define uma sequência e, após terminação, retorna um valor. Ele implementa um método `next()` que retorna um objeto com as propriedades `value` (o próximo valor da sequência) e `done` (um booleano indicando se a sequência terminou)."
O que são promises em JavaScript?,"Representam o resultado eventual de uma operação assíncrona. Podem estar em um dos três estados: pendente, resolvida ou rejeitada."
O que é o objeto `Symbol` em JavaScript e para que é usado?,"É um tipo de dado primitivo que representa um identificador único. Usado para criar propriedades de objeto que não entram em conflito com outras propriedades existentes.

**Conjunto 10:  Modularização e Conceitos Avançados II**"
O que são módulos em JavaScript?,Arquivos JavaScript que contêm código que pode ser reutilizado em outros arquivos.
Quais são as formas de modularização em JavaScript?,"CommonJS (usado em Node.js), AMD (usado em navegadores), e ES Modules (a forma padrão moderna)."
Como você importa e exporta módulos em JavaScript (ES Modules)?,`import` para importar e `export` para exportar. Ex: `import { minhaFuncao } from './meuModulo.js';` e `export function minhaFuncao() { ... }`.
"O que é ""strict mode"" em JavaScript e como habilitá-lo?","Uma forma de executar o JavaScript com regras mais rigorosas, ajudando a prevenir erros comuns. Habilitado adicionando `""use strict"";` no início de um script ou função."
O que é o garbage collector em JavaScript?,Um processo automático que libera a memória ocupada por objetos que não estão mais sendo usados.
O que são protótipos em JavaScript?,Mecanismo pelo qual objetos JavaScript herdam propriedades e métodos de outros objetos.
O que é herança prototípica em JavaScript?,"Um objeto herda propriedades e métodos do protótipo de outro objeto.  Cada objeto tem um protótipo, e esse protótipo pode ter outro protótipo, formando uma cadeia."
Como você cria uma classe em JavaScript (ES6)?,Usando a palavra-chave `class`. Ex: `class MinhaClasse { constructor(parametro) { this.propriedade = parametro; } }`.
Qual é o propósito do método `constructor` em uma classe JavaScript?,"É um método especial para criar e inicializar um objeto criado a partir de uma classe.

**Conjunto 11: Curiosidades e Casos Específicos**"
Por que `0.1 + 0.2 !== 0.3` em JavaScript?,"Devido à forma como os números de ponto flutuante são representados em binário, pode haver pequenas imprecisões."
O que acontece se você tentar acessar uma propriedade inexistente de um objeto em JavaScript?,Retorna `undefined`.
Qual é a saída de `[] == ![]` em JavaScript? Por quê?,"`true`. Devido à coerção de tipo, o lado direito se torna `false`, e `[] == false` também é `true`."
Como você clona um objeto em JavaScript de forma a criar uma cópia profunda?,Utilizando `JSON.parse(JSON.stringify(objeto))` para objetos simples ou bibliotecas especializadas para casos mais complexos com referências circulares.
O que são WeakMap e WeakSet em JavaScript e quando utilizá-los?,"São estruturas de dados que armazenam referências fracas para objetos.  São úteis para evitar vazamentos de memória quando você precisa associar dados a objetos, mas não quer impedir que o garbage collector os colete."
Qual a diferença entre `const` e `Object.freeze` em JavaScript?,"`const` impede a reatribuição da variável, mas permite a modificação das propriedades do objeto. `Object.freeze` impede a modificação das propriedades do objeto, tornando-o imutável."
O que é o event loop em JavaScript e qual sua importância?,É um mecanismo que permite que o JavaScript execute operações assíncronas sem bloquear a thread principal. Ele gerencia a fila de tarefas e a execução de callbacks.
O que são web workers em JavaScript?,"Scripts que rodam em threads separadas, permitindo a execução de tarefas pesadas sem bloquear a thread principal do navegador."
Como funciona o `setTimeOut` e `setInterval` em JavaScript?,`setTimeOut` executa uma função após um determinado atraso. `setInterval` executa uma função repetidamente em intervalos regulares.
O que é Internacionalização em JavaScript?,"É o processo de adaptar um software para diferentes idiomas, regiões e culturas.

Essas 150 perguntas e respostas cobrem uma variedade de tópicos fundamentais e avançados em JavaScript, focando na linguagem em si e evitando dependências externas. Elas foram elaboradas para serem distintas umas das outras, maximizando a abrangência do conhecimento testado."
O que é o `use strict` em JavaScript e qual o seu propósito?,"`use strict` é uma diretiva que habilita o modo estrito no JavaScript. Seu propósito é ativar um conjunto mais restritivo de regras semânticas, ajudando a prevenir erros comuns e tornando o código mais fácil de depurar. Ele impede o uso de variáveis não declaradas, atribuições a propriedades somente leitura e outras práticas consideradas problemáticas."
O que é um closure em JavaScript?,"Um closure é a combinação de uma função e o ambiente léxico no qual essa função foi declarada.  Ele permite que uma função interna acesse variáveis da função externa, mesmo após a função externa ter terminado sua execução."
O que são template literals em JavaScript?,Template literals são strings delimitadas com acentos graves (`). Elas permitem a interpolação de variáveis e expressões dentro da string usando `${}`. Elas também podem conter quebras de linha.
Explique o que são funções de primeira classe em JavaScript.,"Funções de primeira classe significam que funções podem ser tratadas como qualquer outra variável. Elas podem ser atribuídas a variáveis, passadas como argumentos para outras funções e retornadas como valores de outras funções."
Como você pode remover duplicatas de um array em JavaScript?,Uma forma é usar o `Set`: `[...new Set(array)]`. Sets armazenam apenas valores únicos.
O que é o método `map()` em arrays JavaScript?,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em arrays JavaScript?,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em arrays JavaScript?,"O método `reduce()` executa uma função reducer (fornecida por você) em cada elemento do array, resultando em um único valor de saída."
Explique o que são arrow functions em JavaScript.,Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas usam a sintaxe `() => {}` e não possuem seu próprio `this` (lexically bound).
Como você pode copiar um objeto em JavaScript? Qual a diferença entre shallow copy e deep copy?,"Você pode usar `Object.assign({}, objeto)` para shallow copy ou `JSON.parse(JSON.stringify(objeto))` para deep copy (com limitações para funções e objetos complexos). Shallow copy copia referências, enquanto deep copy cria novos objetos com os mesmos valores."
Explique o que é prototype em JavaScript.,"Todo objeto em JavaScript possui um prototype, que é outro objeto do qual herda propriedades e métodos. O prototype é usado para implementar herança em JavaScript."
Como você pode criar um objeto em JavaScript?,Você pode usar a notação literal de objeto `{}` ou a palavra-chave `new` com uma função construtora.
O que é JSON em JavaScript?,JSON (JavaScript Object Notation) é um formato leve para troca de dados. Ele é baseado em um subconjunto da linguagem JavaScript e é usado para representar objetos e arrays.
Como você pode converter um objeto JavaScript em JSON?,Você pode usar o método `JSON.stringify(objeto)`.
Como você adiciona um event listener a um elemento em JavaScript?,"Você pode usar o método `addEventListener('nomeDoEvento', funcaoDeCallback)`."
Como você pode selecionar um elemento HTML pelo ID usando JavaScript?,Você pode usar o método `document.getElementById('idDoElemento')`.
Como você pode selecionar múltiplos elementos HTML por classe usando JavaScript?,Você pode usar o método `document.getElementsByClassName('nomeDaClasse')`. Ele retorna um HTMLCollection.
Como você pode selecionar múltiplos elementos HTML usando um seletor CSS usando JavaScript?,Você pode usar o método `document.querySelectorAll('seletorCSS')`. Ele retorna um NodeList.
Como você pode alterar o texto de um elemento HTML usando JavaScript?,Você pode usar a propriedade `textContent` ou `innerText` do elemento.
Como você pode alterar o atributo de um elemento HTML usando JavaScript?,"Você pode usar o método `setAttribute('nomeDoAtributo', 'novoValor')`."
O que é AJAX em JavaScript?,AJAX (Asynchronous JavaScript and XML) é uma técnica para criar aplicações web interativas. Ele permite que páginas web atualizem partes do seu conteúdo sem recarregar a página inteira.
Como você faz uma requisição AJAX usando JavaScript?,Você pode usar o objeto `XMLHttpRequest` (mais tradicional) ou a API `fetch` (mais moderna).
Como você lida com o resultado de uma Promise?,Você pode usar os métodos `.then()` para lidar com o sucesso (fulfilled) e `.catch()` para lidar com a falha (rejected).
O que são erros em JavaScript?,"Erros são problemas que ocorrem durante a execução do código JavaScript, impedindo que ele funcione corretamente."
Como você lida com erros em JavaScript?,Você pode usar blocos `try...catch` para capturar e lidar com erros.
O que é o objeto `Error` em JavaScript?,O objeto `Error` é o objeto base para todos os objetos de erro em JavaScript. Ele possui propriedades como `name` e `message`.
O que são expressões regulares em JavaScript?,"Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings. Elas são usadas para pesquisa, substituição e validação de texto."
O que é o método `test()` em expressões regulares JavaScript?,O método `test()` executa uma pesquisa por uma correspondência entre uma expressão regular e uma string especificada. Retorna `true` ou `false`.
O que é o método `match()` em strings JavaScript?,O método `match()` recupera as correspondências entre uma string e uma expressão regular. Retorna um array contendo as correspondências ou `null` se nenhuma correspondência for encontrada.
Como você pode acessar os cookies usando JavaScript?,Você pode acessar os cookies através da propriedade `document.cookie`.
Como você pode definir um cookie usando JavaScript?,Você pode definir um cookie atribuindo um valor à propriedade `document.cookie`.
O que é localStorage em JavaScript?,`localStorage` é um objeto do objeto `window` que permite armazenar dados no navegador do usuário persistentemente (mesmo após o fechamento do navegador).
O que é sessionStorage em JavaScript?,"`sessionStorage` é semelhante ao `localStorage`, mas os dados são armazenados apenas para a duração da sessão do navegador (são apagados quando o navegador é fechado)."
Qual a diferença entre localStorage e sessionStorage?,"`localStorage` armazena dados persistentemente, enquanto `sessionStorage` armazena dados apenas para a sessão atual do navegador."
O que é o método `parseInt()` em JavaScript?,O método `parseInt()` analisa uma string e retorna um inteiro. Ele ignora espaços em branco no início da string e tenta converter o restante em um número inteiro.
O que é o método `parseFloat()` em JavaScript?,O método `parseFloat()` analisa uma string e retorna um número de ponto flutuante. Ele ignora espaços em branco no início da string e tenta converter o restante em um número de ponto flutuante.
O que é o método `isNaN()` em JavaScript?,"O método `isNaN()` determina se um valor é NaN (""Not a Number"")."
O que é o método `setTimeout()` em JavaScript?,O método `setTimeout()` executa uma função ou trecho de código após um determinado período de tempo (em milissegundos).
Como você pode parar um `setInterval()` em JavaScript?,Você pode usar a função `clearInterval()` passando o ID retornado pelo `setInterval()`.
Como você pode parar um `setTimeout()` em JavaScript?,Você pode usar a função `clearTimeout()` passando o ID retornado pelo `setTimeout()`.
O que é o método `Date.now()` em JavaScript?,O método `Date.now()` retorna o número de milissegundos decorridos desde 1 de janeiro de 1970 00:00:00 UTC.
O que é o método `Math.random()` em JavaScript?,"O método `Math.random()` retorna um número pseudoaleatório de ponto flutuante, maior ou igual a 0 e menor que 1."
Como você pode gerar um número inteiro aleatório em JavaScript?,"Você pode usar `Math.floor(Math.random() * max)` para gerar um número inteiro entre 0 (inclusive) e `max` (exclusive), ou `Math.floor(Math.random() * (max - min + 1)) + min` para gerar um número inteiro entre `min` (inclusive) e `max` (inclusive)."
Dê um exemplo de destructuring de um objeto em JavaScript.,"`const { nome, idade } = pessoa;` (onde `pessoa` é um objeto com as propriedades `nome` e `idade`)."
Dê um exemplo de destructuring de um array em JavaScript.,"`const [primeiro, segundo] = array;` (onde `array` é um array com pelo menos dois elementos)."
O que são efeitos colaterais em JavaScript?,"Efeitos colaterais são quando uma função modifica algum estado fora de seu próprio escopo, como alterar uma variável global, modificar o DOM ou fazer uma requisição HTTP."
O que são High-Order Functions em JavaScript?,High-Order Functions são funções que recebem outras funções como argumentos ou retornam funções como resultado.
Qual a diferença entre `forEach()` e `map()` em arrays JavaScript?,"`forEach()` itera sobre os elementos de um array e executa uma função para cada um, mas não retorna um novo array. `map()` itera sobre os elementos de um array e retorna um novo array com os resultados da função aplicada a cada elemento."
O que é o método `find()` em arrays JavaScript?,"O método `find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
O que é o método `findIndex()` em arrays JavaScript?,"O método `findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1."
O que é o método `some()` em arrays JavaScript?,O método `some()` testa se pelo menos um elemento no array passa no teste implementado pela função fornecida. Retorna `true` ou `false`.
O que é o método `every()` em arrays JavaScript?,O método `every()` testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna `true` ou `false`.
O que é composition em JavaScript?,Composition é uma técnica para combinar duas ou mais funções para produzir uma nova função.
Explique o conceito de immutability em JavaScript.,"Immutability significa que, uma vez que um objeto ou valor é criado, ele não pode ser alterado. Em vez de modificar o objeto original, você cria uma nova cópia com as alterações desejadas."
O que são funções geradoras em JavaScript?,Funções geradoras são funções que podem ser pausadas e retomadas. Elas usam a palavra-chave `yield` para retornar valores em etapas.
Como você declara uma função geradora em JavaScript?,Você usa o asterisco (*) após a palavra-chave `function`: `function* minhaFuncaoGeradora() {}`.
O que é a palavra-chave `yield` em funções geradoras?,`yield` pausa a execução da função geradora e retorna um valor. A execução pode ser retomada posteriormente.
O que é o Symbol em JavaScript?,"Symbol é um tipo de dado primitivo único e imutável, usado como chave de propriedade de objeto para evitar conflitos de nomes."
Como você cria um Symbol em JavaScript?,Você usa a função `Symbol()`: `const meuSymbol = Symbol('descrição')`.
O que é a propriedade `constructor` em JavaScript?,A propriedade `constructor` retorna uma referência à função construtora que criou o objeto.
O que são Map e Set em JavaScript?,`Map` é uma coleção de pares chave-valor onde as chaves podem ser de qualquer tipo de dado. `Set` é uma coleção de valores únicos (não permite duplicatas).
Qual a diferença entre um objeto JavaScript e um Map?,"Em objetos, as chaves são sempre strings (ou Symbols). Em Maps, as chaves podem ser de qualquer tipo de dado. Maps também preservam a ordem de inserção, enquanto objetos não garantem isso."
O que é um WeakMap em JavaScript?,"WeakMap é semelhante ao Map, mas as chaves devem ser objetos. Ele não impede que os objetos chaves sejam coletados pelo garbage collector se não houver outras referências a eles."
O que é um WeakSet em JavaScript?,"WeakSet é semelhante ao Set, mas só pode conter objetos. Ele não impede que os objetos sejam coletados pelo garbage collector se não houver outras referências a eles."
O que são proxies em JavaScript?,"Proxies permitem interceptar e personalizar operações fundamentais em objetos, como leitura e escrita de propriedades, enumeração, chamadas de função, etc."
O que é reflection em JavaScript?,"Reflection permite que um programa examine e modifique sua própria estrutura e comportamento em tempo de execução. Em JavaScript, o objeto `Reflect` fornece métodos para interceptar e personalizar operações em objetos."
O que são decorators em JavaScript?,"Decorators são uma proposta (ainda não padronizada) para adicionar metadados e modificar classes, métodos, propriedades ou parâmetros."
O que são iterables e iterators em JavaScript?,"Um iterable é um objeto que pode ser iterado (por exemplo, usando um loop `for...of`). Um iterator é um objeto que define como um iterable é iterado, fornecendo um método `next()` que retorna o próximo valor."
O que é o protocolo de iteração em JavaScript?,O protocolo de iteração define como um objeto pode ser iterado. Ele requer que o objeto tenha um método `[Symbol.iterator]()` que retorna um objeto iterator.
O que é o método `Object.defineProperty()` em JavaScript?,"O método `Object.defineProperty()` define uma nova propriedade diretamente em um objeto, ou modifica uma propriedade existente em um objeto, e retorna o objeto."
O que é memory leak em JavaScript?,"Memory leak ocorre quando um programa retém memória que não é mais necessária, impedindo que o garbage collector a libere."
Quais são os diferentes tipos de bubbling e capturing em JavaScript?,"Bubbling é quando um evento é acionado em um elemento e, em seguida, se propaga para cima na árvore DOM para seus elementos pai. Capturing é o oposto: o evento se propaga para baixo da árvore DOM do elemento raiz para o elemento alvo."
O que é CORS (Cross-Origin Resource Sharing) e como ele se relaciona com JavaScript?,CORS é um mecanismo de segurança do navegador que restringe o acesso a recursos de um domínio diferente daquele de onde o script foi carregado. JavaScript frequentemente encontra problemas de CORS ao fazer requisições AJAX para APIs de outros domínios.
Como você pode lidar com erros de CORS em JavaScript?,"A solução geralmente envolve configurar o servidor da API para enviar cabeçalhos HTTP que permitam o acesso cross-origin (por exemplo, `Access-Control-Allow-Origin`)."
O que é o método `requestAnimationFrame()` em JavaScript?,O método `requestAnimationFrame()` informa ao navegador que você deseja realizar uma animação e solicita que o navegador chame uma função especificada para atualizar uma animação antes da próxima repintura.
O que são Web Workers em JavaScript?,"Web Workers permitem que você execute scripts JavaScript em threads de fundo, sem bloquear a thread principal do navegador. Isso pode melhorar o desempenho de aplicações que realizam tarefas computacionalmente intensivas."
Como você pode se comunicar entre a thread principal e um Web Worker?,"Você pode usar o método `postMessage()` para enviar mensagens entre a thread principal e o Web Worker, e o evento `message` para receber mensagens."
O que é a API Fetch em JavaScript?,A API Fetch fornece uma interface moderna para fazer requisições de rede em JavaScript. Ela é baseada em Promises e oferece um controle mais flexível sobre as requisições e respostas HTTP.
O que são metadados em JavaScript?,"Metadados são dados sobre dados. Eles fornecem informações adicionais sobre o código, como tipo de dado, descrição, ou outra informação relevante. Em Javascript, metadados podem ser adicionados usando comentários, ou através de bibliotecas e padrões de programação."
"O que é a diferença entre `var`, `let`, e `const`?","`var` tem escopo de função ou global, enquanto `let` e `const` têm escopo de bloco. `var` permite redeclaração e reatribuição, `let` permite reatribuição, mas não redeclaração, e `const` não permite redeclaração nem reatribuição."
Qual é o propósito do operador `??` (nullish coalescing operator) em JavaScript?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Ele é diferente do operador `||`, que retorna o operando do lado direito se o operando do lado esquerdo for falsy (incluindo `0`, `''`, `false`, `null`, `undefined`)."
Qual a finalidade da função `eval()` em JavaScript e por que é geralmente desencorajada?,"A função `eval()` avalia uma string como código JavaScript. É desencorajada porque pode ser perigosa se usada com strings que vêm de fontes não confiáveis, pois pode executar código arbitrário, representando riscos de segurança. Além disso, geralmente é mais lenta do que outras formas de executar código dinamicamente.

Espero que estas perguntas e respostas sejam úteis!"
O que é o conceito de hoisting em JavaScript?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis (usando `var`) e declarações de funções para o topo de seu escopo antes da execução do código. Variáveis declaradas com `let` e `const` também sofrem hoisting, mas não são inicializadas."
Como funciona o operador `typeof` em JavaScript?,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando. Exemplos: `typeof 10` retorna ""number"", `typeof ""hello""` retorna ""string"", `typeof null` retorna ""object"" (uma peculiaridade histórica)."
O que é uma closure em JavaScript?,"Uma closure é a combinação de uma função e o ambiente léxico dentro do qual essa função foi declarada. Permite que a função acesse variáveis do escopo externo, mesmo após a função externa ter retornado."
Explique o conceito de protótipo em JavaScript.,"Em JavaScript, cada objeto possui um protótipo. O protótipo é outro objeto do qual o objeto herda propriedades e métodos. A cadeia de protótipos continua até chegar a `null`."
O que é o operador `===` (igualdade estrita) em JavaScript?,"O operador `===` compara dois valores, retornando `true` somente se eles forem iguais tanto em valor quanto em tipo, sem realizar conversão de tipo."
Como você cria um objeto em JavaScript usando a notação literal?,"Você cria um objeto usando chaves `{}` e definindo pares chave-valor dentro delas, separados por vírgulas. Exemplo: `let pessoa = { nome: ""João"", idade: 30 };`"
"Qual a diferença entre `var`, `let` e `const` na declaração de variáveis?",`var` tem escopo de função ou global e sofre hoisting. `let` e `const` têm escopo de bloco e não sofrem hoisting (mas são 'hoisted' sem inicialização). `const` declara variáveis que não podem ser reatribuídas.
Como você verifica se um objeto possui uma determinada propriedade em JavaScript?,"Você pode usar o operador `in` (ex: `""nome"" in pessoa`), o método `hasOwnProperty()` (ex: `pessoa.hasOwnProperty(""nome"")`), ou simplesmente acessar a propriedade e verificar se é diferente de `undefined` (ex: `pessoa.nome !== undefined`)."
O que é o operador spread (...) em JavaScript?,O operador spread (...) permite expandir um iterável (como um array ou string) em locais onde múltiplos argumentos (para chamadas de função) ou múltiplos elementos (para literais de array) são esperados.
Qual a diferença entre `slice()` e `splice()` em arrays JavaScript?,"`slice()` retorna uma cópia de uma parte de um array, sem modificar o array original. `splice()` modifica o array original removendo ou substituindo elementos."
Como você converte um objeto JavaScript para uma string JSON?,Você pode usar o método `JSON.stringify()` para converter um objeto JavaScript em uma string JSON.
Como você converte uma string JSON para um objeto JavaScript?,Você pode usar o método `JSON.parse()` para converter uma string JSON em um objeto JavaScript.
Como você formata uma data em JavaScript?,"Você pode usar os métodos do objeto `Date` para obter os componentes da data (ano, mês, dia, etc.) e formatá-los manualmente ou usar bibliotecas externas para formatação mais complexa. `toLocaleDateString()` e `toLocaleTimeString()` podem ser úteis."
Como você cria um loop `for` em JavaScript?,A sintaxe do loop `for` é `for (inicialização; condição; incremento) { // código a ser executado }`.
Como você cria um loop `while` em JavaScript?,A sintaxe do loop `while` é `while (condição) { // código a ser executado }`.
Como você cria um loop `do...while` em JavaScript?,"A sintaxe do loop `do...while` é `do { // código a ser executado } while (condição);`. A principal diferença é que o bloco de código é executado pelo menos uma vez, mesmo que a condição seja falsa na primeira iteração."
O que é a palavra-chave `break` em JavaScript?,"A palavra-chave `break` é usada para sair de um loop (`for`, `while`, `do...while`) ou de um bloco `switch`."
O que é a palavra-chave `continue` em JavaScript?,A palavra-chave `continue` é usada para pular a iteração atual de um loop e passar para a próxima iteração.
O que é o bloco `try...catch` em JavaScript?,"O bloco `try...catch` é usado para lidar com exceções em JavaScript. O código que pode lançar uma exceção é colocado dentro do bloco `try`, e o código que lida com a exceção é colocado dentro do bloco `catch`."
O que é o bloco `finally` em JavaScript?,"O bloco `finally` é executado após o bloco `try` e o bloco `catch`, independentemente de uma exceção ter sido lançada ou não. Geralmente é usado para realizar limpeza, como fechar arquivos ou liberar recursos."
O que é o operador `void` em JavaScript?,O operador `void` avalia uma expressão e retorna `undefined`. É frequentemente usado para evitar que um navegador siga um link quando o evento `onclick` é usado.
O que é coerção de tipo em JavaScript?,Coerção de tipo é a conversão automática de um valor de um tipo de dado para outro. Pode ocorrer em operações como comparações (usando `==`) ou operações aritméticas.
O que são truthy e falsy values em JavaScript?,"Valores truthy são valores que são avaliados como `true` em um contexto booleano (ex: `1`, `""hello""`, `{}`). Valores falsy são valores que são avaliados como `false` em um contexto booleano (ex: `0`, `""""`, `null`, `undefined`, `NaN`)."
Como você clona um objeto em JavaScript?,"Existem várias maneiras de clonar um objeto. Para um clone superficial, você pode usar `Object.assign({}, obj)` ou o operador spread `{...obj}`. Para um clone profundo, você pode usar `JSON.parse(JSON.stringify(obj))` (mas isso não funciona para funções ou objetos com referências circulares) ou bibliotecas externas."
O que é imutabilidade em JavaScript?,"Imutabilidade significa que, uma vez que um objeto é criado, seu estado não pode ser alterado. Em JavaScript, você pode usar `const` para variáveis que referenciam objetos imutáveis ou usar técnicas como o uso de `map()`, `filter()`, e `reduce()` para trabalhar com arrays sem modificá-los diretamente."
O que é um stub?,Um stub é um trecho de código que substitui temporariamente uma funcionalidade maior durante o desenvolvimento ou teste. Ele fornece um valor de retorno controlado para simular o comportamento de um componente ainda não implementado ou para isolar o código em teste.
O que é um mock?,Um mock é um objeto simulado que imita o comportamento de um objeto real em um ambiente de teste. Ele permite verificar se as interações esperadas com esse objeto ocorreram durante a execução do código testado.
O que é programação assíncrona?,"É um paradigma de programação que permite executar tarefas simultaneamente, sem bloquear a execução principal do programa. Útil para lidar com operações demoradas, como requisições de rede ou leitura de arquivos."
Explique a diferença entre `forEach` e `map` em JavaScript.,"`forEach` itera sobre os elementos de um array e executa uma função para cada elemento, mas não retorna um novo array. `map`, por outro lado, executa uma função para cada elemento e retorna um novo array com os resultados."
Como selecionar um elemento HTML usando JavaScript?,"Métodos como `document.getElementById()`, `document.querySelector()`, e `document.querySelectorAll()` são usados para selecionar elementos HTML no DOM."
Como modificar o conteúdo de um elemento HTML usando JavaScript?,A propriedade `innerHTML` e o método `textContent` podem ser usados para modificar o conteúdo de um elemento HTML.
Como adicionar um evento a um elemento HTML usando JavaScript?,O método `addEventListener()` é usado para adicionar um listener de evento a um elemento HTML.
O que é event bubbling em JavaScript?,Event bubbling é o processo em que um evento disparado em um elemento HTML também se propaga para seus elementos pais na árvore DOM.
O que é event capturing em JavaScript?,Event capturing é o processo inverso do event bubbling. O evento é primeiro capturado pelo elemento ancestral mais externo e depois propagado para o elemento alvo.
O que é o objeto `document` em JavaScript?,O objeto `document` representa o documento HTML carregado na janela do navegador e fornece acesso ao DOM da página.
O que é o objeto `location` em JavaScript?,O objeto `location` fornece informações sobre a URL da página atual e permite redirecionar o navegador para outra página.
Como você define um cookie em JavaScript?,Você pode definir um cookie atribuindo um valor a `document.cookie` no formato `chave=valor; expires=data; path=/`.
Como você lê um cookie em JavaScript?,"Você pode ler os cookies acessando `document.cookie`, que retorna uma string contendo todos os cookies separados por ponto e vírgula."
O que é Local Storage em JavaScript?,Local Storage é um mecanismo de armazenamento web que permite armazenar dados no navegador do usuário persistentemente (até que sejam explicitamente removidos).
Como você armazena dados no Local Storage em JavaScript?,"Você pode usar o método `localStorage.setItem(""chave"", ""valor"")` para armazenar dados no Local Storage."
Como você recupera dados do Local Storage em JavaScript?,"Você pode usar o método `localStorage.getItem(""chave"")` para recuperar dados do Local Storage."
O que é Session Storage em JavaScript?,"Session Storage é semelhante ao Local Storage, mas os dados são armazenados apenas durante a sessão do navegador (até que a janela seja fechada)."
O que é a função `setTimeout` em JavaScript?,A função `setTimeout` agenda a execução de uma função após um determinado período de tempo (em milissegundos).
O que é a função `setInterval` em JavaScript?,A função `setInterval` executa repetidamente uma função em intervalos regulares de tempo (em milissegundos).
Como você limpa um `setTimeout` em JavaScript?,"Você pode usar a função `clearTimeout(id)` para cancelar um `setTimeout` agendado, onde `id` é o valor retornado por `setTimeout`."
Como você limpa um `setInterval` em JavaScript?,"Você pode usar a função `clearInterval(id)` para cancelar um `setInterval` agendado, onde `id` é o valor retornado por `setInterval`."
Como você faz uma requisição AJAX usando `fetch` em JavaScript?,"Você pode usar a função `fetch(""url"")` para fazer uma requisição HTTP, que retorna uma Promise."
Como você lida com a resposta de uma requisição `fetch` em JavaScript?,Você pode usar os métodos `.then()` e `.catch()` para lidar com a resposta da Promise retornada por `fetch`.
O que são cabeçalhos HTTP?,"Os cabeçalhos HTTP são metadados enviados em requisições e respostas HTTP, que fornecem informações adicionais sobre a requisição ou resposta, como o tipo de conteúdo, o comprimento do conteúdo e o status da requisição."
O que são status codes HTTP?,"Status codes HTTP são códigos numéricos de três dígitos que indicam o resultado de uma requisição HTTP, como `200 OK`, `404 Not Found`, `500 Internal Server Error`."
O que é Cross-Origin Resource Sharing (CORS)?,CORS é um mecanismo de segurança que restringe as requisições HTTP feitas de um domínio para outro domínio diferente.
Como você habilita CORS em um servidor?,"Você pode habilitar CORS em um servidor configurando os cabeçalhos HTTP apropriados, como `Access-Control-Allow-Origin`."
O que é uma expressão regular em JavaScript?,"Uma expressão regular é um padrão de texto que pode ser usado para encontrar, combinar ou substituir strings."
Quais são os principais métodos para trabalhar com expressões regulares em JavaScript?,"Os principais métodos são `test()` (para verificar se uma string corresponde ao padrão), `exec()` (para encontrar a primeira correspondência) e `match()` (para encontrar todas as correspondências)."
O que são quantificadores em expressões regulares?,"Quantificadores especificam quantas vezes um caractere ou grupo deve ocorrer para corresponder ao padrão (ex: `*`, `+`, `?`, `{n}`, `{n,}`, `{n,m}`)."
O que é o método `replace()` em strings JavaScript?,O método `replace()` substitui uma parte de uma string por outra string ou pelo resultado de uma função. Pode usar expressões regulares para substituir padrões.
O que é o método `split()` em strings JavaScript?,"O método `split()` divide uma string em um array de substrings, usando um separador especificado."
O que é o método `trim()` em strings JavaScript?,O método `trim()` remove espaços em branco do início e do final de uma string.
O que é o método `toUpperCase()` em strings JavaScript?,O método `toUpperCase()` converte uma string para letras maiúsculas.
O que é o método `toLowerCase()` em strings JavaScript?,O método `toLowerCase()` converte uma string para letras minúsculas.
O que é o método `charAt()` em strings JavaScript?,O método `charAt(índice)` retorna o caractere na posição especificada de uma string.
O que é o método `charCodeAt()` em strings JavaScript?,O método `charCodeAt(índice)` retorna o código Unicode do caractere na posição especificada de uma string.
O que é o método `concat()` em strings JavaScript?,O método `concat()` concatena duas ou mais strings e retorna uma nova string.
O que é o método `indexOf()` em strings JavaScript?,"O método `indexOf(substring)` retorna o índice da primeira ocorrência de uma substring em uma string, ou -1 se a substring não for encontrada."
O que é o método `lastIndexOf()` em strings JavaScript?,"O método `lastIndexOf(substring)` retorna o índice da última ocorrência de uma substring em uma string, ou -1 se a substring não for encontrada."
O que é o método `substring()` em strings JavaScript?,"O método `substring(startIndex, endIndex)` retorna uma parte de uma string entre os índices especificados (exclusivo)."
O que é o método `substr()` em strings JavaScript?,"O método `substr(startIndex, length)` retorna uma parte de uma string começando no índice especificado e com o comprimento especificado. *Observação:* Este método é considerado legado e `substring` é preferível."
O que é o método `padStart()` em strings JavaScript?,"O método `padStart(targetLength, padString)` preenche o início de uma string com uma string especificada até atingir o comprimento desejado."
O que é o método `padEnd()` em strings JavaScript?,"O método `padEnd(targetLength, padString)` preenche o final de uma string com uma string especificada até atingir o comprimento desejado."
Como você define parâmetros padrão para funções em JavaScript?,Você pode definir parâmetros padrão usando a sintaxe `function minhaFuncao(parametro = valorPadrao) {}`.
O que é a função `Object.keys()` em JavaScript?,A função `Object.keys(objeto)` retorna um array com todas as chaves (nomes de propriedades) do objeto especificado.
O que é a função `Object.values()` em JavaScript?,A função `Object.values(objeto)` retorna um array com todos os valores das propriedades do objeto especificado.
O que é a função `Object.entries()` em JavaScript?,"A função `Object.entries(objeto)` retorna um array de arrays, onde cada array interno contém a chave e o valor de uma propriedade do objeto especificado."
O que é o método `push()` em arrays JavaScript?,O método `push(elemento)` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
O que é o método `pop()` em arrays JavaScript?,O método `pop()` remove o último elemento de um array e retorna esse elemento.
O que é o método `shift()` em arrays JavaScript?,O método `shift()` remove o primeiro elemento de um array e retorna esse elemento.
O que é o método `unshift()` em arrays JavaScript?,O método `unshift(elemento)` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
O que é o método `sort()` em arrays JavaScript?,"O método `sort()` ordena os elementos de um array no local e retorna o array ordenado. Por padrão, a ordenação é alfabética."
O que é o método `reverse()` em arrays JavaScript?,O método `reverse()` inverte a ordem dos elementos em um array no local e retorna o array invertido.
O que é o método `join()` em arrays JavaScript?,"O método `join(separador)` junta todos os elementos de um array em uma string, usando um separador especificado."
O que é o método `includes()` em arrays JavaScript?,"O método `includes(elemento)` retorna `true` se um array contém um elemento especificado, caso contrário, retorna `false`."
O que é o método `flat()` em arrays JavaScript?,O método `flat()` cria um novo array com todos os elementos de sub-arrays concatenados recursivamente até uma profundidade especificada.
O que é o método `flatMap()` em arrays JavaScript?,"O método `flatMap()` mapeia cada elemento usando uma função de mapeamento e, em seguida, nivela o resultado em um novo array. É idêntico a um `map()` seguido por um `flat()` de profundidade 1."
Qual a diferença entre funções declaradas e funções expressas?,"Funções declaradas são definidas usando a palavra-chave `function`, enquanto funções expressas são atribuídas a uma variável. Funções declaradas são ""hoisted"", enquanto funções expressas não (a variável é hoisted, mas não a função)."
Como você simula herança em JavaScript antes do ES6?,"Antes do ES6, a herança era simulada usando o sistema de protótipos, manipulando o protótipo de uma função construtora para apontar para o protótipo de outra."
O que são IIFE (Immediately Invoked Function Expression)?,São funções que são executadas assim que são definidas. São usadas para criar um escopo isolado e evitar conflitos de nomes.
"O que é ""use strict""?","`""use strict"";` é uma diretiva que habilita o modo estrito em JavaScript. Isso impõe regras mais rigorosas e ajuda a evitar erros comuns."
Como você lida com erros em Promises?,Você pode lidar com erros em Promises usando o método `.catch()` ou o bloco `try...catch` em funções `async/await`.
O que é o objeto `console` em JavaScript?,"O objeto `console` fornece acesso ao console de depuração do navegador e permite exibir mensagens, avisos e erros."
O que são eventos personalizados em JavaScript?,Eventos personalizados são eventos que você pode criar e disparar manualmente em JavaScript para sinalizar mudanças de estado ou interações específicas.
Como você dispara um evento personalizado em JavaScript?,Você pode criar um evento personalizado usando o construtor `new Event()` e dispará-lo usando o método `dispatchEvent()` em um elemento.
O que é o Garbage Collection em JavaScript?,"Garbage Collection é o processo automático de liberar memória que não está mais sendo usada por um programa. Em JavaScript, o Garbage Collector identifica e remove objetos que não são mais referenciados."
O que é o objeto `navigator` em JavaScript?,"O objeto `navigator` fornece informações sobre o navegador do usuário, como o nome do navegador, a versão e o sistema operacional."
O que são metaprogramação em JavaScript?,"Metaprogramação é a capacidade de um programa manipular outros programas (ou ele mesmo) como dados. Em JavaScript, isso envolve usar Reflect API e Proxies."
O que é o Proxy object em JavaScript?,"Proxy object é usado para customizar operações fundamentais em objetos (ex: leitura, escrita, enumeração, invocação). Permite a criação de hooks em operações de objetos.

Espero que esta lista seja útil e contenha perguntas diferentes e desafiadoras!"
O que é hoisting em JavaScript e como ele afeta variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seus escopos antes da execução do código.  No caso de variáveis declaradas com `var`, apenas a declaração é movida, a atribuição permanece onde está. Já as funções declaradas com a palavra-chave `function` são totalmente movidas para o topo."
Explique a diferença entre `==` e `===` em JavaScript.,"`==` (igualdade abstrata) compara valores após realizar a conversão de tipo, se necessário. `===` (igualdade estrita) compara valores sem conversão de tipo. Portanto, `===` é mais rigoroso."
Como você pode criar um objeto em JavaScript usando a sintaxe literal?,"Um objeto literal é criado usando chaves `{}` e definindo propriedades no formato `chave: valor`, separadas por vírgulas. Exemplo: `const pessoa = { nome: ""João"", idade: 30 };`"
Explique o que é a coerção de tipo (type coercion) em JavaScript.,"Coerção de tipo é a conversão automática de um tipo de dado para outro durante operações em JavaScript. Por exemplo, ao somar uma string com um número, o número pode ser convertido para string."
Qual a diferença entre `let` e `const` em JavaScript?,"`let` permite redeclarar e reatribuir o valor de uma variável dentro de seu escopo. `const` declara uma variável com escopo de bloco, cujo valor não pode ser reatribuído após a inicialização."
Explique como funciona o operador ternário em JavaScript.,O operador ternário é uma forma abreviada de escrever uma declaração `if...else`. Sua sintaxe é `condição ? expressão_se_verdadeiro : expressão_se_falso`.
O que é uma promise em JavaScript?,"Uma promise representa o eventual resultado (sucesso ou falha) de uma operação assíncrona.  Possui três estados: pendente (pending), resolvida (fulfilled) ou rejeitada (rejected)."
Como você pode lidar com erros em JavaScript usando `try...catch`?,O bloco `try` contém o código que pode lançar uma exceção. O bloco `catch` captura a exceção se ela for lançada dentro do bloco `try` e permite o tratamento do erro.
Explique o que é o operador `...` (spread operator) em JavaScript.,O operador spread pode ser usado para expandir elementos de um array ou propriedades de um objeto em outro array ou objeto.
Qual a diferença entre `call()` e `apply()` em JavaScript?,"Tanto `call()` quanto `apply()` são usados para invocar uma função com um determinado valor `this`. A diferença é que `call()` aceita argumentos individualmente, enquanto `apply()` aceita um array de argumentos."
"Explique o que é o conceito de ""truthy"" e ""falsy"" em JavaScript.","Em JavaScript, um valor ""truthy"" é um valor que é avaliado como `true` em um contexto booleano, enquanto um valor ""falsy"" é avaliado como `false`. Exemplos de valores falsy incluem `0`, `""""`, `null`, `undefined`, `NaN`, e `false`."
Como você pode definir valores padrão para parâmetros de função em JavaScript?,Você pode usar a sintaxe de parâmetros padrão: `function minhaFuncao(parametro1 = valorPadrao) { ... }`.
Explique o que são template literals em JavaScript.,Template literals são strings que permitem expressões embutidas. Elas são delimitadas por crases (`) e as expressões são inseridas usando `${expressao}`.
"Qual a diferença entre `var`, `let` e `const` em relação ao escopo?","`var` tem escopo de função ou escopo global, enquanto `let` e `const` têm escopo de bloco. Isso significa que variáveis declaradas com `let` e `const` são visíveis apenas dentro do bloco em que foram declaradas."
Explique o que é recursão em JavaScript.,Recursão é quando uma função chama a si mesma dentro de sua própria definição. É usada para resolver problemas que podem ser divididos em subproblemas menores semelhantes.
Como você pode verificar se uma propriedade existe em um objeto em JavaScript?,"Você pode usar o operador `in` ou o método `hasOwnProperty()`. Por exemplo: `""propriedade"" in objeto` ou `objeto.hasOwnProperty(""propriedade"")`."
Explique o que é o conceito de imutabilidade em JavaScript.,"Imutabilidade significa que, uma vez que um objeto é criado, seu estado não pode ser alterado. Em JavaScript, strings são imutáveis. Para objetos e arrays, você pode usar técnicas para criar novas instâncias em vez de modificar as existentes."
Como você pode criar um array imutável em JavaScript?,"Você pode usar métodos como `slice()`, `map()`, `filter()`, `concat()`, ou o spread operator para criar novas cópias do array em vez de modificar o array original."
Como você pode criar um objeto imutável em JavaScript?,"Você pode usar `Object.freeze()` para impedir que novas propriedades sejam adicionadas, que propriedades existentes sejam removidas ou que os valores das propriedades existentes sejam alterados.  No entanto, `Object.freeze()` apenas faz uma imutabilidade superficial."
O que é o método `Object.preventExtensions()` em JavaScript?,`Object.preventExtensions()` impede que novas propriedades sejam adicionadas a um objeto. As propriedades existentes ainda podem ser removidas ou modificadas.
"Explique o que é o padrão de projeto ""revealing module pattern"" em JavaScript.",É um padrão de projeto que permite encapsular o código em uma função e retornar apenas as partes que você deseja expor como uma API pública.
Como você pode converter uma string em um número em JavaScript?,"Você pode usar `parseInt()`, `parseFloat()`, ou o operador unário `+`. Por exemplo: `parseInt(""123"")`, `parseFloat(""3.14"")`, ou `+""42""`."
Como você pode verificar se um valor é um número em JavaScript?,"Você pode usar `typeof valor === ""number""` e `!isNaN(valor)`. É importante usar `!isNaN()` porque `typeof NaN` retorna `""number""`."
O que é o valor `NaN` em JavaScript?,`NaN` (Not-a-Number) é um valor que representa um valor numérico que não é um número válido.
Como você pode verificar se um valor é `NaN` em JavaScript?,Você deve usar a função `isNaN(valor)`. É importante notar que `NaN === NaN` retorna `false`.
Explique o que é a pilha de chamadas (call stack) em JavaScript.,"A pilha de chamadas é uma estrutura de dados que rastreia a execução de funções em JavaScript. Cada vez que uma função é chamada, ela é adicionada ao topo da pilha. Quando a função termina de executar, ela é removida da pilha."
O que é a fila de eventos (event queue) em JavaScript?,"A fila de eventos é uma fila que armazena callbacks de operações assíncronas (como `setTimeout`, `setInterval`, eventos DOM, etc.) que estão aguardando para serem executadas."
Explique o que é o escopo léxico (lexical scope) em JavaScript.,"Escopo léxico significa que o escopo de uma variável é determinado por sua posição no código-fonte, não por como a função é chamada."
Como o valor de `this` é determinado em uma função normal em JavaScript?,"Em uma função normal, o valor de `this` é determinado por como a função é chamada. Se a função é chamada como um método de um objeto, `this` se refere ao objeto. Se a função é chamada sem um objeto, `this` se refere ao objeto global (window no navegador, global no Node.js). Em modo estrito, o valor de `this` será `undefined` se não for explicitamente definido."
Como o valor de `this` é determinado em uma arrow function em JavaScript?,"Em uma arrow function, o valor de `this` é determinado lexicalmente, ou seja, ele herda o valor de `this` do escopo envolvente. Arrow functions não têm seu próprio `this`."
O que é o modo estrito (strict mode) em JavaScript?,"O modo estrito é uma forma de executar JavaScript que impõe regras mais rigorosas e ajuda a evitar erros comuns. Ele é ativado colocando a string `""use strict"";` no início de um script ou função."
Quais são alguns benefícios de usar o modo estrito em JavaScript?,"O modo estrito ajuda a evitar erros comuns, como usar variáveis não declaradas, atribuir valores a propriedades somente leitura e usar palavras reservadas como nomes de variáveis. Ele também melhora a segurança e o desempenho."
O que é o método `preventDefault()` em JavaScript?,"`preventDefault()` é usado em manipuladores de eventos para impedir o comportamento padrão do evento. Por exemplo, impedir que um link redirecione para uma nova página ou impedir que um formulário seja enviado."
O que é o método `stopPropagation()` em JavaScript?,`stopPropagation()` é usado em manipuladores de eventos para impedir que o evento se propague para os elementos pai. Isso é usado para evitar que outros manipuladores de eventos sejam executados no mesmo evento.
O que é o método `Promise.all()` em JavaScript?,"`Promise.all()` recebe um array de promises e retorna uma única promise que resolve quando todas as promises no array resolvem. Se alguma promise no array rejeitar, a promise retornada também rejeitará."
O que é o método `Promise.race()` em JavaScript?,`Promise.race()` recebe um array de promises e retorna uma única promise que resolve ou rejeita assim que a primeira promise no array resolve ou rejeita.
O que são Generators em JavaScript?,"Generators são funções que podem ser pausadas e retomadas, permitindo que você produza múltiplos valores ao longo do tempo. São definidas usando `function*`."
Como você usa a palavra-chave `yield` dentro de um Generator?,A palavra-chave `yield` pausa a execução do Generator e retorna o valor especificado. A execução pode ser retomada posteriormente.
Como você itera sobre os valores produzidos por um Generator?,Você pode usar um loop `for...of` ou o método `next()` do objeto Generator.
O que são Módulos em JavaScript?,Módulos são arquivos de código JavaScript que podem ser importados e exportados para reutilização em outros arquivos.
Como você exporta valores de um módulo em JavaScript?,"Você pode usar as palavras-chave `export` para exportar variáveis, funções, classes ou outros valores de um módulo. Existem exportações nomeadas (named exports) e exportações padrão (default exports)."
Como você importa valores de um módulo em JavaScript?,Você pode usar a palavra-chave `import` para importar valores de um módulo. Você pode importar exportações nomeadas usando chaves `{}` e exportações padrão sem chaves.
O que são Named Exports em JavaScript?,"Named exports permitem exportar múltiplos valores de um módulo, cada um com seu próprio nome. Eles são importados usando chaves `{}`."
O que é Default Export em JavaScript?,Default export permite exportar um único valor de um módulo como padrão. Ele é importado sem chaves.
O que são Template Strings com Tag em JavaScript?,"Template strings com tag permitem personalizar a forma como um template literal é processado, usando uma função ""tag"" que recebe os valores e strings do template literal."
O que é o operador `in` usado com Arrays em JavaScript?,"Quando usado com arrays, o operador `in` verifica se um índice existe no array. Por exemplo, `0 in [1,2,3]` retorna `true`, enquanto `5 in [1,2,3]` retorna `false`."
O que é um Typed Array em JavaScript?,"Typed Arrays fornecem um mecanismo para acessar dados binários brutos de forma eficiente. Eles representam arrays de um tipo específico (e.g., Int8Array, Uint16Array) e são úteis para lidar com áudio, vídeo, e outros dados binários."
O que é o objeto `Intl` em JavaScript?,"O objeto `Intl` é um namespace para a API de internacionalização do ECMAScript, que fornece formatação sensível à linguagem para datas, números, moedas e outras informações."
O que é Partial Application em JavaScript?,"Partial application é semelhante ao currying, mas em vez de transformar uma função em uma sequência de funções que recebem um argumento, ela cria uma nova função preenchendo alguns dos argumentos da função original."
Explique o conceito de memoization em JavaScript.,Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras e retorna o resultado armazenado quando as mesmas entradas ocorrem novamente.
O que é o Global Object em JavaScript?,"O objeto global é um objeto que sempre existe no escopo global. No navegador, é o objeto `window`. No Node.js, é o objeto `global`."
Como você pode obter a hora atual em milissegundos em JavaScript?,Você pode usar `Date.now()` ou `new Date().getTime()`.
O que são regular expressions (regex) em JavaScript?,Regular expressions são padrões usados para corresponder combinações de caracteres em strings.
Como você cria uma regular expression em JavaScript?,"Você pode criar uma regular expression usando a sintaxe literal: `/padrao/flags` ou usando o construtor `new RegExp(""padrao"", ""flags"")`."
Quais são alguns exemplos de flags que você pode usar com regular expressions em JavaScript?,"Algumas flags comuns incluem `i` (ignorar maiúsculas e minúsculas), `g` (correspondência global), e `m` (multiline)."
O que é o método `test()` em regular expressions em JavaScript?,O método `test()` testa se uma string corresponde a uma regular expression e retorna `true` ou `false`.
O que é o método `exec()` em regular expressions em JavaScript?,O método `exec()` executa uma busca por uma correspondência em uma string e retorna um array com informações sobre a correspondência ou `null` se não houver correspondência.
O que é o método `match()` em strings em JavaScript?,O método `match()` procura por uma correspondência de uma regular expression em uma string e retorna um array com os resultados ou `null` se não houver correspondência.
O que é o método `replace()` em strings em JavaScript?,O método `replace()` substitui uma parte de uma string por outra string ou por o resultado de uma função.
O que é o método `split()` em strings em JavaScript?,"O método `split()` divide uma string em um array de substrings, usando um separador especificado."
O que é o método `search()` em strings em JavaScript?,O método `search()` procura por uma correspondência de uma regular expression em uma string e retorna o índice da primeira correspondência ou `-1` se não houver correspondência.
O que é JSONP (JSON with Padding)?,"É uma técnica para contornar a restrição de mesma origem (same-origin policy) em navegadores, permitindo que um script em uma página web recupere dados de um domínio diferente.  JSONP funciona encapsulando os dados JSON em uma chamada de função.  É um tanto obsoleta devido a alternativas mais seguras como CORS."
O que são Data Attributes em HTML e como acessá-los com JavaScript?,"Data Attributes são atributos HTML que permitem armazenar dados personalizados em elementos HTML. Eles começam com o prefixo `data-`. Você pode acessá-los em JavaScript usando a propriedade `dataset` do elemento. Exemplo: `<div data-meu-valor=""123"">`. Em Javascript: `element.dataset.meuValor`."
O que é o operador `delete` em JavaScript?,"O operador `delete` remove uma propriedade de um objeto. Ele retorna `true` se a remoção for bem-sucedida ou `false` se a propriedade não puder ser removida (por exemplo, se estiver marcada como não configurável)."
Qual a diferença entre uma função declarada e uma função expressa em JavaScript?,"Uma função declarada é definida usando a palavra-chave `function` e tem seu nome hoisted para o topo do escopo. Uma função expressa é atribuída a uma variável e não é hoisted (ou seja, a função não pode ser chamada antes de ser definida)."
O que são side effects (efeitos colaterais) em funções JavaScript?,"Side effects são alterações no estado fora da função, como modificar variáveis globais, alterar propriedades de objetos passados como argumentos ou realizar operações de I/O. Funções com side effects são mais difíceis de testar e depurar."
O que são Immediately Invoked Function Expressions (IIFE) em JavaScript?,"IIFEs são funções anônimas que são executadas imediatamente após sua definição. Elas são usadas para criar um escopo privado para evitar conflitos de nomes e encapsular o código. Exemplo: `(function() { console.log(""IIFE""); })();`"
O que é Function Composition em JavaScript?,Function Composition é o processo de combinar duas ou mais funções para produzir uma nova função. A saída de uma função se torna a entrada da próxima.
O que é Transpilação em JavaScript?,"Transpilação é o processo de converter o código-fonte de uma linguagem de programação em uma linguagem de programação diferente, normalmente para permitir que o código seja executado em ambientes mais antigos que não suportam os recursos mais recentes."
Qual é a diferença entre shallow copy e deep copy em JavaScript?,"Shallow copy cria uma nova cópia de um objeto, mas as propriedades que são objetos ou arrays ainda referenciam os mesmos locais de memória do objeto original. Deep copy cria uma nova cópia do objeto e de todos os seus objetos e arrays aninhados, garantindo que não haja referências compartilhadas."
Como você pode realizar uma deep copy em JavaScript?,"Uma forma de realizar uma deep copy é usando `JSON.parse(JSON.stringify(objeto))`. No entanto, este método não funciona para funções, datas ou objetos complexos. Outras opções incluem bibliotecas especializadas ou implementar uma função de deep copy recursiva."
O que é Object Destructuring em JavaScript?,"Object destructuring é uma expressão JavaScript que torna possível extrair dados de objetos e atribuí-los a variáveis de forma concisa. Exemplo: `const { nome, idade } = pessoa;`"
O que é Array Destructuring em JavaScript?,"Array destructuring é semelhante ao object destructuring, mas é usado para extrair valores de arrays e atribuí-los a variáveis. Exemplo: `const [primeiro, segundo] = array;`"
O que é a palavra-chave `new` em JavaScript?,"A palavra-chave `new` é usada para criar uma nova instância de um objeto a partir de uma função construtora. Ela realiza as seguintes ações: cria um novo objeto vazio, define o protótipo do objeto para o protótipo da função construtora, executa a função construtora com `this` definido para o novo objeto e retorna o novo objeto (a menos que a função construtora retorne explicitamente outro objeto)."
O que é o protótipo de um objeto em JavaScript?,O protótipo é um objeto do qual outro objeto herda propriedades e métodos. Todos os objetos em JavaScript têm um protótipo.
Como você pode acessar o protótipo de um objeto em JavaScript?,Você pode acessar o protótipo de um objeto usando a propriedade `__proto__` (embora não seja recomendada para uso em produção) ou usando o método `Object.getPrototypeOf()`.
O que é o conceito de Prototype Chain em JavaScript?,"Prototype Chain é a cadeia de protótipos que um objeto herda. Se uma propriedade ou método não for encontrado no objeto, o JavaScript procurará no protótipo do objeto e, em seguida, no protótipo do protótipo e assim por diante, até chegar ao protótipo `null`."
Como você pode simular herança em JavaScript usando protótipos?,Você pode simular herança criando uma nova função construtora e definindo o protótipo dessa função para uma instância da função construtora pai. Isso permite que a função construtora filha herde as propriedades e métodos da função construtora pai.
O que são Mixins em JavaScript?,Mixins são classes ou objetos que contêm funcionalidades que podem ser adicionadas a outras classes ou objetos. Eles são usados para reutilizar o código e adicionar funcionalidades a objetos que não estão relacionados hierarquicamente.
O que é Composition over Inheritance?,"Composition over Inheritance é um princípio de design de software que favorece a composição de objetos sobre a herança. Em vez de criar hierarquias de classes com herança, você cria objetos combinando outros objetos menores e mais especializados."
O que é o padrão Module em JavaScript?,O padrão Module é um padrão de projeto que fornece uma maneira de encapsular o código e criar um escopo privado para evitar conflitos de nomes e organizar o código em unidades lógicas.
O que é o conceito de Debouncing em JavaScript?,"Debouncing é uma técnica usada para limitar a taxa na qual uma função é executada. Ela agrupa várias chamadas de função consecutivas em uma única chamada, executando a função somente após um determinado período de inatividade."
O que é o conceito de Throttling em JavaScript?,"Throttling é semelhante a debouncing, mas em vez de agrupar todas as chamadas de função consecutivas em uma única chamada, ele executa a função em intervalos regulares de tempo."
Como funciona o Garbage Collection em JavaScript?,"O Garbage Collection em JavaScript geralmente usa um algoritmo de ""marcação e varredura"" (mark and sweep). Ele marca todos os objetos que estão sendo usados pelo programa e, em seguida, varre a memória para liberar todos os objetos que não foram marcados."
O que são Memory Leaks (vazamentos de memória) em JavaScript?,"Memory Leaks ocorrem quando a memória não está mais sendo usada pelo programa, mas não é liberada pelo Garbage Collection. Isso pode levar a um consumo excessivo de memória e, eventualmente, a um travamento do programa."
Quais são algumas causas comuns de Memory Leaks em JavaScript?,"Algumas causas comuns incluem variáveis globais não intencionais, closures que mantêm referências a variáveis que não são mais necessárias, manipuladores de eventos que não são removidos e referências circulares entre objetos."
Como você pode depurar Memory Leaks em JavaScript?,"Você pode usar ferramentas de desenvolvedor do navegador para analisar o uso da memória e identificar objetos que não estão sendo liberados pelo Garbage Collection.

Ufa! Espero que estas perguntas e respostas sejam úteis para aprofundar o seu conhecimento em JavaScript.  Boa sorte!"
O que é o hoisting em JavaScript e como ele afeta o código?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do seu escopo antes da execução do código.  No caso de variáveis declaradas com `var`, apenas a declaração é movida, não a inicialização. Variáveis declaradas com `let` e `const` também sofrem hoisting, mas não são inicializadas, resultando em um erro se forem acessadas antes da declaração real no código. Funções declaradas com a palavra-chave `function` são completamente movidas, incluindo a inicialização."
Explique o conceito de closures em JavaScript.,"Um closure é a capacidade de uma função (a ""função interna"") de acessar variáveis do escopo de uma função externa que a envolve, mesmo depois que a função externa já terminou de executar.  A função interna ""lembra"" o ambiente em que foi criada."
O que é o objeto `arguments` em JavaScript e como ele é usado?,"O objeto `arguments` é um objeto semelhante a um array disponível dentro de todas as funções não-arrow (não-arrow functions). Ele contém uma lista de todos os argumentos passados para a função, independentemente dos parâmetros definidos na declaração da função. Pode ser usado para acessar argumentos adicionais passados para a função."
O que são template literals em JavaScript e como eles são úteis?,Template literals são strings delimitadas com crases (` `` `) em vez de aspas simples ou duplas. Elas permitem interpolação de strings (substituir variáveis dentro da string) usando `${expressao}` e strings de múltiplas linhas sem necessidade de concatenação ou caracteres de escape.
"Explique o conceito de ""truthy"" e ""falsy"" values em JavaScript.","""Truthy"" values são valores que são avaliados como `true` em um contexto booleano. ""Falsy"" values são valores que são avaliados como `false` em um contexto booleano.  Valores falsy incluem: `false`, `0`, `-0`, `0n`, `""""`, `null`, `undefined`, e `NaN`. Todos os outros valores são truthy."
O que é o operador ternário em JavaScript e como ele funciona?,"O operador ternário é um atalho para uma instrução `if...else`. Ele tem a seguinte sintaxe: `condicao ? expressao_se_verdadeiro : expressao_se_falso`. Se a `condicao` for verdadeira, a `expressao_se_verdadeiro` é avaliada; caso contrário, a `expressao_se_falso` é avaliada."
O que é o método `bind()` em JavaScript e para que ele serve?,"O método `bind()` cria uma nova função que, quando chamada, tem sua palavra-chave `this` definida para o valor fornecido.  É usado para definir o contexto (`this`) de uma função explicitamente."
O que são arrow functions em JavaScript e como elas diferem das funções regulares?,"Arrow functions são uma sintaxe mais curta para escrever funções em JavaScript. Elas diferem das funções regulares em relação ao valor de `this` (arrow functions herdam o `this` do escopo circundante), na ausência do objeto `arguments` (você pode usar o operador rest `...` para obter os argumentos), e não podem ser usadas como construtoras (não podem ser usadas com `new`)."
Como você pode prevenir a modificação de um objeto em JavaScript?,"Você pode usar: `Object.freeze()` (impede que novas propriedades sejam adicionadas e impede a modificação de propriedades existentes), `Object.seal()` (impede que novas propriedades sejam adicionadas, mas permite a modificação de propriedades existentes), ou `Object.preventExtensions()` (impede que novas propriedades sejam adicionadas)."
O que é o operador rest (`...`) em JavaScript e como ele é usado?,O operador rest (`...`) é usado para coletar todos os argumentos restantes de uma função em um array. Ele também pode ser usado para coletar os elementos restantes de um array ou as propriedades restantes de um objeto durante a desestruturação.
O que é o operador spread (`...`) em JavaScript e como ele é usado?,O operador spread (`...`) é usado para expandir um iterável (como um array ou string) em locais onde se espera zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) ou pares de valores-chave (para literais de objeto).
O que é o método `map()` em JavaScript e para que ele serve?,"O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele itera sobre cada elemento do array e aplica a função de callback, retornando um novo array com os resultados."
O que é o método `filter()` em JavaScript e para que ele serve?,"O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.  Ele itera sobre cada elemento do array e, se a função de callback retornar `true`, o elemento é incluído no novo array."
O que é o método `reduce()` em JavaScript e para que ele serve?,"O método `reduce()` aplica uma função (um ""redutor"") a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor. Ele recebe uma função de callback com um acumulador e o valor atual, e retorna o novo valor do acumulador."
O que são Promises em JavaScript e como elas são usadas para lidar com operações assíncronas?,"Promises são objetos que representam a eventual conclusão (ou falha) de uma operação assíncrona e seu valor resultante. Elas têm três estados: `pending` (pendente), `fulfilled` (resolvida) e `rejected` (rejeitada). Promises ajudam a evitar o ""callback hell"" e tornam o código assíncrono mais legível e gerenciável."
O que são as palavras-chave `async` e `await` em JavaScript e como elas se relacionam com Promises?,`async` é uma palavra-chave usada para declarar uma função assíncrona. Uma função `async` retorna implicitamente uma Promise. `await` é uma palavra-chave usada dentro de uma função `async` para pausar a execução da função até que uma Promise seja resolvida (fulfilled) ou rejeitada. `async/await` simplifica a escrita de código assíncrono baseado em Promises.
"O que é o conceito de ""event loop"" em JavaScript e como ele funciona?","O event loop é o mecanismo que permite que o JavaScript execute operações assíncronas sem bloquear a thread principal. Ele monitora a pilha de chamadas (call stack) e a fila de callbacks (callback queue). Quando a pilha de chamadas está vazia, o event loop pega o primeiro callback da fila e o coloca na pilha de chamadas para ser executado."
O que são generators em JavaScript e como eles são usados?,"Generators são funções que podem ser pausadas e retomadas, permitindo que você crie funções que retornam múltiplos valores ao longo do tempo. Elas são definidas usando a sintaxe `function*`. A palavra-chave `yield` é usada para pausar a execução da função e retornar um valor."
O que é o método `forEach()` em JavaScript e como ele se compara ao loop `for`?,"O método `forEach()` executa uma função fornecida uma vez para cada elemento em um array. Ele é semelhante a um loop `for`, mas é mais conciso para iterar sobre todos os elementos de um array. Ao contrário do loop `for`, não é possível interromper a execução de `forEach()` usando `break` ou `continue`; você deve usar um loop `for` se precisar dessa funcionalidade."
O que são eventos em JavaScript e como eles são usados para tornar as páginas web interativas?,"Eventos são ações ou ocorrências que acontecem em um navegador web, como cliques de mouse, carregamento de páginas, envio de formulários, etc. O JavaScript pode detectar e responder a esses eventos, permitindo que você crie páginas web interativas."
Como você pode adicionar um event listener a um elemento HTML usando JavaScript?,"Você pode usar o método `element.addEventListener(tipoEvento, funcaoCallback)`. Por exemplo: `elemento.addEventListener('click', minhaFuncao);`"
O que é o objeto `event` passado para um event listener em JavaScript?,"O objeto `event` contém informações sobre o evento que ocorreu, como o elemento que disparou o evento, as coordenadas do mouse, a tecla pressionada, etc. Ele permite que você acesse detalhes específicos sobre o evento para personalizar sua resposta."
O que é o método `preventDefault()` no objeto `event` em JavaScript?,"O método `preventDefault()` impede o comportamento padrão de um evento. Por exemplo, ele pode ser usado para impedir que um link redirecione para uma nova página ou que um formulário seja enviado."
O que é o método `stopPropagation()` no objeto `event` em JavaScript?,O método `stopPropagation()` impede que o evento se propague para elementos pais no DOM (event bubbling). Ele é usado para evitar que múltiplos event listeners sejam executados em elementos diferentes na hierarquia do DOM.
Como você pode delegar eventos em JavaScript?,"Delegação de eventos é uma técnica em que você adiciona um event listener a um elemento pai em vez de adicionar event listeners a múltiplos elementos filhos. Quando um evento ocorre em um elemento filho, ele ""borbulha"" para o elemento pai, onde o event listener pode determinar qual elemento filho disparou o evento e executar a ação apropriada. Isso é útil para lidar com grandes quantidades de elementos ou elementos que são adicionados dinamicamente ao DOM."
O que é o método `setTimeout()` em JavaScript e como ele é usado?,O método `setTimeout()` agenda a execução de uma função (ou um trecho de código) após um determinado período de tempo (em milissegundos). Ele retorna um ID que pode ser usado para cancelar o timeout com `clearTimeout()`.
O que é o método `setInterval()` em JavaScript e como ele é usado?,O método `setInterval()` executa repetidamente uma função (ou um trecho de código) em intervalos de tempo regulares (em milissegundos). Ele retorna um ID que pode ser usado para cancelar o intervalo com `clearInterval()`.
Como você pode converter um objeto JavaScript para uma string JSON?,Você pode usar o método `JSON.stringify(objeto)`.
Como você pode converter uma string JSON para um objeto JavaScript?,Você pode usar o método `JSON.parse(string)`.
O que é memoization em JavaScript e como ela pode melhorar o desempenho?,"Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras (ou funções puras) e retorna o resultado armazenado em cache quando as mesmas entradas ocorrem novamente. Isso pode melhorar significativamente o desempenho, especialmente para funções recursivas."
O que é composição de funções em JavaScript?,Composição de funções é o processo de combinar duas ou mais funções para produzir uma nova função. A saída de uma função é usada como a entrada da próxima função.
O que são IIFE (Immediately Invoked Function Expressions) em JavaScript?,"IIFE (Immediately Invoked Function Expressions) são funções que são executadas assim que são definidas. Elas são usadas para criar um escopo privado para variáveis e funções, evitando conflitos de namespace.  A sintaxe básica é `(function() { /* código */ })();`."
O que são closures e como eles estão relacionados ao padrão de módulo?,"Closures permitem que as funções internas de um módulo acessem as variáveis privadas definidas no escopo externo da função IIFE, mesmo depois que a função IIFE termina de ser executada. Isso permite que o módulo mantenha o estado privado."
O que é o objeto `history` em JavaScript?,"O objeto `history` permite que você navegue pelo histórico de navegação do usuário. Ele contém métodos como `history.back()`, `history.forward()` e `history.go()` para navegar para páginas anteriores ou futuras."
Como você pode armazenar dados no navegador do usuário usando JavaScript?,Você pode usar `localStorage` (armazenamento persistente) ou `sessionStorage` (armazenamento temporário para a sessão atual).
Qual a diferença entre `localStorage` e `sessionStorage` em JavaScript?,`localStorage` armazena dados permanentemente no navegador do usuário (até que sejam explicitamente removidos). `sessionStorage` armazena dados apenas para a duração da sessão atual do navegador (os dados são perdidos quando o navegador é fechado).
Quais são os perigos de usar cookies em JavaScript e como você pode mitigar esses riscos?,"Os cookies podem ser vulneráveis a ataques de Cross-Site Scripting (XSS) e Cross-Site Request Forgery (CSRF). Para mitigar esses riscos, você pode usar cookies com atributos `HttpOnly` (para evitar que sejam acessados por JavaScript), `Secure` (para garantir que sejam transmitidos apenas por HTTPS) e `SameSite` (para controlar como os cookies são enviados em solicitações entre sites)."
O que é o padrão Prototype em JavaScript?,O padrão Prototype é um padrão de projeto de software que permite criar novos objetos copiando um objeto existente (o prototype). Isso pode ser mais eficiente do que criar novos objetos do zero.
O que é programação orientada a objetos (OOP) em JavaScript?,"Programação orientada a objetos (OOP) é um paradigma de programação que organiza o código em ""objetos"", que são instâncias de ""classes"". As classes definem as propriedades (dados) e métodos (comportamentos) que os objetos terão."
Quais são os quatro pilares da programação orientada a objetos (OOP)?,"Os quatro pilares da OOP são: Abstração, Encapsulamento, Herança e Polimorfismo."
O que é encapsulamento em JavaScript?,Encapsulamento é o princípio de agrupar dados (atributos) e os métodos que operam nesses dados em uma única unidade (uma classe). Também envolve ocultar os detalhes de implementação internos do objeto do mundo exterior e fornecer uma interface pública para interagir com o objeto.
O que é herança em JavaScript?,Herança é um mecanismo que permite que uma classe (a classe filha ou subclasse) herde propriedades e métodos de outra classe (a classe pai ou superclasse). Isso promove a reutilização de código e estabelece uma hierarquia de classes.
O que é polimorfismo em JavaScript?,"Polimorfismo é a capacidade de um objeto assumir muitas formas. Em outras palavras, é a capacidade de chamar o mesmo método em objetos diferentes e obter resultados diferentes, dependendo do tipo do objeto."
Como você pode criar uma classe em JavaScript usando a sintaxe `class` (ES6)?,"Você pode usar a palavra-chave `class` seguida pelo nome da classe. Dentro da classe, você pode definir um construtor (usando o método `constructor`) para inicializar as propriedades do objeto e métodos para definir os comportamentos do objeto."
O que é o método `constructor` em uma classe JavaScript?,O método `constructor` é um método especial dentro de uma classe JavaScript que é executado quando um novo objeto da classe é criado. Ele é usado para inicializar as propriedades do objeto.
Como você pode criar uma instância de uma classe em JavaScript?,"Você pode usar a palavra-chave `new` seguida pelo nome da classe e os argumentos necessários para o construtor. Por exemplo: `const meuObjeto = new MinhaClasse(argumento1, argumento2);`."
Como você pode herdar de outra classe em JavaScript usando a sintaxe `class` (ES6)?,Você pode usar a palavra-chave `extends` para indicar que uma classe herda de outra classe. Por exemplo: `class MinhaSubclasse extends MinhaSuperclasse { ... }`.
Como você pode chamar o construtor da classe pai em uma classe filha usando a sintaxe `class` (ES6)?,Você pode usar a palavra-chave `super()` dentro do construtor da classe filha para chamar o construtor da classe pai. Isso garante que as propriedades da classe pai sejam inicializadas corretamente.
O que é o método `static` em uma classe JavaScript?,"Métodos estáticos são métodos que pertencem à classe em si, e não a instâncias da classe. Eles são chamados diretamente na classe, usando a sintaxe `Classe.metodoEstatico()`. Métodos estáticos geralmente são usados para funções utilitárias ou para criar métodos factory."
Como você pode definir um getter em JavaScript?,Você pode usar a palavra-chave `get` antes do nome do método dentro de um objeto literal ou classe. Por exemplo: `get minhaPropriedade() { return this._minhaPropriedade; }`.
Como você pode definir um setter em JavaScript?,Você pode usar a palavra-chave `set` antes do nome do método dentro de um objeto literal ou classe. Por exemplo: `set minhaPropriedade(valor) { this._minhaPropriedade = valor; }`.
O que é a palavra-chave `this` em JavaScript?,A palavra-chave `this` se refere ao objeto no qual a função atual está sendo executada. O valor de `this` depende de como a função é chamada.
Qual o valor de `this` em uma função global em JavaScript (fora de qualquer objeto)?,"Em uma função global, o valor de `this` é o objeto global (o objeto `window` no navegador ou o objeto `global` no Node.js). No modo estrito (`""use strict""`), o valor de `this` é `undefined` em funções globais."
Qual o valor de `this` em um método de objeto em JavaScript?,"Em um método de objeto, o valor de `this` é o próprio objeto."
"Qual o valor de `this` em uma função chamada com `call()`, `apply()` ou `bind()` em JavaScript?","Quando uma função é chamada com `call()`, `apply()` ou `bind()`, você pode especificar explicitamente o valor de `this` como o primeiro argumento para esses métodos."
"O que é o modo estrito (`""use strict""`) em JavaScript e como ele afeta o código?","O modo estrito é uma forma de executar o JavaScript de forma mais ""segura"" e ""limpa"". Ele impõe regras mais rigorosas e elimina alguns comportamentos ""ruins"" da linguagem. Por exemplo, ele impede o uso de variáveis não declaradas, impede a atribuição a propriedades somente leitura e altera o valor de `this` em funções globais."
O que são erros (errors) em JavaScript e como você pode lidar com eles?,"Erros são problemas que ocorrem durante a execução de um código JavaScript. Eles podem ser erros de sintaxe, erros de tempo de execução ou erros lógicos. Você pode lidar com erros usando blocos `try...catch` para capturar e tratar exceções."
O que é o bloco `try...catch` em JavaScript e como ele funciona?,"O bloco `try...catch` permite que você execute um bloco de código (dentro do bloco `try`) e, se ocorrer uma exceção, capture e trate essa exceção no bloco `catch`. Isso impede que o programa quebre e permite que você lide com o erro de forma controlada."
Como você pode lançar uma exceção em JavaScript?,"Você pode usar a palavra-chave `throw` para lançar uma exceção. Você pode lançar qualquer tipo de valor como uma exceção, mas geralmente é recomendado lançar um objeto `Error` ou uma subclasse de `Error`."
O que são expressões regulares (regex) em JavaScript e como elas são usadas?,"Expressões regulares (regex) são padrões usados para corresponder sequências de caracteres em strings. Elas podem ser usadas para validar entrada de dados, pesquisar e substituir texto, extrair informações de strings e realizar outras operações de processamento de texto."
Quais são alguns dos metacaracteres comuns usados em expressões regulares em JavaScript?,"Alguns metacaracteres comuns incluem: `.` (qualquer caractere), `*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `[]` (conjunto de caracteres), `^` (início da string), `$` (fim da string), `\d` (dígito), `\w` (caractere de palavra) e `\s` (espaço em branco)."
O que são flags em expressões regulares em JavaScript?,"Flags modificam o comportamento de uma expressão regular. As flags mais comuns são: `i` (insensível a maiúsculas e minúsculas), `g` (global, encontra todas as ocorrências), `m` (multilinhas)."
Como você pode usar o método `test()` para verificar se uma string corresponde a uma expressão regular em JavaScript?,O método `test()` retorna `true` se a string corresponder à expressão regular e `false` caso contrário. Por exemplo: `/padrao/.test('string')`.
Como você pode usar o método `exec()` para encontrar correspondências em uma string usando uma expressão regular em JavaScript?,O método `exec()` procura por uma correspondência na string e retorna um array com informações sobre a correspondência (incluindo os grupos de captura) ou `null` se não houver correspondência.
Como você pode usar o método `match()` para encontrar correspondências em uma string usando uma expressão regular em JavaScript?,"O método `match()` retorna um array com todas as correspondências encontradas na string ou `null` se não houver correspondências. Se a expressão regular tiver a flag `g`, ele retorna um array com todas as correspondências. Se não tiver a flag `g`, ele retorna um array com a primeira correspondência e os grupos de captura."
Como você pode usar o método `replace()` para substituir partes de uma string usando uma expressão regular em JavaScript?,O método `replace()` substitui partes de uma string que correspondem a uma expressão regular por uma nova string. Você pode usar grupos de captura na string de substituição para referenciar partes da string correspondente.
O que são callbacks em JavaScript e como eles são usados?,"Callbacks são funções que são passadas como argumentos para outras funções e são executadas posteriormente, geralmente após a conclusão de uma operação assíncrona. Eles são usados para lidar com eventos, operações de I/O e outras tarefas assíncronas."
"O que é o ""callback hell"" e como você pode evitá-lo em JavaScript?","""Callback hell"" é uma situação em que você tem várias callbacks aninhadas umas dentro das outras, tornando o código difícil de ler, entender e manter. Você pode evitar o ""callback hell"" usando Promises, async/await ou técnicas de modularização."
Como você pode criar e usar um Web Worker em JavaScript?,Você pode criar um Web Worker instanciando um objeto `Worker` com o caminho para um arquivo JavaScript que contém o código do worker. Você pode se comunicar com o worker enviando mensagens usando o método `postMessage()` e recebendo mensagens usando o event listener `onmessage`.
O que é o método `requestAnimationFrame()` em JavaScript e como ele é usado?,"O método `requestAnimationFrame()` agenda uma função para ser executada antes da próxima repintura do navegador. Ele é usado para criar animações suaves e eficientes, pois garante que as animações sejam sincronizadas com a taxa de atualização do monitor."
O que é o objeto `console` em JavaScript e como ele é usado para depuração?,"O objeto `console` fornece acesso ao console de depuração do navegador. Ele contém métodos como `console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()` e `console.timeEnd()` que podem ser usados para exibir mensagens, avisos, erros, tabelas e medir o tempo de execução de trechos de código."
O que é o método `debugger` em JavaScript e como ele é usado para depuração?,"O método `debugger` é uma instrução que pausa a execução do código e abre o depurador do navegador (se estiver aberto). Ele permite que você inspecione o estado do código, defina breakpoints e execute o código passo a passo."
O que é a API Fetch em JavaScript e como ela é usada para fazer requisições HTTP?,"A API Fetch fornece uma interface moderna e flexível para fazer requisições HTTP em JavaScript. Ela retorna Promises, o que facilita o tratamento de respostas assíncronas."
Como você pode fazer uma requisição GET usando a API Fetch em JavaScript?,Você pode usar o método `fetch()` com a URL do recurso que você deseja obter. Por
O que é hoisting em JavaScript e quais declarações são afetadas?,"Hoisting é o comportamento do JavaScript de mover declarações para o topo do escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto funções declaradas com a sintaxe de declaração (`function myFunction() {}`) são hoisted completamente. Variáveis declaradas com `let` e `const` também são hoisted, mas não inicializadas, resultando em um erro se forem acessadas antes da declaração."
O que é uma função construtora em JavaScript e como ela é usada?,"Uma função construtora é uma função usada para criar objetos. Ela é chamada com a palavra-chave `new`, que cria um novo objeto, define `this` dentro da função para se referir ao novo objeto, e implicitamente retorna o novo objeto."
O que é a diferença entre `slice()` e `splice()` em JavaScript?,"`slice()` retorna uma cópia de uma parte de um array, sem modificar o array original. `splice()` modifica o array original, removendo ou substituindo elementos, e retorna os elementos removidos."
O que são template literals em JavaScript e quais vantagens eles oferecem?,"Template literals são strings delimitadas por backticks (` `). Eles permitem a incorporação de expressões (variáveis, cálculos, etc.) diretamente dentro da string usando a sintaxe `${expressao}`. Eles também suportam strings multi-linha sem necessidade de concatenação."
Qual a utilidade do operador spread (`...`) em JavaScript?,O operador spread permite expandir um iterável (como um array ou string) em lugares onde múltiplos argumentos (para chamadas de função) ou múltiplos elementos (para literais de array) são esperados.  Ele também pode ser usado para clonar arrays e objetos (shallow copy).
O que são arrow functions em JavaScript e quais as diferenças em relação às funções tradicionais?,"Arrow functions são uma sintaxe mais concisa para escrever funções em JavaScript. Elas não têm seu próprio `this` (herdam o `this` do contexto pai), não têm o objeto `arguments` e não podem ser usadas como funções construtoras."
Explique o conceito de truthy e falsy values em JavaScript.,"Truthy values são valores que são avaliados como `true` em um contexto booleano. Falsy values são valores que são avaliados como `false` em um contexto booleano. Exemplos de falsy values são: `0`, `""""` (string vazia), `null`, `undefined`, `NaN` e `false`."
O que é o método `map()` em arrays JavaScript e como ele funciona?,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele não modifica o array original.
O que é o método `filter()` em arrays JavaScript e como ele funciona?,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. Ele não modifica o array original.
O que é o método `reduce()` em arrays JavaScript e como ele funciona?,"O método `reduce()` executa uma função reducer (fornecida por você) em cada elemento do array, resultando em um único valor de saída. Ele recebe um acumulador e o elemento atual como argumentos."
O que é o método `forEach()` em arrays JavaScript e como ele funciona?,O método `forEach()` executa uma função fornecida uma vez para cada elemento do array. Ele não retorna um novo array e não pode ser interrompido com `break` ou `continue`.
Como você pode converter uma string para um número em JavaScript?,"Você pode usar `Number()`, `parseInt()` (para inteiros) ou `parseFloat()` (para números de ponto flutuante)."
O que é o conceito de immutability em JavaScript e por que é importante?,"Immutability significa que o estado de um objeto não pode ser modificado após a sua criação. É importante porque torna o código mais previsível, fácil de depurar e testar, e ajuda a evitar efeitos colaterais indesejados."
Como você pode evitar a mutação de um array em JavaScript?,"Você pode usar métodos que retornam um novo array sem modificar o original, como `slice()`, `map()`, `filter()`, `reduce()` ou o operador spread para criar uma cópia."
O que é o método `hasOwnProperty()` em JavaScript?,O método `hasOwnProperty()` retorna um booleano indicando se o objeto possui a propriedade especificada como uma propriedade direta (não herdada).
O que são flags em expressões regulares JavaScript e quais são algumas comuns?,"Flags modificam o comportamento da pesquisa de expressões regulares. Algumas flags comuns são: `i` (ignorar maiúsculas/minúsculas), `g` (global - encontrar todas as correspondências), `m` (multiline - `^` e `$` correspondem ao início/fim de cada linha)."
O que é o método `exec()` em expressões regulares JavaScript?,O método `exec()` executa uma pesquisa por uma correspondência em uma string especificada. Retorna um array com informações sobre a correspondência (ou `null` se não houver correspondência).
O que é backtracking em expressões regulares?,Backtracking é o processo que o mecanismo de regex usa para tentar diferentes combinações de correspondências quando uma parte do padrão falha em corresponder. Pode ser ineficiente em alguns casos.
Como você obtém o dia da semana a partir de um objeto `Date` em JavaScript?,"Você pode usar o método `getDay()`, que retorna um número representando o dia da semana (0 para Domingo, 1 para Segunda, etc.)."
Como você converte um objeto JavaScript para JSON?,Você pode usar o método `JSON.stringify(obj)` para converter um objeto JavaScript para uma string JSON.
O que são os eventos em JavaScript?,"Eventos são ações ou ocorrências que acontecem no navegador (por exemplo, clique do mouse, carregamento de página, envio de formulário). JavaScript permite que você responda a esses eventos."
Como você seleciona um elemento do DOM em JavaScript?,"Você pode usar métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`, `document.querySelector()` e `document.querySelectorAll()`."
Como você adiciona um ouvinte de evento a um elemento do DOM em JavaScript?,"Você pode usar o método `addEventListener()` para adicionar um ouvinte de evento a um elemento do DOM. Por exemplo: `elemento.addEventListener('click', function() { ... });`"
O que é o objeto `event` em JavaScript?,"O objeto `event` é passado para a função de callback quando um evento é acionado. Ele contém informações sobre o evento, como o elemento que o acionou, o tipo de evento e outras propriedades relevantes."
O que são os timers em JavaScript?,Timers permitem que você execute funções após um determinado período de tempo ou em intervalos regulares.
Quais são as funções `setTimeout()` e `setInterval()` em JavaScript?,`setTimeout()` executa uma função uma vez após um determinado período de tempo (em milissegundos). `setInterval()` executa uma função repetidamente em intervalos regulares (em milissegundos).
Como você cancela um timer criado com `setTimeout()` ou `setInterval()`?,Você pode usar `clearTimeout()` para cancelar um timer criado com `setTimeout()` e `clearInterval()` para cancelar um timer criado com `setInterval()`.
O que é o conceito de callback em JavaScript?,Um callback é uma função que é passada como argumento para outra função e é executada após a conclusão de alguma operação.
O que é programação assíncrona em JavaScript?,Programação assíncrona permite que seu código continue a ser executado enquanto espera que uma operação seja concluída (como uma solicitação de rede ou um timer). Isso evita que a interface do usuário fique travada.
"Quais são os métodos `then()`, `catch()` e `finally()` em Promises?",`then()` é chamado quando a Promise é cumprida (resolvida). `catch()` é chamado quando a Promise é rejeitada. `finally()` é chamado independentemente de a Promise ser cumprida ou rejeitada.
O que são `async` e `await` em JavaScript?,`async` e `await` são palavras-chave que facilitam a escrita de código assíncrono que se parece e se comporta um pouco mais como código síncrono.  `async` é usado para declarar uma função como assíncrona. `await` é usado dentro de uma função `async` para pausar a execução da função até que uma Promise seja resolvida ou rejeitada.
O que é o armazenamento local (localStorage) em JavaScript?,O armazenamento local (localStorage) permite armazenar dados no navegador do usuário de forma persistente (os dados permanecem disponíveis mesmo após o fechamento do navegador). Os dados são armazenados como pares chave-valor.
O que é o armazenamento de sessão (sessionStorage) em JavaScript?,"O armazenamento de sessão (sessionStorage) é semelhante ao armazenamento local, mas os dados são armazenados apenas durante a sessão do navegador e são removidos quando o navegador é fechado."
Como você armazena dados no localStorage e sessionStorage?,"Você pode usar os métodos `setItem(chave, valor)` para armazenar dados e `getItem(chave)` para recuperá-los. Por exemplo: `localStorage.setItem('nome', 'João');` e `const nome = localStorage.getItem('nome');`"
O que é o escopo léxico em JavaScript?,O escopo léxico significa que o escopo de uma variável é determinado por sua posição no código fonte (onde ela é declarada) e não por onde a função é chamada.
Como você pode forçar o valor de `this` em uma função em JavaScript?,"Você pode usar os métodos `call()`, `apply()` e `bind()` para forçar o valor de `this` em uma função."
"O que é o modo estrito (`""use strict""`) em JavaScript?","O modo estrito impõe um conjunto mais rigoroso de regras ao código JavaScript, ajudando a prevenir erros comuns e melhorar a segurança. Ele é ativado declarando `""use strict"";` no início de um script ou função."
Quais são algumas das restrições impostas pelo modo estrito em JavaScript?,"Algumas restrições incluem: atribuir a variáveis não declaradas resulta em erro, `this` é `undefined` em funções chamadas como funções simples (não como métodos de objeto), a palavra-chave `with` é proibida, argumentos com o mesmo nome não são permitidos, entre outras."
O que são iteradores em JavaScript?,Iteradores são objetos que definem uma sequência e retornam um valor por vez quando o método `next()` é chamado. Eles são usados para percorrer estruturas de dados como arrays e strings.
O que é o método `yield` em generators JavaScript?,`yield` pausa a execução da função generator e retorna um valor. A execução pode ser retomada posteriormente.
Quais são as duas formas principais de módulos em JavaScript (antes do ES Modules)?,As duas formas principais são: Immediately Invoked Function Expression (IIFE) e CommonJS (usado no Node.js).
O que são ES Modules em JavaScript?,"ES Modules são o sistema de módulos padrão para JavaScript, introduzido no ECMAScript 2015 (ES6). Eles usam as palavras-chave `import` e `export` para importar e exportar módulos."
Qual a diferença entre `export default` e `export` em ES Modules?,`export default` exporta um único valor padrão do módulo. `export` exporta múltiplos valores nomeados. Você só pode ter um `export default` por módulo.
Como você importa um módulo em JavaScript usando ES Modules?,"Você usa a palavra-chave `import`. Para importar um export default: `import nomeDoValor from './modulo.js';` Para importar exports nomeados: `import { nome1, nome2 } from './modulo.js';`"
O que é o padrão de projeto Module em JavaScript?,É um padrão de design onde um módulo é criado usando funções IIFE (Immediately Invoked Function Expression) para encapsular dados privados e expor apenas uma interface pública.
O que é o padrão de projeto Revealing Module em JavaScript?,"Similar ao padrão Module, mas a diferença é que todas as funções privadas são definidas primeiro, e então um objeto é retornado com os nomes das funções privadas que devem ser tornadas públicas, ""revelando"" quais funções serão acessíveis externamente."
O que é programação orientada a objetos (POO) em JavaScript?,"É um paradigma de programação que organiza o código em torno de ""objetos"", que contêm dados (propriedades) e código para manipular esses dados (métodos)."
O que são classes em JavaScript?,Classes são um modelo para criar objetos. Elas definem a estrutura e o comportamento dos objetos daquela classe.
O que é herança em programação orientada a objetos?,Herança é um mecanismo que permite que uma classe (subclasse ou classe filha) herde propriedades e métodos de outra classe (superclasse ou classe pai).
O que é polimorfismo em programação orientada a objetos?,"Polimorfismo significa ""muitas formas"". Em POO, significa que objetos de diferentes classes podem responder à mesma mensagem (método) de maneiras diferentes."
O que é encapsulamento em programação orientada a objetos?,Encapsulamento é o princípio de ocultar os detalhes internos de um objeto e expor apenas uma interface pública para interagir com ele.
O que é a cadeia de protótipos em JavaScript?,"É o mecanismo pelo qual objetos herdam propriedades e métodos de seus protótipos. Se uma propriedade não é encontrada no próprio objeto, o JavaScript procura no protótipo do objeto, e assim por diante, até chegar ao protótipo base (null)."
Como você cria um objeto em JavaScript usando a notação literal de objeto?,"Você usa chaves `{}` para criar um objeto vazio. Você pode adicionar propriedades ao objeto dentro das chaves ou posteriormente. Por exemplo: `const objeto = { propriedade1: valor1, propriedade2: valor2 };`"
Como você faz destructuring de um objeto em JavaScript?,"Você usa chaves `{}` para especificar as propriedades que deseja extrair. Por exemplo: `const { propriedade1, propriedade2 } = objeto;`"
Como você faz destructuring de um array em JavaScript?,"Você usa colchetes `[]` para especificar os elementos que deseja extrair. Por exemplo: `const [elemento1, elemento2] = array;`"
O que são default parameters em funções JavaScript?,"Default parameters permitem que você defina valores padrão para os parâmetros de uma função, que serão usados se o argumento correspondente não for fornecido quando a função for chamada."
Como você define um default parameter em uma função JavaScript?,Você usa o operador `=` para atribuir um valor padrão ao parâmetro na declaração da função. Por exemplo: `function minhaFuncao(parametro1 = 'valorPadrao') { ... }`
O que é rest parameter em funções JavaScript?,O rest parameter permite que você represente um número indefinido de argumentos como um array.
Como você define um rest parameter em uma função JavaScript?,Você usa o operador `...` antes do nome do parâmetro na declaração da função. Por exemplo: `function minhaFuncao(...parametros) { ... }`
O que são template string tags em JavaScript?,"Template string tags permitem que você personalize a forma como os template literals são interpretados, passando a string e as expressões para uma função tag."
O que são weakmaps em JavaScript?,"WeakMaps são similares a Maps, mas as chaves em WeakMaps devem ser objetos, e as chaves são mantidas ""fracas"". Isso significa que se não houver outras referências a um objeto que é usado como chave em um WeakMap, o objeto pode ser coletado pelo coletor de lixo, e a entrada correspondente no WeakMap será removida."
O que são weaksets em JavaScript?,"WeakSets são similares a Sets, mas só podem conter objetos, e os objetos são mantidos ""fracos"". Isso significa que se não houver outras referências a um objeto em um WeakSet, o objeto pode ser coletado pelo coletor de lixo, e o objeto será removido do WeakSet."
O que é o objeto `Reflect` em JavaScript?,O objeto `Reflect` é um objeto embutido que fornece métodos para interceptar e personalizar operações fundamentais em objetos.
O que são generators assíncronos em JavaScript?,Generators assíncronos são funções geradoras que podem retornar Promises. Eles permitem que você itere sobre dados assíncronos de forma mais síncrona.
O que é o método `for await...of` em JavaScript?,"O laço `for await...of` itera sobre um iterável assíncrono, esperando que cada Promise seja resolvida antes de continuar a iteração."
O que são BigInts em JavaScript?,BigInts são um tipo de dado numérico que permite representar inteiros maiores que `Number.MAX_SAFE_INTEGER`.
Como você cria um BigInt em JavaScript?,"Você pode criar um BigInt adicionando o sufixo `n` a um número literal (por exemplo, `123n`) ou usando a função `BigInt()` (por exemplo, `BigInt(123)`)."
O que é o operador nullish coalescing (`??`) em JavaScript?,"O operador nullish coalescing retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo."
O que é optional chaining (`?.`) em JavaScript?,"O operador optional chaining permite acessar propriedades de um objeto, mesmo que uma propriedade intermediária seja `null` ou `undefined`, sem causar um erro."
O que são private class fields em JavaScript?,Private class fields são propriedades de uma classe que só podem ser acessadas de dentro da classe. Elas são declaradas com o prefixo `#`.
O que são static class fields em JavaScript?,"Static class fields são propriedades que pertencem à classe em si, e não a instâncias da classe."
O que é um array tipado (Typed Array) em JavaScript?,"Um Array Tipado (Typed Array) é um objeto similar a um array que fornece um mecanismo para acessar dados binários brutos em um buffer de memória. Eles são úteis para lidar com dados binários, como imagens, áudio ou vídeo."
Explique o conceito de currying em JavaScript.,Currying é uma técnica em programação funcional onde uma função que recebe múltiplos argumentos é transformada em uma sequência de funções que recebem um único argumento cada vez.
O que é tree shaking em JavaScript?,"Tree shaking é um processo de otimização que remove código não utilizado de um projeto JavaScript, reduzindo o tamanho do pacote final."
O que são side effects (efeitos colaterais) em JavaScript?,"Side effects são mudanças no estado do programa que não são explicitamente retornadas pela função. Exemplos incluem modificar variáveis globais, interagir com o DOM ou fazer requisições HTTP."
O que é o Garbage Collector (Coletor de Lixo) em JavaScript?,O Garbage Collector é um processo automático que libera a memória que não está mais sendo utilizada por um programa. Ele identifica e remove objetos que não são mais acessíveis.
O que é hoisting de variáveis e funções em JavaScript?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do escopo antes da execução do código. Variáveis declaradas com `var` são hoisted e inicializadas com `undefined`, enquanto funções declaradas com a sintaxe de declaração (`function myFunction() {}`) são hoisted completamente."
O que é a pilha de chamadas (Call Stack) em JavaScript?,"A pilha de chamadas é uma estrutura de dados que rastreia as funções que estão sendo executadas em um programa JavaScript. Quando uma função é chamada, ela é adicionada ao topo da pilha. Quando a função termina de ser executada, ela é removida da pilha."
O que é a fila de tarefas (Task Queue) em JavaScript?,"A fila de tarefas (também conhecida como fila de callback) é uma fila que contém as funções que estão prontas para serem executadas, mas estão esperando que a pilha de chamadas esteja vazia. Isso inclui callbacks de eventos, timers e Promises resolvidas."
"O que é o conceito de ""throttle"" em JavaScript?",Throttling é uma técnica para limitar a taxa na qual uma função é executada. Garante que uma função não seja executada mais do que um certo número de vezes dentro de um período de tempo especificado.
"O que é o conceito de ""debounce"" em JavaScript?","Debouncing é uma técnica para atrasar a execução de uma função até que um certo período de inatividade tenha passado. É útil para lidar com eventos que são acionados rapidamente e repetidamente, como redimensionamento de janela ou entrada de teclado."
O que é strict mode em JavaScript e como ele é usado?,"Strict mode é um modo restrito de execução do JavaScript que ajuda a prevenir erros comuns e melhora a segurança do código. É ativado adicionando a diretiva `""use strict"";` no início de um script ou função."
Quais são as diferenças entre `undefined` e `undeclared` em JavaScript?,"`undefined` significa que uma variável foi declarada, mas ainda não foi atribuído um valor a ela. `undeclared` significa que a variável não foi declarada em nenhum escopo acessível."
O que são os diferentes tipos de erros em JavaScript?,"Existem vários tipos de erros em JavaScript, incluindo"
O que é hoisting em JavaScript e como ele afeta a execução do código?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seu escopo antes da execução do código. Isso significa que você pode usar uma variável ou função antes de sua declaração literal no código, embora com algumas ressalvas (especialmente com variáveis declaradas com `let` e `const`)."
O que são closures em JavaScript e como são úteis?,"Um closure é a capacidade de uma função interna acessar as variáveis do escopo da função externa, mesmo após a função externa ter retornado.  São úteis para encapsular dados, criar funções privadas e manter o estado entre as invocações de uma função."
"Qual é a diferença entre `var`, `let` e `const` ao declarar variáveis em JavaScript?","`var` tem escopo de função ou global, permitindo hoisting e redeclaração. `let` tem escopo de bloco, não permite redeclaração no mesmo escopo e sofre hoisting, mas não pode ser acessada antes da declaração. `const` também tem escopo de bloco, não permite redeclaração ou reatribuição e sofre hoisting, com as mesmas restrições do `let`."
O que são template literals em JavaScript e como eles são usados?,"Template literals são strings delimitadas por backticks (` `) que permitem interpolação de variáveis e expressões.  Eles são usados para criar strings dinamicamente, incluindo quebras de linha e expressões diretamente na string."
Explique o que são arrow functions em JavaScript e como elas diferem das funções tradicionais.,"Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas têm uma sintaxe mais curta e não possuem seu próprio `this`, `arguments`, `super` ou `new.target`. O `this` dentro de uma arrow function herda o `this` do contexto circundante (lexical `this`)."
O que são objetos em JavaScript?,"Objetos em JavaScript são coleções de pares chave-valor (propriedades). As chaves são strings (ou Symbols) e os valores podem ser qualquer tipo de dado, incluindo outros objetos."
Como você pode adicionar uma propriedade a um objeto em JavaScript?,Você pode adicionar uma propriedade a um objeto usando a notação de ponto ( `objeto.novaPropriedade = valor;` ) ou a notação de colchetes ( `objeto['novaPropriedade'] = valor;` ).
O que é o método `map()` em JavaScript e qual é o seu propósito?,O método `map()` é um método de array que cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele transforma cada elemento.
O que é o método `filter()` em JavaScript e qual é o seu propósito?,O método `filter()` é um método de array que cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. Ele seleciona elementos com base em uma condição.
O que é o método `reduce()` em JavaScript e qual é o seu propósito?,O método `reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é JSON em JavaScript e como ele é usado?,"JSON (JavaScript Object Notation) é um formato de dados leve e legível por humanos usado para transmitir dados entre um servidor e um aplicativo web. Em JavaScript, é usado para representar objetos e arrays como strings."
Como você pode adicionar um event listener a um elemento em JavaScript?,"Você pode adicionar um event listener a um elemento usando o método `addEventListener(tipoDoEvento, funcaoCallback)`."
Como você pode selecionar um elemento HTML no DOM usando JavaScript?,"Você pode selecionar um elemento HTML no DOM usando métodos como `document.getElementById()`, `document.querySelector()` ou `document.querySelectorAll()`."
O que é o escopo em JavaScript?,"Escopo define a visibilidade e a acessibilidade de variáveis em diferentes partes do código JavaScript. Existem escopos global, de função (em `var`) e de bloco (em `let` e `const`)."
O que são High-Order Functions (Funções de Ordem Superior)?,"Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam funções como resultados. `map`, `filter` e `reduce` são exemplos."
O que são os estados de uma Promise?,"Uma Promise tem três estados: *pending* (pendente), *fulfilled* (realizada) e *rejected* (rejeitada)."
Como você pode encadear Promises em JavaScript?,Você pode encadear Promises usando o método `.then()` para executar uma função quando a Promise for resolvida e o método `.catch()` para lidar com erros.
O que são async/await em JavaScript?,"`async/await` são palavras-chave que tornam o código assíncrono mais fácil de ler e escrever.  `async` marca uma função como assíncrona, e `await` pausa a execução da função até que uma Promise seja resolvida."
O que é o método `fetch()` em JavaScript?,O método `fetch()` é usado para fazer requisições de rede para buscar recursos de um servidor. Ele retorna uma Promise que resolve para a resposta dessa requisição.
Como você pode limpar um timeout criado com `setTimeout()` em JavaScript?,"Você pode limpar um timeout usando o método `clearTimeout(idTimeout)`, onde `idTimeout` é o valor retornado por `setTimeout()`."
Como você pode limpar um interval criado com `setInterval()` em JavaScript?,"Você pode limpar um interval usando o método `clearInterval(idInterval)`, onde `idInterval` é o valor retornado por `setInterval()`."
O que é o método `Math.floor()` em JavaScript?,O método `Math.floor()` retorna o maior inteiro menor ou igual a um determinado número.
O que é o método `Math.ceil()` em JavaScript?,O método `Math.ceil()` retorna o menor inteiro maior ou igual a um determinado número.
O que é o método `Math.round()` em JavaScript?,O método `Math.round()` retorna o valor de um número arredondado para o inteiro mais próximo.
Como você pode criar um objeto com um protótipo específico em JavaScript?,Você pode usar `Object.create(prototipo)` para criar um novo objeto com o protótipo especificado.
Como o valor de `this` é determinado em uma função normal (não arrow function)?,"Em uma função normal, o valor de `this` é determinado pelo contexto de chamada.  Pode ser o objeto global (window), um objeto explícito (usando `call`, `apply` ou `bind`), ou o objeto que chama o método."
Como o valor de `this` é determinado em uma arrow function?,"Em uma arrow function, o valor de `this` é lexical, ou seja, ele herda o valor de `this` do escopo circundante."
O que são classes em JavaScript (a partir do ES6)?,"Classes em JavaScript são um modelo para criar objetos. Elas fornecem uma sintaxe mais clara e estruturada para definir objetos e suas propriedades e métodos, mas ainda são baseadas na herança prototípica."
Como você pode definir um construtor em uma classe JavaScript?,Você define um construtor usando o método `constructor()`. O construtor é chamado quando um novo objeto da classe é criado.
Como você pode definir métodos em uma classe JavaScript?,"Você define métodos dentro do corpo da classe, sem usar a palavra-chave `function`."
O que é herança em classes JavaScript?,Herança em classes JavaScript permite que uma classe (classe filha) herde propriedades e métodos de outra classe (classe pai). Isso é feito usando a palavra-chave `extends`.
O que são módulos em JavaScript (ES Modules)?,Módulos são arquivos JavaScript que contêm código que pode ser importado e usado em outros arquivos JavaScript. Eles ajudam a organizar o código e evitar conflitos de nomes.
Como você pode exportar um valor de um módulo JavaScript?,Você pode exportar um valor usando a palavra-chave `export`. Você pode exportar valores individualmente (named exports) ou exportar um valor padrão (default export).
Como você pode importar um valor para um módulo JavaScript?,Você pode importar um valor usando a palavra-chave `import`. Você pode importar valores individuais (named imports) ou importar um valor padrão (default import).
Qual a diferença entre Named Exports e Default Exports?,"Named exports permitem exportar múltiplos valores com seus respectivos nomes. Default exports permitem exportar um único valor como padrão, que pode ser importado com qualquer nome."
O que são template strings tagged?,Template strings tagged são uma forma avançada de template literals onde uma função é usada para processar o template literal antes que a string final seja construída. A função recebe um array de strings literais e um array de valores interpolados.
O que é o objeto `Symbol` em JavaScript?,Um `Symbol` é um tipo de dado primitivo cujo valor é único e imutável. Eles são frequentemente usados como chaves de propriedade de objeto para evitar conflitos de nomes.
O que é a palavra-chave `yield` em JavaScript?,A palavra-chave `yield` é usada dentro de uma função geradora para pausar a execução da função e retornar um valor. A execução pode ser retomada posteriormente.
O que são Array-like Objects (Objetos Similares a Arrays)?,"Array-like objects são objetos que têm uma propriedade `length` e propriedades indexadas, mas não têm todos os métodos de um array verdadeiro (por exemplo, `arguments`)."
Como você pode converter um array-like object em um array verdadeiro em JavaScript?,Você pode usar `Array.from(arrayLikeObject)` ou `[].slice.call(arrayLikeObject)` para converter um array-like object em um array verdadeiro.
O que são rest parameters em JavaScript?,Rest parameters permitem que uma função receba um número variável de argumentos como um array. Eles são representados por `...nomeDoParametro`.
O que é destructuring assignment em JavaScript?,Destructuring assignment permite extrair valores de objetos ou arrays e atribuí-los a variáveis em uma única declaração.
Como você pode usar destructuring assignment com objetos em JavaScript?,"Você pode usar destructuring assignment com objetos usando a sintaxe `{ propriedade1, propriedade2 } = objeto;`."
Como você pode usar destructuring assignment com arrays em JavaScript?,"Você pode usar destructuring assignment com arrays usando a sintaxe `[elemento1, elemento2] = array;`."
O que é o Strict Mode em JavaScript?,"Strict Mode é uma forma de executar JavaScript que impõe regras mais rigorosas sobre o código, ajudando a evitar erros comuns e tornando o código mais seguro. Ele é habilitado adicionando a string `""use strict"";` no início de um script ou função."
Quais são algumas das restrições impostas pelo Strict Mode em JavaScript?,"Algumas das restrições incluem: não permitir o uso de variáveis não declaradas, proibir a atribuição a propriedades somente leitura, lançar erros em atribuições silenciosas, e alterar o valor de `this` em algumas situações."
Como você pode criar um IIFE em JavaScript?,"Você pode criar um IIFE envolvendo uma função anônima entre parênteses e, em seguida, chamando a função imediatamente com outros parênteses: `(function() { /* código */ })();`."
O que é o método `Array.forEach()` em JavaScript?,O método `Array.forEach()` executa uma função fornecida uma vez para cada elemento no array.
O que é o método `Array.indexOf()` em JavaScript?,"O método `Array.indexOf()` retorna o primeiro índice em que um dado elemento pode ser encontrado no array, ou -1 se não estiver presente."
O que é o método `Array.lastIndexOf()` em JavaScript?,"O método `Array.lastIndexOf()` retorna o último índice em que um dado elemento pode ser encontrado no array, ou -1 se não estiver presente."
O que é o método `Array.includes()` em JavaScript?,"O método `Array.includes()` determina se um array inclui um determinado elemento, retornando `true` ou `false` conforme apropriado."
O que é o método `Array.find()` em JavaScript?,"O método `Array.find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
O que é o método `Array.findIndex()` em JavaScript?,"O método `Array.findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1."
O que é o método `Array.slice()` em JavaScript?,O método `Array.slice()` retorna uma cópia de uma parte de um array em um novo array.
O que é o método `Array.splice()` em JavaScript?,O método `Array.splice()` altera o conteúdo de um array removendo ou substituindo elementos existentes e/ou adicionando novos elementos no lugar.
O que é o método `Array.concat()` em JavaScript?,"O método `Array.concat()` retorna um novo array consistindo nos elementos do array no qual foi chamado, seguido pelos elementos de cada um dos outros arrays fornecidos como argumentos."
O que é o método `Array.join()` em JavaScript?,"O método `Array.join()` cria e retorna uma nova string concatenando todos os elementos em um array, separados por um separador especificado."
O que é o método `Array.push()` em JavaScript?,O método `Array.push()` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
O que é o método `Array.pop()` em JavaScript?,O método `Array.pop()` remove o último elemento de um array e retorna esse elemento.
O que é o método `Array.shift()` em JavaScript?,O método `Array.shift()` remove o primeiro elemento de um array e retorna esse elemento.
O que é o método `Array.unshift()` em JavaScript?,O método `Array.unshift()` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
O que é o método `Array.sort()` em JavaScript?,"O método `Array.sort()` ordena os elementos de um array no local e retorna o array ordenado. Por padrão, ele ordena os elementos como strings."
O que é o método `Array.reverse()` em JavaScript?,O método `Array.reverse()` inverte a ordem dos elementos em um array no local.
O que é o método `String.length` em JavaScript?,`String.length` é uma propriedade que retorna o comprimento de uma string.
O que é o método `String.charAt()` em JavaScript?,O método `String.charAt()` retorna o caractere em um índice especificado em uma string.
O que é o método `String.charCodeAt()` em JavaScript?,O método `String.charCodeAt()` retorna um número inteiro representando o valor Unicode do caractere no índice especificado.
O que é o método `String.concat()` em JavaScript?,O método `String.concat()` concatena um ou mais valores de string a uma string e retorna uma nova string.
O que é o método `String.indexOf()` em JavaScript?,O método `String.indexOf()` retorna o índice da primeira ocorrência de um valor especificado em uma string.
O que é o método `String.lastIndexOf()` em JavaScript?,O método `String.lastIndexOf()` retorna o índice da última ocorrência de um valor especificado em uma string.
O que é o método `String.startsWith()` em JavaScript?,"O método `String.startsWith()` determina se uma string começa com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado."
O que é o método `String.endsWith()` em JavaScript?,"O método `String.endsWith()` determina se uma string termina com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado."
O que é o método `String.includes()` em JavaScript?,"O método `String.includes()` determina se uma string contém os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado."
O que é o método `String.slice()` em JavaScript?,O método `String.slice()` extrai uma parte de uma string e retorna uma nova string.
O que é o método `String.substring()` em JavaScript?,O método `String.substring()` extrai os caracteres entre dois índices (posições) especificados em uma string.
O que é o método `String.substr()` em JavaScript?,"O método `String.substr()` extrai uma parte de uma string, começando em um índice especificado e retornando um determinado número de caracteres."
O que é o método `String.replace()` em JavaScript?,O método `String.replace()` retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por uma substituição.
O que é o método `String.replaceAll()` em JavaScript?,O método `String.replaceAll()` retorna uma nova string com todas as correspondências de um padrão substituídas por uma substituição.
O que é o método `String.toLowerCase()` em JavaScript?,O método `String.toLowerCase()` retorna o valor da string chamada convertido em minúsculas.
O que é o método `String.toUpperCase()` em JavaScript?,O método `String.toUpperCase()` retorna o valor da string chamada convertido em maiúsculas.
O que é o método `String.trim()` em JavaScript?,O método `String.trim()` remove espaços em branco de ambos os lados de uma string.
O que é o método `String.trimStart()` ou `String.trimLeft()` em JavaScript?,O método `String.trimStart()` (ou `String.trimLeft()`) remove espaços em branco do início de uma string.
O que é o método `String.trimEnd()` ou `String.trimRight()` em JavaScript?,O método `String.trimEnd()` (ou `String.trimRight()`) remove espaços em branco do final de uma string.
O que é o método `String.split()` em JavaScript?,"O método `String.split()` divide uma string em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array."
Quais são os principais métodos de RegExp em JavaScript?,Os principais métodos são `test()` (verifica se há uma correspondência) e `exec()` (retorna a correspondência e informações).
O que são quantificadores em expressões regulares? Dê exemplos.,"Quantificadores especificam quantas vezes um elemento deve corresponder. Exemplos: `*` (zero ou mais), `+` (um ou mais), `?` (zero ou um), `{n}` (exatamente n vezes), `{n,}` (n ou mais vezes), `{n,m}` (entre n e m vezes)."
O que são classes de caracteres em expressões regulares? Dê exemplos.,"Classes de caracteres representam um conjunto de caracteres. Exemplos: `.` (qualquer caractere exceto nova linha), `\d` (dígito), `\w` (caractere de palavra), `\s` (espaço em branco), `[abc]` (a, b ou c), `[^abc]` (qualquer caractere exceto a, b ou c)."
O que são âncoras em expressões regulares? Dê exemplos.,"Âncoras especificam uma posição na string onde a correspondência deve ocorrer. Exemplos: `^` (início da string), `$` (fim da string), `\b` (fronteira de palavra)."
Como você pode referenciar grupos de captura em uma expressão regular?,"Você pode referenciar grupos de captura usando `\1`, `\2`, etc., dentro da própria expressão regular (backreferences), ou usando `$1`, `$2`, etc., na string de substituição do método `replace()`.

Espero que esta lista detalhada seja útil!"
Como você pode evitar a mutação de um objeto em JavaScript?,"Usando métodos como `Object.freeze()`, `Object.assign()` ou o operador spread (`...`) para criar cópias superficiais ou profundas do objeto."
"Explique o que é o conceito de ""hoisting"" em JavaScript.","Hoisting é o comportamento em JavaScript onde as declarações de variáveis (usando `var`) e funções são movidas para o topo de seu escopo antes da execução do código. No entanto, a inicialização (atribuição de valor) não é ""hoisted"" para variáveis declaradas com `var`. Variáveis com `let` e `const` são hoisted, mas não podem ser acessadas antes de serem declaradas (Temporal Dead Zone)."
O que é o operador `??` (nullish coalescing operator) e qual a sua utilidade?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Caso contrário, ele retorna o operando do lado esquerdo. Ele é útil para fornecer um valor padrão quando uma variável pode ser `null` ou `undefined`."
Como você pode verificar se um valor é um array em JavaScript?,Usando `Array.isArray(valor)` ou `valor instanceof Array`.
Explique o que é o método `bind()` e como ele funciona.,`bind()` cria uma nova função com o `this` definido para o valor passado como argumento. Ele também permite predefinir argumentos para a função original.
O que é o `strict mode` em JavaScript e como você o habilita?,"`strict mode` é um modo restrito de JavaScript que impõe regras mais rigorosas e elimina alguns comportamentos ""silenciosos"" do JavaScript. Ele é habilitado adicionando a string `""use strict"";` no início de um script ou função."
"Qual a diferença entre `forEach`, `map`, `filter` e `reduce` em arrays?","* `forEach` itera sobre um array e executa uma função para cada elemento.
    * `map` cria um novo array com os resultados da aplicação de uma função a cada elemento do array original.
    * `filter` cria um novo array com todos os elementos que passam em um teste implementado por uma função fornecida.
    * `reduce` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor."
Como você pode interromper a execução de um loop `forEach` em JavaScript?,"Não é possível interromper a execução de um loop `forEach` usando `break` ou `continue`. Se você precisa dessa funcionalidade, use um loop `for` tradicional."
O que é o `spread operator` e como ele é utilizado?,"O `spread operator` (`...`) permite expandir um iterável (como um array ou string) em locais onde múltiplos argumentos (para chamadas de função) ou múltiplos elementos (para literais de array) são esperados. Ele é usado para criar cópias de arrays/objetos, concatenar arrays, passar múltiplos argumentos para funções, etc."
Explique o que são `template literals` e quais suas vantagens.,Template literals são strings delimitadas por crases (``). Eles permitem incorporar expressões JavaScript dentro da string usando `${expression}` e suportam strings de múltiplas linhas. Suas vantagens incluem melhor legibilidade e facilidade de interpolação de strings.
O que são `generators` em JavaScript?,"Generators são funções que podem ser pausadas e retomadas, permitindo a criação de iteradores personalizados. Elas usam a palavra-chave `yield` para pausar a execução e retornar um valor."
Qual a diferença entre `let` e `const`?,"`let` declara uma variável com escopo de bloco, que pode ser reatribuída. `const` declara uma constante com escopo de bloco, que deve ser inicializada no momento da declaração e não pode ser reatribuída (mas o objeto em si pode ser alterado, se for um objeto)."
O que são `arrow functions` e quais suas diferenças em relação às funções tradicionais?,"Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Diferenças incluem a sintaxe, a não ligação do `this` (herda o `this` do contexto circundante) e a não disponibilização dos argumentos `arguments`."
Como você pode lidar com erros em JavaScript?,Usando blocos `try...catch` para capturar exceções lançadas pelo código. Também é possível lançar exceções personalizadas usando a palavra-chave `throw`.
O que é o `event loop` em JavaScript?,"O `event loop` é um mecanismo que permite ao JavaScript executar operações assíncronas de forma não bloqueante. Ele monitora a pilha de chamadas e a fila de tarefas, movendo tarefas da fila de tarefas para a pilha de chamadas quando esta está vazia."
Qual a função do método `setTimeout` em JavaScript?,`setTimeout` agenda a execução de uma função após um determinado período de tempo (em milissegundos).
O que é o `localStorage` e como ele é usado?,`localStorage` é uma API do navegador que permite armazenar dados localmente no navegador do usuário. Os dados armazenados em `localStorage` permanecem disponíveis mesmo após o fechamento da aba ou do navegador.
Como você pode remover um elemento do DOM usando JavaScript?,Usando o método `removeChild()` do elemento pai ou o método `remove()` do próprio elemento.
O que é o conceito de `event delegation` em JavaScript?,`Event delegation` é uma técnica onde um único event listener é anexado a um elemento pai para lidar com eventos disparados por seus filhos. Isso é mais eficiente do que anexar event listeners a cada filho individualmente.
O que é o `shadow DOM`?,"O Shadow DOM permite encapsular HTML, CSS e JavaScript de um componente web, isolando-o do resto do documento. Isso ajuda a evitar conflitos de estilo e a criar componentes reutilizáveis."
Explique o que é `JSON` e como ele é usado em JavaScript.,"JSON (JavaScript Object Notation) é um formato leve para troca de dados. Em JavaScript, ele é usado para serializar e desserializar objetos JavaScript para serem enviados através da rede ou armazenados em um arquivo."
O que é o método `JSON.stringify()`?,O método `JSON.stringify()` converte um objeto JavaScript em uma string JSON.
O que é o método `JSON.parse()`?,O método `JSON.parse()` analisa uma string JSON e converte-a em um objeto JavaScript.
Qual a diferença entre `push` e `unshift` em arrays?,`push` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array. `unshift` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
Qual a diferença entre `pop` e `shift` em arrays?,`pop` remove o último elemento de um array e retorna esse elemento. `shift` remove o primeiro elemento de um array e retorna esse elemento.
O que é o método `slice()` em arrays?,O método `slice()` retorna uma cópia superficial de uma porção de um array em um novo array. Ele não modifica o array original.
O que é o método `splice()` em arrays?,O método `splice()` altera o conteúdo de um array removendo ou substituindo elementos existentes e/ou adicionando novos elementos no lugar. Ele modifica o array original.
O que é o método `concat()` em arrays?,O método `concat()` retorna um novo array contendo todos os arrays concatenados com o array no qual foi chamado.
Como você pode inverter a ordem dos elementos em um array?,Usando o método `reverse()`.
O que é o método `join()` em arrays?,O método `join()` junta todos os elementos de um array em uma string.
Como você pode encontrar a posição de um elemento em um array?,Usando o método `indexOf()` ou `lastIndexOf()`.
O que é o método `includes()` em arrays?,"O método `includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado."
O que são `promises` em JavaScript e como elas são usadas?,"Promises representam o resultado eventual de uma operação assíncrona. Elas têm três estados: pendente, cumprida (resolved) e rejeitada (rejected). São usadas para lidar com operações assíncronas de forma mais organizada e legível do que callbacks."
O que é o `DOM`?,"O DOM (Document Object Model) é uma representação em árvore da estrutura de um documento HTML ou XML. Ele permite que o JavaScript acesse e manipule os elementos, atributos e estilos do documento."
Como você pode selecionar um elemento do DOM usando JavaScript?,"Usando métodos como `document.getElementById()`, `document.querySelector()`, `document.querySelectorAll()`."
Como você pode adicionar um evento a um elemento do DOM?,Usando o método `addEventListener()`.
Como você pode criar um novo elemento HTML usando JavaScript?,Usando o método `document.createElement()`.
Como você pode adicionar um elemento a outro elemento no DOM?,Usando o método `appendChild()` ou `insertBefore()`.
Como você pode alterar o texto de um elemento no DOM?,Atribuindo um novo valor à propriedade `textContent` ou `innerText` do elemento.
Como você pode alterar o atributo de um elemento no DOM?,Usando o método `setAttribute()` ou acessando diretamente a propriedade do elemento correspondente ao atributo.
Como você pode alterar o estilo de um elemento no DOM?,"Através da propriedade `style` do elemento, que permite acessar e modificar as propriedades CSS diretamente."
O que são `event listeners`?,`Event listeners` são funções que são executadas em resposta a um evento específico que ocorre em um elemento do DOM.
O que é `event bubbling`?,"`Event bubbling` é o processo em que um evento disparado em um elemento do DOM ""borbulha"" para cima na árvore do DOM, acionando event listeners em elementos pai."
O que é `event capturing`?,`Event capturing` é o oposto de event bubbling. O evento é capturado primeiro pelo elemento pai e depois se propaga para o elemento filho.
Como você pode impedir o comportamento padrão de um evento?,Usando o método `preventDefault()` do objeto de evento.
O que é o método `Object.keys()`?,O método `Object.keys()` retorna um array com as chaves (nomes das propriedades) de um objeto.
O que é o método `Object.values()`?,O método `Object.values()` retorna um array com os valores das propriedades de um objeto.
O que é o método `Object.entries()`?,"O método `Object.entries()` retorna um array de arrays, onde cada array interno contém a chave e o valor de cada propriedade de um objeto."
O que é o método `Object.freeze()`?,"O método `Object.freeze()` congela um objeto. Um objeto congelado não pode mais ser alterado; congelar um objeto impede que novas propriedades sejam adicionadas, propriedades existentes sejam removidas, propriedades sejam modificadas e protótipo do objeto seja alterado. `freeze()` retorna o mesmo objeto que foi passado."
O que é o método `Object.seal()`?,"O método `Object.seal()` sela um objeto, impedindo que novas propriedades sejam adicionadas a ele e marcando todas as propriedades existentes como não configuráveis. Os valores das propriedades presentes ainda podem ser alterados, desde que sejam graváveis."
O que é o conceito de `currying` em JavaScript?,`Currying` é uma técnica de transformação de uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.
O que é `memoization` em JavaScript?,`Memoization` é uma técnica de otimização que armazena em cache os resultados de chamadas de função custosas e retorna o resultado em cache quando as mesmas entradas ocorrem novamente.
O que são funções de alta ordem (higher-order functions)?,Funções de alta ordem são funções que recebem outras funções como argumentos ou retornam uma função como resultado.
"O que é o padrão de projeto ""module"" em JavaScript?","O padrão de projeto ""module"" é uma técnica para encapsular código JavaScript, criando um escopo privado para variáveis e funções internas e expondo apenas uma interface pública."
"O que é o padrão de projeto ""revealing module"" em JavaScript?","O padrão de projeto ""revealing module"" é uma variação do padrão ""module"" onde todas as variáveis e funções são definidas no escopo privado, e apenas as que devem ser públicas são explicitamente retornadas como parte da interface pública."
O que é `recursion`?,Recursion é uma técnica de programação onde uma função chama a si mesma para resolver um problema.
O que é `tail call optimization`?,"Tail call optimization é uma otimização que algumas implementações de JavaScript realizam, eliminando a necessidade de criar um novo frame na pilha de chamadas quando uma função faz uma chamada recursiva no final de sua execução. Isso evita o estouro da pilha em recursões profundas."
Como você pode verificar se uma variável foi definida em JavaScript?,"Verificando se o `typeof` da variável é diferente de `undefined`.  No entanto, é importante notar que tentar acessar uma variável que nunca foi declarada lançará um `ReferenceError`."
O que é um `Symbol` em JavaScript?,Um `Symbol` é um tipo de dado primitivo cujas instâncias são únicas e imutáveis. Eles são frequentemente usados como chaves de propriedade de objeto para evitar conflitos com chaves de propriedade existentes.
O que é o método `Object.assign()`?,O método `Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto de destino. Ele retorna o objeto de destino.
Qual a diferença entre uma cópia superficial e uma cópia profunda de um objeto?,"Uma cópia superficial cria um novo objeto que compartilha as mesmas referências dos objetos internos do objeto original. Uma cópia profunda cria um novo objeto com novos objetos internos, sem compartilhar referências."
O que é `destructuring` em JavaScript?,Destructuring é uma expressão JavaScript que torna possível descompactar valores de arrays ou propriedades de objetos em variáveis distintas.
Como você pode desestruturar um objeto em JavaScript?,"Usando a sintaxe `{ propriedade1, propriedade2 } = objeto;`."
Como você pode desestruturar um array em JavaScript?,"Usando a sintaxe `[elemento1, elemento2] = array;`."
O que são `default parameters` em funções?,Default parameters permitem que parâmetros de função sejam inicializados com valores padrão caso nenhum valor seja passado ou o valor passado seja `undefined`.
O que é o `Rest parameter` em funções?,O `Rest parameter` permite que uma função aceite um número indefinido de argumentos como um array. Ele é denotado por `...`.
O que é `spread syntax` para objetos?,A spread syntax para objetos permite copiar propriedades de um objeto para outro.
Como você pode mesclar dois objetos em um novo objeto usando spread syntax?,"Usando a sintaxe `{ ...objeto1, ...objeto2 }`."
O que é uma classe em JavaScript?,Uma classe em JavaScript é um template para criar objetos. Ela define as propriedades e métodos que um objeto dessa classe terá.
O que é `inheritance` em JavaScript?,Inheritance é um mecanismo que permite que uma classe herde propriedades e métodos de outra classe (a classe pai ou superclasse).
Como você pode implementar inheritance em JavaScript usando classes?,Usando a palavra-chave `extends`.
Como você pode chamar o construtor da classe pai em uma classe filha?,Usando a palavra-chave `super()`.
O que são `getters` e `setters` em classes JavaScript?,"`Getters` e `setters` são métodos especiais que permitem acessar e modificar as propriedades de um objeto como se fossem propriedades diretamente, mas com lógica adicional."
Como você pode definir um getter em uma classe JavaScript?,Usando a palavra-chave `get` antes do nome do método.
Como você pode definir um setter em uma classe JavaScript?,Usando a palavra-chave `set` antes do nome do método.
O que são métodos estáticos em classes JavaScript?,"Métodos estáticos são métodos que pertencem à classe em si, e não a instâncias da classe. Eles são chamados diretamente na classe, não em objetos instanciados."
Como você pode definir um método estático em uma classe JavaScript?,Usando a palavra-chave `static` antes do nome do método.
O que é o `prototype` em JavaScript?,"O `prototype` é um objeto associado a cada função e objeto em JavaScript. Ele é usado para implementar herança prototípica, onde os objetos herdam propriedades e métodos de seus protótipos."
O que é a cadeia de protótipos?,"A cadeia de protótipos é uma sequência de objetos protótipos que um objeto herda propriedades e métodos. Quando uma propriedade ou método é acessado em um objeto, o JavaScript procura primeiro no próprio objeto. Se não encontrar, procura no protótipo do objeto, e assim por diante, subindo na cadeia de protótipos até encontrar a propriedade ou método, ou chegar ao final da cadeia."
Como você pode adicionar uma propriedade a um protótipo?,Acessando o objeto `prototype` da função construtora e adicionando a propriedade a ele.
O que é o método `Object.create()`?,O método `Object.create()` cria um novo objeto com o protótipo especificado e propriedades opcionais.
O que é o método `Object.getPrototypeOf()`?,O método `Object.getPrototypeOf()` retorna o protótipo do objeto especificado.
O que é o método `isPrototypeOf()`?,O método `isPrototypeOf()` testa se um objeto existe na cadeia de protótipos de outro objeto.
O que é o método `hasOwnProperty()`?,O método `hasOwnProperty()` retorna um booleano indicando se o objeto tem a propriedade especificada como uma propriedade direta (não herdada).
Como você pode iterar sobre as propriedades de um objeto?,"Usando um loop `for...in` para iterar sobre todas as propriedades enumeráveis (incluindo herdadas) ou usando `Object.keys()`, `Object.values()`, `Object.entries()` para iterar sobre as propriedades diretas."
O que são `weak maps`?,"WeakMaps são coleções de pares chave/valor onde as chaves devem ser objetos e os valores podem ser de qualquer tipo. Ao contrário de Maps, as chaves de WeakMaps são mantidas ""fracamente"", o que significa que o garbage collector pode coletá-las se não houver outras referências a elas."
O que são `weak sets`?,"WeakSets são coleções de objetos. Da mesma forma que WeakMaps, os objetos em um WeakSet são mantidos ""fracamente"", permitindo que o garbage collector os colete se não houver outras referências a eles."
O que são iteradores e iteráveis?,"Um iterável é um objeto que pode ser iterado, ou seja, seus elementos podem ser acessados sequencialmente. Um iterador é um objeto que define uma sequência e retorna um valor de cada vez."
Como você pode criar um iterador personalizado em JavaScript?,Implementando um objeto com um método `next()` que retorna um objeto com as propriedades `value` (o próximo valor na sequência) e `done` (um booleano indicando se a sequência terminou).
O que é a interface `Symbol.iterator`?,A interface `Symbol.iterator` é um método que deve ser implementado em um objeto para torná-lo iterável. Ele deve retornar um objeto iterador.
O que são `generators`?,"Generators são funções que podem ser pausadas e retomadas, permitindo a criação de iteradores personalizados de forma mais concisa."
Como você pode pausar a execução de um generator?,Usando a palavra-chave `yield`.
Como você pode obter o próximo valor de um generator?,Chamando o método `next()` do objeto generator.
O que são `promises`?,Promises representam o resultado eventual de uma operação assíncrona.
Quais são os estados de uma Promise?,"Pendente (pending), Cumprida (fulfilled) e Rejeitada (rejected)."
Como você pode criar uma Promise?,"Usando o construtor `new Promise((resolve, reject) => { ... })`."
Como você pode lidar com o resultado de uma Promise?,Usando os métodos `then()` (para lidar com o caso de cumprimento) e `catch()` (para lidar com o caso de rejeição).
O que é o método `Promise.all()`?,"O método `Promise.all()` recebe um array de Promises e retorna uma única Promise que é cumprida quando todas as Promises no array são cumpridas, ou rejeitada se alguma das Promises for rejeitada."
O que é o método `Promise.race()`?,O método `Promise.race()` recebe um array de Promises e retorna uma única Promise que é cumprida ou rejeitada assim que a primeira Promise no array for cumprida ou rejeitada.
O que é o método `Promise.resolve()`?,O método `Promise.resolve()` retorna uma Promise cumprida com o valor especificado.
O que é o método `Promise.reject()`?,O método `Promise.reject()` retorna uma Promise rejeitada com o motivo especificado.
O que são funções `async`?,"Funções `async` são uma forma mais concisa de escrever código assíncrono em JavaScript, usando as palavras-chave `async` e `await`."
Como você pode declarar uma função `async`?,Usando a palavra-chave `async` antes da palavra-chave `function`.
O que a palavra-chave `await` faz?,A palavra-chave `await` pausa a execução de uma função `async` até que uma Promise seja cumprida ou rejeitada.
O que acontece se uma Promise é rejeitada dentro de uma função `async`?,"A rejeição lança uma exceção, que pode ser capturada usando um bloco `try...catch`."
O que é o operador `void`?,O operador `void` avalia uma expressão e retorna `undefined`. Ele é frequentemente usado para evitar que um navegador execute a ação padrão quando um link é clicado.
Qual a utilidade do `debugger` em JavaScript?,"`debugger` é uma declaração que invoca qualquer funcionalidade de depuração disponível, como configurar um breakpoint, permitindo que o desenvolvedor pause o script e examine seu estado."
O que é o operador ternário e como ele funciona?,O operador ternário é uma forma abreviada de escrever uma instrução `if...else`. Sua sintaxe é `condição ? expressãoSeVerdadeira : expressãoSeFalsa`.
Explique o que é o objeto `arguments` em JavaScript.,"O objeto `arguments` é um objeto semelhante a um array disponível dentro de funções não-arrow, contendo os argumentos passados para a função. Não é um array verdadeiro, mas pode ser convertido em um."
O que é o `this` em JavaScript e como ele funciona?,"O `this` é uma palavra-chave que se refere ao contexto de execução atual. Seu valor depende de como a função é chamada. Pode se referir ao objeto global (window em navegadores), ao objeto que chamou a função, ou pode ser explicitamente definido usando `call`, `apply` ou `bind`."
"Qual a diferença entre `let`, `const` e `var` ao declarar variáveis?","`var` tem escopo de função ou global, pode ser redeclarada e reatribuída. `let` tem escopo de bloco, pode ser reatribuída, mas não redeclarada dentro do mesmo escopo. `const` tem escopo de bloco e não pode ser reatribuída após a inicialização."
O que são arrow functions em JavaScript e quais suas vantagens?,Arrow functions são uma sintaxe mais curta para escrever funções. Elas herdam o `this` do contexto circundante (não têm seu próprio `this`) e são implicitamente retornadas se a expressão for simples.
Explique o que é o método `map()` em arrays.,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em arrays?,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em arrays?,O método `reduce()` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.
Qual a diferença entre `forEach()` e `map()` em arrays?,"`forEach()` itera sobre os elementos de um array, executando uma função para cada elemento, mas não retorna um novo array. `map()` itera sobre os elementos de um array e retorna um novo array com os resultados da aplicação de uma função a cada elemento."
Explique o que é destructuring em JavaScript.,Destructuring é uma forma de extrair valores de objetos e arrays e atribuí-los a variáveis de forma concisa.
O que são promises em JavaScript e como elas funcionam?,"Promises são objetos que representam o resultado eventual (sucesso ou falha) de uma operação assíncrona. Elas têm três estados: pendente (pending), cumprida (fulfilled) e rejeitada (rejected)."
Qual a diferença entre `throw` e `return` em JavaScript?,"`throw` é usado para lançar uma exceção, interrompendo o fluxo normal do programa e passando o controle para o bloco `catch` mais próximo (se houver). `return` é usado para retornar um valor de uma função e encerrar sua execução."
Explique o que é JSON em JavaScript.,JSON (JavaScript Object Notation) é um formato leve para troca de dados. É baseado em um subconjunto da linguagem JavaScript e é usado para representar dados estruturados.
Explique o conceito de prototype em JavaScript.,"Em JavaScript, cada objeto tem um prototype. Quando você tenta acessar uma propriedade de um objeto, o JavaScript primeiro verifica se o objeto possui essa propriedade diretamente. Se não, ele procura no prototype do objeto, e assim por diante, subindo na cadeia de protótipos até encontrar a propriedade ou chegar ao fim da cadeia."
Qual a diferença entre funções declaradas (function declaration) e expressões de função (function expression)?,"Funções declaradas são hoisted (a declaração é movida para o topo do escopo), enquanto expressões de função não são (apenas a variável que armazena a função é hoisted, mas não a função em si)."
O que é um IIFE (Immediately Invoked Function Expression)?,Um IIFE (Immediately Invoked Function Expression) é uma função que é definida e executada imediatamente após a sua criação. É usado para criar um escopo privado para variáveis.
Explique o que é currying em JavaScript.,Currying é uma técnica em que uma função com múltiplos argumentos é transformada em uma sequência de funções que recebem um único argumento cada.
Qual a diferença entre shallow copy e deep copy de objetos em JavaScript?,"Shallow copy cria uma cópia superficial do objeto, onde apenas as referências aos objetos internos são copiadas. Deep copy cria uma cópia completa do objeto, incluindo todos os objetos internos, de forma que a cópia seja independente do original."
O que é um setter e getter em JavaScript?,"Getters são métodos usados para acessar propriedades de um objeto, enquanto setters são métodos usados para definir valores de propriedades de um objeto. Eles permitem controlar o acesso e a modificação das propriedades."
Explique o que são generators em JavaScript.,"Generators são funções que podem ser pausadas e retomadas, permitindo produzir uma sequência de valores ao longo do tempo. Elas usam a palavra-chave `yield` para pausar a execução e retornar um valor."
O que é um iterator em JavaScript?,"Um iterator é um objeto que define uma sequência e, após sua criação, pode retornar elementos dessa sequência um de cada vez. Ele implementa o método `next()` que retorna um objeto com as propriedades `value` (o próximo valor da sequência) e `done` (um booleano indicando se a sequência foi concluída)."
O que é o símbolo `Symbol` em JavaScript?,"`Symbol` é um tipo de dado primitivo que representa um identificador único. Eles são frequentemente usados para adicionar propriedades ""privadas"" a objetos ou para evitar conflitos de nomes de propriedades."
O que é o objeto `WeakMap` em JavaScript?,"`WeakMap` é uma coleção de pares chave/valor onde as chaves devem ser objetos, e os objetos são mantidos ""fracamente"", o que significa que o garbage collector pode coletá-los se não houver outras referências a eles."
O que é o objeto `WeakSet` em JavaScript?,"`WeakSet` é uma coleção de objetos (apenas objetos). Assim como em `WeakMap`, os objetos são mantidos ""fracamente""."
O que é o strict mode em JavaScript e como ativá-lo?,"O strict mode é um modo restritivo em JavaScript que impõe regras mais rigorosas para detectar erros e evitar práticas consideradas perigosas. É ativado adicionando a string `""use strict"";` no início do script ou da função."
O que é o Local Storage e Session Storage em JavaScript?,"Local Storage e Session Storage são mecanismos de armazenamento web que permitem armazenar dados localmente no navegador do usuário. Local Storage armazena dados permanentemente (a menos que o usuário os exclua), enquanto Session Storage armazena dados apenas durante a sessão do navegador."
Explique o que é Event Delegation em JavaScript.,"Event delegation é uma técnica em que um listener de evento é anexado a um elemento pai em vez de a cada elemento filho individualmente. Isso melhora o desempenho, especialmente quando há muitos elementos filhos."
O que é Event Bubbling em JavaScript?,"Event bubbling é o processo em que um evento disparado em um elemento filho ""borbulha"" para cima na árvore DOM, disparando os listeners de evento dos elementos pais."
Explique o que é CORS (Cross-Origin Resource Sharing).,CORS (Cross-Origin Resource Sharing) é um mecanismo de segurança do navegador que restringe requisições HTTP de scripts que se originam de um domínio diferente daquele que serve o recurso solicitado.
O que é o objeto `RegExp` em JavaScript?,"O objeto `RegExp` representa uma expressão regular, que é um padrão usado para corresponder a combinações de caracteres em strings."
O que é o método `test()` de uma RegExp em JavaScript?,O método `test()` executa uma pesquisa por uma correspondência entre uma expressão regular e uma string especificada. Retorna `true` se houver uma correspondência e `false` caso contrário.
O que é o método `exec()` de uma RegExp em JavaScript?,O método `exec()` executa uma pesquisa por uma correspondência em uma string especificada. Retorna um array com informações sobre a correspondência ou `null` se não houver correspondência.
O que são as flags em expressões regulares (RegExp)?,"Flags são modificadores que alteram o comportamento da pesquisa de uma expressão regular. Exemplos: `i` (ignora maiúsculas e minúsculas), `g` (pesquisa globalmente), `m` (pesquisa em múltiplas linhas)."
Como se converte um objeto `Date` em uma string formatada?,"Pode-se usar métodos como `toLocaleDateString()`, `toLocaleTimeString()`, `toISOString()` ou `toLocaleString()` para formatar um objeto `Date` em uma string."
O que é o método `Number.isNaN()` em JavaScript?,O método `Number.isNaN()` determina se o valor passado é `NaN` e seu tipo é `Number`. Ele não realiza conversão de tipo.
O que é o método `isFinite()` em JavaScript?,"O método `isFinite()` verifica se um valor é um número finito. Semelhante a `isNaN()`, ele realiza conversão de tipo."
O que é o método `Number.isFinite()` em JavaScript?,O método `Number.isFinite()` determina se o valor passado é um número finito e seu tipo é `Number`.
Quais são os principais métodos do objeto `console`?,"`console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`."
Qual a diferença entre `||` (OR operator) e `??` (nullish coalescing operator)?,"O operador `||` retorna o operando do lado direito se o operando do lado esquerdo for falsy (como `0`, `""""`, `false`, `null`, `undefined`), enquanto o operador `??` retorna o operando do lado direito apenas se o operando do lado esquerdo for `null` ou `undefined`."
O que é o encadeamento opcional (optional chaining) em JavaScript?,O encadeamento opcional (`?.`) permite acessar propriedades aninhadas de um objeto sem lançar um erro se uma propriedade intermediária for `null` ou `undefined`. Ele retorna `undefined` nesse caso.
O que é um módulo em JavaScript?,Um módulo é um arquivo JavaScript que encapsula um conjunto de funcionalidades. Ele permite organizar o código em unidades reutilizáveis e evitar conflitos de nomes.
Quais são as duas formas de importar e exportar módulos em JavaScript (ES Modules)?,"`export default` (para exportar um único valor padrão) e `export` (para exportar múltiplos valores nomeados). Para importar, usa-se `import defaultExport from 'module'` e `import { namedExport } from 'module'`."
Como se cancela um `setTimeout()` ou `setInterval()` em JavaScript?,Usa-se `clearTimeout()` para cancelar um `setTimeout()` e `clearInterval()` para cancelar um `setInterval()`. Ambos recebem o ID retornado pela respectiva função.
O que é o hell de callbacks (callback hell)?,"Callback hell é uma situação em que várias callbacks são aninhadas umas dentro das outras, tornando o código difícil de ler e manter."
O que é a função `requestAnimationFrame()` em JavaScript?,A função `requestAnimationFrame()` solicita ao navegador que execute uma animação antes da próxima repintura da tela. É usada para criar animações suaves e eficientes.
Como se seleciona um elemento HTML pelo ID em JavaScript?,Usa-se o método `document.getElementById('idDoElemento')`.
Como se selecionam elementos HTML por classe em JavaScript?,Usa-se o método `document.getElementsByClassName('nomeDaClasse')`.
Como se selecionam elementos HTML por tag name em JavaScript?,Usa-se o método `document.getElementsByTagName('nomeDaTag')`.
Como se usa `querySelector()` em JavaScript?,O método `querySelector()` retorna o primeiro elemento dentro do documento que corresponde ao seletor CSS especificado. Ex: `document.querySelector('.minha-classe > p')`
Como se usa `querySelectorAll()` em JavaScript?,O método `querySelectorAll()` retorna uma NodeList contendo todos os elementos dentro do documento que correspondem ao seletor CSS especificado.
Como se altera o texto de um elemento HTML em JavaScript?,Pode-se usar a propriedade `textContent` ou `innerText` do elemento.
Como se altera o HTML interno de um elemento HTML em JavaScript?,Usa-se a propriedade `innerHTML` do elemento.
Como se adiciona um novo elemento HTML ao DOM em JavaScript?,"Primeiro, cria-se o elemento usando `document.createElement('tagName')`. Depois, define-se suas propriedades e adiciona-se ao DOM usando métodos como `appendChild()` ou `insertBefore()`."
Como se remove um elemento HTML do DOM em JavaScript?,Usa-se o método `removeChild()` do elemento pai ou `remove()` do próprio elemento.
Como se adiciona um atributo a um elemento HTML em JavaScript?,"Usa-se o método `setAttribute('nomeDoAtributo', 'valorDoAtributo')`."
Como se obtém o valor de um atributo de um elemento HTML em JavaScript?,Usa-se o método `getAttribute('nomeDoAtributo')`.
Como se remove um atributo de um elemento HTML em JavaScript?,Usa-se o método `removeAttribute('nomeDoAtributo')`.
Como se adiciona uma classe CSS a um elemento HTML em JavaScript?,Usa-se a propriedade `classList.add('nomeDaClasse')`.
Como se remove uma classe CSS de um elemento HTML em JavaScript?,Usa-se a propriedade `classList.remove('nomeDaClasse')`.
Como se verifica se um elemento HTML possui uma determinada classe CSS em JavaScript?,Usa-se a propriedade `classList.contains('nomeDaClasse')`.
Como se alterna a presença de uma classe CSS em um elemento HTML em JavaScript?,Usa-se a propriedade `classList.toggle('nomeDaClasse')`.
Como se adiciona um listener de evento a um elemento HTML em JavaScript?,"Usa-se o método `addEventListener('nomeDoEvento', funcaoCallback)`."
Como se remove um listener de evento de um elemento HTML em JavaScript?,"Usa-se o método `removeEventListener('nomeDoEvento', funcaoCallback)`."
O que é o objeto `event` passado para uma função callback de evento?,"O objeto `event` contém informações sobre o evento que foi disparado, como o elemento alvo, o tipo de evento, e outros detalhes."
Como se obtém o elemento que disparou um evento em JavaScript?,Usa-se a propriedade `event.target`.
Como se obtém a posição do mouse em relação à janela do navegador em um evento de mouse?,Usa-se as propriedades `event.clientX` e `event.clientY`.
Como se obtém a posição do mouse em relação ao documento em um evento de mouse?,Usa-se as propriedades `event.pageX` e `event.pageY`.
Como se cria um evento personalizado em JavaScript?,Usa-se a classe `CustomEvent` e o método `dispatchEvent()` do elemento.
O que é o polyfill em JavaScript?,"Um polyfill é um código que implementa uma funcionalidade que ainda não é suportada por alguns navegadores, permitindo que os desenvolvedores usem a funcionalidade em todos os navegadores, mesmo nos mais antigos."
O que é transpilação em JavaScript?,Transpilação é o processo de converter código JavaScript escrito em uma versão mais nova (com novas funcionalidades) para uma versão mais antiga que é suportada por navegadores mais antigos. Isso é geralmente feito usando ferramentas como Babel.
O que é o garbage collection em JavaScript?,Garbage collection é um processo automático em JavaScript que libera a memória que não está mais sendo usada pelo programa. Isso ajuda a prevenir vazamentos de memória e a melhorar o desempenho.
Explique o conceito de imutabilidade em JavaScript.,"Imutabilidade significa que um objeto, depois de criado, não pode ser modificado. Em vez de modificar um objeto existente, você cria um novo objeto com as alterações desejadas."
Como se cria um objeto imutável em JavaScript?,"Pode-se usar `Object.freeze()` para impedir que um objeto seja modificado diretamente.  Para imutabilidade mais profunda, considere bibliotecas especializadas."
O que é o pattern Module em JavaScript?,"O pattern Module é uma forma de criar um escopo privado para variáveis e funções em JavaScript, expondo apenas uma interface pública. Ele é geralmente implementado usando IIFEs e closures."
O que é o pattern Revealing Module em JavaScript?,O pattern Revealing Module é uma variação do pattern Module em que todas as variáveis e funções são definidas no escopo privado e apenas algumas são explicitamente reveladas como parte da interface pública.
O que é a técnica de memoization em JavaScript?,Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras para que possam ser reutilizados em chamadas futuras com os mesmos argumentos.
O que é o design pattern Observer em JavaScript?,"O design pattern Observer define uma dependência um-para-muitos entre objetos, de forma que quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
O que é programação reativa em JavaScript?,"Programação reativa é um paradigma de programação que lida com fluxos de dados assíncronos e a propagação da mudança. Ela usa streams de dados e operadores para transformar, combinar e filtrar esses streams."
Qual é o significado da sigla AJAX?,Asynchronous JavaScript and XML
O que é a Same Origin Policy?,"É uma medida de segurança imposta pelos navegadores que impede que um documento ou script carregado de uma origem acesse recursos de uma origem diferente. Uma origem é definida pela combinação de protocolo, host e porta."
Explique o processo de Debounce.,Debounce é uma técnica de programação para limitar a taxa em que uma função pode ser chamada. Ele garante que uma função seja executada somente após um certo período de inatividade.
Explique o processo de Throttling.,"Throttling é uma técnica que limita a taxa na qual uma função é executada, garantindo que ela não seja chamada com mais frequência do que um determinado intervalo."
Quais são os tipos primitivos de dados em JavaScript?,"String, Number, Boolean, Null, Undefined e Symbol (ES6)."
"Em JavaScript, qual é o valor retornado quando você compara uma string com um número usando o operador `==`?",JavaScript tenta converter a string em um número antes de fazer a comparação. O resultado depende do valor da string.
O que são Higher-Order Functions em JavaScript?,São funções que recebem outras funções como argumentos ou retornam funções como resultado.
Explique o que é o operador `in` em JavaScript.,O operador `in` retorna `true` se uma propriedade especificada existe no objeto dado.
Explique o que é JSON.stringify e JSON.parse.,`JSON.stringify()` converte um objeto JavaScript em uma string JSON. `JSON.parse()` converte uma string JSON em um objeto JavaScript.
O que são eventos touch em JavaScript?,"Eventos touch são eventos disparados por interações do usuário com telas sensíveis ao toque, como touchstart, touchmove, touchend e touchcancel."
Qual é a função do operador `new` em JavaScript?,"Cria uma nova instância de um objeto. Ele cria um novo objeto, define o prototype do objeto para o prototype da função construtora, executa a função construtora com o novo objeto como `this`, e retorna o novo objeto."
Explique o conceito de 'as propriedades de um objeto JavaScript são ordenadas'?,"Em versões mais antigas do JavaScript, a ordem das propriedades não era garantida. Em versões modernas (ES2015 e posteriores), as propriedades de objetos seguem uma ordem específica: primeiro as propriedades numéricas em ordem crescente, depois as strings e Symbols na ordem de inserção."
Qual é o propósito do método `finally()` em uma Promise?,"O método `finally()` é executado sempre, independentemente da Promise ser resolvida ou rejeitada. É usado para código de limpeza."
Como você pode fazer um loop em um objeto em JavaScript?,"Você pode usar `for...in` para iterar sobre as chaves do objeto ou `Object.keys()`, `Object.values()` ou `Object.entries()` em conjunto com um loop `for...of` ou método de array como `forEach()`."
"Explique o conceito de ""Shadow DOM"".","O Shadow DOM permite encapsular o estilo e a estrutura de um componente web, de forma que o estilo e o código do componente não interfiram no restante da página, e vice-versa."
Como você pode cancelar uma Fetch API request?,"Usando um `AbortController`. Você cria um `AbortController`, passa o sinal dele para a requisição Fetch, e então chama `abort()` no `AbortController` para cancelar a requisição."
"Explique o conceito de ""Memoization"" em JavaScript.","Memoization é uma técnica de otimização que envolve o armazenamento dos resultados de uma função para entradas específicas e, em seguida, retornar o resultado armazenado quando a mesma entrada ocorrer novamente."
O que é o operador de identidade `===` em JavaScript?,O operador de identidade (`===`) compara se dois valores são iguais sem realizar conversão de tipo. Ele retorna `true` somente se os valores forem do mesmo tipo e tiverem o mesmo valor.
"Explique o conceito de ""Tree Shaking"" em JavaScript.",Tree Shaking é uma técnica usada por bundlers (como Webpack ou Parcel) para remover o código não utilizado de um projeto JavaScript. Isso ajuda a reduzir o tamanho do bundle final.
Qual é o propósito da declaração `debugger` em JavaScript?,A declaração `debugger` interrompe a execução do código e abre as ferramentas de desenvolvedor do navegador (se estiverem abertas). Isso permite inspecionar o estado do código em um determinado ponto.
"Explique o conceito de ""Dynamic Imports"" em JavaScript.","Dynamic Imports permitem importar módulos JavaScript de forma assíncrona, o que pode melhorar o desempenho e a capacidade de resposta de um aplicativo. Eles são feitos usando a função `import()`."
Qual é a diferença entre usar `Array.prototype.slice.call(arguments)` e `Array.from(arguments)` para converter `arguments` em um array?,"Ambos os métodos convertem o objeto `arguments` (que se comporta como um array, mas não é um array real) em um array real. `Array.from()` geralmente é mais legível e pode lidar com mais tipos de iteráveis, enquanto `slice.call()` é uma técnica mais antiga que ainda funciona bem."
O que são proxy objects em JavaScript?,"Proxy objects fornecem controle sobre as operações básicas de um objeto (por exemplo, obtenção, definição, enumeração, invocação), permitindo que você crie objetos com comportamento personalizado."
Explique o conceito de tail call optimization. O JavaScript suporta isso?,"Tail call optimization (TCO) é uma técnica que otimiza chamadas de função recursivas quando a chamada recursiva é a última operação realizada na função. Embora as especificações do ECMAScript permitam TCO, o suporte em implementações de JavaScript (navegadores e Node.js) é inconsistente."
O que é a diferença entre `null` e `0`?,"`null` representa a ausência intencional de um valor de objeto, enquanto `0` é um valor numérico. Eles são tipos diferentes e têm propósitos diferentes."
"O que é o ""boxing"" e ""unboxing"" em JavaScript?","Boxing é o processo de converter um tipo primitivo (como um número, string ou booleano) em um objeto wrapper correspondente (como `Number`, `String` ou `Boolean`). Unboxing é o processo oposto, de extrair o valor primitivo do objeto wrapper. JavaScript faz isso automaticamente em muitos casos.

Espero que isso seja útil!"
Como você pode verificar se um objeto tem uma determinada propriedade em JavaScript?,"Você pode usar o operador `in`, o método `hasOwnProperty()`, ou verificar se a propriedade é diferente de `undefined`. Exemplo: `'prop' in obj; obj.hasOwnProperty('prop'); obj.prop !== undefined;`"
Qual a diferença entre os operadores `==` e `===` em JavaScript?,"`==` é o operador de igualdade abstrata (com type coercion), que converte os tipos antes de comparar. `===` é o operador de igualdade estrita (sem type coercion), que compara os valores e os tipos."
Como você pode prevenir a propagação de um evento em JavaScript?,Você pode usar o método `stopPropagation()` do objeto de evento. Isso impede que o evento se propague para os elementos pai no DOM.
O que é o método `preventDefault()` e quando você o usaria?,"`preventDefault()` impede a ação padrão que um evento normalmente executaria. Por exemplo, impede o envio de um formulário ou a navegação para um link."
Explique o que é o DOM (Document Object Model).,"O DOM é uma representação da estrutura do documento HTML ou XML como uma árvore de objetos. JavaScript pode usar o DOM para acessar e manipular o conteúdo, a estrutura e o estilo do documento."
Como você seleciona um elemento no DOM usando JavaScript?,"Você pode usar métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`, `document.querySelector()`, e `document.querySelectorAll()`."
Como você adiciona um evento a um elemento no DOM?,"Você pode usar o método `addEventListener()` do elemento. Exemplo: `element.addEventListener('click', function() { ... });`"
O que é o método `appendChild()` em JavaScript?,`appendChild()` é um método usado para adicionar um novo nó como o último filho de um nó pai especificado no DOM.
Como você remove um elemento do DOM usando JavaScript?,Você pode usar o método `removeChild()` do nó pai ou o método `remove()` do próprio nó. Exemplo: `parentElement.removeChild(childElement)` ou `childElement.remove()`.
O que é um callback function em JavaScript?,Um callback function é uma função que é passada como argumento para outra função e é executada após a conclusão de alguma operação.
Explique os estados de uma Promise.,"Uma Promise pode estar em um dos três estados: `pending` (pendente), `fulfilled` (resolvida) ou `rejected` (rejeitada)."
Como você pode converter um valor para um número em JavaScript?,"Você pode usar as funções `Number()`, `parseInt()`, ou `parseFloat()`."
Qual a diferença entre `parseInt()` e `parseFloat()`?,"`parseInt()` converte um valor para um inteiro, enquanto `parseFloat()` converte um valor para um número de ponto flutuante (decimal)."
Como você pode converter um valor para uma string em JavaScript?,Você pode usar a função `String()` ou o método `toString()`.
Como você pode verificar se um valor é NaN em JavaScript?,"Você pode usar a função `isNaN()`. No entanto, é recomendável usar `Number.isNaN()` para uma verificação mais precisa."
O que é o método `includes()` em strings e arrays JavaScript?,"`includes()` determina se um array ou string contém um determinado elemento, retornando `true` ou `false` conforme apropriado."
O que é o método `indexOf()` em strings e arrays JavaScript?,"`indexOf()` retorna o primeiro índice em que um determinado elemento pode ser encontrado no array ou string, ou -1 se não estiver presente."
O que é o método `slice()` em strings e arrays JavaScript?,`slice()` retorna uma cópia de uma parte do array ou string em um novo objeto array/string selecionado do início ao fim (fim não incluído) onde start e end representam o índice de itens nesse array/string. O array/string original não será modificado.
O que é o método `splice()` em arrays JavaScript?,`splice()` altera o conteúdo de um array removendo ou substituindo elementos existentes e/ou adicionando novos elementos no lugar.
O que é o método `test()` de uma expressão regular?,`test()` executa uma pesquisa por uma correspondência entre uma expressão regular e uma string especificada. Retorna `true` ou `false`.
O que é o método `match()` de uma string?,`match()` recupera as correspondências entre uma string e uma expressão regular.
O que é o método `replace()` de uma string?,`replace()` retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por um substituto. O padrão pode ser uma string ou uma expressão regular.
Como você pode criar um timer em JavaScript?,Você pode usar as funções `setTimeout()` (para executar uma função uma vez após um atraso) ou `setInterval()` (para executar uma função repetidamente em intervalos regulares).
O que é o método `clearTimeout()` e `clearInterval()`?,`clearTimeout()` cancela um timer definido com `setTimeout()`. `clearInterval()` cancela um timer definido com `setInterval()`.
Dê alguns exemplos de métodos do objeto `Math`.,"`Math.random()`, `Math.round()`, `Math.ceil()`, `Math.floor()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`."
O que é o método `Date()` em JavaScript?,`Date()` é um objeto embutido usado para trabalhar com datas e horas.
Como você obtém o ano atual usando o objeto `Date()`?,`new Date().getFullYear()`
Como você redireciona para outra página usando JavaScript?,Você pode usar `window.location.href = 'url';`
Como você pode voltar para a página anterior no histórico do navegador usando JavaScript?,Você pode usar `window.history.back();`
Como você define um cookie usando JavaScript?,Você pode usar `document.cookie = 'nome=valor; expires=data; path=/';`
Como você lê um cookie usando JavaScript?,"Você pode acessar `document.cookie`, que retorna uma string contendo todos os cookies separados por ponto e vírgula. Você precisará analisar a string para obter o valor de um cookie específico."
O que é LocalStorage em JavaScript?,LocalStorage é um mecanismo de armazenamento web que permite armazenar dados persistentemente no navegador do usuário. Os dados permanecem disponíveis mesmo depois que o navegador é fechado e reaberto.
Como você armazena dados em LocalStorage usando JavaScript?,"`localStorage.setItem('chave', 'valor');`"
Como você recupera dados de LocalStorage usando JavaScript?,`localStorage.getItem('chave');`
Como você remove dados de LocalStorage usando JavaScript?,`localStorage.removeItem('chave');`
Como você limpa todo o LocalStorage usando JavaScript?,`localStorage.clear();`
O que é SessionStorage em JavaScript?,"SessionStorage é semelhante ao LocalStorage, mas os dados armazenados em SessionStorage são excluídos quando a sessão do navegador termina (quando o navegador é fechado)."
Como você verifica o tipo de uma variável em JavaScript?,Você pode usar o operador `typeof`.
Quais são os tipos de dados primitivos em JavaScript?,"`string`, `number`, `boolean`, `null`, `undefined`, `symbol` (e `bigint`, introduzido mais recentemente)."
O que é strict mode em JavaScript?,"Strict mode é uma maneira de optar por uma variante restrita do JavaScript.  Ajuda a evitar erros comuns e torna o código mais ""seguro"". É ativado colocando `""use strict"";` no início do script ou função."
O que são template strings tagged em JavaScript?,"Template strings tagged permitem que você processe template literals com uma função.  A função recebe a string literal e os valores interpolados como argumentos, permitindo que você manipule a string antes que ela seja renderizada."
O que são parâmetros rest em JavaScript?,Os parâmetros rest permitem que uma função aceite um número indefinido de argumentos como um array.  Eles são representados por `...nomeDoParametro`.
O que são valores padrão de parâmetros em JavaScript?,Valores padrão de parâmetros permitem que você especifique um valor padrão para um parâmetro de função caso nenhum argumento seja fornecido.
Qual a diferença entre um objeto JavaScript normal e um objeto `Map`?,"As chaves em um objeto JavaScript normal devem ser strings ou símbolos. Em um `Map`, as chaves podem ser de qualquer tipo de dado (incluindo objetos). A ordem das chaves em um `Map` é preservada."
O que é um iterável em JavaScript?,"Um iterável é um objeto que pode ser iterado, ou seja, percorrido sequencialmente.  Ele implementa o protocolo iterable, que requer um método com o símbolo `Symbol.iterator` que retorna um iterador."
O que é o protocolo iterable em JavaScript?,"O protocolo iterable exige que um objeto implemente um método com a chave `Symbol.iterator`. Esse método deve retornar um objeto iterador que, por sua vez, implementa o protocolo iterator."
O que é o operador `in` em um loop `for...in`?,"No loop `for...in`, o operador `in` itera sobre os nomes das propriedades enumeráveis de um objeto (incluindo as propriedades herdadas da cadeia de protótipos)."
O que é o operador `of` em um loop `for...of`?,"O loop `for...of` itera sobre os valores de um objeto iterável (como um array, string, Map, Set, etc.)."
Qual a diferença entre `Object.freeze()` e `Object.seal()`?,"`Object.freeze()` torna o objeto imutável: você não pode adicionar, remover ou modificar as propriedades. `Object.seal()` permite modificar os valores das propriedades existentes, mas não permite adicionar ou remover propriedades."
O que é o prototype em JavaScript?,"Em JavaScript, todo objeto possui um prototype. Um prototype é outro objeto do qual o objeto herda propriedades e métodos."
Como você acessa o prototype de um objeto em JavaScript?,Você pode acessar o prototype de um objeto usando a propriedade `__proto__` (não recomendada) ou o método `Object.getPrototypeOf()`.
O que é o construtor `class` em JavaScript?,"`class` é uma sintaxe introduzida no ES6 que fornece uma maneira mais clara e estruturada de criar objetos e lidar com herança prototipal.  É essencialmente ""syntactic sugar"" sobre a herança baseada em protótipos."
O que é o construtor `super()` em classes JavaScript?,`super()` é usado para chamar o construtor da classe pai (superclasse) dentro do construtor da classe filha.
O que é abstração em JavaScript?,"Abstração é o conceito de simplificar a representação de um objeto, expondo apenas as informações essenciais e ocultando os detalhes de implementação complexos."
O que é o princípio DRY (Don't Repeat Yourself) em programação?,"O princípio DRY afirma que você deve evitar a duplicação de código.  Se você precisar fazer a mesma coisa em vários lugares, crie uma função ou módulo para reutilizar o código."
"O que é o princípio KISS (Keep It Simple, Stupid) em programação?",O princípio KISS afirma que você deve manter o código o mais simples possível.  Evite soluções complexas quando uma solução simples for suficiente.
"O que é o conceito de ""code smell"" em programação?","Um ""code smell"" é uma característica no código que pode indicar um problema mais profundo.  Não são erros técnicos, mas sugerem que o código pode ser difícil de manter, entender ou modificar."
O que é o princípio YAGNI (You Ain't Gonna Need It) em programação?,"O princípio YAGNI afirma que você não deve adicionar funcionalidades até que realmente precise delas. Evite adicionar funcionalidades que você acha que pode precisar no futuro, pois pode acabar não usando-as."
O que é um closure assíncrono em JavaScript?,"Um closure assíncrono ocorre quando uma função dentro de uma closure é executada de forma assíncrona, como dentro de um `setTimeout` ou uma Promise. A closure ainda mantém acesso às variáveis do escopo externo, mesmo que a função seja executada posteriormente."
Explique como usar o método `bind()` em JavaScript e qual seu propósito.,"`bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido. É usado para fixar o contexto `this` de uma função. Ex: `const newFunc = minhaFuncao.bind(meuObjeto);`"
O que é um proxy em JavaScript?,"Um Proxy permite que você crie objetos que interceptam e personalizam operações fundamentais dirigidas a outro objeto.  Pode ser usado para validação, logging, ou outras tarefas."
O que são WeakSets e WeakMaps em JavaScript?,"WeakSets e WeakMaps são semelhantes a Sets e Maps, mas seus valores são mantidos ""fracos"". Isso significa que se não houver outras referências para um objeto armazenado em um WeakSet ou WeakMap, o objeto pode ser coletado pelo garbage collector."
O que é tail call optimization (TCO) em JavaScript?,"Tail call optimization é uma otimização que alguns engines JavaScript podem realizar. Se a última operação em uma função for uma chamada para outra função (um ""tail call""), o engine pode reutilizar o stack frame da função atual, economizando memória. No entanto, o suporte a TCO em JavaScript é inconsistente."
O que são módulos ES (ES Modules) em JavaScript?,"Módulos ES são o sistema de módulos nativo do JavaScript, introduzido no ES6. Eles permitem que você organize o código em arquivos separados e importe e exporte funcionalidades entre eles."
Qual a diferença entre `import` e `require` em JavaScript?,"`import` é usado para importar módulos ES (ES Modules), enquanto `require` é usado para importar módulos CommonJS. `import` é estático (determinado em tempo de compilação), enquanto `require` é dinâmico (determinado em tempo de execução)."
Como você exporta um módulo em JavaScript usando módulos ES?,"Você pode usar `export default nomeDaFuncao;` para exportar um valor padrão ou `export { funcao1, funcao2 };` para exportar múltiplos valores nomeados."
O que é o objeto `globalThis` em JavaScript?,"`globalThis` é uma variável global que se refere ao objeto global, independentemente do ambiente (navegador, Node.js, etc.). Ele fornece uma maneira padronizada de acessar o objeto global."
O que é o operador de atribuição de coalescência nula (??=) em JavaScript?,O operador de atribuição de coalescência nula (??=) atribui o valor do lado direito ao operando do lado esquerdo apenas se o operando do lado esquerdo for nulo (null ou undefined).
O que é o operador de atribuição lógica OU (||=) em JavaScript?,"O operador de atribuição lógica OU (||=) atribui o valor do lado direito ao operando do lado esquerdo apenas se o operando do lado esquerdo for falsy (por exemplo, false, 0, """", null, undefined, NaN)."
O que é o operador de atribuição lógica E (&&=) em JavaScript?,"O operador de atribuição lógica E (&&=) atribui o valor do lado direito ao operando do lado esquerdo apenas se o operando do lado esquerdo for truthy (por exemplo, true, um número diferente de 0, uma string não vazia, um objeto)."
O que são Private Class Fields em JavaScript?,"Private Class Fields, introduzidos recentemente, permitem que você declare propriedades e métodos dentro de uma classe que só podem ser acessados dentro da própria classe, promovendo o encapsulamento. Eles são declarados com o prefixo `#` (ex: `#privateField`)."
"Explique o conceito de ""Shadow DOM"" em JavaScript.","Shadow DOM é um recurso que permite encapsular a estrutura, o estilo e o comportamento de um componente web. Isso significa que o CSS e o JavaScript dentro do Shadow DOM não afetam (e não são afetados por) o código fora do Shadow DOM."
O que são Web Components em JavaScript?,"Web Components são um conjunto de tecnologias que permitem criar elementos HTML reutilizáveis e encapsulados. Eles consistem em Custom Elements, Shadow DOM e HTML Templates."
O que são Custom Elements em JavaScript?,"Custom Elements são elementos HTML personalizados que você define usando JavaScript. Eles permitem que você crie seus próprios tags HTML com comportamento específico.

Espero que esta lista seja útil e forneça um bom ponto de partida para testar seu conhecimento de JavaScript!"
O que é hoisting em JavaScript e como ele funciona?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seu escopo antes da execução do código. No entanto, apenas a declaração é movida, não a inicialização. Variáveis declaradas com `var` são hoisted e inicializadas com `undefined`. Variáveis declaradas com `let` e `const` também são hoisted, mas não são inicializadas, resultando em um erro se forem acessadas antes de serem declaradas.

**3.**"
O que é o conceito de closures em JavaScript?,"Uma closure é a combinação de uma função e o ambiente lexical (escopo) no qual essa função foi declarada. Isso permite que uma função interna acesse variáveis do escopo externo mesmo depois que a função externa já tenha sido executada.

**4.**"
Explique o que é a keyword `this` em JavaScript.,"A keyword `this` se refere ao objeto no qual a função está sendo executada. Seu valor depende de como a função é chamada. Em um método de objeto, `this` se refere ao objeto. Se uma função é chamada sozinha, `this` se refere ao objeto global (window no navegador, global no Node.js), a menos que o modo estrito esteja ativado, caso em que `this` é `undefined`.  `call`, `apply`, e `bind` permitem definir explicitamente o valor de `this`.

**5.**"
O que são template literals em JavaScript e quais são suas vantagens?,"Template literals são strings delimitadas por backticks (``) que permitem a interpolação de expressões. Suas vantagens incluem: facilidade de incorporação de variáveis dentro de strings usando `${expressão}`, possibilidade de strings multi-linha sem concatenação e melhor legibilidade em comparação com strings concatenadas.

**7.**"
Explique o que são arrow functions e quais são suas principais diferenças em relação às funções regulares?,"Arrow functions são uma forma mais concisa de escrever funções em JavaScript. As principais diferenças são: sintaxe mais curta, não possuem seu próprio `this` (herdam o `this` do escopo circundante), não possuem o objeto `arguments` (use parâmetros rest), e não podem ser usadas como construtoras (não podem ser usadas com `new`).

**8.**"
O que são Promises em JavaScript e como elas ajudam no tratamento de código assíncrono?,"Promises são objetos que representam o eventual resultado (sucesso ou falha) de uma operação assíncrona. Elas fornecem uma maneira mais estruturada e legível de lidar com código assíncrono, evitando o ""callback hell"". Uma Promise tem três estados: `pending` (pendente), `fulfilled` (resolvida com sucesso) e `rejected` (rejeitada com erro).

**9.**"
Explique o que são async/await em JavaScript e como eles se relacionam com Promises.,"`async/await` são uma sintaxe mais recente no JavaScript que facilita o trabalho com Promises. `async` é usado para declarar uma função assíncrona, e `await` é usado dentro de uma função `async` para pausar a execução até que uma Promise seja resolvida ou rejeitada. Eles fornecem uma maneira mais síncrona e legível de escrever código assíncrono.

**10.**"
"Qual a diferença entre `map`, `filter` e `reduce` em JavaScript?","*   `map`: Cria um novo array com os resultados da chamada de uma função para cada elemento do array original.
*   `filter`: Cria um novo array com todos os elementos que passam em um teste implementado por uma função fornecida.
*   `reduce`: Aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.

**12.**"
O que é o operador spread (`...`) em JavaScript e quais são seus usos?,"O operador spread (`...`) permite expandir um iterável (como um array ou string) em locais onde se espera zero ou mais argumentos (em chamadas de função) ou elementos (em literais de array). Seus usos incluem: copiar arrays, concatenar arrays, passar um array como argumentos para uma função, e clonar objetos (superficialmente).

**13.**"
O que é destructuring em JavaScript e quais são suas vantagens?,"Destructuring é uma expressão JavaScript que permite extrair dados de arrays e objetos para variáveis distintas. Suas vantagens incluem: simplificar a atribuição de valores, tornar o código mais legível, e facilitar a manipulação de dados.

**14.**"
Explique o que é o JSON e como ele é usado em JavaScript.,"JSON (JavaScript Object Notation) é um formato de texto leve para troca de dados. É baseado em um subconjunto da linguagem JavaScript e é usado para representar dados estruturados. Em JavaScript, é usado para serializar e desserializar dados, especialmente ao enviar e receber dados de APIs.

**16.**"
O que é o modo estrito (strict mode) em JavaScript e como ele é ativado?,"O modo estrito é uma forma de executar JavaScript com uma semântica mais rígida. Ele ajuda a evitar erros comuns e práticas ruins. É ativado adicionando a string `""use strict"";` no início de um script ou função.

**18.**"
Explique o que é o evento loop em JavaScript e como ele lida com operações assíncronas.,"O event loop é um mecanismo que permite que o JavaScript, que é single-threaded, execute operações assíncronas sem bloquear a thread principal. Ele monitora a pilha de chamadas (call stack) e a fila de tarefas (task queue). Quando a pilha de chamadas está vazia, o event loop pega a primeira tarefa da fila de tarefas e a coloca na pilha de chamadas para execução.

**19.**"
O que são callbacks em JavaScript e quais são seus problemas potenciais?,"Callbacks são funções passadas como argumentos para outras funções, que são então executadas após a conclusão de alguma operação. Problemas potenciais incluem o ""callback hell"" (aninhamento excessivo de callbacks), dificuldade em lidar com erros e inversão de controle.

**20.**"
Explique o que é a propriedade `prototype` em JavaScript e como ela é usada.,"A propriedade `prototype` é um objeto associado a cada função em JavaScript. Ela permite adicionar propriedades e métodos que serão herdados por todas as instâncias (objetos) criadas a partir dessa função usando o operador `new`. É a base da herança prototípica em JavaScript.

**21.**"
O que é o método `Object.create()` em JavaScript e como ele difere da criação de objetos com `new`?,"`Object.create()` cria um novo objeto com o protótipo especificado. Diferente de `new`, ele permite definir o protótipo do novo objeto explicitamente, enquanto `new` usa o `prototype` da função construtora. `Object.create(null)` cria um objeto sem nenhum protótipo, ou seja, não herda propriedades e métodos de `Object.prototype`.

**23.**"
Explique o que é o escopo léxico em JavaScript.,"Escopo léxico significa que o escopo de uma variável em JavaScript é determinado pela sua posição no código fonte. Uma função interna tem acesso às variáveis declaradas em seu próprio escopo, bem como às variáveis declaradas nos escopos das funções externas que a contêm.

**24.**"
"O que é a diferença entre `apply()`, `call()` e `bind()` em JavaScript?","`apply()` e `call()` são usados para invocar uma função com um determinado valor `this`. A diferença é que `apply()` recebe os argumentos da função como um array, enquanto `call()` recebe os argumentos individualmente. `bind()` cria uma nova função com o valor `this` especificado, mas não invoca a função imediatamente. Em vez disso, retorna uma nova função que pode ser invocada posteriormente.

**25.**"
O que é a diferença entre shallow copy e deep copy em JavaScript?,"Shallow copy cria uma nova referência a um objeto, copiando apenas as propriedades de nível superior. Se um objeto contiver outros objetos aninhados, a shallow copy apenas copia as referências a esses objetos aninhados, não os objetos em si. Deep copy cria uma nova cópia completa do objeto, incluindo todos os objetos aninhados, de forma que a nova cópia não compartilhe nenhuma referência com o objeto original.

**27.**"
Como você pode criar uma deep copy de um objeto em JavaScript?,"Existem várias maneiras de criar uma deep copy em JavaScript. Uma maneira é usar `JSON.parse(JSON.stringify(obj))`, mas isso não funciona para objetos que contêm funções ou datas. Outra maneira é usar uma biblioteca como Lodash ou implementar uma função recursiva que copia cada propriedade do objeto e seus objetos aninhados.

**28.**"
O que é o DOM (Document Object Model) e como o JavaScript interage com ele?,"O DOM (Document Object Model) é uma representação em árvore da estrutura de um documento HTML ou XML. O JavaScript interage com o DOM para acessar e manipular os elementos da página web, como alterar o conteúdo, atributos, estilos e estrutura do documento.

**31.**"
O que são eventos em JavaScript e como você pode adicionar e remover listeners de eventos?,"Eventos são ações ou ocorrências que acontecem no navegador, como cliques de mouse, pressionamentos de teclas, carregamento de páginas e envio de formulários. Você pode adicionar listeners de eventos usando o método `addEventListener()` do objeto DOM, especificando o tipo de evento e a função de callback a ser executada quando o evento ocorrer. Para remover um listener de evento, use o método `removeEventListener()`, especificando o mesmo tipo de evento e função de callback.

**32.**"
O que é event bubbling e event capturing em JavaScript?,"Event bubbling é o processo em que um evento disparado em um elemento DOM se propaga para cima na árvore do DOM, acionando os listeners de eventos em seus elementos pais. Event capturing é o processo inverso, onde o evento se propaga para baixo na árvore do DOM, acionando os listeners de eventos nos elementos ancestrais antes de atingir o elemento alvo.

**33.**"
Como você pode prevenir o comportamento padrão de um evento em JavaScript?,"Você pode prevenir o comportamento padrão de um evento chamando o método `preventDefault()` do objeto de evento dentro da função de callback do listener de evento. Por exemplo, ao clicar em um link, você pode impedir que o navegador siga o link chamando `event.preventDefault()`.

**34.**"
O que é event delegation em JavaScript e quais são suas vantagens?,"Event delegation é uma técnica em que você adiciona um listener de evento a um elemento pai em vez de adicionar listeners de eventos a cada um de seus elementos filhos. Quando um evento ocorre em um elemento filho, ele se propaga para o elemento pai (event bubbling), e o listener de evento no elemento pai é acionado. As vantagens incluem: reduzir o número de listeners de eventos, melhorar o desempenho e simplificar a adição e remoção de elementos dinamicamente.

**35.**"
O que é a diferença entre `localStorage` e `sessionStorage` em JavaScript?,"Tanto `localStorage` quanto `sessionStorage` são APIs para armazenar dados no navegador do cliente. `localStorage` armazena dados persistentemente, ou seja, os dados são mantidos mesmo após o fechamento do navegador. `sessionStorage` armazena dados apenas para a duração da sessão do navegador, ou seja, os dados são perdidos quando o navegador é fechado.

**36.**"
Como você pode detectar o tipo de dado de uma variável em JavaScript?,"Você pode usar o operador `typeof` para detectar o tipo de dado de uma variável. No entanto, `typeof null` retorna ""object"", o que é um erro histórico. Para verificar se uma variável é `null`, você deve compará-la explicitamente com `null` usando `===`. Para verificar se uma variável é um array, você pode usar `Array.isArray(variable)`.

**37.**"
O que é NaN em JavaScript e como você pode verificar se um valor é NaN?,"NaN (Not-a-Number) é um valor numérico especial que representa o resultado de uma operação matemática indefinida ou impossível. Você pode verificar se um valor é NaN usando a função `isNaN(value)`. No entanto, `isNaN()` pode realizar type coercion, então é recomendado usar `Number.isNaN(value)`, que não realiza type coercion e retorna `true` apenas se o valor for NaN.

**40.**"
O que é um array em JavaScript e como você pode criar um array?,"Um array em JavaScript é uma coleção ordenada de valores. Você pode criar um array usando a sintaxe de literal de array `[]` ou usando o construtor `new Array()`.

**42.**"
Como você pode acessar os elementos de um array em JavaScript?,"Você pode acessar os elementos de um array usando seu índice, que começa em 0. Por exemplo, `array[0]` acessa o primeiro elemento do array.

**43.**"
"O que são os métodos `push()`, `pop()`, `shift()` e `unshift()` em JavaScript e como eles modificam um array?","*   `push()`: Adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
*   `pop()`: Remove o último elemento de um array e retorna esse elemento.
*   `shift()`: Remove o primeiro elemento de um array e retorna esse elemento.
*   `unshift()`: Adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.

**44.**"
O que é o método `splice()` em JavaScript e como ele é usado para modificar um array?,"O método `splice()` modifica um array removendo, substituindo ou adicionando elementos em um determinado índice. Ele recebe três argumentos: o índice de início, o número de elementos a serem removidos e os elementos a serem adicionados (opcional).

**45.**"
O que é o método `slice()` em JavaScript e como ele é usado para criar um novo array a partir de um array existente?,"O método `slice()` retorna uma cópia superficial de uma parte de um array em um novo array. Ele recebe dois argumentos: o índice de início e o índice de fim (opcional). Se o índice de fim não for especificado, o `slice()` retorna uma cópia de todos os elementos a partir do índice de início.

**46.**"
O que é o método `concat()` em JavaScript e como ele é usado para combinar arrays?,"O método `concat()` retorna um novo array contendo a junção de dois ou mais arrays. Ele não modifica os arrays originais.

**47.**"
O que é o método `join()` em JavaScript e como ele é usado para converter um array em uma string?,"O método `join()` retorna uma string com todos os elementos de um array concatenados. Ele recebe um argumento opcional, que é o separador a ser usado entre os elementos. Se o separador não for especificado, o separador padrão é a vírgula.

**48.**"
Como você pode iterar sobre os elementos de um array em JavaScript usando um loop `for`?,"Você pode iterar sobre os elementos de um array usando um loop `for` com um índice que varia de 0 até o comprimento do array menos 1.

**49.**"
Como você pode iterar sobre os elementos de um array em JavaScript usando um loop `for...of`?,"O loop `for...of` permite iterar sobre os valores de um array diretamente, sem precisar usar um índice.

**50.**"
O que é o método `forEach()` em JavaScript e como ele é usado para iterar sobre os elementos de um array?,"O método `forEach()` executa uma função fornecida uma vez para cada elemento do array. Ele recebe uma função de callback como argumento, que é chamada com o valor do elemento, o índice do elemento e o array em si.

**51.**"
O que são objetos em JavaScript e como você pode criar um objeto?,"Um objeto em JavaScript é uma coleção de propriedades, onde cada propriedade é uma associação entre um nome (ou chave) e um valor. Você pode criar um objeto usando a sintaxe de literal de objeto `{}` ou usando o construtor `new Object()`.

**52.**"
Como você pode acessar as propriedades de um objeto em JavaScript?,"Você pode acessar as propriedades de um objeto usando a notação de ponto (`object.property`) ou a notação de colchetes (`object['property']`). A notação de colchetes é necessária quando o nome da propriedade é armazenado em uma variável ou quando o nome da propriedade contém caracteres especiais.

**53.**"
Como você pode adicionar novas propriedades a um objeto em JavaScript?,"Você pode adicionar novas propriedades a um objeto usando a notação de ponto (`object.newProperty = value`) ou a notação de colchetes (`object['newProperty'] = value`).

**54.**"
Como você pode remover propriedades de um objeto em JavaScript?,"Você pode remover propriedades de um objeto usando o operador `delete`. Por exemplo, `delete object.property` remove a propriedade `property` do objeto.

**55.**"
O que é o método `Object.keys()` em JavaScript e como ele é usado para obter um array com as chaves de um objeto?,"O método `Object.keys()` retorna um array com todas as chaves (nomes de propriedades) de um objeto.

**57.**"
O que é o método `Object.values()` em JavaScript e como ele é usado para obter um array com os valores de um objeto?,"O método `Object.values()` retorna um array com todos os valores das propriedades de um objeto.

**58.**"
O que é o método `Object.entries()` em JavaScript e como ele é usado para obter um array com os pares chave-valor de um objeto?,"O método `Object.entries()` retorna um array com todos os pares chave-valor de um objeto, onde cada par é um array com dois elementos: a chave e o valor.

**59.**"
Como você pode iterar sobre as propriedades de um objeto em JavaScript usando um loop `for...in`?,"O loop `for...in` permite iterar sobre as chaves (nomes de propriedades) de um objeto.

**60.**"
O que é a diferença entre um objeto literal e um objeto criado com uma função construtora em JavaScript?,"Um objeto literal é criado usando a sintaxe `{}`, enquanto um objeto criado com uma função construtora é criado usando o operador `new` seguido do nome da função construtora. A principal diferença é que as funções construtoras podem ter métodos e propriedades definidos em seu `prototype`, que são herdados por todas as instâncias criadas a partir dessa função.

**61.**"
Como você pode definir métodos em um objeto em JavaScript?,"Você pode definir métodos em um objeto atribuindo uma função a uma propriedade do objeto.

**63.**"
O que é o método `Object.assign()` em JavaScript e como ele é usado para copiar propriedades de um objeto para outro?,"O método `Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto de destino. Ele retorna o objeto de destino.

**64.**"
O que é o método `Object.freeze()` em JavaScript e como ele impede a modificação de um objeto?,"O método `Object.freeze()` congela um objeto, impedindo que novas propriedades sejam adicionadas, propriedades existentes sejam removidas e valores de propriedades existentes sejam alterados.

**65.**"
O que é o método `Object.seal()` em JavaScript e como ele impede a adição e remoção de propriedades de um objeto?,"O método `Object.seal()` sela um objeto, impedindo que novas propriedades sejam adicionadas ou que propriedades existentes sejam removidas. No entanto, os valores de propriedades existentes ainda podem ser alterados.

**66.**"
Qual é a diferença entre `Object.freeze()` e `Object.seal()` em JavaScript?,"Ambos `Object.freeze()` e `Object.seal()` impedem a adição e remoção de propriedades. `Object.freeze()` também impede a modificação dos valores das propriedades, enquanto `Object.seal()` permite a modificação dos valores das propriedades.

**67.**"
O que é a diferença entre uma função declarada e uma função expressa em JavaScript?,"Uma função declarada é definida usando a palavra-chave `function` seguida pelo nome da função. Ela é hoisted para o topo de seu escopo. Uma função expressa é definida atribuindo uma função a uma variável. Ela não é hoisted, portanto, deve ser definida antes de ser usada.

**68.**"
O que são IIFEs (Immediately Invoked Function Expressions) em JavaScript e quais são seus usos?,"IIFEs (Immediately Invoked Function Expressions) são funções que são definidas e executadas imediatamente. Elas são usadas para criar um escopo privado para variáveis, evitando conflitos com outras variáveis no escopo global.

**70.**"
O que são parâmetros rest em JavaScript e como eles são usados?,"Parâmetros rest permitem representar um número indefinido de argumentos como um array. Eles são definidos usando a sintaxe `...param`. O parâmetro rest deve ser o último parâmetro da função.

**71.**"
O que são parâmetros padrão em JavaScript e como eles são usados?,"Parâmetros padrão permitem definir valores padrão para parâmetros de função que não são fornecidos quando a função é chamada.

**72.**"
O que é recursion em JavaScript?,"Recursion é uma técnica de programação onde uma função chama a si mesma dentro de sua própria definição. É usado para resolver problemas que podem ser divididos em subproblemas menores e semelhantes.

**73.**"
Quais são os riscos de usar recursion em JavaScript?,"O principal risco de usar recursion é o estouro da pilha de chamadas (stack overflow). Isso ocorre quando a função recursiva chama a si mesma um número excessivo de vezes sem atingir uma condição de parada, resultando em um erro.

**74.**"
Como você pode evitar o estouro da pilha de chamadas ao usar recursion em JavaScript?,"Você pode evitar o estouro da pilha de chamadas garantindo que a função recursiva tenha uma condição de parada clara e que a função se aproxime da condição de parada a cada chamada recursiva. Você também pode usar técnicas como tail call optimization (se suportada pelo ambiente) ou transformar a recursion em um loop iterativo.

**75.**"
Quais são os benefícios de usar funções puras em JavaScript?,"Os benefícios de usar funções puras incluem: maior previsibilidade, facilidade de teste, facilidade de otimização e facilidade de paralelização.

**78.**"
O que são efeitos colaterais (side effects) em JavaScript?,"Efeitos colaterais são modificações no estado externo de um programa que ocorrem como resultado da execução de uma função. Exemplos de efeitos colaterais incluem: modificar variáveis globais, modificar objetos passados como argumentos, realizar operações de I/O (entrada/saída) e exibir mensagens na tela.

**79.**"
O que são closures e como elas se relacionam com o escopo léxico em JavaScript?,"Closures são a combinação de uma função e o ambiente lexical (escopo) no qual essa função foi declarada. Isso permite que uma função interna acesse variáveis do escopo externo mesmo depois que a função externa já tenha sido executada. O escopo léxico determina quais variáveis são acessíveis dentro de uma função.

**80.**"
Como você pode usar closures para criar variáveis privadas em JavaScript?,"Você pode usar closures para criar variáveis privadas encapsulando as variáveis dentro de uma função e retornando uma função interna que tem acesso a essas variáveis. As variáveis encapsuladas não podem ser acessadas diretamente de fora da função externa, mas podem ser acessadas através da função interna retornada.

**81.**"
O que são higher-order functions e como elas são usadas em JavaScript?,"Higher-order functions são funções que podem receber outras funções como argumentos e/ou retornar funções como resultados. Elas são usadas para criar código mais flexível e reutilizável.

**82.**"
Como você pode usar higher-order functions para criar funções mais genéricas e reutilizáveis em JavaScript?,"Você pode usar higher-order functions para criar funções mais genéricas e reutilizáveis abstraindo a lógica específica para uma função separada que é passada como argumento para a higher-order function. Isso permite que a higher-order function seja usada com diferentes lógicas específicas, tornando-a mais flexível e reutilizável.

**83.**"
O que são partial application e currying em JavaScript?,"Partial application é o processo de criar uma nova função aplicando alguns dos argumentos de uma função existente. Currying é uma técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.

**84.**"
Como você pode usar `bind()` para realizar partial application em JavaScript?,"O método `bind()` pode ser usado para criar uma nova função com um valor `this` especificado e com alguns argumentos predefinidos. Isso permite realizar partial application, criando uma nova função que recebe apenas os argumentos restantes.

**85.**"
Como você pode usar generators para criar iteradores personalizados em JavaScript?,"Você pode usar generators para criar iteradores personalizados definindo uma função generator que usa a palavra-chave `yield` para produzir os valores que você deseja iterar. A função generator retorna um objeto iterator que pode ser usado com o loop `for...of`.

**87.**"
Como você pode tornar um objeto iterável em JavaScript?,"Para tornar um objeto iterável em JavaScript, você precisa definir um método `[Symbol.iterator]()` no objeto, que retorna um objeto iterator. O objeto iterator deve ter um método `next()` que retorna um objeto com as propriedades `value` (o valor atual) e `done` (um booleano indicando se a iteração está completa).

**89.**"
Quais são os três estados possíveis de uma Promise em JavaScript?,"Os três estados possíveis de uma Promise são: `pending` (pendente), `fulfilled` (resolvida com sucesso) e `rejected` (rejeitada com erro).

**91.**"
"O que são os métodos `then()`, `catch()` e `finally()` em JavaScript e como eles são usados com Promises?","*   `then()`: É usado para registrar callbacks que serão executados quando a Promise for resolvida com sucesso.
*   `catch()`: É usado para registrar callbacks que serão executados quando a Promise for rejeitada com erro.
*   `finally()`: É usado para registrar callbacks que serão executados independentemente de a Promise ser resolvida ou rejeitada.

**92.**"
Como você pode encadear Promises em JavaScript usando o método `then()`?,"Você pode encadear Promises em JavaScript retornando uma nova Promise dentro do callback do método `then()`. Isso permite que você execute uma sequência de operações assíncronas em ordem.

**93.**"
O que são `async` e `await` em JavaScript e como eles se relacionam com Promises?,"`async` e `await` são uma sintaxe mais recente no JavaScript que facilita o trabalho com Promises. `async` é usado para declarar uma função assíncrona, e `await` é usado dentro de uma função `async` para pausar a execução até que uma Promise seja resolvida ou rejeitada.

**94.**"
