Pergunta,Resposta
O que é hoisting em JavaScript?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seu escopo antes da execução do código.  É importante notar que apenas a *declaração* é movida, não a *inicialização* (atribuição de valor)."
Qual a diferença entre `null` e `undefined` em JavaScript?,"`null` é um valor de atribuição. Representa a ausência intencional de qualquer valor de objeto. `undefined` significa que uma variável foi declarada, mas não atribuída a nenhum valor."
O que é uma closure em JavaScript?,"Uma closure é a combinação de uma função e o ambiente léxico onde essa função foi declarada. Permite que uma função interna acesse variáveis da função externa, mesmo depois que a função externa já foi executada."
O que são template literals (template strings) em JavaScript e como são utilizados?,Template literals são strings que permitem expressões embutidas. São delimitadas com backticks (`) e as expressões são inseridas com `${expression}`.  Facilitam a interpolação de variáveis e strings multilinhas.
Qual a diferença entre `==` e `===` em JavaScript?,`==` é o operador de igualdade abstrata. Ele converte os operandos para o mesmo tipo antes de fazer a comparação. `===` é o operador de igualdade estrita. Ele compara os operandos sem conversão de tipo e retorna `true` apenas se os operandos forem do mesmo tipo e tiverem o mesmo valor.
O que é o objeto `arguments` em JavaScript?,O objeto `arguments` é um objeto array-like disponível dentro de todas as funções não-arrow. Ele contém os valores dos argumentos passados para a função.
O que é o método `bind()` em JavaScript e como ele funciona?,"`bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido. Ele também permite passar argumentos predefinidos para a função original."
"O que é o conceito de ""truthy"" e ""falsy"" em JavaScript?","Em JavaScript, um valor ""truthy"" é um valor que é avaliado como `true` em um contexto booleano. Um valor ""falsy"" é um valor que é avaliado como `false` em um contexto booleano. Exemplos de falsy: `false`, `0`, `""""`, `null`, `undefined`, `NaN`. Todos os outros valores são truthy."
Explique o uso do operador `typeof` em JavaScript.,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando. Por exemplo, `typeof 42` retorna `""number""`."
O que é o objeto `window` em JavaScript?,"Em navegadores, o objeto `window` representa a janela do navegador. É o objeto global mais alto na hierarquia."
O que é o método `apply()` em JavaScript e como ele funciona?,`apply()` chama uma função com um determinado valor `this` e argumentos fornecidos como um array (ou um objeto array-like).
Explique o que é o método `call()` em JavaScript e como ele difere de `apply()`.,"`call()` chama uma função com um determinado valor `this` e argumentos fornecidos individualmente. Diferente de `apply()`, que espera um array de argumentos."
"O que é o conceito de ""currying"" em JavaScript?","Currying é uma técnica em que uma função que recebe múltiplos argumentos é transformada em uma sequência de funções, cada uma recebendo um único argumento."
O que são arrow functions em JavaScript e quais suas características?,"Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas têm uma sintaxe mais curta e não têm seu próprio `this`, `arguments`, `super` ou `new.target`."
O que são iterators em JavaScript?,"Iterators são objetos que definem uma sequência e, ao terminar, retornam um valor. Especificamente, eles implementam um método `next()` que retorna um objeto com duas propriedades: `value` (o próximo valor na sequência) e `done` (um booleano indicando se a sequência terminou)."
O que são generators em JavaScript?,"Generators são funções especiais que podem pausar a execução e retornar um valor, e depois retomar a execução de onde pararam. Eles usam a palavra-chave `yield` para retornar valores."
Explique o uso da palavra-chave `yield` em generators.,"`yield` pausa a execução da função generator e retorna o valor especificado.  Quando o generator é retomado, a execução continua do ponto após o `yield`."
O que é destructuring em JavaScript?,Destructuring é uma expressão JavaScript que torna possível extrair dados de arrays ou objetos em variáveis distintas.
O que são rest parameters em JavaScript?,Rest parameters permitem que uma função aceite um número indefinido de argumentos como um array. Eles são representados por três pontos (`...`) seguidos pelo nome do array.
O que é spread syntax em JavaScript?,Spread syntax permite que um iterável (como um array ou string) seja expandido em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados. É representado por três pontos (`...`).
"Qual a diferença entre `var`, `let` e `const` em JavaScript?","`var` tem escopo de função ou global. `let` tem escopo de bloco. `const` também tem escopo de bloco, mas deve ser inicializada com um valor e não pode ser reatribuída."
O que é um bloco em JavaScript e como é definido?,Um bloco é um grupo de zero ou mais declarações dentro de chaves `{}`. Ele define um escopo para variáveis declaradas com `let` ou `const`.
O que são higher-order functions em JavaScript?,Higher-order functions são funções que recebem outras funções como argumentos ou retornam outras funções como resultados.
O que são callbacks em JavaScript?,Callbacks são funções que são passadas como argumentos para outras funções e são executadas quando um determinado evento ocorre ou uma operação é concluída.
O que é o método `map()` em JavaScript e como ele funciona?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array chamador.
O que é o método `filter()` em JavaScript e como ele funciona?,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em JavaScript e como ele funciona?,`reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o método `forEach()` em JavaScript e como ele funciona?,"`forEach()` executa uma função fornecida uma vez para cada elemento do array. Diferente de `map()`, ele não retorna um novo array."
O que é o método `sort()` em JavaScript e como ele funciona?,"`sort()` ordena os elementos de um array no local e retorna o array. A ordem de classificação padrão é construída com a conversão dos elementos em strings e, em seguida, comparando suas sequências de valores de unidades de código UTF-16."
O que são Promises em JavaScript?,Promises são objetos que representam a eventual conclusão (ou falha) de uma operação assíncrona e seu valor resultante.
Quais os estados possíveis de uma Promise em JavaScript?,"Os estados de uma Promise são: `pending` (pendente), `fulfilled` (realizada) e `rejected` (rejeitada)."
O que são as palavras-chave `async` e `await` em JavaScript?,`async` é usado para declarar uma função assíncrona. `await` é usado dentro de uma função assíncrona para pausar a execução até que uma Promise seja resolvida ou rejeitada.
O que é o método `then()` em JavaScript e como ele é usado com Promises?,`then()` é usado para lidar com o resultado de uma Promise que foi resolvida (fulfilled). Ele recebe uma função de callback que será executada com o valor resultante da Promise.
O que é o método `catch()` em JavaScript e como ele é usado com Promises?,`catch()` é usado para lidar com erros ou rejeições de uma Promise. Ele recebe uma função de callback que será executada se a Promise for rejeitada.
O que é o método `finally()` em JavaScript e como ele é usado com Promises?,"`finally()` permite executar código após uma Promise ser resolvida ou rejeitada, independentemente do resultado."
"O que é o conceito de ""event loop"" em JavaScript?",O event loop é um mecanismo que permite que o JavaScript lide com operações assíncronas sem bloquear o thread principal. Ele monitora a pilha de chamadas e a fila de tarefas e move tarefas da fila para a pilha quando a pilha está vazia.
"O que é o ""call stack"" em JavaScript?",O call stack é uma estrutura de dados que registra onde o programa está durante a execução. Ele rastreia as chamadas de função e garante que as funções sejam executadas na ordem correta.
"O que é o ""task queue"" em JavaScript?",O task queue é uma fila que contém as tarefas assíncronas que estão prontas para serem executadas. Essas tarefas são adicionadas à pilha de chamadas pelo event loop quando a pilha está vazia.
O que são eventos em JavaScript?,"Eventos são ações ou ocorrências que acontecem no navegador, como um clique do mouse, um pressionamento de tecla ou o carregamento de uma página."
Como adicionar um event listener a um elemento em JavaScript?,"Usa-se o método `addEventListener()` do objeto do elemento. Por exemplo: `element.addEventListener('click', function() { ... });`"
O que é o objeto `event` em JavaScript?,O objeto `event` é um objeto que contém informações sobre o evento que ocorreu. Ele é passado como argumento para a função de callback associada ao evento.
O que é event bubbling em JavaScript?,Event bubbling é o processo em que um evento disparado em um elemento filho se propaga para seus elementos pais na árvore DOM.
O que é event capturing em JavaScript?,Event capturing é o oposto de event bubbling.  O evento é primeiro capturado pelo elemento mais externo e propagado para o elemento alvo.
Como prevenir o comportamento padrão de um evento em JavaScript?,Usa-se o método `preventDefault()` do objeto `event`. Por exemplo: `event.preventDefault();`
Como interromper a propagação de um evento em JavaScript?,Usa-se o método `stopPropagation()` do objeto `event`. Por exemplo: `event.stopPropagation();`
O que é o DOM (Document Object Model)?,"O DOM é uma representação estruturada dos elementos HTML em uma página da web como objetos em uma árvore.  Ele permite que o JavaScript acesse e manipule o conteúdo, a estrutura e o estilo da página."
Como selecionar um elemento HTML no DOM usando JavaScript?,"Pode-se usar métodos como `document.getElementById()`, `document.querySelector()`, `document.querySelectorAll()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`."
Como modificar o conteúdo de um elemento HTML no DOM usando JavaScript?,Pode-se usar a propriedade `textContent` ou `innerHTML` do objeto do elemento.
Como adicionar um novo elemento HTML ao DOM usando JavaScript?,"Cria-se o elemento usando `document.createElement()`, define suas propriedades e, em seguida, usa métodos como `appendChild()` ou `insertBefore()` para adicioná-lo ao DOM."
Como remover um elemento HTML do DOM usando JavaScript?,Usa-se o método `removeChild()` do elemento pai.
O que são atributos de um elemento HTML?,"Atributos são propriedades que fornecem informações adicionais sobre um elemento HTML. Por exemplo, o atributo `src` de uma tag `<img>` especifica o caminho da imagem."
Como acessar e modificar os atributos de um elemento HTML usando JavaScript?,Usa-se os métodos `getAttribute()` e `setAttribute()` do objeto do elemento.
O que são classes CSS e como elas são usadas com JavaScript?,"Classes CSS são identificadores que podem ser usados para aplicar estilos a múltiplos elementos HTML. JavaScript pode ser usado para adicionar, remover ou verificar a existência de classes em elementos usando a propriedade `classList`."
Como adicionar uma classe CSS a um elemento HTML usando JavaScript?,Usa-se o método `classList.add()` do objeto do elemento.
Como remover uma classe CSS de um elemento HTML usando JavaScript?,Usa-se o método `classList.remove()` do objeto do elemento.
Como verificar se um elemento HTML possui uma determinada classe CSS usando JavaScript?,Usa-se o método `classList.contains()` do objeto do elemento.
O que é o objeto `console` em JavaScript?,"O objeto `console` fornece acesso ao console de depuração do navegador (ou outro ambiente de execução). Ele é usado para registrar mensagens, avisos e erros."
Quais são alguns dos métodos comuns do objeto `console` em JavaScript?,"Alguns métodos comuns são `console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`."
O que é o operador ternário em JavaScript?,O operador ternário é uma forma concisa de escrever uma instrução `if...else`. Sua sintaxe é `condição ? expressão_se_verdadeira : expressão_se_falsa`.
O que é o operador de coalescência nula (nullish coalescing operator) `??` em JavaScript?,"O operador de coalescência nula retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo."
O que é o operador de encadeamento opcional (optional chaining operator) `?.` em JavaScript?,"O operador de encadeamento opcional permite acessar propriedades aninhadas de um objeto sem verificar explicitamente se cada nível existe. Se uma propriedade no caminho for `null` ou `undefined`, o operador retorna `undefined` em vez de lançar um erro."
O que é o método `Object.keys()` em JavaScript?,`Object.keys()` retorna um array contendo os nomes de todas as propriedades enumeráveis de um determinado objeto.
O que é o método `Object.values()` em JavaScript?,`Object.values()` retorna um array contendo os valores de todas as propriedades enumeráveis de um determinado objeto.
O que é o método `Object.entries()` em JavaScript?,"`Object.entries()` retorna um array de arrays, onde cada subarray contém o nome e o valor de cada propriedade enumerável de um determinado objeto."
O que é o método `Object.assign()` em JavaScript?,`Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto de destino. Ele retorna o objeto de destino.
O que é o método `JSON.stringify()` em JavaScript?,`JSON.stringify()` converte um objeto JavaScript em uma string JSON.
O que é o método `JSON.parse()` em JavaScript?,`JSON.parse()` converte uma string JSON em um objeto JavaScript.
O que são módulos em JavaScript (ES Modules)?,"Módulos permitem dividir o código em arquivos separados, tornando-o mais organizado e reutilizável. Eles usam as palavras-chave `import` e `export` para compartilhar código entre arquivos."
Como exportar uma variável ou função de um módulo em JavaScript?,Usa-se a palavra-chave `export`. Por exemplo: `export const minhaVariavel = 42;` ou `export function minhaFuncao() { ... }`
Como importar uma variável ou função de um módulo em JavaScript?,"Usa-se a palavra-chave `import`. Por exemplo: `import { minhaVariavel, minhaFuncao } from './meuModulo.js';`"
O que é uma exportação padrão (default export) em JavaScript?,Uma exportação padrão permite exportar um único valor de um módulo sem especificar um nome. Por exemplo: `export default minhaFuncao;`
Como importar uma exportação padrão em JavaScript?,Usa-se a palavra-chave `import` sem as chaves. Por exemplo: `import minhaFuncao from './meuModulo.js';`
O que é o objeto `Math` em JavaScript?,O objeto `Math` fornece propriedades e métodos para operações matemáticas.
Quais são alguns métodos comuns do objeto `Math` em JavaScript?,"Alguns métodos comuns são `Math.random()`, `Math.round()`, `Math.ceil()`, `Math.floor()`, `Math.abs()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`."
O que é o objeto `Date` em JavaScript?,O objeto `Date` é usado para trabalhar com datas e horários.
Como criar um novo objeto `Date` em JavaScript?,"Usa-se o construtor `new Date()`. Pode ser criado sem argumentos (data e hora atuais), com um timestamp em milissegundos, com uma string de data ou com argumentos separados para ano, mês, dia, etc."
"Como obter o ano, mês, dia, hora, minuto, segundo e milissegundo de um objeto `Date` em JavaScript?","Usam-se os métodos `getFullYear()`, `getMonth()`, `getDate()`, `getHours()`, `getMinutes()`, `getSeconds()`, `getMilliseconds()`."
Como formatar uma data em JavaScript?,"Pode-se usar os métodos `toLocaleDateString()`, `toLocaleTimeString()` ou `toLocaleString()` para formatar a data e a hora de acordo com a localidade do usuário.  Também se pode usar o método `Intl.DateTimeFormat` para formatação mais avançada."
O que é o método `setTimeout()` em JavaScript?,`setTimeout()` executa uma função ou trecho de código após um determinado período de tempo (em milissegundos).
O que é o método `setInterval()` em JavaScript?,`setInterval()` executa uma função ou trecho de código repetidamente em intervalos regulares (em milissegundos).
Como cancelar um `setTimeout()` em JavaScript?,Usa-se a função `clearTimeout()` passando o ID retornado por `setTimeout()` como argumento.
Como cancelar um `setInterval()` em JavaScript?,Usa-se a função `clearInterval()` passando o ID retornado por `setInterval()` como argumento.
O que são expressões regulares em JavaScript?,Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings.
Como criar uma expressão regular em JavaScript?,Pode-se criar uma expressão regular usando um literal (entre barras `/`) ou usando o construtor `new RegExp()`.
Quais são alguns métodos comuns para trabalhar com expressões regulares em JavaScript?,"Alguns métodos comuns são `test()`, `exec()`, `match()`, `search()`, `replace()`, `split()`."
O que é o método `String.prototype.trim()` em JavaScript?,`trim()` remove os espaços em branco do início e do final de uma string.
O que é o método `String.prototype.toUpperCase()` em JavaScript?,`toUpperCase()` converte todos os caracteres de uma string para maiúsculas.
O que é o método `String.prototype.toLowerCase()` em JavaScript?,`toLowerCase()` converte todos os caracteres de uma string para minúsculas.
O que é o método `String.prototype.substring()` em JavaScript?,`substring()` retorna uma parte da string entre os índices especificados.
O que é o método `String.prototype.slice()` em JavaScript?,"`slice()` extrai uma seção de uma string e retorna uma nova string. É similar a `substring()`, mas aceita índices negativos."
O que é o método `String.prototype.replace()` em JavaScript?,`replace()` retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por um substituto.
O que é o método `String.prototype.split()` em JavaScript?,"`split()` divide uma string em um array de substrings, usando um separador especificado."
O que é o método `Array.prototype.push()` em JavaScript?,`push()` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
O que é o método `Array.prototype.pop()` em JavaScript?,`pop()` remove o último elemento de um array e retorna esse elemento.
O que é o método `Array.prototype.shift()` em JavaScript?,`shift()` remove o primeiro elemento de um array e retorna esse elemento.
O que é o método `Array.prototype.unshift()` em JavaScript?,`unshift()` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
O que é o método `Array.prototype.concat()` em JavaScript?,`concat()` retorna um novo array que é a combinação de dois ou mais arrays.
O que é o método `Array.prototype.join()` em JavaScript?,"`join()` retorna uma nova string concatenando todos os elementos de um array, separados por um separador especificado."
O que é o método `Array.prototype.splice()` em JavaScript?,"`splice()` altera o conteúdo de um array, removendo ou substituindo elementos existentes e/ou adicionando novos elementos no local."
O que é o método `Array.prototype.indexOf()` em JavaScript?,"`indexOf()` retorna o primeiro índice em que um dado elemento pode ser encontrado no array, ou -1 se ele não estiver presente."
O que é o método `Array.prototype.includes()` em JavaScript?,"`includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado."
O que são erros em JavaScript?,"Erros são problemas que ocorrem durante a execução do código, interrompendo o fluxo normal do programa."
Quais são alguns tipos comuns de erros em JavaScript?,"Alguns tipos comuns são `TypeError`, `ReferenceError`, `SyntaxError`, `RangeError`, `URIError`."
Como tratar erros em JavaScript usando `try...catch`?,O bloco `try` contém o código que pode gerar um erro. O bloco `catch` contém o código que é executado se um erro for lançado dentro do bloco `try`.
O que é o bloco `finally` em um bloco `try...catch`?,"O bloco `finally` contém o código que é sempre executado, independentemente de um erro ter sido lançado ou não no bloco `try`."
Como lançar um erro personalizado em JavaScript?,Usa-se a palavra-chave `throw` seguida de um objeto `Error` ou qualquer outro valor.
O que é o modo estrito (strict mode) em JavaScript?,"O modo estrito é uma forma de executar o JavaScript de forma mais ""segura"", aplicando regras mais rigorosas e eliminando alguns comportamentos ""perigosos"" da linguagem."
Como ativar o modo estrito em JavaScript?,"Adiciona-se a string `""use strict"";` no início de um script ou de uma função."
Quais são alguns benefícios de usar o modo estrito em JavaScript?,"O modo estrito ajuda a prevenir erros comuns, torna o código mais fácil de depurar e melhora o desempenho."
O que é o método `Array.isArray()` em JavaScript?,"`Array.isArray()` retorna `true` se um objeto é um array, caso contrário, retorna `false`."
O que é o método `Number.isNaN()` em JavaScript?,`Number.isNaN()` determina se um valor é `NaN` (Not-a-Number). É mais confiável que a função global `isNaN()`.
O que é o método `Number.isFinite()` em JavaScript?,`Number.isFinite()` determina se um valor é um número finito.
O que é o objeto `Map` em JavaScript?,`Map` é uma coleção de pares chave-valor onde as chaves podem ser de qualquer tipo de dado.
O que é o objeto `Set` em JavaScript?,`Set` é uma coleção de valores únicos.
O que é o Garbage Collection em JavaScript?,Garbage Collection é o processo automático de gerenciamento de memória em JavaScript.  O coletor de lixo identifica e libera memória que não está mais sendo usada pelo programa.
O que é o método `encodeURIComponent()` em JavaScript?,"`encodeURIComponent()` codifica um componente URI (Uniform Resource Identifier) substituindo cada instância de certos caracteres por uma, duas, três ou quatro sequências de escape representando a codificação UTF-8 do caractere."
O que é o método `decodeURIComponent()` em JavaScript?,`decodeURIComponent()` decodifica um componente URI (Uniform Resource Identifier) que foi previamente criado por `encodeURIComponent()`
O que é o método `encodeURI()` em JavaScript?,"`encodeURI()` codifica um URI (Uniform Resource Identifier) substituindo cada instância de certos caracteres por uma, duas, três ou quatro sequências de escape representando a codificação UTF-8 do caractere (exceto os caracteres que possuem um significado especial em um URI)."
O que é o método `decodeURI()` em JavaScript?,`decodeURI()` decodifica um URI (Uniform Resource Identifier) que foi previamente criado por `encodeURI()`
O que é JSONP? E por que é usado?,"JSONP (JSON with Padding) é uma técnica para contornar a política de mesma origem (same-origin policy) em navegadores, permitindo que páginas da web obtenham dados de um servidor em um domínio diferente.  Utiliza a tag `<script>` para fazer a requisição. *Nota: É uma técnica mais antiga e menos segura que CORS.*"
O que é CORS? E como funciona?,CORS (Cross-Origin Resource Sharing) é um mecanismo que permite que recursos restritos em uma página da web sejam requisitados de outro domínio fora do domínio do qual o primeiro recurso foi servido.  O servidor responde com cabeçalhos HTTP que indicam se a requisição cross-origin é permitida.
O que é o tipo de dado `Symbol` em JavaScript?,`Symbol` é um tipo de dado primitivo cujas instâncias são únicas e imutáveis. São frequentemente usados como chaves de propriedades de objetos para evitar conflitos de nomes.
O que são WeakMaps em JavaScript?,"WeakMaps são coleções de pares chave-valor onde as chaves devem ser objetos e os objetos são mantidos ""fracos"". Isso significa que se não houver outras referências a esses objetos, o garbage collector pode liberá-los, e suas entradas correspondentes no WeakMap serão removidas automaticamente."
O que são WeakSets em JavaScript?,"WeakSets são coleções de objetos onde os objetos são mantidos ""fracos"". Similar aos WeakMaps, se não houver outras referências a esses objetos, o garbage collector pode liberá-los, e os objetos são removidos do WeakSet automaticamente."
"O que é ""Shadow DOM""?","Shadow DOM é uma tecnologia do navegador que permite encapsular o conteúdo de um componente web, isolando-o do DOM principal. Isso permite que você crie componentes reutilizáveis com seus próprios estilos e scripts, sem se preocupar com conflitos com o restante da página."
Explique o conceito de Imutabilidade em JavaScript.,"Imutabilidade significa que, uma vez que um valor é criado, ele não pode ser alterado. Objetos e arrays em JavaScript são mutáveis por padrão. Para trabalhar com imutabilidade, você pode usar técnicas como `Object.freeze()`, `const` para variáveis de referência ou bibliotecas que fornecem estruturas de dados imutáveis."
O que são funções puras em JavaScript?,Uma função pura é uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais observáveis. Isso significa que ela não modifica o estado externo à função.
O que são Efeitos Colaterais (Side Effects) em JavaScript?,"Efeitos colaterais são alterações de estado ou interações com o mundo externo que ocorrem como resultado da execução de uma função. Exemplos incluem modificar variáveis globais, fazer requisições HTTP, ou interagir diretamente com o DOM."
O que é memoization?,"Memoization é uma técnica de otimização onde os resultados de chamadas de funções caras (computacionalmente) são armazenados em cache e reutilizados quando as mesmas entradas ocorrem novamente, evitando recalcular o resultado."
O que é o padrão de projeto Módulo (Module Pattern) em JavaScript?,O padrão de projeto Módulo é uma forma de encapsular código JavaScript para criar interfaces públicas e manter o estado privado. Ele geralmente usa closures para proteger variáveis internas do acesso externo.
O que é o padrão de projeto Revelador de Módulo (Revealing Module Pattern) em JavaScript?,"O padrão de projeto Revelador de Módulo é uma variação do padrão de projeto Módulo onde você define todas as funções e variáveis privadas dentro do closure e, em seguida, revela seletivamente as funções públicas retornando um objeto com referências a essas funções."
O que é um Polyfill?,Um Polyfill é um trecho de código (geralmente JavaScript) que fornece a funcionalidade que você espera que o navegador forneça nativamente. É usado para fornecer suporte a recursos modernos em navegadores mais antigos que não os implementam.
"Explique a diferença entre ""feature detection"" e ""user agent sniffing"".","""Feature detection"" envolve verificar se um determinado recurso está disponível no navegador antes de usá-lo. ""User agent sniffing"" envolve analisar a string do agente do usuário para identificar o navegador e a versão, o que é menos confiável e mais propenso a erros."
O que é um Service Worker?,"Um Service Worker é um script JavaScript que roda em segundo plano, separado da página da web, interceptando e controlando solicitações de rede, gerenciando cache e enviando notificações push. É uma tecnologia essencial para Progressive Web Apps (PWAs)."
Como verificar se um valor é um objeto em JavaScript (excluindo null)?,Uma maneira é usar `typeof valor === 'object' && valor !== null`.
O que é o operador `in` em JavaScript?,O operador `in` retorna `true` se uma propriedade especificada existe no objeto especificado ou em sua cadeia de protótipos. Por exemplo: `'propriedade' in objeto`.
O que é o `Proxy` object em JavaScript?,"O `Proxy` object permite interceptar e personalizar operações fundamentais em objetos (por exemplo, leitura de propriedades, atribuição, enumeração, chamadas de função). Ele cria um ""proxy"" para outro objeto, permitindo que você controle seu comportamento."
O que é o `Reflect` object em JavaScript?,O `Reflect` object é um objeto embutido que fornece métodos que interceptam operações JavaScript. Ele não é um construtor (você não pode usar `new Reflect()`) e seus métodos são os mesmos que os manipuladores de Proxy.
"Qual a diferença entre ""shallow copy"" e ""deep copy"" de um objeto em JavaScript?","Um ""shallow copy"" cria um novo objeto, mas as propriedades que contêm objetos ou arrays são apenas referências aos mesmos objetos ou arrays originais. Um ""deep copy"" cria um novo objeto e copia todos os objetos e arrays aninhados recursivamente, resultando em objetos totalmente independentes."
"Como criar um ""deep copy"" de um objeto em JavaScript?","Uma maneira comum é usar `JSON.parse(JSON.stringify(objeto))`, mas isso tem limitações (por exemplo, não funciona com funções ou objetos que contêm referências circulares). Outras opções incluem usar bibliotecas especializadas ou implementar uma função de cópia recursiva."
O que é o padrão Observer?,"O padrão Observer define uma dependência um-para-muitos entre objetos, de forma que quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
O que são IIFEs (Immediately Invoked Function Expressions)?,IIFEs são funções JavaScript que são executadas assim que são definidas. Elas são frequentemente usadas para criar escopos privados para evitar conflitos de nomes no escopo global. Um exemplo: `(function() { /* código */ })();`
"Explique o conceito de ""prototype chain"" em JavaScript.","A ""prototype chain"" é um mecanismo em JavaScript onde os objetos herdam propriedades e métodos de seus protótipos. Quando uma propriedade é acessada em um objeto, o JavaScript primeiro procura a propriedade no próprio objeto. Se não for encontrada, ele procura no protótipo do objeto e assim por diante, até atingir o protótipo `null`."
Como criar herança prototipal em JavaScript?,"Isso pode ser feito definindo o protótipo do novo objeto para uma instância do objeto pai. Por exemplo, usando `Object.create(ObjetoPai.prototype)`."
O que é `WeakRef` em JavaScript?,"`WeakRef` é uma maneira de manter uma referência fraca a outro objeto, o que significa que o objeto referenciado não é mantido vivo apenas por causa da referência `WeakRef`. É útil para evitar vazamentos de memória em cenários onde você precisa manter uma referência a um objeto, mas não quer impedir que ele seja coletado pelo garbage collector."
O que é FinalizationRegistry em JavaScript?,`FinalizationRegistry` permite registrar uma função para ser chamada quando um objeto específico é coletado pelo coletor de lixo. É usado em conjunto com `WeakRef` para executar ações de limpeza quando um objeto é liberado da memória.
O que é o Intl.NumberFormat em JavaScript?,"O objeto `Intl.NumberFormat` é um construtor que permite formatar números de acordo com uma localidade específica. Ele permite formatar moedas, porcentagens e números gerais com opções como separadores de milhares, casas decimais e símbolos de moeda.

**Pergunta"
Qual é a diferença entre `null` e `undefined` em JavaScript?,"`null` é um valor de atribuição. Ele representa a ausência intencional de um valor. `undefined` significa que uma variável foi declarada, mas ainda não recebeu um valor."
Como você declara uma constante em JavaScript?,Usando a palavra-chave `const`. Exemplo: `const PI = 3.14159;`
Qual é a diferença entre `==` e `===` em JavaScript?,"`==` compara apenas o valor, realizando conversão de tipo se necessário. `===` compara tanto o valor quanto o tipo, sem conversão de tipo."
Como você itera sobre as propriedades de um objeto em JavaScript?,"Usando o loop `for...in`. Exemplo: `for (let key in obj) { console.log(key, obj[key]); }`"
Como você cria um novo objeto em JavaScript usando a notação literal?,"Usando chaves `{}` e definindo as propriedades com pares chave-valor. Exemplo: `let obj = { nome: ""João"", idade: 30 };`"
Qual é o propósito da palavra-chave `this` em JavaScript?,`this` refere-se ao contexto de execução atual. Seu valor depende de como a função é chamada.
Como você converte uma string para um número em JavaScript?,"Usando `parseInt()` ou `parseFloat()`. Exemplo: `parseInt(""10"");`, `parseFloat(""3.14"");`"
O que é um array em JavaScript?,"Um array é uma coleção ordenada de valores, que podem ser de qualquer tipo de dado."
Como você adiciona um elemento ao final de um array em JavaScript?,"Usando o método `push()`. Exemplo: `array.push(""novo elemento"");`"
Como você remove o último elemento de um array em JavaScript?,Usando o método `pop()`. Exemplo: `array.pop();`
Como você declara uma função anônima em JavaScript?,"Uma função anônima é uma função sem nome. Exemplo: `function() { console.log(""Função anônima""); }`"
O que é o operador `typeof` em JavaScript?,"Retorna uma string indicando o tipo de dado de um operando. Exemplo: `typeof 10; // ""number""`"
Como você cria uma cópia superficial (shallow copy) de um objeto em JavaScript?,Usando o operador spread (`...`) ou o método `Object.assign()`.
O que é o método `map()` em JavaScript?,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em JavaScript?,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em JavaScript?,"O método `reduce()` executa uma função reducer (fornecida por você) em cada elemento do array, resultando em um único valor de retorno."
Como você verifica se uma variável é um array em JavaScript?,"Usando o método `Array.isArray()`. Exemplo: `Array.isArray([1, 2, 3]); // true`"
Qual a diferença entre `let` e `var` em JavaScript?,"`var` tem escopo de função ou global, enquanto `let` tem escopo de bloco. `let` não permite redeclaração dentro do mesmo escopo."
Como você define um valor padrão para um parâmetro de função em JavaScript?,"Usando atribuição dentro da declaração do parâmetro. Exemplo: `function saudacao(nome = ""Visitante"") { ... }`"
O que é template literals em JavaScript?,"São strings que permitem expressões embutidas. Delimitadas por backticks (``). Exemplo: `let nome = ""João""; console.log(`Olá, ${nome}!`);`"
O que é o operador spread (...) em JavaScript?,Permite expandir um iterável (como um array ou objeto) em locais onde múltiplos argumentos (para chamadas de função) ou múltiplos elementos (para literais de array) são esperados.
O que são arrow functions em JavaScript?,"São uma forma mais concisa de escrever funções, especialmente úteis para funções anônimas. Exemplo: `let soma = (a, b) => a + b;`"
Como você impede que um evento padrão ocorra em JavaScript?,Usando o método `preventDefault()` no objeto do evento.
O que é o método `stopPropagation()` em JavaScript?,Impede que um evento se propague para elementos pai na árvore DOM.
Como você seleciona um elemento HTML pelo ID usando JavaScript?,"Usando o método `document.getElementById()`. Exemplo: `document.getElementById(""meuElemento"");`"
Como você seleciona múltiplos elementos HTML por sua classe usando JavaScript?,"Usando o método `document.getElementsByClassName()`. Exemplo: `document.getElementsByClassName(""minhaClasse"");`"
Como você altera o conteúdo de um elemento HTML usando JavaScript?,Alterando a propriedade `innerHTML` ou `textContent` do elemento.
Como você altera o estilo de um elemento HTML usando JavaScript?,"Acessando a propriedade `style` do elemento e modificando suas propriedades. Exemplo: `elemento.style.color = ""red"";`"
Como você adiciona um novo elemento HTML ao DOM usando JavaScript?,"Criando o elemento com `document.createElement()`, definindo suas propriedades e adicionando-o ao DOM com `appendChild()`."
Como você remove um elemento HTML do DOM usando JavaScript?,Usando o método `removeChild()` no elemento pai do elemento que você deseja remover.
Como você adiciona um ouvinte de eventos (event listener) a um elemento HTML usando JavaScript?,"Usando o método `addEventListener()`. Exemplo: `elemento.addEventListener(""click"", minhaFuncao);`"
Quais são os diferentes tipos de eventos que você pode escutar em JavaScript?,"`click`, `mouseover`, `mouseout`, `keydown`, `keyup`, `submit`, `load`, `DOMContentLoaded`, etc."
O que é um evento de bubbling?,É quando um evento disparado em um elemento também dispara nos seus elementos pais na árvore DOM.
O que é um evento de capturing?,É quando um evento é primeiro capturado pelo elemento mais externo na árvore DOM antes de ser disparado no elemento alvo.
Como você cria um timer em JavaScript que executa uma função repetidamente?,Usando o método `setInterval()`.
Como você cria um timer em JavaScript que executa uma função apenas uma vez após um atraso?,Usando o método `setTimeout()`.
O que é JSON (JavaScript Object Notation)?,"É um formato de dados leve e legível por humanos, usado para transmitir dados entre um servidor e um navegador da web."
Como você converte um objeto JavaScript em uma string JSON?,Usando o método `JSON.stringify()`.
Como você converte uma string JSON em um objeto JavaScript?,Usando o método `JSON.parse()`.
Como você cria um objeto `Date` em JavaScript?,Usando o construtor `new Date()`.
Como você formata uma data em JavaScript?,Usando os métodos do objeto `Date` (ex: `toLocaleDateString()`) ou bibliotecas de formatação de data.
Como você gera um número aleatório entre 0 e 1 em JavaScript?,Usando o método `Math.random()`.
Como você arredonda um número para o inteiro mais próximo em JavaScript?,Usando o método `Math.round()`.
O que é o método `padStart()` em JavaScript?,"Preenche o início da string atual com outra string (repetidas vezes, se necessário) para que a string resultante alcance um determinado comprimento."
O que é o método `padEnd()` em JavaScript?,"Preenche o final da string atual com outra string (repetidas vezes, se necessário) para que a string resultante alcance um determinado comprimento."
O que é o operador `??` (nullish coalescing operator) em JavaScript?,"Retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo."
O que é o operador `?.` (optional chaining operator) em JavaScript?,"Permite acessar propriedades aninhadas de um objeto sem ter que verificar explicitamente se cada referência na cadeia é válida. Se uma referência for `null` ou `undefined`, a expressão retorna `undefined` em vez de lançar um erro."
O que são promises em JavaScript?,Promises representam o eventual sucesso (ou falha) de uma operação assíncrona e permitem que você escreva código assíncrono de uma forma mais legível e gerenciável.
Quais são os três estados possíveis de uma promise em JavaScript?,"Pendente (pending), Cumprida (fulfilled) e Rejeitada (rejected)."
Como você cria uma promise em JavaScript?,"Usando o construtor `new Promise((resolve, reject) => { ... });`"
Como você lida com o resultado de uma promise cumprida em JavaScript?,Usando o método `.then()`.
Como você lida com o resultado de uma promise rejeitada em JavaScript?,Usando o método `.catch()`.
O que é `async/await` em JavaScript?,"É uma sintaxe mais elegante para trabalhar com promises, que torna o código assíncrono mais parecido com código síncrono."
Como você declara uma função assíncrona em JavaScript?,Usando a palavra-chave `async` antes da palavra-chave `function`. Exemplo: `async function minhaFuncao() { ... }`
O que faz a palavra-chave `await` em JavaScript?,Pausa a execução da função assíncrona até que a promise seja resolvida (cumprida ou rejeitada).
Qual é o escopo de uma variável declarada com `var` dentro de uma função?,Escopo de função.
Qual é o escopo de uma variável declarada com `let` dentro de um bloco?,Escopo de bloco.
Qual é o escopo de uma variável declarada com `const` dentro de um bloco?,Escopo de bloco.
O que é o objeto `document` em JavaScript?,Representa o documento HTML ou XML carregado na janela do navegador.
O que é o objeto `navigator` em JavaScript?,Contém informações sobre o navegador do usuário.
Como você obtém a largura da janela do navegador em JavaScript?,Usando `window.innerWidth`.
Como você obtém a altura da janela do navegador em JavaScript?,Usando `window.innerHeight`.
Como você redireciona o usuário para outra página usando JavaScript?,"Usando `window.location.href = ""url"";`"
Como você recarrega a página atual usando JavaScript?,Usando `window.location.reload();`
Como você exibe uma mensagem no console usando JavaScript?,Usando `console.log()`.
Como você exibe um aviso no console usando JavaScript?,Usando `console.warn()`.
Como você exibe um erro no console usando JavaScript?,Usando `console.error()`.
O que é um breakpoint em JavaScript?,É um ponto em seu código onde a execução será pausada para que você possa inspecionar o estado do programa.
Como você define um breakpoint no código JavaScript no navegador?,Usando as ferramentas de desenvolvedor do navegador.
O que são cookies em JavaScript?,São pequenos arquivos de texto que os sites armazenam no computador do usuário para lembrar informações sobre ele.
Como você define um cookie usando JavaScript?,Manipulando a propriedade `document.cookie`.
Como você lê um cookie usando JavaScript?,Acessando a propriedade `document.cookie` e analisando a string.
Como você exclui um cookie usando JavaScript?,Definindo o cookie com uma data de expiração no passado.
O que é o armazenamento local (localStorage) em JavaScript?,"É um mecanismo de armazenamento web que permite que você armazene dados localmente no navegador do usuário, sem data de expiração."
Como você armazena um valor no armazenamento local usando JavaScript?,"Usando `localStorage.setItem(""chave"", ""valor"");`"
Como você recupera um valor do armazenamento local usando JavaScript?,"Usando `localStorage.getItem(""chave"");`"
Como você remove um valor do armazenamento local usando JavaScript?,"Usando `localStorage.removeItem(""chave"");`"
O que é o armazenamento de sessão (sessionStorage) em JavaScript?,"É semelhante ao armazenamento local, mas os dados são armazenados apenas durante a sessão do navegador."
Como você armazena um valor no armazenamento de sessão usando JavaScript?,"Usando `sessionStorage.setItem(""chave"", ""valor"");`"
Como você recupera um valor do armazenamento de sessão usando JavaScript?,"Usando `sessionStorage.getItem(""chave"");`"
Como você remove um valor do armazenamento de sessão usando JavaScript?,"Usando `sessionStorage.removeItem(""chave"");`"
O que é o método `forEach()` em JavaScript?,Executa uma função fornecida uma vez para cada elemento em um array.
O que é o método `find()` em JavaScript?,"Retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
O que é o método `findIndex()` em JavaScript?,"Retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `-1`."
O que é o método `some()` em JavaScript?,"Testa se pelo menos um elemento no array passa no teste implementado pela função fornecida. Retorna `true` se, no array, encontra um elemento para o qual a função fornecida retorna `true`; caso contrário, retorna `false`."
O que é o método `every()` em JavaScript?,"Testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna `true` se todos os elementos no array passam no teste implementado; caso contrário, retorna `false`."
O que é um iterador em JavaScript?,"É um objeto que define uma sequência e, ao terminar, retorna um valor. Especificamente, implementa o protocolo Iterator com um método `next()` que retorna um objeto com propriedades `value` e `done`."
O que é um gerador em JavaScript?,"Funções que podem ser pausadas e retomadas, permitindo produzir uma série de valores ao longo do tempo. Utilizam a palavra-chave `yield`."
Como você declara um gerador em JavaScript?,Usando a palavra-chave `function*`. Exemplo: `function* gerador() { yield 1; yield 2; }`
O que é o operador `yield` em JavaScript?,Usado dentro de uma função geradora para pausar a execução e retornar um valor.
O que são módulos em JavaScript?,São arquivos que contêm código JavaScript reutilizável que pode ser importado para outros arquivos.
Como você importa um módulo em JavaScript? (usando ES Modules),Usando a palavra-chave `import`. Exemplo: `import { funcao } from './modulo.js';`
Como você exporta um módulo em JavaScript? (usando ES Modules),Usando a palavra-chave `export`. Exemplo: `export function funcao() { ... }`
O que é uma exportação nomeada (named export) em JavaScript?,"Permite exportar múltiplas variáveis, funções ou classes de um módulo, que são importadas usando chaves. Exemplo: `export { funcao1, funcao2 };`"
Como você habilita o modo estrito em JavaScript?,"Adicionando a string `""use strict"";` no início do arquivo ou da função."
Quais são alguns dos benefícios de usar o modo estrito em JavaScript?,"Impede o uso de variáveis não declaradas, lança erros para atribuições a propriedades não graváveis, impede o uso de palavras reservadas como nomes de variáveis, etc."
O que é o método `bind()` em JavaScript?,"Cria uma nova função que, quando chamada, tem sua palavra-chave `this` definida para o valor fornecido."
O que é o método `call()` em JavaScript?,Chama uma função com um dado valor `this` e argumentos fornecidos individualmente.
O que é o método `apply()` em JavaScript?,Chama uma função com um dado valor `this` e argumentos fornecidos como um array (ou um objeto semelhante a um array).
O que é currying em JavaScript?,É uma técnica que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento.
O que é a diferença entre uma função pura e uma função com efeitos colaterais em JavaScript?,Uma função pura sempre retorna o mesmo resultado para as mesmas entradas e não causa efeitos colaterais (não modifica o estado externo). Uma função com efeitos colaterais pode modificar o estado externo.
O que é a recursão em JavaScript?,É quando uma função chama a si mesma dentro de sua própria definição.
Quais são os perigos de usar recursão sem uma condição de parada adequada em JavaScript?,"Pode levar a um estouro de pilha (stack overflow), causando um erro e travando o programa."
O que é programação orientada a objetos (OOP) em JavaScript?,"É um paradigma de programação que organiza o código em objetos, que são instâncias de classes e contêm dados (atributos) e comportamentos (métodos)."
O que é uma classe em JavaScript?,É um modelo para criar objetos. Define os atributos e métodos que os objetos terão.
Como você define uma classe em JavaScript?,Usando a palavra-chave `class`. Exemplo: `class Pessoa { ... }`
O que é um construtor em uma classe JavaScript?,É um método especial dentro de uma classe que é chamado quando um novo objeto da classe é criado. É usado para inicializar os atributos do objeto.
Como você cria um novo objeto de uma classe JavaScript?,"Usando a palavra-chave `new`. Exemplo: `let pessoa = new Pessoa(""João"", 30);`"
O que é herança em programação orientada a objetos (OOP)?,É um mecanismo que permite que uma classe (subclasse ou classe filha) herde atributos e métodos de outra classe (superclasse ou classe pai).
Como você implementa herança em JavaScript?,Usando a palavra-chave `extends`. Exemplo: `class Estudante extends Pessoa { ... }`
O que é polimorfismo em programação orientada a objetos (OOP)?,"É a capacidade de um objeto assumir muitas formas. Em outras palavras, objetos de diferentes classes podem responder ao mesmo método de maneiras diferentes."
O que é encapsulamento em programação orientada a objetos (OOP)?,É a prática de agrupar dados (atributos) e os métodos que operam nesses dados dentro de uma unidade (classe) e restringir o acesso direto aos dados de fora da unidade.
O que são métodos estáticos em JavaScript?,"São métodos que pertencem à classe em si, e não às instâncias da classe. Eles são chamados diretamente na classe, sem precisar criar um objeto."
Como você define um método estático em JavaScript?,Usando a palavra-chave `static` antes da definição do método. Exemplo: `static metodoEstatico() { ... }`
O que é o método `Object.freeze()` em JavaScript?,"Congela um objeto. Um objeto congelado não pode mais ser alterado; congelar um objeto impede que novas propriedades sejam adicionadas a ele, impede que as propriedades existentes sejam removidas e impede que os valores das propriedades existentes sejam alterados."
O que é o método `Object.seal()` em JavaScript?,"Veda um objeto, impedindo que novas propriedades sejam adicionadas a ele e marcando todas as propriedades existentes como não configuráveis. Os valores das propriedades existentes ainda podem ser alterados, desde que sejam graváveis."
O que é o método `Object.is()` em JavaScript?,"Determina se dois valores são o mesmo valor. Ele se comporta de forma semelhante ao operador de igualdade estrita (`===`), mas trata `NaN` e `-0` de forma diferente."
O que são iterables em JavaScript?,São objetos que podem ser iterados usando um loop `for...of`. Eles possuem um método `Symbol.iterator` que retorna um iterador.
Como você cria um iterable personalizado em JavaScript?,Implementando o método `Symbol.iterator` no objeto.
O que é o método `hasOwnProperty()` em JavaScript?,Retorna um booleano indicando se o objeto tem a propriedade especificada como uma propriedade direta (não herdada).
O que é o conceito de immutabilidade em JavaScript?,"Significa que, uma vez criado, um objeto não pode ser alterado. Em vez de modificar o objeto original, você cria uma nova cópia com as alterações."
Quais são os benefícios de usar objetos imutáveis em JavaScript?,"Melhora a previsibilidade do código, facilita a depuração, e otimiza a detecção de mudanças."
Quais são algumas técnicas para alcançar a imutabilidade em JavaScript?,"Usar `const` para declarar variáveis, evitar métodos que modificam arrays e objetos diretamente (como `push`, `pop`, `splice`), usar métodos que retornam novas cópias (como `map`, `filter`, `slice`, spread operator)."
O que é um proxy em JavaScript?,"Permite interceptar e personalizar operações fundamentais em objetos (como leitura, escrita, enumeração, etc.)."
Como você cria um proxy em JavaScript?,"Usando o construtor `new Proxy(target, handler)`."
O que é o `target` em um proxy JavaScript?,É o objeto que o proxy está virtualizando.
O que é o `handler` em um proxy JavaScript?,É um objeto que contém métodos (chamados traps) que interceptam e personalizam as operações no `target`.
Qual é a principal diferença entre Maps e WeakMaps em JavaScript?,"As chaves em um Map podem ser de qualquer tipo de dado, enquanto as chaves em um WeakMap devem ser objetos. Além disso, as chaves em WeakMaps são fracamente referenciadas, o que significa que podem ser coletadas pelo coletor de lixo se não houver mais referências a elas."
Qual é a principal diferença entre Sets e WeakSets em JavaScript?,"Os valores em um Set podem ser de qualquer tipo de dado, enquanto os valores em um WeakSet devem ser objetos. Além disso, os objetos em WeakSets são fracamente referenciados."
O que é o método `trim()` em JavaScript?,Remove espaços em branco do início e do fim de uma string.
O que é o método `trimStart()` ou `trimLeft()` em JavaScript?,Remove espaços em branco do início de uma string.
O que é o método `trimEnd()` ou `trimRight()` em JavaScript?,Remove espaços em branco do final de uma string.
O que é o método `includes()` em JavaScript?,"Determina se uma string contém outra string especificada. Retorna `true` se a string contém a string especificada, caso contrário, retorna `false`."
O que é o método `startsWith()` em JavaScript?,"Determina se uma string começa com os caracteres de uma string especificada. Retorna `true` se a string começa com os caracteres especificados, caso contrário, retorna `false`."
O que é o método `endsWith()` em JavaScript?,"Determina se uma string termina com os caracteres de uma string especificada. Retorna `true` se a string termina com os caracteres especificados, caso contrário, retorna `false`."
O que é o método `replace()` em JavaScript?,Retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por um substituto. O padrão pode ser uma string ou um objeto RegExp.
O que é o método `replaceAll()` em JavaScript?,Retorna uma nova string com todas as ocorrências de um padrão substituídas por um substituto.
O que é o método `split()` em JavaScript?,"Divide uma string em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array."
O que é o método `substring()` em JavaScript?,"Retorna uma parte da string entre os índices inicial e final, ou até o final da string."
O que é o método `slice()` em JavaScript?,Extrai uma seção de uma string e retorna como uma nova string. Não modifica a string original. Também funciona com arrays.
O que é o método `substr()` em JavaScript?,"Retorna os caracteres em uma string a partir da localização especificada através de um determinado número de caracteres. (Considerado legado, prefira `substring` ou `slice`)"
O que é a diferença entre `substring` e `slice` em JavaScript?,Ambos extraem partes de uma string.  `substring` troca os argumentos se `start` > `end`. `slice` trata um índice negativo a partir do final da string. `substr` (legado) usa o segundo argumento como comprimento.
Como você lida com erros em JavaScript?,Usando blocos `try...catch`.
O que é uma exceção em JavaScript?,É um evento que ocorre durante a execução de um programa que interrompe o fluxo normal de instruções.
Como você lança uma exceção em JavaScript?,"Usando a palavra-chave `throw`. Exemplo: `throw new Error(""Mensagem de erro"");`"
O que é o bloco `finally` em um bloco `try...catch...finally`?,"O bloco `finally` é executado sempre, independentemente de uma exceção ter sido lançada ou não. É usado para realizar tarefas de limpeza."
O que é uma função auto-invocável (IIFE - Immediately Invoked Function Expression) em JavaScript?,É uma função que é executada assim que é definida.
Como você cria uma função auto-invocável em JavaScript?,"Envolvendo a função em parênteses e adicionando parênteses no final para invocá-la. Exemplo: `(function() { console.log(""Função auto-invocável""); })();`"
Qual é o benefício de usar uma função auto-invocável em JavaScript?,"Cria um escopo isolado, evitando a poluição do escopo global."
O que são side effects em JavaScript?,"São mudanças de estado que ocorrem fora do escopo da função que as causou. Incluem modificação de variáveis globais, modificação de argumentos passados para a função, e operações de I/O."
"O que é ""shadowing"" de variáveis em JavaScript?","Ocorre quando uma variável declarada dentro de um escopo (ex: uma função) tem o mesmo nome de uma variável declarada em um escopo externo. A variável interna ""sombra"" a variável externa dentro do escopo interno."
O que são Higher-Order Functions em JavaScript?,São funções que recebem outras funções como argumentos ou retornam outras funções como resultados.
O que é a palavra-chave `instanceof` em JavaScript?,Verifica se um objeto é uma instância de uma determinada classe (ou de um de seus descendentes).
"O que é o ""prototype"" em JavaScript?",É um objeto associado a cada função e objeto em JavaScript.  Ele permite herança e compartilhamento de propriedades e métodos.
Como você adiciona uma nova propriedade ao protótipo de um objeto em JavaScript?,Através da propriedade `.prototype` da função construtora ou da classe.
O que é a cadeia de protótipos em JavaScript?,"É o mecanismo pelo qual os objetos JavaScript herdam propriedades e métodos de seus protótipos. Se uma propriedade não é encontrada diretamente em um objeto, o JavaScript procura no protótipo desse objeto, e assim por diante, até chegar ao `Object.prototype`."
O que é o método `Object.create()` em JavaScript?,"Cria um novo objeto, usando um objeto existente como o protótipo do novo objeto."
Qual a diferença entre usar `Object.create(null)` e `{}` para criar um objeto em JavaScript?,"`Object.create(null)` cria um objeto sem protótipo, enquanto `{}` cria um objeto com `Object.prototype` como protótipo."
O que é um buffer em JavaScript?,"Um buffer é uma área de memória reservada para armazenar dados temporariamente. É comumente usado para lidar com dados binários, como arquivos ou dados de rede.  Em JavaScript, o `ArrayBuffer` representa um buffer genérico e `TypedArrays` (como `Uint8Array`) fornecem formas de acessar e manipular os dados no buffer."
O que são TypedArrays em JavaScript?,"São objetos semelhantes a arrays que fornecem uma maneira de acessar dados binários brutos em um buffer. Eles permitem especificar o tipo de dado que será armazenado no buffer, como inteiros de 8 bits, inteiros de 16 bits, etc."
Como você verifica se um objeto é um `TypedArray` em JavaScript?,Usando `ArrayBuffer.isView(obj)`
O que é o operador `delete` em JavaScript?,Remove uma propriedade de um objeto.
"O que acontece se você usar `delete` em uma variável declarada com `var`, `let` ou `const`?","Ele não terá efeito em variáveis declaradas com `var`, `let` ou `const`. Ele funciona apenas em propriedades de objetos."
O que é o padrão de projeto Módulo (Module Pattern) em JavaScript (sem usar ES Modules)?,"É uma forma de encapsular código JavaScript, criando um"
Qual a diferença entre `const` e `let` ao declarar variáveis em JavaScript?,"`const` declara uma variável cujo valor não pode ser reatribuído após a inicialização, enquanto `let` permite a reatribuição do valor da variável."
O que é o hoisting em JavaScript e como ele afeta a execução do código?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seus respectivos escopos antes da execução do código. Variáveis declaradas com `var` são hoisted com valor `undefined`, enquanto `let` e `const` não são inicializadas e causam um erro se acessadas antes da declaração."
Como funciona o operador `typeof` em JavaScript?,"`typeof` retorna uma string indicando o tipo de dado de um operando. Exemplos: `typeof 10` retorna `""number""`, `typeof ""hello""` retorna `""string""`, `typeof null` retorna `""object""`."
O que são closures em JavaScript e qual sua utilidade?,"Closures são funções que lembram e acessam variáveis de seu escopo léxico, mesmo quando a função é executada fora desse escopo. São úteis para criar funções que mantêm estado e para implementar padrões como o módulo."
Como se usa o método `Array.isArray()` em JavaScript?,`Array.isArray()` é usado para verificar se um determinado valor é um array. Retorna `true` se o valor for um array e `false` caso contrário.
O que é um objeto em JavaScript?,"Um objeto em JavaScript é uma coleção de pares chave-valor, onde as chaves são strings (ou Symbols) e os valores podem ser de qualquer tipo de dado JavaScript, incluindo outros objetos."
Como se cria um objeto em JavaScript usando a notação literal?,"Usando chaves `{}` e definindo pares chave-valor separados por vírgulas, por exemplo: `let person = { name: ""Alice"", age: 30 };`"
O que são funções anônimas em JavaScript?,Funções anônimas são funções que não possuem um nome definido. Elas geralmente são atribuídas a variáveis ou passadas como argumentos para outras funções.
Como se define um valor padrão para um parâmetro de função em JavaScript?,"Usando o operador `||` ou ES6+ syntax: `function greet(name = ""Guest"") { ... }`. Se o argumento `name` não for fornecido, ele terá o valor padrão ""Guest""."
O que é o método `String.prototype.substring()` em JavaScript e como ele funciona?,`substring()` extrai uma parte de uma string entre dois índices especificados. O primeiro índice é incluso e o segundo é excluído.
Qual a função do operador ternário (`? :`) em JavaScript?,"O operador ternário é uma forma abreviada de escrever uma instrução `if...else`. Ele tem a seguinte sintaxe: `condição ? expressão1 : expressão2`. Se a condição for verdadeira, `expressão1` é avaliada; caso contrário, `expressão2` é avaliada."
O que é o método `Array.prototype.forEach()` em JavaScript?,`forEach()` executa uma função fornecida uma vez para cada elemento em um array.
Como se usa o método `Array.prototype.map()` em JavaScript?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `Array.prototype.filter()` em JavaScript?,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
Como funciona o método `Array.prototype.reduce()` em JavaScript?,`reduce()` aplica uma função a um acumulador e a cada valor do array (da esquerda para a direita) para reduzi-lo a um único valor.
O que são template literals em JavaScript (ES6+)?,"Template literals são strings que permitem expressões embutidas, delimitadas por backticks (` `). Permitem interpolação de variáveis e strings multilinhas."
Como se usa a desestruturação de objetos em JavaScript (ES6+)?,"A desestruturação permite extrair valores de propriedades de objetos e atribuí-los a variáveis de forma concisa. Exemplo: `const { name, age } = person;`"
O que é o operador spread (`...`) em JavaScript (ES6+) e quais são seus usos?,"O operador spread permite expandir um iterable (como um array ou uma string) em locais onde múltiplos argumentos ou elementos são esperados. É usado para copiar arrays, combinar arrays, passar argumentos para funções, etc."
Como se define uma função arrow function em JavaScript (ES6+)?,"Uma arrow function é uma forma mais concisa de escrever uma função anônima. Exemplo: `const sum = (a, b) => a + b;`"
Como se usa o método `Object.values()` em JavaScript?,`Object.values()` retorna um array com os valores de um objeto.
Como se usa o método `setTimeout()` em JavaScript?,`setTimeout()` agenda a execução de uma função após um determinado atraso em milissegundos.
Como se interrompe a execução de um `setInterval()`?,Usando a função `clearInterval()` e passando o ID retornado pelo `setInterval()`.
O que é o objeto `Math` em JavaScript e quais são alguns de seus métodos?,"`Math` é um objeto embutido em JavaScript que fornece funções matemáticas e constantes. Alguns métodos comuns incluem `Math.random()`, `Math.floor()`, `Math.ceil()`, `Math.round()`, `Math.pow()`, `Math.sqrt()`."
Como se gera um número aleatório entre 0 e 1 em JavaScript?,Usando `Math.random()`.
Como se arredonda um número para o inteiro mais próximo em JavaScript?,Usando `Math.round()`.
Como se cria um objeto `Date` em JavaScript?,"Usando o construtor `new Date()`. Ele pode ser criado sem argumentos (data e hora atuais), com uma string representando uma data, ou com números representando ano, mês, dia, hora, minuto, segundo e milissegundo."
Como se obtém o ano a partir de um objeto `Date` em JavaScript?,Usando o método `getFullYear()`.
Como se obtém o mês a partir de um objeto `Date` em JavaScript?,"Usando o método `getMonth()`. (Note: Janeiro é 0, Fevereiro é 1, etc.)"
Como se obtém o dia do mês a partir de um objeto `Date` em JavaScript?,Usando o método `getDate()`.
O que são erros em JavaScript e como eles são tratados?,Erros em JavaScript indicam problemas que ocorreram durante a execução do código. Eles podem ser tratados usando blocos `try...catch`.
Como se lança um erro em JavaScript?,Usando a palavra-chave `throw`.
O que é um bloco `try...catch` em JavaScript?,"`try` envolve o código que pode gerar um erro, e `catch` especifica um bloco de código para lidar com o erro se ele ocorrer."
O que é o bloco `finally` em um bloco `try...catch` em JavaScript?,"O bloco `finally` é executado sempre, independentemente de um erro ter ocorrido ou não no bloco `try`."
O que são expressões regulares (RegEx) em JavaScript?,Expressões regulares são padrões usados para corresponder combinações de caracteres em strings.
Como se cria uma expressão regular em JavaScript?,Usando a notação literal (entre barras `/`) ou o construtor `new RegExp()`.
O que é o método `String.prototype.match()` em JavaScript?,`match()` procura por uma correspondência entre uma expressão regular e uma string e retorna um array com as correspondências encontradas ou `null` se nenhuma correspondência for encontrada.
O que é JSON em JavaScript?,JSON (JavaScript Object Notation) é um formato de dados leve para troca de dados. É baseado em um subconjunto da linguagem JavaScript.
Como se converte um objeto JavaScript em uma string JSON?,Usando o método `JSON.stringify()`.
Como se converte uma string JSON em um objeto JavaScript?,Usando o método `JSON.parse()`.
O que é o strict mode em JavaScript e como ele é ativado?,"Strict mode impõe regras mais rigorosas para a escrita de código JavaScript. É ativado adicionando a string `""use strict"";` no início de um script ou função."
Quais são algumas das restrições impostas pelo strict mode em JavaScript?,"Impede o uso de variáveis não declaradas, impede a atribuição a propriedades somente leitura, proíbe a duplicação de nomes de parâmetros em funções, entre outras."
O que é o DOM (Document Object Model) em JavaScript?,O DOM é uma representação em árvore da estrutura de um documento HTML ou XML. Ele permite que o JavaScript acesse e manipule os elementos e atributos do documento.
Como se seleciona um elemento HTML no DOM usando JavaScript?,"Usando métodos como `document.getElementById()`, `document.querySelector()`, `document.querySelectorAll()`."
O que é o método `document.getElementById()` em JavaScript?,`document.getElementById()` retorna o elemento HTML com o ID especificado.
O que é o método `document.querySelector()` em JavaScript?,`document.querySelector()` retorna o primeiro elemento dentro do documento que corresponde ao seletor CSS especificado.
O que é o método `document.querySelectorAll()` em JavaScript?,`document.querySelectorAll()` retorna uma lista de todos os elementos dentro do documento que correspondem ao seletor CSS especificado.
Como se altera o texto de um elemento HTML no DOM usando JavaScript?,Acessando a propriedade `textContent` ou `innerText` do elemento.
Como se altera o atributo de um elemento HTML no DOM usando JavaScript?,Usando o método `setAttribute()` ou acessando diretamente a propriedade do atributo.
Como se adiciona um novo elemento HTML ao DOM usando JavaScript?,"Criando o elemento com `document.createElement()`, definindo seus atributos e texto, e inserindo-o na árvore DOM com métodos como `appendChild()` ou `insertBefore()`."
Como se remove um elemento HTML do DOM usando JavaScript?,Usando o método `removeChild()` no elemento pai ou o método `remove()` no próprio elemento.
O que são eventos em JavaScript e como eles funcionam?,"Eventos são ações ou ocorrências que acontecem no navegador, como cliques, movimentos do mouse, carregamento de página, etc. O JavaScript pode responder a esses eventos executando funções (event handlers)."
Como se adiciona um event listener a um elemento HTML usando JavaScript?,Usando o método `addEventListener()`.
Quais são alguns exemplos de eventos comuns em JavaScript?,"`click`, `mouseover`, `mouseout`, `keydown`, `keyup`, `load`, `submit`, `change`."
O que é o objeto `event` passado para um event handler em JavaScript?,"O objeto `event` contém informações sobre o evento que ocorreu, como o elemento que o disparou, as coordenadas do mouse, etc."
O que é o método `event.preventDefault()` em JavaScript?,"`event.preventDefault()` impede o comportamento padrão do evento, como a navegação em um link ou o envio de um formulário."
O que é o método `event.stopPropagation()` em JavaScript?,`event.stopPropagation()` impede que o evento se propague para os elementos pais na árvore DOM (event bubbling).
Quais são os três estados possíveis de uma Promise em JavaScript?,"`pending` (pendente), `fulfilled` (realizada) e `rejected` (rejeitada)."
Como se cria uma Promise em JavaScript?,"Usando o construtor `new Promise()`, que recebe uma função com dois parâmetros: `resolve` e `reject`."
Como se lida com o resultado de uma Promise em JavaScript?,Usando os métodos `then()` (para lidar com o sucesso) e `catch()` (para lidar com a falha).
O que é o método `Promise.resolve()` em JavaScript?,`Promise.resolve()` cria uma Promise que é resolvida com o valor especificado.
O que é o método `Promise.reject()` em JavaScript?,`Promise.reject()` cria uma Promise que é rejeitada com o motivo especificado.
O que é o método `Promise.all()` em JavaScript?,"`Promise.all()` recebe um array de Promises e retorna uma nova Promise que é resolvida quando todas as Promises do array são resolvidas, ou rejeitada se alguma delas for rejeitada."
O que é o método `Promise.race()` em JavaScript?,`Promise.race()` recebe um array de Promises e retorna uma nova Promise que é resolvida ou rejeitada assim que a primeira Promise do array for resolvida ou rejeitada.
O que são `async` e `await` em JavaScript?,"`async` e `await` são palavras-chave que tornam a escrita e leitura de código assíncrono mais fácil e intuitiva, permitindo que o código se pareça mais com código síncrono."
Como se define uma função assíncrona em JavaScript?,Usando a palavra-chave `async` antes da palavra-chave `function`.
Como se usa a palavra-chave `await` em JavaScript?,`await` só pode ser usada dentro de uma função `async`. Ela pausa a execução da função até que a Promise seja resolvida ou rejeitada.
"Qual a diferença entre `var`, `let` e `const` em relação ao escopo em JavaScript?","`var` tem escopo de função ou global, enquanto `let` e `const` têm escopo de bloco."
O que é o operador `instanceof` em JavaScript?,O operador `instanceof` verifica se um objeto é uma instância de uma determinada classe ou construtor.
O que é o protótipo em JavaScript?,"Cada objeto em JavaScript tem um protótipo, que é outro objeto do qual herda propriedades e métodos."
Como se acessa o protótipo de um objeto em JavaScript?,Usando a propriedade `__proto__` (não recomendada para uso em produção) ou o método `Object.getPrototypeOf()`.
Como se define um método para todos os objetos de um determinado tipo em JavaScript usando o protótipo?,"Adicionando o método ao protótipo do construtor do tipo de objeto. Por exemplo, `Array.prototype.myMethod = function() { ... };`"
O que é herança prototipal em JavaScript?,Herança prototipal é o mecanismo pelo qual objetos JavaScript herdam propriedades e métodos de seus protótipos.
Como se verifica o número de argumentos passados para uma função em JavaScript?,Acessando a propriedade `arguments.length`.
O que é o método `Function.prototype.call()` em JavaScript?,`call()` invoca uma função com um determinado valor `this` e argumentos fornecidos individualmente.
O que é o método `Function.prototype.apply()` em JavaScript?,`apply()` invoca uma função com um determinado valor `this` e argumentos fornecidos como um array.
O que é o método `Function.prototype.bind()` em JavaScript?,"`bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido."
O que são funções de ordem superior em JavaScript?,Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam outras funções como resultados.
O que é o padrão módulo em JavaScript?,"O padrão módulo é um padrão de design usado para encapsular código JavaScript, criando um escopo privado e expondo apenas uma interface pública."
Como se define um generator em JavaScript?,Usando a palavra-chave `function*`.
O que é a palavra-chave `yield` em JavaScript?,`yield` é usada dentro de um generator para pausar a execução da função e retornar um valor.
Como se itera sobre os valores produzidos por um generator em JavaScript?,Usando um loop `for...of` ou chamando o método `next()` do objeto generator.
O que é o Symbol.iterator em JavaScript?,`Symbol.iterator` é um símbolo bem conhecido que define o método iterador padrão para um objeto.
O que é memoization em JavaScript?,Memoization é uma técnica de otimização que armazena em cache os resultados de chamadas de função caras e retorna o resultado armazenado em cache quando as mesmas entradas ocorrem novamente.
O que é recursão em JavaScript?,Recursão é uma técnica de programação onde uma função chama a si mesma.
Quais são os riscos de usar recursão em JavaScript?,"Se a recursão não tiver uma condição de parada adequada, pode levar a um estouro da pilha de chamadas (stack overflow)."
O que é tail call optimization (TCO) em JavaScript?,TCO é uma otimização que permite que uma chamada de função recursiva no final de outra função seja executada sem aumentar a pilha de chamadas.  (Suporte inconsistente em diferentes engines JavaScript)
O que são generators assíncronos em JavaScript?,"Generators assíncronos são uma combinação de generators e funções assíncronas, permitindo gerar valores de forma assíncrona."
Como se define um generator assíncrono em JavaScript?,Usando a sintaxe `async function*`.
O que é o operador de coalescência nula (nullish coalescing operator - `??`) em JavaScript?,"O operador de coalescência nula retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo."
O que é o operador de encadeamento opcional (optional chaining operator - `?.`) em JavaScript?,O operador de encadeamento opcional permite acessar propriedades aninhadas de um objeto sem ter que verificar se cada nível da propriedade existe. Retorna `undefined` se uma propriedade no caminho for `null` ou `undefined`.
O que são BigInts em JavaScript?,BigInts são um tipo de dado que permite representar inteiros de tamanho arbitrário.
Como se cria um BigInt em JavaScript?,Adicionando o sufixo `n` a um literal numérico (ex: `123n`) ou usando a função `BigInt()`.
O que são Symbols em JavaScript?,Symbols são um tipo de dado primitivo que representa um identificador único e imutável.
Como se cria um Symbol em JavaScript?,Usando a função `Symbol()`.
O que são computed property names em JavaScript?,Computed property names permitem usar expressões para definir as chaves de propriedades de objetos.
O que são reflect methods em JavaScript?,Reflect methods são um conjunto de métodos que espelham as operações internas da linguagem JavaScript e fornecem um acesso mais controlado e flexível a essas operações.
O que são tags HTML suportadas pelo template literals?,Tags HTML não são inherentemente suportadas por template literals. Template literals são usados para interpolação de strings. Integração com HTML requer outras abordagens.
Como funciona a delegação de eventos em JavaScript?,Delegação de eventos é uma técnica que usa event bubbling para delegar o tratamento de eventos para um elemento pai em vez de anexar listeners a cada elemento filho individualmente.
"O que é a ""Same-Origin Policy"" em Javascript?","A Same-Origin Policy é uma restrição de segurança do navegador que impede que um script de uma origem acesse recursos de uma origem diferente, a menos que a origem de destino permita explicitamente."
Qual a diferença entre usar `String()` e `new String()` em Javascript?,`String()` converte o argumento em uma string primitiva. `new String()` cria um objeto `String`.
O que são IIFEs (Immediately Invoked Function Expressions) em Javascript?,IIFEs são funções que são executadas assim que são definidas. Elas criam um escopo privado para evitar conflitos de nomes e poluição do escopo global.
Como o garbage collector do Javascript funciona?,"O garbage collector identifica e remove automaticamente os objetos que não estão mais sendo usados pelo programa, liberando memória. Ele geralmente usa algoritmos como mark-and-sweep."
"O que é o ""event loop"" em Javascript e como ele funciona?","O event loop é um mecanismo que permite que o Javascript, que é single-threaded, lide com operações assíncronas. Ele continuamente verifica a fila de eventos e executa as callbacks quando a call stack está vazia."
O que são as vantagens de usar tipagem dinâmica no Javascript?,"Tipagem dinâmica permite maior flexibilidade e prototipagem rápida, já que os tipos não precisam ser declarados explicitamente."
O que são desvantagens de usar tipagem dinâmica no Javascript?,"Tipagem dinâmica pode levar a erros em tempo de execução, que seriam detectados em tempo de compilação em linguagens estaticamente tipadas."
Como você pode evitar problemas de escopo ao usar closures?,Use `let` ou `const` em vez de `var` dentro de loops para evitar capturar o valor final da variável do loop.
O que é a vantagem de usar funções puras em Javascript?,"Funções puras produzem os mesmos resultados para as mesmas entradas e não têm efeitos colaterais, tornando o código mais previsível e fácil de testar."
Como você pode melhorar a performance do seu código Javascript?,"Otimize loops, minimize manipulação do DOM, use memoization, evite vazamentos de memória e carregue scripts de forma assíncrona."
"O que significa dizer que o Javascript é uma linguagem ""single-threaded""?","Significa que o Javascript executa apenas uma operação por vez, em um único thread."
Qual a utilidade do operador `void` em Javascript?,O operador `void` avalia uma expressão e retorna `undefined`. É frequentemente usado para evitar que um link execute um comportamento padrão.
O que são side effects em Javascript?,Side effects são mudanças de estado ou interações com o mundo exterior que uma função faz além de simplesmente retornar um valor.
Como você pode prevenir a modificação acidental de objetos em Javascript?,Use `Object.freeze()` para tornar um objeto imutável.
O que são WeakReferences em Javascript?,WeakReferences permitem criar referências a objetos sem impedir que o garbage collector os colete. Útil para caches e observadores.
Como funciona a precedência de operadores em Javascript?,Precedência de operadores define a ordem em que os operadores são avaliados em uma expressão. Operadores com maior precedência são avaliados primeiro.
"O que é a associação ""this"" em Javascript?","""this"" se refere ao objeto que é o contexto de execução de uma função. Seu valor depende de como a função é chamada."
"Quais são as diferenças entre ""call"" e ""apply"" para invocar funções?","Ambos invocam uma função com um valor ""this"" especificado. ""call"" recebe os argumentos individualmente, enquanto ""apply"" recebe os argumentos como um array."
"O que é um ""polyfilled"" em Javascript?",Um polyfill é um pedaço de código (geralmente Javascript) que fornece a funcionalidade que você espera que o navegador forneça nativamente.
O que é um code smell em Javascript e dê um exemplo.,Um code smell é um sintoma na base de código que possivelmente indica um problema mais profundo. Um exemplo é uma função muito longa (God Function).
"O que são variaveis ""truthy"" e ""falsy"" em Javascript?","Valores ""truthy"" são valores que são avaliados como verdadeiros em um contexto booleano. Valores ""falsy"" são valores que são avaliados como falsos em um contexto booleano."
"Quais valores são considerados ""falsy"" em Javascript?","`false`, `0`, `-0`, `0n`, `""""`, `null`, `undefined`, e `NaN`."
O que são funções variádicas em Javascript?,Funções variádicas são funções que aceitam um número variável de argumentos.
Como você pode documentar seu código Javascript de forma eficaz?,"Use JSDoc para adicionar comentários formatados que descrevem funções, parâmetros, tipos de retorno e outras informações relevantes."
O que é o operador `delete` em Javascript e como usá-lo?,O operador `delete` remove uma propriedade de um objeto. Ele retorna `true` se a exclusão foi bem-sucedida e `false` se a propriedade não puder ser excluída.
Qual a diferença entre `localStorage` e `sessionStorage` no Javascript?,`localStorage` armazena dados permanentemente no navegador (a menos que explicitamente removidos). `sessionStorage` armazena dados apenas para a duração da sessão do navegador.
Como você pode detectar a presença de recursos do navegador usando Javascript?,Use detecção de recursos (feature detection) para verificar se um objeto ou método existe antes de usá-lo.
O que é a diferença entre `Object.assign()` e o operador spread (`...`) para copiar objetos?,"Ambos podem ser usados para copiar objetos, mas `Object.assign()` pode ter problemas com propriedades que são acessores. O operador spread geralmente oferece uma cópia mais profunda em certos casos."
"O que são ""event handlers inline"" em HTML e porque eles são geralmente desencorajados?","Event handlers inline são atributos HTML (ex: `<button onclick=""myFunction()"">`) que especificam o código Javascript a ser executado quando um evento ocorre. Eles são desencorajados porque misturam HTML e Javascript, tornando o código mais difícil de manter."
O que são Web Workers e para que servem?,"Web Workers permitem que você execute Javascript em um thread de background, sem afetar o desempenho da página principal. Útil para tarefas computacionalmente intensivas."
O que são Service Workers e qual a sua utilidade?,"Service Workers são scripts que rodam em background, separados da página web, e oferecem funcionalidades como push notifications, caching offline e sincronização de dados."
O que é uma race condition em JavaScript e como evitá-la?,Uma race condition ocorre quando a saída de um programa depende da ordem de execução de operações não determinísticas. Evite compartilhamento de estado e use mecanismos de sincronização como mutexes ou promises.
Como depurar problemas de memória em JavaScript?,"Use as ferramentas de desenvolvedor do navegador (Chrome DevTools, etc.) para monitorar o uso de memória, identificar vazamentos e analisar o heap."
O que são Content Security Policies (CSP) e como elas melhoram a segurança?,"CSPs são mecanismos de segurança que permitem que os desenvolvedores controlem os recursos que um navegador pode carregar para uma página, reduzindo o risco de ataques como XSS."
"O que é ""tree shaking"" e como funciona no contexto do Javascript?","Tree shaking é um processo de otimização que remove o código não utilizado de um pacote Javascript, reduzindo o tamanho do arquivo final."
Explique a diferença entre declaração e expressão de função em Javascript.,Uma declaração de função é hoisted e pode ser chamada antes de sua definição no código. Uma expressão de função não é hoisted e deve ser definida antes de ser chamada.
O que são Mixins em Javascript?,Mixins são classes ou objetos que contêm funcionalidades que podem ser reutilizadas em outras classes ou objetos sem herança. Permitem compor funcionalidades.
Descreva os diferentes métodos para herança em Javascript.,"Herança Prototipal, Herança Clássica (simulada com protótipos), Herança com Classes (ES6), entre outros."
O que é o operador `yield*` em Javascript?,`yield*` permite delegar a geração de valores para outro iterável ou generator dentro de um generator.
Como você pode usar a API Fetch para fazer requisições HTTP em Javascript?,A API Fetch fornece uma interface para buscar recursos da rede de forma assíncrona. Use `fetch()` para iniciar a requisição e `.then()` para lidar com a resposta.
Quais são as vantagens de usar `querySelector` em vez de `getElementById`?,"`querySelector` é mais flexível, permitindo selecionar elementos com base em seletores CSS complexos. `getElementById` é geralmente mais rápido, mas limitado a seletores por ID."
Como você pode manipular cookies usando Javascript?,"Você pode acessar e manipular cookies usando a propriedade `document.cookie`, mas existem APIs mais modernas para lidar com cookies de forma mais segura e fácil."
O que é o padrão Observer em Javascript e quando é útil?,"O padrão Observer define uma dependência um-para-muitos entre objetos, onde um objeto (o sujeito) notifica seus dependentes (os observadores) sobre qualquer mudança de estado. É útil para sistemas de eventos e notificações."
O que é a diferença entre JSONP e CORS?,"JSONP é uma técnica antiga para contornar a Same-Origin Policy, mas tem limitações de segurança e só suporta requisições GET. CORS é um mecanismo mais moderno e seguro que permite que o servidor controle quais origens podem acessar seus recursos."
"Como usar ""MutationObserver"" para monitorar mudanças no DOM em JavaScript?","MutationObserver é uma API que permite observar mudanças que ocorrem na árvore DOM. Você pode configurar o observer para monitorar atributos, texto, nós"
O que é hoisting em JavaScript e como afeta as variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover as declarações de variáveis e funções para o topo do seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted e inicializadas com `undefined`, enquanto funções declaradas com `function` são hoisted completamente. Variáveis com `let` e `const` são hoisted, mas não inicializadas (TDZ - Temporal Dead Zone)."
"Explique o que é o ""strict mode"" em JavaScript e como ele é ativado.","O ""strict mode"" impõe um conjunto de regras mais rigorosas ao JavaScript, eliminando alguns comportamentos silenciosos e lançando erros para práticas consideradas inseguras. É ativado adicionando `""use strict"";` no início de um script ou função."
Como criar um objeto em JavaScript usando a notação literal?,"Um objeto literal é criado usando chaves `{}` e definindo pares chave-valor separados por vírgulas, onde as chaves são strings (ou símbolos) e os valores podem ser de qualquer tipo de dado. Exemplo: `let pessoa = { nome: ""João"", idade: 30 };`"
O que são funções de primeira classe em JavaScript?,"Em JavaScript, funções são consideradas de primeira classe, o que significa que podem ser atribuídas a variáveis, passadas como argumentos para outras funções e retornadas como valores de outras funções."
Explique o conceito de protótipo em JavaScript.,"Cada objeto em JavaScript tem um protótipo, que é outro objeto do qual herda propriedades e métodos. A cadeia de protótipos continua até atingir `null`."
Como herdar propriedades e métodos de um objeto para outro usando protótipos?,"Define-se o protótipo do novo objeto como uma instância do objeto que se deseja herdar. Por exemplo, `Filho.prototype = Object.create(Pai.prototype);`. Também é importante redefinir o construtor: `Filho.prototype.constructor = Filho;`."
O que é o `this` em JavaScript e como seu valor é determinado?,"`this` é uma palavra-chave que se refere ao contexto de execução atual. Seu valor é determinado pela forma como a função é chamada (global, método de objeto, com `call` ou `apply`, ou usando `new`)."
"Qual a diferença entre `call`, `apply` e `bind` em JavaScript?","`call` e `apply` invocam uma função com um valor específico para `this` e argumentos. `call` recebe argumentos individualmente, enquanto `apply` recebe um array de argumentos. `bind` cria uma nova função com o valor de `this` pré-definido."
Explique o que são template literals em JavaScript.,Template literals são strings delimitadas por crases (``) que permitem a interpolação de variáveis e expressões dentro da string usando `${}`.
Como criar uma string multi-linha em JavaScript?,"Usando template literals, é possível criar strings multi-linha de forma direta, incluindo quebras de linha diretamente dentro da string."
O que são arrow functions e como elas diferem das funções tradicionais?,Arrow functions são uma sintaxe mais concisa para definir funções em JavaScript. Elas não possuem seu próprio `this` (usam o `this` do contexto léxico) e não podem ser usadas como construtoras.
Como desestruturar (destructuring) um objeto ou array em JavaScript?,"Destructuring é uma sintaxe que permite extrair valores de objetos ou arrays e atribuí-los a variáveis de forma concisa. Exemplo: `let { nome, idade } = pessoa;` ou `let [primeiro, segundo] = array;`"
Como usar a palavra-chave `yield` em um generator?,`yield` pausa a execução do generator e retorna um valor. A execução pode ser retomada posteriormente com o método `next()`.
Qual a diferença entre `for...in` e `for...of` em JavaScript?,"`for...in` itera sobre as propriedades enumeráveis de um objeto (incluindo as herdadas), enquanto `for...of` itera sobre os valores de um objeto iterável (como arrays, strings, Maps, Sets)."
O que são Maps e Sets em JavaScript?,Maps são coleções de pares chave-valor onde as chaves podem ser de qualquer tipo de dado. Sets são coleções de valores únicos.
Como adicionar e remover elementos de um Map em JavaScript?,"Usa-se o método `set(chave, valor)` para adicionar elementos e o método `delete(chave)` para remover elementos."
Como adicionar e remover elementos de um Set em JavaScript?,Usa-se o método `add(valor)` para adicionar elementos e o método `delete(valor)` para remover elementos.
"O que são Promises em JavaScript e como elas resolvem o problema de ""callback hell""?","Promises representam o resultado eventual de uma operação assíncrona. Elas resolvem o ""callback hell"" fornecendo uma forma mais estruturada e legível de lidar com operações assíncronas usando `.then()` e `.catch()`."
Como criar uma Promise em JavaScript?,"Uma Promise é criada usando o construtor `new Promise((resolve, reject) => { ... })`. O argumento é uma função que recebe as funções `resolve` (para indicar sucesso) e `reject` (para indicar falha)."
Como usar os métodos `.then()` e `.catch()` em uma Promise?,`.then()` é usado para lidar com o resultado da Promise quando ela é resolvida (sucesso). `.catch()` é usado para lidar com o erro da Promise quando ela é rejeitada (falha).
Como usar `try...catch` dentro de uma função `async`?,"`try...catch` pode ser usado para lidar com erros que ocorrem dentro de uma função `async`, assim como em funções síncronas."
O que é o operador spread ( ... ) em JavaScript?,O operador spread permite expandir um iterável (como um array ou string) em locais onde múltiplos argumentos ou elementos são esperados. Também pode ser usado para criar cópias superficiais de arrays e objetos.
Como usar o operador spread para criar uma cópia de um array?,`let novoArray = [...arrayOriginal];`
Como usar o operador spread para criar uma cópia de um objeto?,`let novoObjeto = { ...objetoOriginal };`
O que é o operador rest ( ... ) em JavaScript?,O operador rest permite coletar os argumentos restantes de uma função em um array.
Como usar o operador rest em parâmetros de função?,"`function minhaFuncao(param1, ...rest) { ... }`"
"Qual a diferença entre `var`, `let` e `const` no escopo de variáveis?",`var` tem escopo de função ou global. `let` e `const` têm escopo de bloco. `const` declara uma variável que não pode ser reatribuída após a inicialização.
O que é um bloco de código em JavaScript?,Um bloco de código é um conjunto de declarações delimitado por chaves `{}`.
Como declarar uma função em JavaScript usando a palavra-chave `function`?,`function nomeDaFuncao(parametros) { ... }`
Qual a importância de ter um caso base em uma função recursiva?,"O caso base é a condição que interrompe a recursão, evitando que a função chame a si mesma indefinidamente e cause um estouro de pilha (stack overflow)."
Como testar se uma string corresponde a uma expressão regular?,Usa-se o método `test()` da expressão regular ou o método `match()` da string.
O que são grupos de captura em expressões regulares?,Grupos de captura são partes de uma expressão regular delimitadas por parênteses `()`. Eles permitem extrair partes específicas da string correspondida.
O que são quantificadores em expressões regulares?,"Quantificadores especificam quantas vezes um padrão deve ocorrer para corresponder. Exemplos: `*` (zero ou mais), `+` (um ou mais), `?` (zero ou um), `{n}` (exatamente n), `{n,}` (n ou mais), `{n,m}` (entre n e m)."
O que são classes de caracteres em expressões regulares?,"Classes de caracteres representam um conjunto de caracteres que podem corresponder. Exemplos: `[abc]` (qualquer um de a, b ou c), `[a-z]` (qualquer letra minúscula), `\d` (qualquer dígito), `\w` (qualquer caractere alfanumérico)."
O que são âncoras em expressões regulares?,"Âncoras especificam posições na string onde a correspondência deve ocorrer. Exemplos: `^` (início da string), `$` (fim da string), `\b` (limite de palavra)."
O que é o método `replace()` em strings e como usá-lo com expressões regulares?,`replace()` substitui partes de uma string por outra string ou o resultado de uma função. Pode ser usado com expressões regulares para substituir padrões complexos.
Como adicionar um ouvinte de evento (event listener) a um elemento HTML usando JavaScript?,"Usa-se o método `addEventListener(tipoDoEvento, funcaoCallback)` do elemento."
O que é o objeto `event` passado para uma função de callback de evento?,"O objeto `event` contém informações sobre o evento que ocorreu, como o elemento alvo (target), o tipo de evento, as coordenadas do mouse, etc."
O que é event bubbling?,Event bubbling é o processo em que um evento disparado em um elemento se propaga para seus elementos ancestrais na árvore DOM.
Como impedir o event bubbling?,Usa-se o método `stopPropagation()` do objeto `event`.
O que é event capturing?,"Event capturing é o processo inverso ao event bubbling, onde o evento é tratado primeiro pelo elemento mais ancestral e depois pelos elementos filhos."
Qual a diferença entre `localStorage` e `sessionStorage` em JavaScript?,"`localStorage` armazena dados persistentemente no navegador, mesmo após o fechamento da janela ou aba. `sessionStorage` armazena dados apenas durante a sessão do navegador."
Como armazenar e recuperar dados em `localStorage`?,"Usa-se os métodos `localStorage.setItem(chave, valor)` para armazenar e `localStorage.getItem(chave)` para recuperar. Os valores são armazenados como strings."
Como armazenar e recuperar dados em `sessionStorage`?,"Usa-se os métodos `sessionStorage.setItem(chave, valor)` para armazenar e `sessionStorage.getItem(chave)` para recuperar. Os valores são armazenados como strings."
Como converter um objeto JavaScript para JSON?,Usa-se o método `JSON.stringify(objeto)`.
Como converter uma string JSON para um objeto JavaScript?,Usa-se o método `JSON.parse(stringJSON)`.
Como definir um cookie usando JavaScript?,Atribui-se uma string formatada com `chave=valor` ao atributo `document.cookie`.
Como ler um cookie usando JavaScript?,O valor de `document.cookie` é uma string contendo todos os cookies separados por ponto e vírgula. É necessário analisá-la para encontrar o cookie desejado.
Qual a diferença entre `getElementById()` e `querySelector()`?,`getElementById()` seleciona um único elemento com um ID específico. `querySelector()` seleciona o primeiro elemento que corresponde a um seletor CSS especificado.
Qual a diferença entre `querySelector()` e `querySelectorAll()`?,`querySelector()` retorna o primeiro elemento que corresponde ao seletor. `querySelectorAll()` retorna um NodeList contendo todos os elementos que correspondem ao seletor.
Como alterar o conteúdo de um elemento HTML usando JavaScript?,Através das propriedades `innerHTML` (para HTML) ou `textContent` (para texto).
Como alterar o estilo de um elemento HTML usando JavaScript?,"Através da propriedade `style` do elemento. Exemplo: `elemento.style.color = ""red"";`"
Como adicionar ou remover classes CSS de um elemento HTML usando JavaScript?,"Usando a propriedade `classList` do elemento, que possui métodos como `add()`, `remove()` e `toggle()`."
Como criar um novo elemento HTML usando JavaScript?,Usa-se o método `document.createElement(tagName)`.
Como obter a largura e a altura da janela do navegador usando JavaScript?,Usando as propriedades `window.innerWidth` e `window.innerHeight`.
Como redirecionar o usuário para outra página usando JavaScript?,Atribuindo um novo URL à propriedade `window.location.href`.
Como mostrar um alerta (alert) na tela usando JavaScript?,Usando a função `alert(mensagem)`.
Como mostrar uma caixa de confirmação (confirm) na tela usando JavaScript?,"Usando a função `confirm(mensagem)`, que retorna `true` se o usuário clicar em ""OK"" e `false` se clicar em ""Cancelar""."
Como mostrar uma caixa de prompt (prompt) na tela usando JavaScript?,"Usando a função `prompt(mensagem, valorPadrao)`, que retorna a string digitada pelo usuário ou `null` se o usuário clicar em ""Cancelar""."
Como cancelar um `setTimeout()` ou `setInterval()`?,"Usando as funções `clearTimeout(idDoTimeout)` e `clearInterval(idDoInterval)`, respectivamente."
O que é o método `Date()` em JavaScript?,`Date()` é um objeto que representa datas e horas.
Como obter a data e hora atual usando JavaScript?,Criando uma nova instância do objeto `Date`: `let dataAtual = new Date();`
Como gerar um número aleatório entre 0 e 1 usando JavaScript?,Usando o método `Math.random()`.
Como gerar um número inteiro aleatório dentro de um intervalo específico usando JavaScript?,Usando `Math.floor(Math.random() * (max - min + 1)) + min;`
O que é o método `isNaN()` em JavaScript?,"`isNaN()` verifica se um valor é ""Not-a-Number"". No entanto, ele realiza conversão de tipo antes de verificar, o que pode levar a resultados inesperados. É recomendado usar `Number.isNaN()` que não realiza conversão de tipo."
O que é o método `parseInt()` em JavaScript?,`parseInt()` converte uma string para um número inteiro.
O que é o método `parseFloat()` em JavaScript?,`parseFloat()` converte uma string para um número de ponto flutuante.
O que é o método `typeof` em JavaScript?,`typeof` retorna uma string indicando o tipo de dado de uma variável ou expressão.
Quais são os tipos de dados primitivos em JavaScript?,"String, Number, Boolean, Null, Undefined, Symbol (ES6), BigInt (ES2020)."
Qual a diferença entre um array e um objeto em JavaScript?,"Um array é uma coleção ordenada de valores acessados por índices numéricos. Um objeto é uma coleção de pares chave-valor, onde as chaves são strings (ou símbolos)."
Como verificar se uma variável é do tipo array em JavaScript?,Usando `Array.isArray(variavel)`.
Como obter o comprimento de um array em JavaScript?,Usando a propriedade `length` do array.
Como adicionar um elemento ao final de um array em JavaScript?,Usando o método `push(elemento)`.
Como remover o último elemento de um array em JavaScript?,Usando o método `pop()`.
Como adicionar um elemento no início de um array em JavaScript?,Usando o método `unshift(elemento)`.
Como remover o primeiro elemento de um array em JavaScript?,Usando o método `shift()`.
Como remover um elemento de um array em uma posição específica em JavaScript?,"Usando o método `splice(indice, quantidade)` (indice de onde começar a remover, quantidade de elementos a remover)."
Como inserir um elemento em um array em uma posição específica sem remover nenhum elemento em JavaScript?,"Usando o método `splice(indice, 0, elemento)` (indice de onde inserir, 0 para não remover nada, elemento a inserir)."
Como concatenar dois arrays em JavaScript?,Usando o método `concat(outroArray)`.
Como criar uma cópia de um array em JavaScript?,Usando o método `slice()` (sem argumentos) ou o operador spread `[...arrayOriginal]`.
Como inverter a ordem dos elementos de um array em JavaScript?,Usando o método `reverse()`.
Como ordenar os elementos de um array em JavaScript?,"Usando o método `sort()`. Por padrão, ele ordena como strings. Para ordenar números, é necessário passar uma função de comparação como argumento."
Como ordenar um array de números em ordem crescente usando o método `sort()`?,"`array.sort((a, b) => a - b);`"
Como ordenar um array de números em ordem decrescente usando o método `sort()`?,"`array.sort((a, b) => b - a);`"
O que é o método `map()` em arrays em JavaScript?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em arrays em JavaScript?,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em arrays em JavaScript?,`reduce()` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzir a um único valor.
O que é o método `forEach()` em arrays em JavaScript?,"`forEach()` executa uma função fornecida uma vez para cada elemento do array. Ao contrário de `map`, ele não retorna um novo array."
O que é o método `find()` em arrays em JavaScript?,"`find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
O que é o método `findIndex()` em arrays em JavaScript?,"`findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1."
O que é o método `some()` em arrays em JavaScript?,"`some()` testa se pelo menos um elemento no array passa no teste implementado pela função fornecida. Retorna `true` se encontrar tal elemento, caso contrário, retorna `false`."
O que é o método `every()` em arrays em JavaScript?,"`every()` testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna `true` se todos os elementos passarem no teste, caso contrário, retorna `false`."
O que é o método `includes()` em arrays em JavaScript?,"`includes()` determina se um array contém um determinado valor, retornando `true` ou `false` conforme apropriado."
O que é o método `indexOf()` em arrays em JavaScript?,"`indexOf()` retorna o primeiro índice em que um determinado elemento pode ser encontrado no array, ou -1 se ele não estiver presente."
O que é o método `lastIndexOf()` em arrays em JavaScript?,"`lastIndexOf()` retorna o último índice em que um determinado elemento pode ser encontrado no array, ou -1 se ele não estiver presente."
Como verificar se uma propriedade existe em um objeto em JavaScript?,Usando o operador `in` ( `propriedade in objeto`) ou o método `hasOwnProperty()` (`objeto.hasOwnProperty('propriedade')`).
Qual a diferença entre usar o operador `in` e o método `hasOwnProperty()` para verificar a existência de uma propriedade em um objeto?,"O operador `in` verifica se a propriedade existe no objeto ou em sua cadeia de protótipos. `hasOwnProperty()` verifica apenas se a propriedade existe diretamente no objeto, sem olhar na cadeia de protótipos."
Como iterar sobre as propriedades de um objeto usando `for...in` em JavaScript?,`for (let propriedade in objeto) { ... }`
Como obter um array com todas as chaves (propriedades) de um objeto em JavaScript?,Usando o método `Object.keys(objeto)`.
Como obter um array com todos os valores de um objeto em JavaScript?,Usando o método `Object.values(objeto)`.
Como obter um array com todos os pares chave-valor de um objeto em JavaScript?,Usando o método `Object.entries(objeto)`.
O que é imutabilidade em JavaScript?,"Imutabilidade significa que um objeto não pode ser modificado após sua criação. Em vez de modificar o objeto original, você cria uma nova cópia com as alterações."
Como alcançar imutabilidade em JavaScript ao trabalhar com objetos e arrays?,"Usando métodos que retornam novas cópias, como `slice()`, `concat()`, `map()`, `filter()`, `reduce()` para arrays, e o operador spread ou `Object.assign()` para objetos."
Como importar um módulo em JavaScript usando a sintaxe `import`?,"`import { funcao1, funcao2 } from './meuModulo.js';`"
Como exportar um módulo em JavaScript usando a sintaxe `export`?,`export function minhaFuncao() { ... }` ou `export default minhaFuncao;`
Qual a diferença entre `export` nomeado e `export default`?,"`export` nomeado permite exportar múltiplos valores com nomes específicos. `export default` permite exportar um único valor como padrão, sem um nome específico."
O que é o objeto global `globalThis` em JavaScript?,"`globalThis` fornece uma maneira consistente de acessar o objeto global em diferentes ambientes JavaScript (navegadores, Node.js, etc.)."
O que é o operador de coalescência nula ( `??` ) em JavaScript?,"O operador de coalescência nula retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`, caso contrário, retorna o operando da esquerda."
O que é o operador de encadeamento opcional ( `?.` ) em JavaScript?,O operador de encadeamento opcional permite acessar propriedades aninhadas de um objeto sem causar um erro se uma propriedade intermediária for `null` ou `undefined`. Ele retorna `undefined` nesses casos.
O que são WeakMaps e WeakSets em JavaScript?,"WeakMaps e WeakSets são versões ""fracas"" de Maps e Sets, respectivamente. As chaves em WeakMaps e os valores em WeakSets devem ser objetos.  Eles não impedem que os objetos sejam coletados pelo garbage collector, o que é útil para evitar vazamentos de memória."
Qual a principal diferença entre um WeakMap e um Map?,"Em um WeakMap, as chaves devem ser objetos e não podem ser iteradas. Em um Map, as chaves podem ser de qualquer tipo de dado e podem ser iteradas."
Qual a principal diferença entre um WeakSet e um Set?,"Em um WeakSet, os valores devem ser objetos e não podem ser iterados. Em um Set, os valores podem ser de qualquer tipo de dado e podem ser iterados."
O que são classes em JavaScript (ES6)?,"Classes em JavaScript são um modelo para criar objetos. Elas fornecem uma sintaxe mais clara e concisa para definir a estrutura e o comportamento de objetos, baseadas no sistema de protótipos."
Como criar uma classe em JavaScript?,"Usando a palavra-chave `class`, seguida pelo nome da classe e um bloco de código contendo o construtor e os métodos da classe."
O que é o construtor de uma classe em JavaScript?,O construtor é um método especial dentro de uma classe que é chamado quando um novo objeto da classe é criado. Ele é usado para inicializar as propriedades do objeto.
Como criar um objeto (instância) de uma classe em JavaScript?,"Usando a palavra-chave `new`, seguida pelo nome da classe e parênteses (que podem conter argumentos para o construtor)."
O que é herança em OOP e como implementá-la em JavaScript usando classes?,"Herança é um mecanismo que permite que uma classe (subclasse ou classe filha) herde propriedades e métodos de outra classe (superclasse ou classe pai). Em JavaScript, a herança é implementada usando a palavra-chave `extends`."
O que é polimorfismo em OOP e como ele se manifesta em JavaScript?,"Polimorfismo é a capacidade de um objeto assumir muitas formas. Em JavaScript, o polimorfismo pode ser implementado através de herança (subclasses sobrescrevendo métodos da superclasse) ou através de interfaces implícitas (objetos que implementam os mesmos métodos, mesmo que não herdem da mesma classe)."
O que é encapsulamento em OOP e como ele pode ser simulado em JavaScript?,"Encapsulamento é a prática de ocultar os detalhes internos de um objeto e expor apenas uma interface para interagir com ele. Em JavaScript, o encapsulamento pode ser simulado usando closures (para criar variáveis privadas) e convenções de nomenclatura (como usar o prefixo `_` para indicar propriedades privadas)."
O que é uma variável privada em JavaScript e como implementá-la?,"Uma variável privada é uma variável que só pode ser acessada dentro da classe (ou função) onde foi definida. Em JavaScript, variáveis privadas podem ser implementadas usando closures ou, mais recentemente, campos privados com o prefixo `#` (ES2022)."
O que são campos privados em classes JavaScript (ES2022)?,Campos privados são propriedades de classes que só podem ser acessadas dentro da própria classe. Eles são definidos com o prefixo `#`.
Qual a diferença entre um método estático e um método de instância em uma classe JavaScript?,"Um método estático é um método que pertence à classe em si, e não a uma instância da classe. Ele é chamado diretamente na classe usando `NomeDaClasse.metodoEstático()`. Um método de instância pertence a cada instância da classe e é chamado em um objeto criado a partir da classe."
O que são getters e setters em classes JavaScript?,Getters e setters são métodos especiais que permitem acessar e modificar as propriedades de um objeto de uma forma controlada. Getters são usados para obter o valor de uma propriedade e setters são usados para definir o valor de uma propriedade.
Como usar getters e setters em classes JavaScript?,Getters são definidos com a palavra-chave `get` antes do nome do método e setters são definidos com a palavra-chave `set` antes do nome do método.
Quais são os tipos comuns de erros em JavaScript?,"`SyntaxError`, `TypeError`, `ReferenceError`, `RangeError`, `URIError`, `EvalError` (obsoleto)."
Como lidar com erros em JavaScript usando `try...catch`?,O bloco `try` contém o código que pode lançar um erro. O bloco `catch` contém o código que é executado se um erro for lançado no bloco `try`.
O que é o objeto `Error` em JavaScript?,O objeto `Error` é a classe base para todos os objetos de erro em JavaScript. Ele possui propriedades como `name` (o tipo do erro) e `message` (uma descrição do erro).
O que são eventos assíncronos em JavaScript?,"Eventos assíncronos são eventos que não ocorrem imediatamente, mas sim em algum momento futuro. Exemplos incluem cliques de mouse, carregamento de imagens, e respostas de servidores."
Como lidar com eventos assíncronos em JavaScript usando callbacks?,"Um callback é uma função que é passada como argumento para outra função e é executada quando o evento assíncrono ocorre.

**Pergunta"
Como você pode verificar se uma variável é um array em JavaScript?,"Você pode usar `Array.isArray(variavel)` para verificar se a variável é um array. Também pode usar `variavel instanceof Array`, embora esta última possa ter problemas em ambientes com múltiplos contextos de execução (iframes)."
Explique o conceito de closures em JavaScript.,"Closures são funções que ""lembram"" o ambiente léxico em que foram criadas. Isso significa que uma função interna pode acessar variáveis da função externa, mesmo depois que a função externa já terminou sua execução."
Como você pode evitar a mutação direta de um objeto em JavaScript?,"Você pode usar métodos como `Object.assign()`, o operador spread (`...`) para criar uma cópia superficial do objeto, ou bibliotecas como Immutable.js para trabalhar com objetos imutáveis."
"O que é o ""this"" em JavaScript e como seu valor é determinado?","`this` se refere ao objeto que está executando o código JavaScript atual. Seu valor é determinado pelo contexto de execução: em uma função global, `this` se refere ao objeto global (window no navegador, global no Node.js); em um método de objeto, `this` se refere ao objeto que contém o método; e em um construtor, `this` se refere ao novo objeto que está sendo criado."
O que é o prototype em JavaScript e como ele é usado?,"Todo objeto em JavaScript tem um protótipo, que é outro objeto do qual herda propriedades e métodos.  O prototype é usado para implementar herança prototipal, permitindo que objetos compartilhem comportamentos."
"Explique a diferença entre `var`, `let` e `const` ao declarar variáveis.","`var` tem escopo de função ou global e é hoisted. `let` tem escopo de bloco e não é hoisted (você não pode acessá-la antes da declaração). `const` também tem escopo de bloco e não é hoisted, e deve ser inicializada no momento da declaração; seu valor não pode ser reatribuído após a inicialização (embora as propriedades de objetos e arrays definidos com `const` possam ser modificadas)."
Como você pode usar funções de callback em JavaScript?,"Funções de callback são funções passadas como argumentos para outras funções, que são executadas após a conclusão de alguma operação. Elas são frequentemente usadas em operações assíncronas, como requisições HTTP ou manipulação de eventos."
Qual a diferença entre funções declaradas (`function nomeFuncao() {}`) e expressões de função (`const nomeFuncao = function() {}`)?,"Funções declaradas são hoisted, o que significa que você pode chamá-las antes de sua declaração no código. Expressões de função não são hoisted (a variável é hoisted, mas não a função)."
O que é o DOM (Document Object Model) e como o JavaScript interage com ele?,"O DOM é uma representação em árvore da estrutura de um documento HTML ou XML. JavaScript usa o DOM para acessar e manipular elementos, atributos e estilos do documento."
Como você pode selecionar elementos HTML usando JavaScript?,"Você pode usar métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`, `document.querySelector()` e `document.querySelectorAll()`."
Como você pode adicionar um evento a um elemento HTML usando JavaScript?,"Você pode usar o método `addEventListener()` para adicionar um evento a um elemento. Por exemplo: `elemento.addEventListener('click', function() { ... });`"
O que é o bubbling e capturing de eventos em JavaScript?,Bubbling é quando um evento acionado em um elemento interno se propaga para seus elementos pais. Capturing é o oposto: o evento é tratado primeiro pelo elemento pai e depois pelos elementos filhos.
Como você pode impedir a propagação de um evento em JavaScript?,Você pode usar o método `event.stopPropagation()` dentro do manipulador de eventos.
O que é o método `preventDefault()` em JavaScript?,"`preventDefault()` impede o comportamento padrão de um evento. Por exemplo, impedir que um link navegue para outra página."
Como você pode criar um novo elemento HTML usando JavaScript?,Você pode usar o método `document.createElement('tagName')` para criar um novo elemento.
Como você pode adicionar um elemento HTML ao DOM usando JavaScript?,"Você pode usar métodos como `appendChild()`, `insertBefore()`, `insertAdjacentElement()` para adicionar um elemento a outro elemento existente no DOM."
O que são template literals em JavaScript e como eles são usados?,Template literals são strings delimitadas por backticks (` `) que permitem a interpolação de variáveis e expressões. Eles tornam a construção de strings dinâmicas mais fácil e legível.
Como você pode usar o operador ternário em JavaScript?,O operador ternário (`condição ? valorSeVerdadeiro : valorSeFalso`) é uma forma concisa de escrever uma instrução `if...else`.
Explique o conceito de funções anônimas em JavaScript.,Funções anônimas são funções que não têm um nome. Elas são frequentemente usadas como callbacks ou como funções atribuídas a variáveis.
O que é IIFE (Immediately Invoked Function Expression)?,Uma IIFE é uma função que é definida e executada imediatamente após sua criação. É usada para criar um escopo privado e evitar conflitos de nomes com outras variáveis globais.
Como você pode iterar sobre as propriedades de um objeto em JavaScript?,Você pode usar o loop `for...in` para iterar sobre as propriedades enumeráveis de um objeto.
"Qual a diferença entre `map()`, `filter()` e `reduce()` em arrays?",`map()` cria um novo array com os resultados da chamada de uma função para cada elemento do array original. `filter()` cria um novo array com todos os elementos que passam em um teste implementado por uma função. `reduce()` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzir a um único valor.
Como você pode remover elementos duplicados de um array em JavaScript?,Você pode usar o objeto `Set` para remover duplicatas. Por exemplo: `[...new Set(arrayComDuplicatas)]`.
Explique o que são Promises em JavaScript.,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas têm três estados: pendente, cumprida (resolved) ou rejeitada (rejected)."
Como você pode lidar com erros em Promises usando `try...catch`?,Você não pode usar `try...catch` diretamente dentro do código assíncrono de uma Promise. Você deve usar o método `.catch()` da Promise para lidar com erros.
Qual a diferença entre `forEach` e `map` em JavaScript?,"`forEach` itera sobre os elementos de um array e executa uma função para cada elemento, mas não retorna um novo array. `map` também itera sobre os elementos, mas retorna um novo array com os resultados da função aplicada a cada elemento."
O que é o operador spread (`...`) em JavaScript e como ele é usado?,"O operador spread expande um iterável (como um array ou string) em elementos individuais. Ele é usado para copiar arrays, combinar arrays, passar argumentos para funções e criar objetos."
O que é o operador rest (`...`) em JavaScript e como ele é usado?,O operador rest coleta um número indefinido de argumentos em um array. Ele é usado em parâmetros de função e desestruturação.
Como você pode desestruturar objetos e arrays em JavaScript?,"Desestruturação é uma forma de extrair valores de objetos e arrays para variáveis. Por exemplo: `const { nome, idade } = pessoa;` ou `const [primeiro, segundo] = array;`."
"O que são os métodos `call()`, `apply()` e `bind()` em JavaScript?","`call()` e `apply()` são usados para invocar uma função com um determinado valor de `this`. `call()` recebe argumentos individualmente, enquanto `apply()` recebe argumentos como um array. `bind()` cria uma nova função com um valor de `this` pré-definido."
Explique o conceito de currying em JavaScript.,"Currying é uma técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada, retornando a próxima função na sequência até que todos os argumentos sejam fornecidos."
Como você pode usar classes em JavaScript?,"Classes são um modelo para criar objetos com propriedades e métodos. Elas usam a palavra-chave `class`, um construtor e métodos definidos dentro do corpo da classe."
O que é herança em classes JavaScript e como ela é implementada?,Herança permite que uma classe (subclasse) herde propriedades e métodos de outra classe (superclasse). É implementada usando a palavra-chave `extends`.
Como você pode usar o método `super()` em classes JavaScript?,`super()` é usado para chamar o construtor da classe pai em uma subclasse. Ele também pode ser usado para acessar métodos da classe pai.
Explique o conceito de tipagem dinâmica em JavaScript.,"Tipagem dinâmica significa que o tipo de uma variável é verificado em tempo de execução, e não em tempo de compilação. Uma mesma variável pode armazenar valores de tipos diferentes ao longo da execução do programa."
O que são os tipos primitivos em JavaScript?,"Os tipos primitivos em JavaScript são: `undefined`, `null`, `boolean`, `number`, `string` e `symbol` (introduzido no ES6)."
O que são objetos em JavaScript?,"Objetos são coleções de propriedades, onde cada propriedade é uma associação entre um nome (ou chave) e um valor. Os valores podem ser tipos primitivos, outros objetos ou funções."
Como você pode criar um objeto em JavaScript?,Você pode criar um objeto usando a notação literal de objeto (`{}`) ou usando o construtor `new Object()`.
Como você pode converter um objeto JavaScript em JSON e vice-versa?,Você pode usar `JSON.stringify()` para converter um objeto JavaScript em JSON e `JSON.parse()` para converter uma string JSON em um objeto JavaScript.
Como você pode gerar um número aleatório em JavaScript?,Você pode usar o método `Math.random()` para gerar um número aleatório entre 0 (inclusive) e 1 (exclusivo).
Como você pode obter a data e hora atual em JavaScript?,Você pode criar uma nova instância do objeto `Date`: `const agora = new Date();`.
Como você pode formatar uma data em JavaScript?,"Você pode usar os métodos do objeto `Date` (como `getFullYear()`, `getMonth()`, `getDate()`) para obter as partes da data e formatá-las manualmente, ou usar bibliotecas de formatação de data."
Como você pode criar uma expressão regular em JavaScript?,Você pode criar uma expressão regular usando a notação literal (`/padrão/`) ou usando o construtor `new RegExp('padrão')`.
Como você pode testar se uma string corresponde a uma expressão regular em JavaScript?,Você pode usar o método `test()` da expressão regular ou o método `match()` da string.
Como você pode substituir partes de uma string usando expressões regulares em JavaScript?,"Você pode usar o método `replace()` da string, passando a expressão regular e a string de substituição como argumentos."
"O que é o modificador ""g"" em expressões regulares?","O modificador ""g"" (global) indica que a expressão regular deve encontrar todas as correspondências na string, em vez de parar na primeira."
O que é o encadeamento opcional (optional chaining) `?.` em JavaScript?,"O encadeamento opcional permite acessar propriedades de um objeto sem precisar verificar explicitamente se cada nível da propriedade existe. Se uma propriedade no caminho for `null` ou `undefined`, a expressão retorna `undefined` em vez de lançar um erro."
O que são WeakSets e WeakMaps em JavaScript?,"`WeakSet` e `WeakMap` são coleções que armazenam referências fracas a objetos. Isso significa que, se um objeto armazenado em um `WeakSet` ou `WeakMap` não tiver outras referências a ele, o garbage collector pode coletá-lo e removê-lo da coleção. Eles são usados para evitar vazamentos de memória."
Qual a diferença entre `WeakSet` e `Set`?,`WeakSet` só pode armazenar objetos e não pode ser iterado. `Set` pode armazenar qualquer tipo de valor e pode ser iterado.
Qual a diferença entre `WeakMap` e `Map`?,`WeakMap` só pode usar objetos como chaves e não pode ser iterado. `Map` pode usar qualquer tipo de valor como chaves e pode ser iterado.
Como você cria um generator em JavaScript?,Você declara uma função generator usando o asterisco `*` após a palavra-chave `function`: `function* myGenerator() { ... }`.
Como você itera sobre um generator?,Você pode usar o método `next()` do objeto generator para obter o próximo valor retornado pelo `yield`.
O que é o método `yield*` em generators?,`yield*` permite delegar a execução para outro generator ou iterável.
Como você pode criar seu próprio iterator em JavaScript?,Você pode criar um objeto com um método `next()` que implementa a lógica para retornar os valores da sequência.
O que é o símbolo `Symbol.iterator`?,"`Symbol.iterator` é um símbolo bem conhecido que define o método padrão para iterar sobre um objeto. Quando um objeto tem uma propriedade com a chave `Symbol.iterator`, ele é considerado um iterável."
O que é o loop `for...of` em JavaScript?,"O loop `for...of` itera sobre os valores de um objeto iterável, como um array, string, Map, Set ou generator."
Qual a diferença entre `for...in` e `for...of`?,"`for...in` itera sobre as *chaves* (nomes das propriedades) de um objeto, enquanto `for...of` itera sobre os *valores* de um objeto iterável."
O que são os Proxy objects em JavaScript?,"Proxy objects permitem interceptar e personalizar operações fundamentais em objetos, como leitura, escrita, enumeração e chamada de funções."
Como você cria um Proxy object em JavaScript?,"Você usa o construtor `new Proxy(target, handler)`, onde `target` é o objeto a ser proxied e `handler` é um objeto que define os traps (métodos que interceptam as operações)."
"O que são ""traps"" em Proxy objects?","""Traps"" são métodos definidos no objeto handler de um Proxy que interceptam operações no objeto alvo. Exemplos de traps incluem `get`, `set`, `has`, `deleteProperty`, etc."
O que é o objeto `Reflect` em JavaScript?,O objeto `Reflect` fornece métodos estáticos que são os mesmos que os traps do Proxy object. Ele é usado para implementar os traps de forma mais segura e consistente.
O que é a API `Fetch` em JavaScript e para que ela serve?,A API `Fetch` fornece uma interface para buscar recursos na rede de forma assíncrona. É uma alternativa moderna à `XMLHttpRequest`.
Como você faz uma requisição GET usando a API `Fetch`?,`fetch('url').then(response => response.json()).then(data => console.log(data));`
Como você faz uma requisição POST usando a API `Fetch`?,"`fetch('url', { method: 'POST', body: JSON.stringify(data), headers: { 'Content-Type': 'application/json' } }).then(response => response.json()).then(data => console.log(data));`"
Como você lida com erros na API `Fetch`?,Você pode usar o método `.catch()` para capturar erros que ocorrem durante a requisição. Também pode verificar a propriedade `ok` da resposta para verificar se a requisição foi bem-sucedida.
O que são Web Workers em JavaScript?,"Web Workers permitem executar scripts JavaScript em segundo plano, sem bloquear a thread principal da interface do usuário."
Como você cria um Web Worker em JavaScript?,`const worker = new Worker('worker.js');`
Como você se comunica entre a thread principal e um Web Worker?,Você usa o método `postMessage()` para enviar mensagens entre as threads e o evento `message` para receber mensagens.
O que é o objeto `location` em JavaScript?,O objeto `location` contém informações sobre a URL atual da página e fornece métodos para alterar a URL.
O que é o objeto `history` em JavaScript?,"O objeto `history` permite navegar pelo histórico de navegação do navegador, como voltar e avançar."
Como você define um cookie em JavaScript?,`document.cookie = 'nome=valor; expires=data; path=/';`
Como você lê um cookie em JavaScript?,`const cookies = document.cookie;` (que retorna uma string com todos os cookies separados por ponto e vírgula).
Como você exclui um cookie em JavaScript?,"Defina a data de expiração do cookie para uma data no passado: `document.cookie = 'nome=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/';`"
O que é o Local Storage e o Session Storage em JavaScript?,"Local Storage e Session Storage são APIs para armazenar dados localmente no navegador do usuário. Local Storage armazena dados permanentemente (até que sejam explicitamente excluídos), enquanto Session Storage armazena dados apenas durante a sessão do navegador."
Como você armazena um valor no Local Storage?,"`localStorage.setItem('chave', 'valor');`"
Como você recupera um valor do Local Storage?,`const valor = localStorage.getItem('chave');`
Como você remove um valor do Local Storage?,`localStorage.removeItem('chave');`
O que é o Session Storage e como ele difere do Local Storage?,"Session Storage armazena dados apenas durante a sessão do navegador, enquanto Local Storage armazena dados permanentemente (até serem explicitamente excluídos). Os dados no Session Storage são perdidos quando a janela ou aba do navegador é fechada."
O que é o tipo `BigInt` em JavaScript?,`BigInt` é um tipo de dados numérico que pode representar inteiros maiores que o limite do tipo `Number`. É usado para realizar operações aritméticas em inteiros muito grandes com precisão.
Como você cria um `BigInt` em JavaScript?,Você pode criar um `BigInt` adicionando o sufixo `n` a um literal inteiro (ex: `123n`) ou usando a função `BigInt()` (ex: `BigInt(123)`).
Quais operações são suportadas com o tipo `BigInt`?,"A maioria das operações aritméticas padrão (+, -, *, /, **, %) são suportadas, mas `BigInt` não pode ser misturado com `Number` em operações aritméticas. Você deve converter explicitamente para `BigInt` antes de realizar a operação."
O que são Map e Set em JavaScript?,"Map e Set são estruturas de dados que representam coleções de valores. Map armazena pares chave-valor, enquanto Set armazena valores únicos."
Qual a diferença entre um objeto e um Map em JavaScript?,"Map permite usar qualquer tipo de valor como chave, enquanto objetos só podem usar strings ou Symbols. Map também mantém a ordem de inserção das chaves, enquanto a ordem das propriedades em objetos não é garantida."
Como você adiciona um valor a um Set em JavaScript?,`meuSet.add(valor);`
Como você verifica se um valor existe em um Set em JavaScript?,`meuSet.has(valor);`
Como você remove um valor de um Set em JavaScript?,`meuSet.delete(valor);`
Como você itera sobre os valores em um Set em JavaScript?,Você pode usar o loop `for...of` ou o método `forEach()`.
Como você adiciona um par chave-valor a um Map em JavaScript?,"`meuMap.set(chave, valor);`"
Como você obtém um valor de um Map em JavaScript usando sua chave?,`const valor = meuMap.get(chave);`
Como você verifica se uma chave existe em um Map em JavaScript?,`meuMap.has(chave);`
Como você remove um par chave-valor de um Map em JavaScript?,`meuMap.delete(chave);`
Como você itera sobre os pares chave-valor em um Map em JavaScript?,Você pode usar o loop `for...of` com o método `entries()` ou o método `forEach()`.
O que é tail call optimization (TCO) e JavaScript suporta?,TCO é uma otimização que permite que uma chamada de função no final de outra função (tail call) seja executada sem adicionar um novo frame à pilha de chamadas. JavaScript tem suporte limitado a TCO e geralmente só é garantido em modo estrito e em determinadas situações.
Qual a diferença entre `in` e `hasOwnProperty()` em JavaScript?,"`in` verifica se uma propriedade existe no objeto ou em sua cadeia de protótipos, enquanto `hasOwnProperty()` verifica se a propriedade existe diretamente no objeto, sem considerar a cadeia de protótipos."
O que é o tipo `Symbol` em JavaScript?,`Symbol` é um tipo de dados primitivo introduzido no ES6 que representa um identificador único e imutável. Eles são frequentemente usados para criar propriedades de objeto que não entrarão em conflito com outras propriedades.
Como você cria um Symbol em JavaScript?,`const meuSimbolo = Symbol('descrição');`
Como você pode usar Symbols para criar propriedades privadas em objetos?,"Ao usar um Symbol como chave de uma propriedade, a propriedade fica ""escondida"" da enumeração normal e não é acessível diretamente por outros códigos que não tenham acesso ao Symbol. No entanto, não é verdadeiramente privado, já que `Object.getOwnPropertySymbols()` pode revelar os Symbols de um objeto."
O que são os símbolos bem conhecidos (well-known symbols) em JavaScript?,"São símbolos predefinidos que representam comportamentos internos da linguagem. Exemplos incluem `Symbol.iterator`, `Symbol.toStringTag`, `Symbol.hasInstance`, etc."
Qual a diferença entre `Object.freeze()` e `Object.seal()`?,"`Object.freeze()` impede a adição, remoção e modificação de propriedades, enquanto `Object.seal()` impede a adição e remoção de propriedades, mas permite a modificação das propriedades existentes."
Como você ativa o modo estrito em JavaScript?,"Adicione a diretiva `""use strict"";` no início de um script ou função."
Quais são algumas das restrições impostas pelo modo estrito?,"* Impossibilidade de usar variáveis não declaradas.
* Atribuição a propriedades somente leitura lança um erro.
* Impossibilidade de deletar variáveis ou funções declaradas com `var`, `let` ou `const`.
* `this` dentro de uma função não vinculada é `undefined`, em vez do objeto global."
O que é o objeto global em JavaScript?,"O objeto global é o objeto que existe no escopo mais externo. No navegador, é o objeto `window`. No Node.js, é o objeto `global`."
Como você pode detectar se o código está sendo executado em um navegador ou no Node.js?,"Você pode verificar se o objeto `window` existe: `typeof window !== 'undefined'`. Se existir, o código está sendo executado em um navegador. Caso contrário, provavelmente está sendo executado em um ambiente Node.js."
O que é o operador `void` em JavaScript?,O operador `void` avalia uma expressão e retorna `undefined`. É frequentemente usado para evitar que o navegador navegue para um novo URL quando um link é clicado.
Como você pode criar um loop infinito em JavaScript?,`while (true) { ... }` ou `for (;;) { ... }`
Como você pode quebrar um loop em JavaScript?,Você pode usar a palavra-chave `break` para sair de um loop.
Como você pode pular para a próxima iteração de um loop em JavaScript?,Você pode usar a palavra-chave `continue` para pular para a próxima iteração.
O que é um label em JavaScript e como ele é usado?,Um label é um identificador que pode ser associado a uma instrução. Ele é usado em conjunto com `break` e `continue` para controlar o fluxo de loops aninhados.
Como você usa um label com `break` em JavaScript?,`label: while (condição) { ... if (condiçãoDeSaída) { break label; } ... }` Isso fará com que o loop identificado pelo label seja interrompido.
O que é o padrão Observer em JavaScript?,"O padrão Observer define uma dependência um-para-muitos entre objetos, de forma que, quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
Como você pode implementar o padrão Observer em JavaScript?,"Você pode criar um objeto que mantém uma lista de observadores (callbacks) e fornece métodos para adicionar observadores, remover observadores e notificar os observadores quando o estado muda."
Como você pode implementar memoization em JavaScript?,Você pode criar uma função que armazena os resultados em um objeto e verifica se o resultado para uma determinada entrada já existe no objeto antes de calcular o resultado novamente.
O que é o padrão Revealing Module em JavaScript?,"É uma variação do padrão Module, onde retornamos um objeto contendo apenas as funções que queremos tornar públicas, ""revelando-as"". As demais funções permanecem privadas dentro do escopo do módulo."
"O que é ""tree shaking"" e como ele se relaciona com JavaScript?","Tree shaking é uma técnica usada por bundlers (como Webpack) para remover código não utilizado de um projeto JavaScript. Isso ajuda a reduzir o tamanho final do arquivo, melhorando o desempenho."
O que são WebAssembly e como se relacionam com JavaScript?,"WebAssembly (Wasm) é um formato binário para código que é executado em navegadores web. Ele é projetado para ser uma alternativa mais rápida e eficiente ao JavaScript para tarefas computacionalmente intensivas. Wasm pode ser usado em conjunto com JavaScript, permitindo que você escreva partes do seu aplicativo em linguagens como C++ ou Rust e compile-as para Wasm."
O que são Mixins em JavaScript e como podem ser úteis?,Mixins são classes ou objetos que contêm métodos que podem ser usados por outras classes sem herança. Eles permitem reutilizar o código e adicionar funcionalidades a classes existentes de forma flexível.
"O que é a ""Event Loop"" em JavaScript e qual seu papel?","A Event Loop é um mecanismo central no JavaScript que permite lidar com operações assíncronas de forma não bloqueante. Ela monitora a pilha de chamadas e a fila de tarefas, movendo callbacks da fila para a pilha quando a pilha está vazia."
"O que é ""Garbage Collection"" em JavaScript e como ela funciona?",Garbage Collection é o processo automático de liberação de memória que não está mais sendo usada por um programa JavaScript. O garbage collector identifica objetos que não são mais referenciados e libera a memória que eles ocupavam.
"O que é ""Dead Code Elimination"" e como se relaciona com JavaScript?",Dead Code Elimination é um processo de otimização que remove o código que nunca será
Como funciona o operador `typeof`?,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando. Por exemplo, `typeof 42` retorna ""number"", `typeof ""hello""` retorna ""string"", e `typeof undefined` retorna ""undefined""."
Explique o que é closure em JavaScript.,"Um closure é a capacidade de uma função de ""lembrar"" e acessar variáveis de seu escopo léxico (o escopo onde a função foi definida), mesmo quando a função é executada fora desse escopo."
O que é o objeto `arguments`?,"Dentro de uma função, o `arguments` é um objeto semelhante a um array que contém todos os argumentos passados para a função. Não é um array real, mas pode ser percorrido usando um loop."
O que é uma função construtora em JavaScript?,"Uma função construtora é uma função usada para criar objetos. Ela é chamada com a palavra-chave `new`. Dentro da função, `this` se refere ao novo objeto sendo criado."
Explique o conceito de herança prototipal em JavaScript.,"JavaScript usa herança prototipal, onde objetos herdam propriedades e métodos de outro objeto, chamado protótipo. Cada objeto tem um protótipo, e quando uma propriedade é acessada no objeto, JavaScript primeiro verifica se a propriedade existe no objeto, e se não existir, procura no protótipo e assim por diante, até chegar ao protótipo final (geralmente `null`)."
Qual a função do método `bind()`?,"O método `bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido. Ele também permite predefinir argumentos para a função."
O que é o JSON e qual sua utilidade em JavaScript?,"JSON (JavaScript Object Notation) é um formato de dados leve usado para troca de dados. Em JavaScript, é usado para transmitir dados entre um servidor e um aplicativo web ou para armazenar dados de forma estruturada."
Explique o conceito de truthy e falsy values.,"Em JavaScript, um valor truthy é um valor que é avaliado como `true` em um contexto booleano, enquanto um valor falsy é avaliado como `false`. Exemplos de valores falsy incluem `0`, `""""` (string vazia), `null`, `undefined`, `NaN` e `false`."
O que é o operador ternário (operador condicional)?,O operador ternário é uma forma concisa de escrever uma instrução `if...else`. Sua sintaxe é `condição ? expressão_se_verdadeira : expressão_se_falsa`.
O que são template literals?,Template literals são strings que permitem incorporar expressões dentro delas usando a sintaxe `${expressão}`. Elas são delimitadas por backticks (``).
Explique o que são classes em JavaScript.,Classes em JavaScript são um açúcar sintático sobre a herança prototipal. Elas fornecem uma forma mais clara e orientada a objetos de criar objetos e lidar com herança.
"Qual a diferença entre `let`, `const` e `var`?",`var` tem escopo de função ou escopo global se declarado fora de uma função. `let` e `const` têm escopo de bloco (dentro de chaves `{}`). `const` é usado para variáveis cujo valor não deve ser reatribuído após a inicialização.
Como você seleciona um elemento HTML usando JavaScript?,"Você pode usar métodos como `document.getElementById()`, `document.querySelector()` e `document.querySelectorAll()` para selecionar elementos HTML."
Como você modifica o conteúdo de um elemento HTML usando JavaScript?,Você pode usar a propriedade `textContent` ou `innerHTML` de um elemento para modificar seu conteúdo.
Como você adiciona um ouvinte de evento (event listener) a um elemento?,"Você usa o método `addEventListener()` para adicionar um ouvinte de evento a um elemento. Por exemplo, `element.addEventListener('click', myFunction)`."
Como você previne o comportamento padrão de um evento?,"Você pode usar o método `preventDefault()` do objeto de evento para prevenir o comportamento padrão. Por exemplo, `event.preventDefault()`."
Como você interrompe a propagação de um evento?,"Você pode usar o método `stopPropagation()` do objeto de evento para interromper a propagação. Por exemplo, `event.stopPropagation()`."
O que são cookies?,"Cookies são pequenos arquivos de texto que os sites armazenam no navegador do usuário para lembrar informações sobre o usuário, como preferências ou informações de login."
O que é o Local Storage?,Local Storage é um mecanismo de armazenamento web que permite armazenar dados localmente no navegador do usuário. Os dados permanecem armazenados mesmo após o navegador ser fechado.
Como você armazena dados no Local Storage?,"Você usa o método `localStorage.setItem(key, value)` para armazenar dados no Local Storage."
O que é o Session Storage?,"Session Storage é semelhante ao Local Storage, mas os dados são armazenados apenas durante a sessão do navegador. Os dados são perdidos quando o navegador é fechado."
Como você armazena dados no Session Storage?,"Você usa o método `sessionStorage.setItem(key, value)` para armazenar dados no Session Storage."
O que são callbacks?,Callbacks são funções passadas como argumentos para outras funções. Elas são executadas quando a função que as recebeu como argumento termina sua execução.
O que são Promises?,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas podem estar em um dos três estados: pendente (pending), resolvida (fulfilled) ou rejeitada (rejected)."
O que são async/await?,"`async/await` são palavras-chave que facilitam o trabalho com Promises. `async` declara uma função assíncrona, e `await` pausa a execução da função até que uma Promise seja resolvida ou rejeitada."
O que é uma expressão regular?,Uma expressão regular é um padrão de texto usado para corresponder e manipular strings.
Como você cria uma expressão regular em JavaScript?,"Você pode criar uma expressão regular usando literais (por exemplo, `/pattern/`) ou o construtor `RegExp`."
O que é o método `map()` em arrays?,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em arrays?,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em arrays?,O método `reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o método `forEach()` em arrays?,O método `forEach()` executa uma função fornecida uma vez para cada elemento em um array.
O que é o método `sort()` em arrays?,O método `sort()` ordena os elementos de um array no local e retorna o array ordenado.
Como você remove o último elemento de um array?,Você pode usar o método `pop()` para remover o último elemento de um array.
Como você adiciona um elemento ao final de um array?,Você pode usar o método `push()` para adicionar um elemento ao final de um array.
Como você remove o primeiro elemento de um array?,Você pode usar o método `shift()` para remover o primeiro elemento de um array.
Como você adiciona um elemento ao início de um array?,Você pode usar o método `unshift()` para adicionar um elemento ao início de um array.
O que é o método `splice()` em arrays?,"O método `splice()` altera o conteúdo de um array, adicionando novos elementos enquanto remove elementos antigos."
O que é o método `slice()` em arrays?,O método `slice()` retorna uma cópia rasa (shallow copy) de uma parte de um array em um novo array.
O que é o método `concat()` em arrays?,"O método `concat()` é usado para juntar dois ou mais arrays. Este método não modifica os arrays existentes, mas retorna um novo array."
O que é o operador spread (`...`)?,O operador spread permite que um iterável (como um array ou string) seja expandido em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados.
O que é o método `padStart()`?,"O método `padStart()` preenche o início da string atual com outra string (repetida, se necessário) para que a string resultante alcance um determinado comprimento."
O que é o método `padEnd()`?,"O método `padEnd()` preenche o final da string atual com uma string fornecida (repetida, se necessário) para que a string resultante alcance um determinado comprimento."
O que é o método `trim()`?,O método `trim()` remove os espaços em branco (whitespaces) do início e do fim de uma string.
O que é o método `toUpperCase()`?,O método `toUpperCase()` retorna o valor da string original convertido em letras maiúsculas.
O que é o método `toLowerCase()`?,O método `toLowerCase()` retorna o valor da string original convertido em letras minúsculas.
O que é o método `includes()` em strings?,O método `includes()` determina se uma string contém outra string e retorna `true` ou `false` conforme apropriado.
O que é o método `startsWith()` em strings?,"O método `startsWith()` determina se uma string começa com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado."
O que é o método `endsWith()` em strings?,"O método `endsWith()` determina se uma string termina com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado."
O que é o método `substring()` em strings?,O método `substring()` retorna uma parte da string entre os índices inicial e final fornecidos.
O que é o método `substr()` em strings?,"O método `substr()` retorna uma parte da string, começando no índice especificado e retornando o número especificado de caracteres."
O que é o método `replace()` em strings?,O método `replace()` retorna uma nova string com alguma ou todas as correspondências de um padrão substituídas por uma substituição.
O que é o método `replaceAll()` em strings?,O método `replaceAll()` retorna uma nova string com todas as correspondências de um padrão substituídas por uma substituição.
O que é o método `split()` em strings?,"O método `split()` divide um String em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array."
O que é o método `join()` em arrays?,"O método `join()` cria e retorna uma nova string concatenando todos os elementos em um array (ou um objeto semelhante a um array), separados por vírgulas ou uma string de separador especificada."
Como você gera um número aleatório em JavaScript?,Você pode usar `Math.random()` para gerar um número aleatório entre 0 (inclusive) e 1 (exclusivo).
Como você arredonda um número para cima em JavaScript?,Você pode usar `Math.ceil()` para arredondar um número para cima.
Como você arredonda um número para baixo em JavaScript?,Você pode usar `Math.floor()` para arredondar um número para baixo.
Como você calcula a raiz quadrada de um número em JavaScript?,Você pode usar `Math.sqrt()` para calcular a raiz quadrada de um número.
Como você eleva um número a uma potência em JavaScript?,"Você pode usar `Math.pow(base, exponent)` para elevar um número a uma potência."
Como você obtém a data atual em JavaScript?,Você pode criar um novo objeto `Date` usando `new Date()`.
Como você obtém o ano de uma data em JavaScript?,Você pode usar o método `getFullYear()` para obter o ano de uma data.
Como você obtém o mês de uma data em JavaScript?,Você pode usar o método `getMonth()` para obter o mês de uma data (0-11).
Como você obtém o dia do mês de uma data em JavaScript?,Você pode usar o método `getDate()` para obter o dia do mês de uma data.
Como você obtém o dia da semana de uma data em JavaScript?,"Você pode usar o método `getDay()` para obter o dia da semana de uma data (0-6, onde 0 é Domingo)."
Como você obtém as horas de uma data em JavaScript?,Você pode usar o método `getHours()` para obter as horas de uma data.
Como você obtém os minutos de uma data em JavaScript?,Você pode usar o método `getMinutes()` para obter os minutos de uma data.
Como você obtém os segundos de uma data em JavaScript?,Você pode usar o método `getSeconds()` para obter os segundos de uma data.
Como você define o ano de uma data em JavaScript?,Você pode usar o método `setFullYear()` para definir o ano de uma data.
Como você define o mês de uma data em JavaScript?,Você pode usar o método `setMonth()` para definir o mês de uma data.
Como você define o dia do mês de uma data em JavaScript?,Você pode usar o método `setDate()` para definir o dia do mês de uma data.
O que são iteradores e iteráveis em JavaScript?,Um iterável é um objeto que pode ser iterado (percorrido) usando um loop. Ele deve ter um método `Symbol.iterator` que retorna um iterador. Um iterador é um objeto que define como iterar sobre um iterável. Ele deve ter um método `next()` que retorna um objeto com as propriedades `value` (o próximo valor) e `done` (um booleano indicando se a iteração terminou).
O que é o operador `in`?,"O operador `in` retorna `true` se a propriedade especificada estiver no objeto, caso contrário, retorna `false`."
O que é o operador `instanceof`?,O operador `instanceof` verifica se um objeto foi criado usando um determinado construtor.
O que é WeakMap e WeakSet em JavaScript?,"WeakMap e WeakSet são semelhantes a Map e Set, mas as chaves em um WeakMap e os valores em um WeakSet devem ser objetos. Além disso, eles são ""fracos"", o que significa que se um objeto não for mais referenciado em nenhum outro lugar, ele pode ser coletado pelo garbage collector, e a entrada correspondente no WeakMap/WeakSet será removida."
O que são proxies em JavaScript?,"Proxies permitem interceptar e personalizar operações fundamentais em objetos (por exemplo, leitura de propriedades, atribuição, enumeração, invocação de função, etc.)."
O que são reflection em JavaScript?,"Reflection é um conjunto de APIs que permitem inspecionar e manipular o comportamento interno de objetos e funções. Ele fornece métodos como `Reflect.get`, `Reflect.set`, `Reflect.apply`, etc."
O que é o operador `delete`?,O operador `delete` remove uma propriedade de um objeto.
O que é a função `eval()`?,A função `eval()` avalia uma string como código JavaScript. Seu uso é geralmente desencorajado devido a riscos de segurança e desempenho.
O que é o `void` operador?,O operador `void` avalia uma expressão e retorna `undefined`. Ele é frequentemente usado para evitar que o navegador navegue para um novo URL quando um link é clicado.
O que é o operador de coalescência nula (`??`)?,"O operador de coalescência nula (`??`) retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`, e caso contrário, retorna o operando da esquerda."
O que é o encadeamento opcional (`?.`)?,O encadeamento opcional (`?.`) permite acessar propriedades profundamente aninhadas em um objeto sem ter que verificar explicitamente se cada referência no caminho é `null` ou `undefined`.
O que é o método `Object.freeze()`?,"O método `Object.freeze()` congela um objeto. Um objeto congelado não pode mais ser alterado; congelar um objeto impede que novas propriedades sejam adicionadas a ele, impede que as propriedades existentes sejam removidas e impede que os valores das propriedades existentes sejam alterados."
O que é o método `Object.seal()`?,"O método `Object.seal()` sela um objeto, impedindo que novas propriedades sejam adicionadas a ele e marcando todas as propriedades existentes como não configuráveis. Os valores das propriedades presentes ainda podem ser alterados, desde que sejam graváveis."
O que são decorators em JavaScript (proposta)?,"Decorators são uma forma de modificar ou estender classes, métodos, propriedades ou parâmetros. Eles usam a sintaxe `@decorator`. (Ainda é uma proposta e não faz parte do padrão ECMAScript oficialmente, mas amplamente utilizado com transpiladores como Babel)."
"Explique o conceito de ""currying"" em JavaScript.","Currying é uma técnica em programação funcional que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada. Cada função intermediária retorna outra função que espera o próximo argumento, até que todos os argumentos tenham sido fornecidos, momento em que a função original é executada."
O que é um Immediately Invoked Function Expression (IIFE)?,Um IIFE (Immediately Invoked Function Expression) é uma função JavaScript que é executada assim que é definida. A sintaxe comum é `(function() { ... })();` ou `( () => { ... })();`.  São usados para criar escopos privados.
O que é a função `requestAnimationFrame()`?,A função `requestAnimationFrame()` informa ao navegador que você deseja realizar uma animação e solicita que o navegador chame uma função especificada para atualizar uma animação antes da próxima repintura.
O que são Web Workers?,"Web Workers permitem que você execute scripts JavaScript em threads de fundo, sem bloquear a thread principal do navegador. Isso pode melhorar o desempenho de aplicativos web que realizam tarefas pesadas."
O que é Cross-Origin Resource Sharing (CORS)?,CORS (Cross-Origin Resource Sharing) é um mecanismo que permite que recursos da web de um domínio sejam acessados por recursos de um domínio diferente.
O que é JSONP?,JSONP (JSON with Padding) é uma técnica usada para contornar a política de mesma origem em navegadores web. Ele envolve o uso de tags `<script>` para carregar dados de um domínio diferente.
O que é minificação de código JavaScript?,"Minificação é o processo de remover todos os caracteres desnecessários do código JavaScript, como espaços em branco, comentários e nomes de variáveis mais longos, para reduzir o tamanho do arquivo."
O que é ofuscação de código JavaScript?,"Ofuscação é o processo de transformar o código JavaScript em um formato que é difícil de entender e depurar, para proteger o código de engenharia reversa."
O que são polyfills?,Polyfills são trechos de código que implementam funcionalidades que não estão disponíveis em versões mais antigas de navegadores. Eles permitem que você use recursos modernos em navegadores legados.
O que são transpilers?,"Transpilers são ferramentas que convertem o código-fonte de uma linguagem de programação para outra linguagem de programação. No contexto do JavaScript, os transpilers são frequentemente usados para converter código JavaScript moderno (por exemplo, ES6+) para código JavaScript mais antigo (por exemplo, ES5) que pode ser executado em navegadores mais antigos."
O que é garbage collection em JavaScript?,Garbage collection é um processo automático que o motor JavaScript usa para liberar memória que não está mais sendo usada.
O que é o event loop em JavaScript?,"O event loop é um mecanismo que permite que o JavaScript execute operações assíncronas sem bloquear a thread principal. Ele monitora a pilha de chamadas e a fila de tarefas, e move as tarefas da fila para a pilha quando a pilha está vazia."
O que é a pilha de chamadas (call stack) em JavaScript?,A pilha de chamadas é uma estrutura de dados que rastreia a ordem em que as funções são chamadas em um programa JavaScript.
O que é a fila de tarefas (task queue) em JavaScript?,"A fila de tarefas é uma fila de callbacks que estão esperando para serem executados. Ela contém callbacks de eventos, timers e outras operações assíncronas."
O que é o método `setTimeout()`?,O método `setTimeout()` executa uma função ou um trecho de código após um determinado atraso em milissegundos.
O que é o método `setInterval()`?,"O método `setInterval()` executa uma função ou um trecho de código repetidamente, com um atraso fixo entre cada chamada."
"Qual a diferença entre `console.log()`, `console.warn()` e `console.error()`?",`console.log()` exibe uma mensagem de log no console. `console.warn()` exibe uma mensagem de aviso no console. `console.error()` exibe uma mensagem de erro no console.
O que são os Service Workers?,"Service Workers são scripts que rodam em segundo plano, separados da página web, e permitem funcionalidades como notificações push, cache offline e sincronização em segundo plano."
Qual a diferença entre CommonJS e ES Modules?,"CommonJS é um sistema de módulos usado principalmente em Node.js, enquanto ES Modules (ECMAScript Modules) é o sistema de módulos padrão para JavaScript moderno.  CommonJS usa `require()` para importar e `module.exports` para exportar, enquanto ES Modules usam `import` e `export`."
Como você importa um módulo usando ES Modules?,"Você usa a palavra-chave `import` para importar um módulo usando ES Modules. Por exemplo, `import { myFunction } from './myModule.js';`"
Como você exporta um módulo usando ES Modules?,"Você usa a palavra-chave `export` para exportar um módulo usando ES Modules. Por exemplo, `export function myFunction() { ... }` ou `export default myFunction;`"
O que é uma função pure em JavaScript?,"Uma função pura é uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais (ou seja, não modifica nenhum estado fora da função)."
O que é programação funcional em JavaScript?,"Programação funcional é um paradigma de programação que enfatiza o uso de funções puras, imutabilidade e evitar efeitos colaterais."
O que é programação orientada a objetos em JavaScript?,"Programação orientada a objetos (POO) é um paradigma de programação que organiza o código em objetos, que são instâncias de classes. A POO se concentra em conceitos como encapsulamento, herança e polimorfismo."
O que é o padrão Module em JavaScript?,O padrão Module é uma forma de encapsular código JavaScript e criar escopos privados usando funções IIFE (Immediately Invoked Function Expression).
O que é o padrão Singleton em JavaScript?,O padrão Singleton garante que apenas uma instância de uma classe seja criada e fornece um ponto de acesso global a essa instância.
O que é o padrão Factory em JavaScript?,O padrão Factory fornece uma interface para criar objetos sem especificar suas classes concretas.
O que é o padrão Strategy em JavaScript?,"O padrão Strategy define uma família de algoritmos, encapsula cada um deles e os torna intercambiáveis. Ele permite que o algoritmo varie independentemente dos clientes que o utilizam."
O que é o padrão Decorator em JavaScript?,"O padrão Decorator permite adicionar responsabilidades a um objeto dinamicamente, sem modificar seu código."
O que é o padrão Iterator em JavaScript?,"O padrão Iterator fornece uma maneira de acessar os elementos de um objeto agregado sequencialmente, sem expor sua representação subjacente."
O que é o padrão Command em JavaScript?,"O padrão Command encapsula uma solicitação como um objeto, permitindo parametrizar clientes com diferentes solicitações, enfileirar ou registrar solicitações e suportar operações anuláveis."
O que é o padrão Template Method em JavaScript?,"O padrão Template Method define o esqueleto de um algoritmo em uma classe base, permitindo que as subclasses forneçam implementações específicas para algumas etapas do algoritmo, sem alterar sua estrutura."
O que é o padrão Proxy em JavaScript?,"O padrão Proxy fornece um substituto para outro objeto, controlando o acesso a ele."
O que é o padrão Facade em JavaScript?,O padrão Facade fornece uma interface unificada para um conjunto de interfaces em um subsistema.
O que é o padrão Flyweight em JavaScript?,O padrão Flyweight usa o compartilhamento para suportar eficientemente um grande número de objetos de granularidade fina.
O que é o padrão Mediator em JavaScript?,"O padrão Mediator define um objeto que encapsula como um conjunto de objetos interage. O Mediator promove o acoplamento fraco, evitando que os objetos se refiram explicitamente uns aos outros."
O que é o padrão Memento em JavaScript?,"O padrão Memento permite capturar e externalizar o estado interno de um objeto, de forma que o objeto possa ser restaurado para esse estado posteriormente, sem violar o encapsulamento."
O que é o padrão Visitor em JavaScript?,O padrão Visitor representa uma operação a ser executada sobre os elementos de uma estrutura de objeto. O Visitor permite definir uma nova operação sem alterar as classes dos elementos sobre os quais opera.
O que é o padrão State em JavaScript?,O padrão State permite que um objeto altere seu comportamento quando seu estado interno muda. O objeto parecerá mudar de classe.
O que é o padrão Bridge em JavaScript?,"O padrão Bridge separa a abstração de sua implementação, de forma que ambas possam variar independentemente."
O que é o padrão Composite em JavaScript?,O padrão Composite compõe objetos em estruturas de árvore para representar hierarquias parte-todo.
O que é o padrão Adapter em JavaScript?,O padrão Adapter permite que classes com interfaces incompatíveis trabalhem juntas.
O que é o padrão Builder em JavaScript?,"O padrão Builder separa a construção de um objeto complexo de sua representação, de forma que o mesmo processo de construção possa criar representações diferentes."
O que é o padrão Prototype em JavaScript?,O padrão Prototype especifica os tipos de objetos a serem criados usando uma instância prototípica e cria novos objetos copiando este protótipo.
O que é o padrão Chain of Responsibility em JavaScript?,"O padrão Chain of Responsibility evita o acoplamento de um solicitante a seu receptor, dando a mais de um objeto a chance de lidar com a solicitação."
"Explique o conceito de ""debounce"".","Debounce é uma técnica para limitar a taxa na qual uma função é executada. Ela garante que a função só seja executada após um período de inatividade especificado, ou seja, quando uma série de eventos relacionados (como digitação ou redimensionamento de janela) tiver parado de ocorrer."
"Explique o conceito de ""throttle"".","Throttling é uma técnica para limitar a taxa na qual uma função é executada. Diferente do debounce, que espera um período de inatividade, o throttling garante que a função seja executada no máximo uma vez dentro de um período especificado."
O que são WebSockets?,WebSockets fornecem um canal de comunicação full-duplex sobre uma única conexão TCP. Isso permite que o servidor envie dados para o cliente sem que o cliente precise fazer uma solicitação inicial (como com HTTP).
O que é Server-Sent Events (SSE)?,"Server-Sent Events (SSE) é uma tecnologia que permite que um servidor envie dados para um navegador web em tempo real, usando uma única conexão HTTP. Diferente de WebSockets, SSE é unidirecional: o servidor envia dados para o cliente, mas o cliente não envia dados de volta para o servidor."
O que é a API Fetch?,A API Fetch fornece uma interface moderna para fazer requisições de rede em JavaScript. É uma alternativa mais poderosa e flexível ao XMLHttpRequest.
Como você faz uma requisição GET usando a API Fetch?,Você pode fazer uma requisição GET usando a API Fetch da seguinte forma: `fetch('url') .then(response => response.json()) .then(data => console.log(data));`
Como você faz uma requisição POST usando a API Fetch?,"Você pode fazer uma requisição POST usando a API Fetch da seguinte forma: `fetch('url', { method: 'POST', body: JSON.stringify(data), headers: { 'Content-Type': 'application/json' } }) .then(response => response.json()) .then(data => console.log(data));`"
O que é hoisting em JavaScript e como ele se aplica a variáveis declaradas com `var`?,"Hoisting é um comportamento em JavaScript onde as declarações de variáveis e funções são movidas para o topo de seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com um valor inicial de `undefined`, significando que você pode usá-las antes de sua declaração textual, mas seu valor será `undefined` até que a atribuição seja executada."
Explique a diferença entre `null` e `undefined` em JavaScript.,"`null` é um valor de atribuição. Representa a ausência intencional de um valor. `undefined` significa que uma variável foi declarada, mas não recebeu um valor, ou que uma propriedade de um objeto não existe."
Explique o que é o `this` em JavaScript.,`this` é uma palavra-chave que se refere ao objeto em que a função está sendo executada. Seu valor depende de como a função é chamada.
O que é o prototype em JavaScript?,Cada objeto em JavaScript tem um protótipo. O protótipo é um outro objeto do qual o objeto herda propriedades e métodos.
Como funciona a herança prototípica em JavaScript?,"A herança prototípica em JavaScript permite que objetos herdem propriedades e métodos de outros objetos através da cadeia de protótipos. Quando você tenta acessar uma propriedade ou método em um objeto que não está definido diretamente nele, JavaScript procura na cadeia de protótipos até encontrar a propriedade ou método ou chegar ao protótipo `null`."
Explique o conceito de escopo léxico em JavaScript.,"Escopo léxico significa que o escopo de uma variável é determinado pela sua posição no código fonte. Funções internas têm acesso às variáveis declaradas em suas funções externas, mesmo que a função externa já tenha retornado."
Qual a diferença entre `let` e `var` em relação ao escopo?,"Variáveis declaradas com `var` têm escopo de função (ou escopo global se declaradas fora de uma função). Variáveis declaradas com `let` têm escopo de bloco, o que significa que elas estão disponíveis apenas dentro do bloco em que foram declaradas."
O que é um bloco em JavaScript?,"Um bloco é um conjunto de zero ou mais declarações delimitadas por chaves `{}`. Blocos são usados para agrupar declarações em estruturas de controle como `if`, `else`, `for` e `while`."
O que é uma expressão em JavaScript?,"Uma expressão é uma unidade de código que pode ser avaliada para produzir um valor. Exemplos incluem literais, variáveis, operadores e chamadas de função."
O que é um statement (declaração) em JavaScript?,"Um statement é uma instrução que realiza uma ação. Exemplos incluem declarações de variáveis, atribuições, estruturas de controle e loops."
Como você pode verificar o tipo de uma variável em JavaScript?,Você pode usar o operador `typeof` para verificar o tipo de uma variável.
O que é um operador ternário em JavaScript?,"O operador ternário é um operador condicional que tem a seguinte sintaxe: `condição ? expressão_se_verdadeiro : expressão_se_falso`. Ele avalia a condição e retorna `expressão_se_verdadeiro` se a condição for verdadeira, e `expressão_se_falso` se for falsa."
Como você pode converter uma string para um número em JavaScript?,"Você pode usar as funções `parseInt()`, `parseFloat()` ou o operador unário `+`."
Como você pode converter um número para uma string em JavaScript?,"Você pode usar o método `toString()` ou concatenar o número com uma string vazia (`"""" + numero`)."
O que são arrays em JavaScript?,"Arrays são objetos que representam coleções ordenadas de valores. Cada valor em um array é chamado de elemento e é acessado por seu índice numérico, começando em 0."
Como você pode adicionar um elemento ao final de um array em JavaScript?,Você pode usar o método `push()`.
Como você pode remover o último elemento de um array em JavaScript?,Você pode usar o método `pop()`.
Como você pode adicionar um elemento ao início de um array em JavaScript?,Você pode usar o método `unshift()`.
Como você pode remover o primeiro elemento de um array em JavaScript?,Você pode usar o método `shift()`.
O que é o método `splice()` em JavaScript e para que ele serve?,"O método `splice()` é usado para adicionar ou remover elementos de um array em qualquer posição. Ele pode receber vários argumentos, incluindo o índice de início, o número de elementos a serem removidos e os elementos a serem adicionados."
O que é o método `slice()` em JavaScript e para que ele serve?,O método `slice()` retorna uma cópia superficial de uma porção de um array em um novo array. Ele recebe dois argumentos opcionais: o índice de início e o índice de fim (não inclusivo).
O que é o método `concat()` em JavaScript e para que ele serve?,O método `concat()` é usado para combinar dois ou mais arrays em um novo array.
O que é o método `join()` em JavaScript e para que ele serve?,"O método `join()` é usado para juntar todos os elementos de um array em uma string, separando-os por um separador especificado."
O que é o método `reverse()` em JavaScript e para que ele serve?,O método `reverse()` inverte a ordem dos elementos em um array.
O que é o método `sort()` em JavaScript e para que ele serve?,"O método `sort()` ordena os elementos de um array. Por padrão, ele ordena os elementos como strings. Você pode fornecer uma função de comparação para personalizar a ordem."
O que é o método `map()` em JavaScript e para que ele serve?,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em JavaScript e para que ele serve?,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em JavaScript e para que ele serve?,"O método `reduce()` executa uma função reducer (fornecida por você) em cada elemento do array, resultando em um único valor de retorno."
O que é o método `forEach()` em JavaScript e para que ele serve?,O método `forEach()` executa uma função fornecida uma vez para cada elemento do array.
O que é o método `find()` em JavaScript e para que ele serve?,"O método `find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
O que é o método `findIndex()` em JavaScript e para que ele serve?,"O método `findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1."
O que é o método `some()` em JavaScript e para que ele serve?,O método `some()` testa se pelo menos um elemento no array passa no teste implementado pela função fornecida. Retorna `true` se encontrar tal elemento e `false` caso contrário.
O que é o método `every()` em JavaScript e para que ele serve?,O método `every()` testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna `true` se todos os elementos passarem no teste e `false` caso contrário.
O que é uma string em JavaScript?,Uma string é uma sequência de caracteres. Strings em JavaScript são imutáveis.
Como você pode encontrar o comprimento de uma string em JavaScript?,Você pode usar a propriedade `length`.
O que é o método `substring()` em JavaScript e para que ele serve?,O método `substring()` retorna uma parte de uma string entre os índices especificados.
"O que é o método `slice()` em JavaScript e para que ele serve, quando usado em strings?","Similar ao `substring()`, o `slice()` retorna uma parte de uma string, mas pode lidar com índices negativos."
O que é o método `toUpperCase()` em JavaScript e para que ele serve?,O método `toUpperCase()` converte uma string para letras maiúsculas.
O que é o método `toLowerCase()` em JavaScript e para que ele serve?,O método `toLowerCase()` converte uma string para letras minúsculas.
O que é o método `trim()` em JavaScript e para que ele serve?,O método `trim()` remove espaços em branco do início e do fim de uma string.
O que é o método `replace()` em JavaScript e para que ele serve?,O método `replace()` substitui uma parte de uma string por outra string.
O que é o método `split()` em JavaScript e para que ele serve?,"O método `split()` divide uma string em um array de substrings, usando um separador especificado."
O que é o método `indexOf()` em JavaScript e para que ele serve?,O método `indexOf()` retorna o índice da primeira ocorrência de um valor especificado em uma string. Retorna -1 se o valor não for encontrado.
O que é o método `lastIndexOf()` em JavaScript e para que ele serve?,O método `lastIndexOf()` retorna o índice da última ocorrência de um valor especificado em uma string. Retorna -1 se o valor não for encontrado.
O que são templates literals (template strings) em JavaScript?,Template literals são strings que permitem embutir expressões. Elas são delimitadas por backticks (``) em vez de aspas simples ou duplas e podem conter placeholders na forma `${expressão}`.
Como você pode arredondar um número para o inteiro mais próximo em JavaScript?,Você pode usar o método `Math.round()`.
Como você pode arredondar um número para baixo para o inteiro mais próximo em JavaScript?,Você pode usar o método `Math.floor()`.
Como você pode arredondar um número para cima para o inteiro mais próximo em JavaScript?,Você pode usar o método `Math.ceil()`.
Como você pode encontrar o valor máximo entre dois números em JavaScript?,Você pode usar o método `Math.max()`.
Como você pode encontrar o valor mínimo entre dois números em JavaScript?,Você pode usar o método `Math.min()`.
Como você pode calcular a potência de um número em JavaScript?,Você pode usar o método `Math.pow()`.
Como você pode calcular a raiz quadrada de um número em JavaScript?,Você pode usar o método `Math.sqrt()`.
O que é um objeto `Date` em JavaScript?,O objeto `Date` é usado para trabalhar com datas e horários.
Como você pode criar um novo objeto `Date` em JavaScript?,Você pode usar o construtor `new Date()`.
Como você pode obter o ano de um objeto `Date` em JavaScript?,Você pode usar o método `getFullYear()`.
Como você pode obter o mês de um objeto `Date` em JavaScript?,"Você pode usar o método `getMonth()`. Lembre-se que os meses são baseados em zero (0 para Janeiro, 1 para Fevereiro, etc.)."
Como você pode obter o dia do mês de um objeto `Date` em JavaScript?,Você pode usar o método `getDate()`.
Como você pode obter o dia da semana de um objeto `Date` em JavaScript?,"Você pode usar o método `getDay()`. Lembre-se que os dias da semana são baseados em zero (0 para Domingo, 1 para Segunda, etc.)."
Como você pode obter as horas de um objeto `Date` em JavaScript?,Você pode usar o método `getHours()`.
Como você pode obter os minutos de um objeto `Date` em JavaScript?,Você pode usar o método `getMinutes()`.
Como você pode obter os segundos de um objeto `Date` em JavaScript?,Você pode usar o método `getSeconds()`.
Como você pode obter os milissegundos de um objeto `Date` em JavaScript?,Você pode usar o método `getMilliseconds()`.
Como você pode obter o timestamp de um objeto `Date` em JavaScript?,"Você pode usar o método `getTime()`, que retorna o número de milissegundos desde 1 de janeiro de 1970 UTC."
Como você pode converter um objeto JavaScript para uma string JSON?,Você pode usar o método `JSON.stringify()`.
Como você pode converter uma string JSON para um objeto JavaScript?,Você pode usar o método `JSON.parse()`.
O que é um loop `for` em JavaScript?,Um loop `for` é uma estrutura de controle que permite repetir um bloco de código um número especificado de vezes.
Qual é a sintaxe básica de um loop `for` em JavaScript?,`for (inicialização; condição; incremento) { // código a ser executado }`
O que é um loop `while` em JavaScript?,Um loop `while` é uma estrutura de controle que repete um bloco de código enquanto uma condição especificada for verdadeira.
Qual é a sintaxe básica de um loop `while` em JavaScript?,`while (condição) { // código a ser executado }`
O que é um loop `do...while` em JavaScript?,"Um loop `do...while` é semelhante ao loop `while`, mas garante que o bloco de código seja executado pelo menos uma vez, mesmo que a condição seja falsa na primeira vez."
Qual é a sintaxe básica de um loop `do...while` em JavaScript?,`do { // código a ser executado } while (condição);`
O que é a declaração `break` em JavaScript?,A declaração `break` é usada para sair de um loop ou switch statement.
O que é a declaração `continue` em JavaScript?,A declaração `continue` é usada para pular a iteração atual de um loop e passar para a próxima iteração.
O que é uma função em JavaScript?,Uma função é um bloco de código reutilizável que executa uma tarefa específica.
Como você declara uma função em JavaScript?,"Você pode usar a palavra-chave `function` seguida pelo nome da função, parênteses para os parâmetros e um bloco de código delimitado por chaves."
Como você chama (executa) uma função em JavaScript?,"Você chama uma função usando seu nome seguido por parênteses `()`. Se a função espera argumentos, você deve passá-los dentro dos parênteses."
O que são parâmetros de função em JavaScript?,Parâmetros são valores passados para uma função quando ela é chamada. Eles são usados para fornecer dados para a função processar.
O que são argumentos de função em JavaScript?,Argumentos são os valores reais que são passados para uma função quando ela é chamada.
O que é o valor de retorno de uma função em JavaScript?,"O valor de retorno é o valor que uma função retorna quando termina de executar. Você pode especificar o valor de retorno usando a declaração `return`. Se uma função não tiver uma declaração `return`, ela retorna `undefined`."
O que são arrow functions (funções de seta) em JavaScript?,"Arrow functions são uma sintaxe mais curta para escrever funções. Elas são introduzidas no ES6 (ECMAScript 2015) e têm algumas diferenças em relação às funções tradicionais, especialmente em relação ao `this`."
Qual a sintaxe básica de uma arrow function em JavaScript?,`(parâmetros) => expressão` ou `(parâmetros) => { // código }`
O que é uma função pura em JavaScript?,Uma função pura é uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais.
O que são efeitos colaterais em JavaScript?,"Efeitos colaterais são ações que uma função executa que modificam o estado fora de seu próprio escopo, como alterar variáveis globais, modificar o DOM ou fazer chamadas de rede."
O que é higher-order function em JavaScript?,Uma higher-order function é uma função que recebe outra função como argumento ou retorna uma função como resultado.
O que é o operador `...` (spread operator) em JavaScript?,O spread operator é usado para expandir um array ou objeto em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados.
O que é o operador `&&` (AND lógico) em JavaScript?,O operador `&&` retorna `true` se ambos os operandos forem verdadeiros e `false` caso contrário.
O que é o operador `||` (OR lógico) em JavaScript?,O operador `||` retorna `true` se pelo menos um dos operandos for verdadeiro e `false` se ambos forem falsos.
O que é o operador `!` (NOT lógico) em JavaScript?,O operador `!` inverte o valor booleano de seu operando.
O que são truthy e falsy values em JavaScript?,Truthy values são valores que são avaliados como `true` em um contexto booleano. Falsy values são valores que são avaliados como `false` em um contexto booleano.
Quais são os falsy values em JavaScript?,"Os falsy values em JavaScript são: `false`, `0`, `-0`, `0n`, `""""` (string vazia), `null`, `undefined` e `NaN`."
Como você pode acessar as propriedades de um objeto em JavaScript?,Você pode acessar as propriedades de um objeto usando a notação de ponto (`objeto.propriedade`) ou a notação de colchetes (`objeto['propriedade']`).
Como você pode adicionar uma nova propriedade a um objeto em JavaScript?,Você pode adicionar uma nova propriedade a um objeto usando a notação de ponto ou a notação de colchetes e atribuindo um valor a ela.
Como você pode remover uma propriedade de um objeto em JavaScript?,Você pode remover uma propriedade de um objeto usando o operador `delete`.
O que são métodos de um objeto em JavaScript?,Métodos são funções que são propriedades de um objeto.
O que é o operador `new` em JavaScript?,O operador `new` cria uma instância de um tipo de objeto definido pelo usuário ou por um dos tipos de objetos embutidos.
Quais são alguns métodos comuns do objeto `console` em JavaScript?,"`console.log()`, `console.warn()`, `console.error()`, `console.table()`."
Como você pode adicionar um ouvinte de evento a um elemento em JavaScript?,Você pode usar o método `addEventListener()`.
O que é o método `preventDefault()` do objeto `event`?,"O método `preventDefault()` impede o comportamento padrão do evento. Por exemplo, ele pode impedir que um link navegue para uma nova página ou que um formulário seja enviado."
O que é o método `stopPropagation()` do objeto `event`?,O método `stopPropagation()` impede que o evento se propague para elementos pai na árvore DOM.
O que é o DOM em JavaScript?,"O DOM (Document Object Model) é uma representação em forma de árvore da estrutura de um documento HTML ou XML. Ele permite que o JavaScript acesse e manipule o conteúdo, a estrutura e o estilo do documento."
Como você pode acessar um elemento HTML no DOM usando JavaScript?,"Você pode usar métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()` ou `document.querySelector()` e `document.querySelectorAll()`."
Como você pode criar um novo elemento HTML no DOM usando JavaScript?,Você pode usar o método `document.createElement()`.
Como você pode adicionar um novo elemento HTML ao DOM usando JavaScript?,"Você pode usar métodos como `appendChild()`, `insertBefore()`, `insertAdjacentElement()`."
Como você pode remover um elemento HTML do DOM usando JavaScript?,Você pode usar o método `removeChild()`.
Como você pode alterar o texto de um elemento HTML no DOM usando JavaScript?,Você pode usar a propriedade `textContent` ou `innerText`.
Como você pode alterar os atributos de um elemento HTML no DOM usando JavaScript?,Você pode usar os métodos `setAttribute()` e `getAttribute()`.
Como você pode alterar os estilos de um elemento HTML no DOM usando JavaScript?,Você pode usar a propriedade `style`.
Como você lida com o resultado de uma promise em JavaScript?,"Você pode usar os métodos `then()` e `catch()`. O método `then()` é chamado quando a promise é resolvida, e o método `catch()` é chamado quando a promise é rejeitada."
O que é a palavra-chave `async` em JavaScript?,A palavra-chave `async` é usada para declarar uma função assíncrona. Funções assíncronas sempre retornam uma promise.
O que é a palavra-chave `await` em JavaScript?,A palavra-chave `await` é usada dentro de uma função assíncrona para pausar a execução da função até que uma promise seja resolvida.
Como você pode lançar um erro em JavaScript?,Você pode usar a declaração `throw`.
Como você pode lidar com erros em JavaScript?,"Você pode usar o bloco `try...catch`. O código que pode gerar um erro é colocado dentro do bloco `try`, e o código que lida com o erro é colocado dentro do bloco `catch`."
O que é o bloco `finally` em JavaScript?,"O bloco `finally` é executado após o bloco `try` e o bloco `catch`, independentemente de um erro ter ocorrido ou não."
O que é o objeto `TypeError` em JavaScript?,O objeto `TypeError` representa um erro que ocorre quando um valor não é do tipo esperado.
O que é o objeto `ReferenceError` em JavaScript?,O objeto `ReferenceError` representa um erro que ocorre quando você tenta usar uma variável que não foi declarada.
O que é o objeto `SyntaxError` em JavaScript?,O objeto `SyntaxError` representa um erro que ocorre quando o código tem uma sintaxe inválida.
O que é o objeto `RangeError` em JavaScript?,O objeto `RangeError` representa um erro que ocorre quando um valor está fora de um intervalo permitido.
O que é o objeto `EvalError` em JavaScript?,O objeto `EvalError` representa um erro que ocorre quando a função `eval()` é usada de forma incorreta. (Nota: este erro raramente é usado em JavaScript moderno).
O que é o objeto `URIError` em JavaScript?,O objeto `URIError` representa um erro que ocorre quando as funções `encodeURI()` ou `decodeURI()` são usadas de forma incorreta.
Como você importa um módulo em JavaScript (ES Modules)?,Você usa a declaração `import`. Ex: `import { nomeDaFuncao } from './meuModulo.js';`
Como você exporta um módulo em JavaScript (ES Modules)?,Você usa a declaração `export`. Ex: `export function minhaFuncao() { ... }` ou `export default minhaFuncao;`
Qual a diferença entre `export default` e `export` (nomeado)?,"`export default` é usado para exportar um único valor padrão de um módulo. `export` (nomeado) é usado para exportar vários valores de um módulo, cada um com um nome específico."
O que é a diferença entre `forEach` e `map` em JavaScript?,"`forEach` itera sobre um array e executa uma função para cada elemento, mas não retorna nada (undefined). `map` itera sobre um array, executa uma função para cada elemento e retorna um novo array com os resultados da função aplicada a cada elemento."
Qual a diferença entre funções declaradas e expressões de função em JavaScript?,"Funções declaradas são hoisted, o que significa que podem ser chamadas antes de sua declaração no código. Expressões de função não são hoisted."
O que são IIFE (Immediately Invoked Function Expressions) em JavaScript?,IIFE são funções que são executadas imediatamente após sua criação. Elas são usadas para criar um escopo privado para evitar conflitos de nomes com variáveis globais.
O que é optional chaining (encadeamento opcional) em JavaScript?,"O encadeamento opcional (`?.`) permite acessar propriedades de objetos que podem ser `null` ou `undefined` sem causar um erro. Se uma propriedade na cadeia for `null` ou `undefined`, a expressão retorna `undefined` em vez de lançar um erro."
O que é o objeto `WeakSet` em JavaScript?,"O objeto `WeakSet` permite armazenar objetos de forma ""fraca"". Isso significa que se não houver outras referências a um objeto armazenado em um `WeakSet`, o objeto pode ser coletado pelo garbage collector. `WeakSet` só armazena objetos."
O que é o objeto `WeakMap` em JavaScript?,"O objeto `WeakMap` armazena pares chave-valor, onde as chaves devem ser objetos. Similar ao `WeakSet`, o `WeakMap` permite que os objetos chave sejam coletados pelo garbage collector se não houver outras referências a eles."
O que é TCO (Tail Call Optimization) em JavaScript?,"Tail Call Optimization é uma otimização que alguns engines JavaScript podem realizar em chamadas recursivas de cauda. Uma chamada recursiva de cauda ocorre quando a última operação realizada por uma função é uma chamada para ela mesma. A otimização substitui o frame de pilha da função atual pelo frame da função chamada, evitando o estouro da pilha. No entanto, o suporte para TCO em JavaScript é limitado e inconsistente entre os engines.

Espero que este conjunto de perguntas e respostas seja útil!"
Qual é a diferença entre `undefined` e `null` em JavaScript?,"`undefined` significa que uma variável foi declarada, mas ainda não recebeu um valor. `null` é um valor de atribuição que representa a ausência intencional de qualquer valor ou objeto."
Qual é o propósito do operador `void` em JavaScript?,O operador `void` avalia uma expressão e retorna `undefined`. É frequentemente usado para prevenir que o navegador siga um link.
O que é hoisting em JavaScript e como isso afeta as variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover as declarações de variáveis e funções para o topo do escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto funções declaradas com `function` são completamente hoisted. Variáveis declaradas com `let` e `const` são hoisted, mas não inicializadas, levando a um erro se acessadas antes da declaração."
Como você compara dois objetos em JavaScript para verificar se eles são iguais em conteúdo?,"A comparação direta de objetos com `==` ou `===` verifica se eles referenciam o mesmo objeto na memória, não se possuem o mesmo conteúdo. Para comparar o conteúdo, você precisa iterar sobre as propriedades dos objetos e compará-las individualmente ou usar uma função de serialização para converter os objetos em strings e compará-las."
O que são template literals (template strings) e como são usados?,Template literals são strings que permitem expressões incorporadas. Eles são delimitados por backticks (`) e as expressões são inseridas com `${expressao}`. Eles permitem interpolação de strings e strings multilinha.
Qual é a diferença entre `map` e `forEach` em arrays?,"`map` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. `forEach` executa uma função fornecida uma vez para cada elemento do array, mas não cria um novo array."
O que é o método `reduce` em arrays e como ele funciona?,"`reduce` executa uma função reducer (fornecida por você) em cada elemento do array, resultando em um único valor de saída. A função reducer recebe um acumulador e o valor atual, e retorna o novo acumulador."
Como você lida com erros em JavaScript usando `try...catch`?,"Você envolve o código que pode gerar uma exceção dentro de um bloco `try`. Se uma exceção ocorrer, o bloco `catch` é executado. `try { /* código que pode gerar erro */ } catch (erro) { /* tratamento do erro */ }`"
Qual é a diferença entre os operadores `==` e `===` em JavaScript?,`==` (igualdade) realiza a conversão de tipo antes de comparar. `===` (igualdade estrita) compara sem conversão de tipo. É geralmente recomendado usar `===` para evitar resultados inesperados.
O que é o operador ternário em JavaScript e como ele funciona?,O operador ternário é uma forma abreviada de um `if...else`. Ele tem a seguinte sintaxe: `condição ? expressão_se_verdadeiro : expressão_se_falso`.
Como você impede a propagação de um evento em JavaScript?,Você pode usar o método `event.stopPropagation()` para impedir que o evento se propague para os elementos pai na árvore DOM.
Como você adiciona e remove classes CSS de um elemento usando JavaScript?,"Você pode usar as propriedades `classList.add('nomeDaClasse')` e `classList.remove('nomeDaClasse')` para adicionar e remover classes CSS, respectivamente."
Como você seleciona um elemento HTML pelo seu ID usando JavaScript?,Você pode usar o método `document.getElementById('idDoElemento')` para selecionar um elemento pelo seu ID.
Como você seleciona elementos HTML por sua classe usando JavaScript?,Você pode usar o método `document.getElementsByClassName('nomeDaClasse')` para selecionar elementos por sua classe. Ele retorna uma HTMLCollection de elementos.
Como você seleciona elementos HTML usando um seletor CSS em JavaScript?,Você pode usar `document.querySelector('seletorCSS')` para selecionar o primeiro elemento que corresponda ao seletor CSS ou `document.querySelectorAll('seletorCSS')` para selecionar todos os elementos que correspondam.
Como você altera o texto de um elemento HTML usando JavaScript?,Você pode usar a propriedade `textContent` ou `innerText` do elemento para alterar seu texto.
Como você altera o valor de um atributo de um elemento HTML usando JavaScript?,"Você pode usar o método `setAttribute('nomeDoAtributo', 'novoValor')` para alterar o valor de um atributo."
Como você cria um novo elemento HTML usando JavaScript?,Você pode usar o método `document.createElement('nomeDaTag')` para criar um novo elemento.
Como você define um timeout em JavaScript?,"Você pode usar a função `setTimeout(funcao, atrasoEmMilissegundos)` para executar uma função após um determinado atraso."
Como você define um intervalo em JavaScript?,"Você pode usar a função `setInterval(funcao, intervaloEmMilissegundos)` para executar uma função repetidamente em intervalos regulares."
Como você limpa um timeout em JavaScript?,Você pode usar a função `clearTimeout(idDoTimeout)` para cancelar um timeout agendado.
Como você limpa um intervalo em JavaScript?,Você pode usar a função `clearInterval(idDoIntervalo)` para cancelar um intervalo agendado.
O que são arrow functions em JavaScript e como elas se diferem das funções regulares?,"Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas têm uma sintaxe diferente e não possuem seu próprio `this`, `arguments`, `super` ou `new.target`."
O que é o operador rest (...) em JavaScript?,O operador rest permite que você represente um número indefinido de argumentos como um array.
O que são parâmetros padrão em funções JavaScript?,"Parâmetros padrão permitem que você defina valores padrão para os parâmetros de uma função, que são usados se nenhum valor for fornecido para esses parâmetros quando a função é chamada."
O que é um módulo em JavaScript?,Um módulo é um arquivo JavaScript que encapsula um bloco de código reutilizável.  Eles promovem o isolamento do código e ajudam a evitar conflitos de namespace.
Como você importa um módulo em JavaScript usando `import`?,Você pode usar a declaração `import` para importar módulos: `import { nomeDaFuncao } from './caminho/para/modulo.js';`
Como você exporta um módulo em JavaScript usando `export`?,Você pode usar a declaração `export` para exportar módulos: `export function nomeDaFuncao() { /* código */ }` ou `export default funcao;`
Como você obtém o valor absoluto de um número em JavaScript?,Você pode usar o método `Math.abs(numero)` para obter o valor absoluto de um número.
Como você obtém a data e hora atual em JavaScript?,Você pode criar uma nova instância do objeto `Date`: `const agora = new Date();`
O que é o tipo de dado `symbol` em JavaScript?,`Symbol` é um tipo de dado primitivo introduzido no ES6 que representa um identificador único e imutável.
O que é o tipo de dado `bigint` em JavaScript?,`BigInt` é um tipo de dado primitivo que pode representar números inteiros com precisão arbitrária.
O que é coerção de tipo em JavaScript?,Coerção de tipo é a conversão automática ou implícita de valores de um tipo de dado para outro (como strings para números) em JavaScript.
O que é NaN em JavaScript?,NaN (Not-a-Number) é um valor numérico que representa algo que não é um número. É geralmente o resultado de uma operação matemática inválida.
Como você verifica se um valor é NaN em JavaScript?,"Você pode usar a função `isNaN(valor)` para verificar se um valor é NaN. No entanto, `Number.isNaN(valor)` é mais preciso."
O que é o método `test()` de uma expressão regular em JavaScript?,"O método `test()` retorna `true` se a expressão regular encontrar uma correspondência na string, caso contrário, retorna `false`."
O que é o método `exec()` de uma expressão regular em JavaScript?,O método `exec()` executa uma busca por uma correspondência em uma string especificada. Retorna um array de resultados ou `null` se nenhuma correspondência for encontrada.
O que é o método `match()` de uma string em JavaScript?,O método `match()` retorna um array contendo os resultados da correspondência de uma string com uma expressão regular.
O que é o método `replace()` de uma string em JavaScript?,O método `replace()` retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por um substituto.
O que é o método `search()` de uma string em JavaScript?,O método `search()` executa uma busca por uma correspondência entre uma expressão regular e este objeto `String`. Retorna o índice da primeira correspondência na string.
O que é o método `split()` de uma string em JavaScript?,O método `split()` divide um objeto `String` em um array de strings ao separar a string em substrings.
O que é o método `substring()` de uma string em JavaScript?,"O método `substring()` retorna uma parte da string, entre um índice inicial e um índice final (exclusivo)."
O que é o método `slice()` de uma string em JavaScript?,O método `slice()` extrai uma seção de uma string e retorna uma nova string.
O que é o método `toUpperCase()` de uma string em JavaScript?,O método `toUpperCase()` retorna o valor da string convertida em letras maiúsculas.
O que é o método `toLowerCase()` de uma string em JavaScript?,O método `toLowerCase()` retorna o valor da string convertida em letras minúsculas.
O que é o método `trim()` de uma string em JavaScript?,O método `trim()` remove espaços em branco do início e do fim de uma string.
O que é o método `padStart()` de uma string em JavaScript?,"O método `padStart()` preenche o início da string atual com uma string fornecida (repetidamente, se necessário) para que a string resultante atinja um determinado comprimento."
O que é o método `padEnd()` de uma string em JavaScript?,"O método `padEnd()` preenche o final da string atual com uma string fornecida (repetidamente, se necessário) para que a string resultante atinja um determinado comprimento."
O que é o método `includes()` de uma string em JavaScript?,O método `includes()` determina se uma string contém outra string e retorna `true` ou `false` conforme apropriado.
O que é o método `startsWith()` de uma string em JavaScript?,"O método `startsWith()` determina se uma string começa com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado."
O que é o método `endsWith()` de uma string em JavaScript?,"O método `endsWith()` determina se uma string termina com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado."
O que é o método `indexOf()` de uma string em JavaScript?,O método `indexOf()` retorna o índice da primeira ocorrência de um valor especificado em uma string.
O que é o método `lastIndexOf()` de uma string em JavaScript?,O método `lastIndexOf()` retorna o índice da última ocorrência de um valor especificado em uma string.
Como você converte um número para uma string em JavaScript?,"Você pode usar o método `toString()` do número ou concatenar o número com uma string vazia: `numero.toString()` ou `"""" + numero`."
Como você obtém o comprimento de uma string em JavaScript?,Você pode usar a propriedade `length` da string: `string.length`.
Como você declara um array em JavaScript?,Você pode declarar um array usando literais de array (`[]`) ou usando o construtor `new Array()`.
Como você acessa um elemento de um array em JavaScript?,"Você acessa um elemento de um array usando seu índice, que começa em 0: `array[indice]`."
Como você adiciona um elemento ao início de um array em JavaScript?,Você pode usar o método `unshift(elemento)` para adicionar um elemento ao início do array.
Como você remove o primeiro elemento de um array em JavaScript?,Você pode usar o método `shift()` para remover o primeiro elemento do array.
Como você remove ou substitui elementos em um array em JavaScript?,"Você pode usar o método `splice(indiceInicial, numeroDeElementosParaRemover, elemento1, elemento2, ...)` para remover ou substituir elementos em um array."
Como você concatena dois arrays em JavaScript?,Você pode usar o método `concat(array2)` para criar um novo array que é a concatenação de dois arrays.
Como você cria uma cópia de um array em JavaScript?,Você pode usar o operador spread (`...`) ou o método `slice()` para criar uma cópia de um array: `const novoArray = [...arrayOriginal];` ou `const novoArray = arrayOriginal.slice();`
Como você inverte a ordem dos elementos em um array em JavaScript?,Você pode usar o método `reverse()` para inverter a ordem dos elementos em um array.
Como você ordena os elementos de um array em JavaScript?,"Você pode usar o método `sort()` para ordenar os elementos de um array. Por padrão, ele ordena em ordem alfabética (convertendo os elementos para strings). Você pode passar uma função de comparação para ordenar numericamente."
Como você encontra o índice de um elemento em um array em JavaScript?,Você pode usar o método `indexOf(elemento)` para encontrar o índice da primeira ocorrência de um elemento ou `lastIndexOf(elemento)` para encontrar o índice da última ocorrência.
Como você verifica se um array inclui um determinado elemento em JavaScript?,Você pode usar o método `includes(elemento)` para verificar se um array inclui um determinado elemento.
Como você filtra os elementos de um array com base em uma condição em JavaScript?,Você pode usar o método `filter(funcao)` para criar um novo array com todos os elementos que passam no teste implementado pela função fornecida.
Como você transforma os elementos de um array usando uma função em JavaScript?,Você pode usar o método `map(funcao)` para criar um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
Como você itera sobre os elementos de um array em JavaScript usando um loop `for`?,`for (let i = 0; i < array.length; i++) { /* código */ }`
Como você itera sobre os elementos de um array em JavaScript usando um loop `for...of`?,`for (let elemento of array) { /* código */ }`
Como você cria um objeto em JavaScript?,Você pode criar um objeto usando literais de objeto (`{}`) ou usando o construtor `new Object()`.
Como você acessa as propriedades de um objeto em JavaScript?,Você pode acessar as propriedades de um objeto usando a notação de ponto (`objeto.propriedade`) ou a notação de colchetes (`objeto['propriedade']`).
Como você adiciona uma nova propriedade a um objeto em JavaScript?,Você pode adicionar uma nova propriedade a um objeto usando a notação de ponto ou a notação de colchetes: `objeto.novaPropriedade = valor;` ou `objeto['novaPropriedade'] = valor;`
Como você remove uma propriedade de um objeto em JavaScript?,Você pode usar o operador `delete`: `delete objeto.propriedade;`
Como você verifica se um objeto tem uma determinada propriedade em JavaScript?,Você pode usar o operador `in`: `'propriedade' in objeto;` ou o método `hasOwnProperty('propriedade')`.
Como você define um método em um objeto em JavaScript?,"Você pode definir um método em um objeto como qualquer outra propriedade, atribuindo uma função a ela: `objeto.meuMetodo = function() { /* código */ };`"
O que é a palavra-chave `this` em JavaScript?,A palavra-chave `this` refere-se ao objeto no qual a função está sendo executada. Seu valor depende de como a função é chamada.
Como o valor de `this` é determinado em uma função regular em JavaScript?,"Em uma função regular, o valor de `this` é determinado pelo objeto que invoca a função. Se a função for chamada no escopo global, `this` se refere ao objeto global (window em navegadores, global em Node.js)."
Como o valor de `this` é determinado em uma arrow function em JavaScript?,"Em uma arrow function, `this` herda o valor do escopo léxico circundante. Não é ligado dinamicamente."
O que é o protótipo de um objeto em JavaScript?,"O protótipo de um objeto é outro objeto do qual ele herda propriedades e métodos. Cada objeto tem um protótipo, exceto o objeto raiz."
Como você acessa o protótipo de um objeto em JavaScript?,Você pode acessar o protótipo de um objeto usando a propriedade `__proto__` (não recomendada em código de produção) ou o método `Object.getPrototypeOf(objeto)`.
Como você define o protótipo de um objeto em JavaScript?,"Você pode definir o protótipo de um objeto usando o método `Object.setPrototypeOf(objeto, prototipo)`."
O que é programação orientada a objetos (POO) em JavaScript?,POO é um paradigma de programação que usa objetos para representar entidades e suas interações. JavaScript oferece suporte a POO através de protótipos e classes (introduzidas no ES6).
Como você cria um objeto a partir de uma classe em JavaScript?,Você pode criar um objeto a partir de uma classe usando a palavra-chave `new`: `const meuObjeto = new MinhaClasse();`
O que é o método `super()` em uma classe JavaScript?,O método `super()` é usado dentro de um construtor de classe filha para chamar o construtor da classe pai e acessar suas propriedades e métodos.
O que é herança de classe em JavaScript?,Herança de classe é um mecanismo onde uma classe (classe filha) herda propriedades e métodos de outra classe (classe pai).
Como você implementa herança de classe em JavaScript?,Você pode usar a palavra-chave `extends` para implementar herança de classe: `class ClasseFilha extends ClassePai { /* código */ }`
O que são métodos estáticos em classes JavaScript?,"Métodos estáticos são métodos que pertencem à classe em si, em vez de instâncias da classe. Eles são chamados diretamente na classe e não precisam de uma instância para serem acessados."
Como você define um método estático em uma classe JavaScript?,Você pode definir um método estático usando a palavra-chave `static`: `static meuMetodo() { /* código */ }`
Como você define um getter em uma classe JavaScript?,Você pode definir um getter usando a palavra-chave `get`: `get minhaPropriedade() { /* código */ }`
Como você define um setter em uma classe JavaScript?,Você pode definir um setter usando a palavra-chave `set`: `set minhaPropriedade(valor) { /* código */ }`
O que são promessas em JavaScript?,"Promessas representam o resultado eventual de uma operação assíncrona. Elas podem estar em um de três estados: pendente (pending), resolvida (fulfilled) ou rejeitada (rejected)."
Como você cria uma promessa em JavaScript?,"Você pode criar uma promessa usando o construtor `new Promise((resolve, reject) => { /* código */ });`"
"O que são os métodos `then()`, `catch()` e `finally()` em promessas?",`then()` é usado para lidar com o resultado da promessa quando ela é resolvida. `catch()` é usado para lidar com erros quando a promessa é rejeitada. `finally()` é executado independentemente de a promessa ser resolvida ou rejeitada.
Como você usa `await` em JavaScript?,Você pode usar `await` dentro de uma função assíncrona para esperar que uma promessa seja resolvida: `const resultado = await minhaPromessa;`
Como você define uma função generator em JavaScript?,Você pode definir uma função generator usando o asterisco (`*`): `function* minhaFuncaoGeradora() { /* código */ }`
O que é a palavra-chave `yield` em generators?,A palavra-chave `yield` é usada dentro de uma função generator para pausar a execução e retornar um valor.
Como você itera sobre os valores produzidos por um generator em JavaScript?,Você pode usar um loop `for...of` ou o método `next()` do objeto generator para iterar sobre os valores produzidos.
O que é o strict mode em JavaScript?,Strict mode é uma forma de executar JavaScript com um conjunto mais restrito de regras. Ajuda a prevenir erros e melhorar a segurança do código.
Como você habilita o strict mode em JavaScript?,"Você pode habilitar o strict mode adicionando a string `""use strict"";` no início do arquivo ou da função."
O que são IIFEs (Immediately Invoked Function Expressions) em JavaScript?,IIFEs são funções que são executadas assim que são definidas. Elas são frequentemente usadas para criar escopos isolados e evitar conflitos de namespace.
Como você cria uma IIFE em JavaScript?,Você pode criar uma IIFE envolvendo uma função anônima entre parênteses e invocando-a imediatamente: `(function() { /* código */ })();`
O que é composição de funções em JavaScript?,Composição de funções é um processo de combinar duas ou mais funções para produzir uma nova função.
O que é um polyfill em JavaScript?,Um polyfill é um código que fornece a funcionalidade que você espera que o navegador forneça nativamente. Ele permite que você use recursos mais recentes em navegadores mais antigos.
O que é transpilador em JavaScript?,"Um transpilador é uma ferramenta que converte o código fonte de uma linguagem de programação em outra linguagem de programação. Em JavaScript, os transpiladores são frequentemente usados para converter código ES6+ em código ES5 para compatibilidade com navegadores mais antigos."
O que é linting em JavaScript?,"Linting é o processo de análise estática do código fonte para identificar erros de programação, bugs, erros de estilo e construções suspeitas."
O que é minificação em JavaScript?,"Minificação é o processo de remover todos os caracteres desnecessários do código fonte (como espaços em branco, comentários e nomes de variáveis) para reduzir o tamanho do arquivo."
O que são web workers em JavaScript?,"Web workers permitem que você execute scripts JavaScript em threads de segundo plano, sem afetar o desempenho da página web."
O que é local storage em JavaScript?,Local storage é um recurso do navegador que permite armazenar dados localmente no navegador do usuário. Os dados persistem mesmo após o fechamento do navegador.
O que é session storage em JavaScript?,"Session storage é semelhante ao local storage, mas os dados são armazenados apenas durante a sessão do navegador e são removidos quando o navegador é fechado."
O que é CORS (Cross-Origin Resource Sharing) em JavaScript?,CORS é um mecanismo de segurança do navegador que restringe que páginas da web façam requisições de recursos de um domínio diferente daquele de onde a página se originou.
O que é o padrão de módulo revealing em JavaScript?,"O padrão de módulo revealing é uma maneira de implementar encapsulamento em JavaScript,"
"O que é o conceito de ""hoisting"" em JavaScript?","Hoisting é um comportamento em JavaScript onde declarações de variáveis e funções são movidas para o topo de seu escopo antes da execução do código. Isso significa que você pode usar uma variável ou função antes de sua declaração no código, embora apenas a declaração seja elevada, não a inicialização (no caso de variáveis).

**2.**"
"O que é um ""closure"" em JavaScript e como ele funciona?","Um closure é a combinação de uma função e o ambiente léxico (escopo) em que essa função foi declarada. Ele permite que uma função interna acesse variáveis do escopo externo (função pai) mesmo após a função pai ter retornado.

**4.**"
Como você pode comparar dois objetos em JavaScript para verificar se eles são iguais (têm as mesmas propriedades e valores)?,"A comparação direta de objetos (`obj1 == obj2` ou `obj1 === obj2`) compara as referências, não o conteúdo. Para comparar o conteúdo, é necessário iterar sobre as propriedades de ambos os objetos e comparar seus valores individualmente, ou converter os objetos em strings JSON e comparar as strings.

**5.**"
Explique a diferença entre `==` e `===` em JavaScript.,"`==` é o operador de igualdade abstrata, que realiza a conversão de tipo antes de comparar. `===` é o operador de igualdade estrita, que compara os valores sem conversão de tipo. É geralmente recomendado usar `===` para evitar comportamentos inesperados.

**6.**"
O que é uma função anônima em JavaScript?,"Uma função anônima é uma função que não tem nome. Geralmente é usada como um callback ou atribuída a uma variável.

**7.**"
Como você pode criar uma cópia profunda de um objeto em JavaScript?,"Uma cópia profunda cria um novo objeto com cópias de todos os seus objetos aninhados. Você pode usar `JSON.parse(JSON.stringify(obj))` para criar uma cópia profunda, mas isso tem limitações (não copia funções ou datas corretamente).  Outra opção é usar uma função recursiva para copiar cada propriedade individualmente.

**8.**"
"O que são ""template literals"" em JavaScript e quais são suas vantagens?","Template literals são strings delimitadas por acentos graves (`` ` ``). Elas permitem interpolação de variáveis usando `${}` e strings de múltiplas linhas sem necessidade de concatenação.

**10.**"
O que é o operador `typeof` em JavaScript e quais tipos de dados ele pode retornar?,"O operador `typeof` retorna uma string indicando o tipo de dado de um valor. Os tipos de dados que ele pode retornar incluem: `""string""`, `""number""`, `""bigint""`, `""boolean""`, `""symbol""`, `""undefined""`, `""object""` e `""function""`.  Retorna ""object"" para null.

**11.**"
"O que é ""event bubbling"" em JavaScript?","Event bubbling é um processo onde um evento disparado em um elemento DOM se propaga para cima na árvore DOM, acionando os event listeners de seus elementos pais.

**13.**"
"O que é ""event capturing"" em JavaScript?","Event capturing é o oposto de bubbling. Em vez de começar no elemento mais interno, o evento é primeiro capturado pelo elemento mais externo e, em seguida, propagado para os elementos mais internos.

**14.**"
Como você pode parar a propagação de um evento em JavaScript?,"Você pode usar o método `event.stopPropagation()` dentro de um event listener para impedir que o evento se propague para cima na árvore DOM.

**15.**"
O que são funções de ordem superior (higher-order functions) em JavaScript?,"Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam outras funções como resultado.

**17.**"
O que é o método `map()` em arrays JavaScript?,"O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.

**19.**"
O que é o método `filter()` em arrays JavaScript?,"O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.

**20.**"
O que é o método `reduce()` em arrays JavaScript?,"O método `reduce()` aplica uma função contra um acumulador e cada valor do array (da esquerda para a direita) para reduzi-lo a um único valor.

**21.**"
O que é o método `forEach()` em arrays JavaScript?,"O método `forEach()` executa uma dada função para cada elemento de um array. Ele não retorna um novo array, apenas itera sobre o array existente.

**22.**"
Como você pode converter um valor para um número em JavaScript?,"Você pode usar as funções `Number()`, `parseInt()` ou `parseFloat()` para converter um valor para um número.

**23.**"
Como você pode converter um valor para uma string em JavaScript?,"Você pode usar a função `String()` ou o método `.toString()` para converter um valor para uma string.

**24.**"
Como você pode gerar um número aleatório entre dois valores específicos em JavaScript?,"Você pode usar a fórmula: `Math.floor(Math.random() * (max - min + 1)) + min;`

**26.**"
Quais são alguns métodos comuns do objeto `console`?,"Alguns métodos comuns incluem: `console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`.

**31.**"
O que são variáveis declaradas com `let` em JavaScript?,"Variáveis declaradas com `let` têm escopo de bloco. Elas só são acessíveis dentro do bloco onde foram definidas. Elas não são hoisted.

**32.**"
O que são variáveis declaradas com `const` em JavaScript?,"Variáveis declaradas com `const` também têm escopo de bloco e devem ser inicializadas no momento da declaração. Uma vez atribuído um valor, ele não pode ser reatribuído (embora o objeto referenciado possa ser modificado).

**33.**"
"Qual a diferença entre `var`, `let` e `const` ao declarar variáveis em JavaScript?","`var` tem escopo de função ou escopo global se declarado fora de uma função e é hoisted. `let` e `const` têm escopo de bloco e não são hoisted. `const` é usado para declarar variáveis que não devem ser reatribuídas.

**34.**"
O que é o operador de espalhamento (spread operator) em JavaScript?,"O operador de espalhamento (`...`) permite que você expanda um array ou objeto em elementos individuais.

**35.**"
Como você pode usar o operador de espalhamento para criar uma cópia de um array em JavaScript?,"Você pode usar `[...array]` para criar uma cópia superficial de um array.

**36.**"
Como você pode usar o operador de espalhamento para combinar dois arrays em JavaScript?,"Você pode usar `[...array1, ...array2]` para combinar dois arrays.

**37.**"
O que é desestruturação (destructuring) em JavaScript?,"Desestruturação é uma expressão JavaScript que permite extrair valores de arrays ou propriedades de objetos e atribuí-los a variáveis de forma concisa.

**38.**"
Como você pode desestruturar um objeto em JavaScript?,"Você pode usar a sintaxe `{ propriedade1, propriedade2 } = objeto;` para extrair as propriedades `propriedade1` e `propriedade2` do objeto e atribuí-las a variáveis com os mesmos nomes.

**39.**"
Como você pode desestruturar um array em JavaScript?,"Você pode usar a sintaxe `[elemento1, elemento2] = array;` para extrair os elementos `elemento1` e `elemento2` do array e atribuí-los a variáveis.

**40.**"
Como você lida com o resultado de uma promise bem-sucedida em JavaScript?,"Você usa o método `.then()` para registrar uma função de callback que será chamada quando a promise for resolvida.

**50.**"
Como você lida com o erro de uma promise rejeitada em JavaScript?,"Você usa o método `.catch()` para registrar uma função de callback que será chamada quando a promise for rejeitada.

**51.**"
O que é o bloco `finally()` em promises JavaScript?,"O bloco `finally()` é executado sempre, independentemente de a promise ter sido resolvida ou rejeitada.  É usado para limpar recursos.

**52.**"
O que a palavra-chave `await` faz em JavaScript?,"A palavra-chave `await` pausa a execução de uma função assíncrona até que uma promise seja resolvida. Ela só pode ser usada dentro de uma função `async`.

**55.**"
Como você lida com erros dentro de uma função `async/await` em JavaScript?,"Você pode usar um bloco `try...catch` para capturar erros que ocorram durante a execução da função assíncrona.

**56.**"
O que são expressões regulares (regex) em JavaScript?,"Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings.

**57.**"
Quais são alguns métodos comuns usados com expressões regulares em JavaScript?,"Alguns métodos comuns incluem: `test()`, `exec()`, `match()`, `search()`, `replace()`, `split()`.

**59.**"
O que o método `test()` faz com expressões regulares em JavaScript?,"O método `test()` verifica se uma string corresponde a um padrão e retorna `true` ou `false`.

**60.**"
O que o método `exec()` faz com expressões regulares em JavaScript?,"O método `exec()` procura uma correspondência em uma string e retorna um array com informações sobre a correspondência, ou `null` se não houver correspondência.

**61.**"
Qual a diferença entre os métodos `match()` e `exec()` em JavaScript quando usados com expressões regulares?,"`match()` é um método de string que recebe uma regex como argumento, enquanto `exec()` é um método de regex que recebe uma string como argumento. `match()` retorna um array de resultados (ou null), enquanto `exec()` retorna um objeto com mais detalhes sobre a primeira correspondência (ou null).

**62.**"
O que são quantificadores em expressões regulares? Dê um exemplo.,"Quantificadores especificam quantas vezes um elemento deve ocorrer para haver uma correspondência. Exemplo: `*` (zero ou mais vezes), `+` (uma ou mais vezes), `?` (zero ou uma vez), `{n}` (exatamente n vezes), `{n,}` (pelo menos n vezes), `{n,m}` (entre n e m vezes).

**63.**"
O que são classes de caracteres em expressões regulares? Dê um exemplo.,"Classes de caracteres definem um conjunto de caracteres para corresponder. Exemplo: `[abc]` (corresponde a 'a', 'b' ou 'c'), `[a-z]` (corresponde a qualquer letra minúscula), `[0-9]` (corresponde a qualquer dígito), `.` (corresponde a qualquer caractere exceto nova linha).

**64.**"
O que são âncoras em expressões regulares? Dê um exemplo.,"Âncoras especificam uma posição na string onde a correspondência deve ocorrer. Exemplo: `^` (início da string), `$` (fim da string), `\b` (limite de palavra).

**65.**"
O que é o método `String.prototype.startsWith()` em JavaScript?,"O método `startsWith()` determina se uma string começa com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado.

**66.**"
O que é o método `String.prototype.endsWith()` em JavaScript?,"O método `endsWith()` determina se uma string termina com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado.

**67.**"
O que é o método `String.prototype.includes()` em JavaScript?,"O método `includes()` determina se uma string contém os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado.

**68.**"
O que é o método `String.prototype.repeat()` em JavaScript?,"O método `repeat()` constrói e retorna uma nova string que contém o número especificado de cópias concatenadas da string na qual foi chamado.

**69.**"
Como você pode remover espaços em branco do início e do fim de uma string em JavaScript?,"Você pode usar o método `trim()`.

**70.**"
O que é o método `String.prototype.padStart()` em JavaScript?,"O método `padStart()` preenche a string atual com outra string (repetidamente, se necessário) para que a string resultante atinja um determinado comprimento. O preenchimento é aplicado desde o início (lado esquerdo) da string atual.

**71.**"
O que é o método `String.prototype.padEnd()` em JavaScript?,"O método `padEnd()` preenche a string atual com uma string fornecida (repetidamente, se necessário) para que a string resultante atinja um dado comprimento. O preenchimento é aplicado a partir do final (lado direito) da string atual.

**72.**"
"Quais são os valores considerados ""falsy"" em JavaScript?","`false`, `0`, `-0`, `0n`, `""""` (string vazia), `null`, `undefined`, e `NaN`.

**74.**"
O que é o operador de negação lógica `!` em JavaScript?,"O operador `!` inverte o valor booleano de um operando. Se o operando for truthy, ele retornará `false`. Se o operando for falsy, ele retornará `true`.

**75.**"
O que é o método `Array.prototype.find()` em JavaScript?,"O método `find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`.

**76.**"
O que é o método `Array.prototype.findIndex()` em JavaScript?,"O método `findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1.

**77.**"
O que é o método `Array.prototype.some()` em JavaScript?,"O método `some()` testa se ao menos um elemento no array passa no teste implementado pela função fornecida. Retorna `true` se, no array, encontrar um elemento para o qual a função fornecida retorna `true`; caso contrário, retorna `false`.

**78.**"
O que é o método `Array.prototype.every()` em JavaScript?,"O método `every()` testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna `true` se todos os elementos no array passam no teste; caso contrário, retorna `false`.

**79.**"
O que é o método `Array.prototype.includes()` em JavaScript (para arrays)?,"O método `includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado.

**80.**"
O que é o método `Array.prototype.slice()` em JavaScript?,"O método `slice()` retorna uma cópia de parte de um array dentro de um novo array começando pelo índice inicial até o índice final (final não incluído). O array original não será modificado.

**87.**"
Como você pode ordenar um array em JavaScript?,"Você pode usar o método `Array.prototype.sort()`. Por padrão, ele ordena os elementos como strings. Você pode passar uma função de comparação para personalizar a ordenação.

**88.**"
Como você pode inverter a ordem dos elementos em um array em JavaScript?,"Você pode usar o método `Array.prototype.reverse()`.

**89.**"
Como você pode selecionar um elemento HTML pelo seu ID em JavaScript?,"Você pode usar o método `document.getElementById('id')`.

**93.**"
Como você pode selecionar elementos HTML por sua classe em JavaScript?,"Você pode usar o método `document.getElementsByClassName('classe')`. Ele retorna uma HTMLCollection.

**94.**"
Como você pode selecionar elementos HTML por sua tag name em JavaScript?,"Você pode usar o método `document.getElementsByTagName('tag')`. Ele retorna uma HTMLCollection.

**95.**"
O que são `HTMLCollection` e `NodeList` em JavaScript? Qual a diferença?,"Ambos representam coleções de elementos DOM. `HTMLCollection` é uma coleção *viva* (as mudanças no DOM são refletidas automaticamente), enquanto `NodeList` pode ser *viva* ou *estática* (dependendo do método usado para criá-la). `getElementsByClassName` e `getElementsByTagName` retornam `HTMLCollection`. `querySelectorAll` retorna uma `NodeList` estática.

**96.**"
Como você pode selecionar elementos HTML usando seletores CSS em JavaScript?,"Você pode usar o método `document.querySelector('seletorCSS')` para selecionar o primeiro elemento que corresponde ao seletor ou `document.querySelectorAll('seletorCSS')` para selecionar todos os elementos que correspondem ao seletor.

**97.**"
Como você pode acessar o conteúdo de texto de um elemento HTML em JavaScript?,"Você pode usar a propriedade `textContent` ou `innerText`. `textContent` retorna o texto de todos os elementos, mesmo os ocultos, enquanto `innerText` retorna o texto renderizado visível.

**98.**"
Como você pode modificar o conteúdo HTML de um elemento em JavaScript?,"Você pode usar a propriedade `innerHTML`.

**99.**"
Como você pode adicionar um novo elemento HTML ao DOM em JavaScript?,"Primeiro, crie o elemento com `document.createElement('tag')`. Em seguida, defina suas propriedades. Finalmente, adicione-o ao DOM usando métodos como `appendChild()`, `insertBefore()` ou `append()`.

**100.**"
Como você pode remover um elemento HTML do DOM em JavaScript?,"Você pode usar o método `element.remove()` ou `parentElement.removeChild(element)`.

**101.**"
Como você pode adicionar um atributo a um elemento HTML em JavaScript?,"Você pode usar o método `element.setAttribute('nomeDoAtributo', 'valorDoAtributo')`.

**102.**"
Como você pode remover um atributo de um elemento HTML em JavaScript?,"Você pode usar o método `element.removeAttribute('nomeDoAtributo')`.

**103.**"
Como você pode obter o valor de um atributo de um elemento HTML em JavaScript?,"Você pode usar o método `element.getAttribute('nomeDoAtributo')`.

**104.**"
Como você pode adicionar ou remover classes CSS de um elemento HTML em JavaScript?,"Você pode usar a propriedade `element.classList`. Métodos incluem `add()`, `remove()`, `toggle()` e `contains()`.

**105.**"
Como você pode adicionar um event listener a um elemento HTML em JavaScript?,"Você pode usar o método `element.addEventListener('nomeDoEvento', funcaoCallback)`.

**106.**"
O que é o objeto `event` passado para um event listener em JavaScript?,"O objeto `event` contém informações sobre o evento que ocorreu, como o elemento alvo, o tipo de evento e quaisquer dados adicionais.

**107.**"
Quais são alguns eventos comuns em JavaScript?,"`click`, `mouseover`, `mouseout`, `keydown`, `keyup`, `submit`, `load`, `DOMContentLoaded`.

**108.**"
O que é o evento `DOMContentLoaded` em JavaScript?,"O evento `DOMContentLoaded` é disparado quando o documento HTML é totalmente carregado e analisado, sem esperar que imagens, folhas de estilo e subframes terminem de carregar.

**109.**"
O que é o evento `load` em JavaScript?,"O evento `load` é disparado quando todo o documento, incluindo todos os recursos dependentes, como imagens e folhas de estilo, terminou de carregar.

**110.**"
Como você pode redirecionar o navegador para outra URL em JavaScript?,"Você pode usar a propriedade `window.location.href = 'URL'`.

**113.**"
Como você pode obter a URL atual em JavaScript?,"Você pode usar a propriedade `window.location.href` ou `document.URL`.

**114.**"
Como você pode voltar para a página anterior no histórico do navegador em JavaScript?,"Você pode usar o método `window.history.back()`.

**116.**"
Como você pode avançar para a próxima página no histórico do navegador em JavaScript?,"Você pode usar o método `window.history.forward()`.

**117.**"
Como você pode ler um cookie em JavaScript?,"Você pode acessar a string de cookies usando a propriedade `document.cookie`. Essa string contém todos os cookies, separados por ponto e vírgula.

**119.**"
Como você pode definir um cookie em JavaScript?,"Você pode definir um cookie atribuindo uma string ao `document.cookie`. A string deve conter o nome do cookie, o valor e outras opções, como a data de expiração.

**120.**"
Como você pode excluir um cookie em JavaScript?,"Você pode excluir um cookie definindo sua data de expiração para uma data no passado.

**121.**"
O que é Local Storage em JavaScript?,"Local Storage é um mecanismo de armazenamento web que permite armazenar dados no navegador do usuário persistentemente, mesmo após o fechamento do navegador. Os dados são armazenados localmente e não são enviados para o servidor com cada requisição.

**122.**"
Como você pode armazenar dados no Local Storage em JavaScript?,"Você pode usar o método `localStorage.setItem('chave', 'valor')`.

**123.**"
Como você pode recuperar dados do Local Storage em JavaScript?,"Você pode usar o método `localStorage.getItem('chave')`.

**124.**"
Como você pode remover um item do Local Storage em JavaScript?,"Você pode usar o método `localStorage.removeItem('chave')`.

**125.**"
Como você pode limpar todo o Local Storage em JavaScript?,"Você pode usar o método `localStorage.clear()`.

**126.**"
O que é Session Storage em JavaScript?,"Session Storage é semelhante ao Local Storage, mas os dados são armazenados apenas para a duração da sessão do navegador. Os dados são perdidos quando o navegador é fechado.

**127.**"
Como você pode armazenar dados no Session Storage em JavaScript?,"Você pode usar o método `sessionStorage.setItem('chave', 'valor')`.

**128.**"
Qual a diferença principal entre Local Storage e Session Storage?,"Local Storage é persistente (os dados permanecem mesmo após o fechamento do navegador), enquanto Session Storage é temporário (os dados são perdidos quando o navegador é fechado).

**129.**"
Como você pode converter um objeto JavaScript em uma string JSON?,"Você pode usar o método `JSON.stringify(objeto)`.

**131.**"
Como você pode converter uma string JSON em um objeto JavaScript?,"Você pode usar o método `JSON.parse(stringJSON)`.

**132.**"
Como você pode lançar uma exceção em JavaScript?,"Você pode usar a instrução `throw`. Exemplo: `throw new Error('Mensagem de erro')`.

**134.**"
Como você pode lidar com exceções em JavaScript?,"Você pode usar um bloco `try...catch` para capturar e lidar com exceções.

**135.**"
"O que são os tipos de erro `TypeError`, `ReferenceError` e `SyntaxError` em JavaScript?","`TypeError` é lançado quando uma operação não pode ser executada devido a um tipo de valor inesperado. `ReferenceError` é lançado quando você tenta usar uma variável que não foi declarada. `SyntaxError` é lançado quando há um erro de sintaxe no código.

**138.**"
"O que é o conceito de ""hoisting"" em JavaScript e como ele afeta variáveis e funções?","Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto funções declaradas como function declarations são totalmente hoisted. Variáveis declaradas com `let` e `const` também são hoisted, mas não inicializadas, resultando em um erro se acessadas antes da declaração.

**3.**"
O que é uma closure em JavaScript e como ela funciona?,"Uma closure é a capacidade de uma função de lembrar e acessar variáveis do escopo léxico onde foi criada, mesmo depois que esse escopo já não existe mais. Ela permite que funções internas acessem variáveis da função externa.

**5.**"
Descreva a diferença entre `==` e `===` em JavaScript.,"`==` é o operador de igualdade abstrata, que realiza conversão de tipo antes de comparar. `===` é o operador de igualdade estrita, que não realiza conversão de tipo e compara apenas se os tipos e valores são idênticos.

**6.**"
O que são template literals em JavaScript e quais são suas vantagens?,"Template literals são strings delimitadas por backticks (`), que permitem a interpolação de expressões e strings multilinhas. Suas vantagens incluem melhor legibilidade e facilidade de uso para criar strings dinâmicas.

**7.**"
Explique o que são funções de primeira classe em JavaScript.,"Funções de primeira classe significa que funções podem ser tratadas como qualquer outra variável. Elas podem ser atribuídas a variáveis, passadas como argumentos para outras funções e retornadas como valores de outras funções.

**9.**"
"Qual é a diferença entre `let`, `const` e `var` ao declarar variáveis em JavaScript?","`var` tem escopo de função ou global, `let` tem escopo de bloco e `const` também tem escopo de bloco, mas declara variáveis que não podem ser reatribuídas após a inicialização.

**10.**"
O que é o operador ternário em JavaScript e como ele é usado?,"O operador ternário é uma forma concisa de escrever uma instrução `if...else`. Sua sintaxe é `condição ? expressão_se_verdadeiro : expressão_se_falso`.

**11.**"
O que é o método `Array.map()` em JavaScript e como ele funciona?,"`Array.map()` cria um novo array com os resultados da chamada de uma função fornecida para cada elemento no array chamador.

**13.**"
Explique o que é o método `Array.filter()` em JavaScript e como ele é utilizado.,"`Array.filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.

**14.**"
O que é o método `Array.reduce()` em JavaScript e qual é sua finalidade?,"`Array.reduce()` aplica uma função a um acumulador e a cada valor do array (da esquerda para a direita) para reduzi-lo a um único valor.

**15.**"
Descreva o que é o JSON e como você pode trabalhar com ele em JavaScript.,"JSON (JavaScript Object Notation) é um formato de dados leve e legível por humanos. Em JavaScript, você pode usar os métodos `JSON.parse()` para converter uma string JSON em um objeto JavaScript e `JSON.stringify()` para converter um objeto JavaScript em uma string JSON.

**17.**"
O que são funções anônimas em JavaScript e como elas são usadas?,"Funções anônimas são funções que não têm um nome. Elas são frequentemente usadas como argumentos para outras funções (callbacks) ou atribuídas a variáveis.

**18.**"
"Explique o conceito de ""event delegation"" em JavaScript.","Event delegation é uma técnica que permite anexar um único ouvinte de evento a um elemento pai, em vez de anexar ouvintes de evento individuais a cada elemento filho. Isso pode melhorar o desempenho, especialmente quando há muitos elementos filhos.

**19.**"
O que são Promises em JavaScript e como elas ajudam a lidar com operações assíncronas?,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas fornecem uma maneira mais estruturada de lidar com callbacks, tornando o código mais legível e fácil de manter. Uma Promise pode estar em um dos três estados: pendente, resolvida ou rejeitada.

**20.**"
Descreva o uso de `async` e `await` em JavaScript.,"`async` e `await` são usados para simplificar o tratamento de Promises. A palavra-chave `async` é usada para definir uma função assíncrona, e a palavra-chave `await` é usada dentro de uma função assíncrona para pausar a execução até que uma Promise seja resolvida.

**21.**"
O que é o operador spread (...) em JavaScript e quais são seus usos?,"O operador spread (...) permite expandir um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados. Ele é usado para copiar arrays/objetos, concatenar arrays e passar argumentos variáveis para funções.

**22.**"
"Qual é a diferença entre `call()`, `apply()` e `bind()` em JavaScript?","`call()` e `apply()` são usados para invocar uma função com um valor `this` específico e argumentos. `call()` aceita argumentos individualmente, enquanto `apply()` aceita um array de argumentos. `bind()` cria uma nova função com um valor `this` específico e argumentos predefinidos, sem invocar a função imediatamente.

**23.**"
"O que é o conceito de ""currying"" em JavaScript e como ele é implementado?","Currying é uma técnica que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada. Cada chamada retorna uma nova função que espera o próximo argumento.

**24.**"
Explique o que são Generators em JavaScript e como eles funcionam.,"Generators são funções que podem ser pausadas e retomadas, permitindo a criação de iteradores personalizados. Elas usam a palavra-chave `yield` para retornar valores e pausar a execução.

**25.**"
O que são Iterators em JavaScript e como eles são usados?,"Iterators são objetos que definem uma sequência e, ao finalizar, retornam um valor. O protocolo Iterator define um método `next()` que retorna um objeto com duas propriedades: `value` (o próximo valor na sequência) e `done` (um booleano que indica se a sequência foi concluída).

**26.**"
Descreva o que é o `window` object em JavaScript (em um ambiente de navegador).,"O `window` é o objeto global no contexto do navegador. Ele representa a janela do navegador e fornece acesso a métodos e propriedades relacionados à janela, como `document`, `location`, `history`, etc.

**27.**"
Como você pode adicionar ou remover classes CSS de um elemento usando JavaScript?,"Você pode usar a propriedade `classList` de um elemento para adicionar, remover ou alternar classes CSS. Métodos como `element.classList.add('classe')`, `element.classList.remove('classe')` e `element.classList.toggle('classe')` são usados para essa finalidade.

**28.**"
O que é o DOM (Document Object Model) e como você pode manipular elementos do DOM usando JavaScript?,"O DOM é uma representação em árvore da estrutura de um documento HTML ou XML. JavaScript pode ser usado para acessar e manipular elementos do DOM, permitindo que você altere o conteúdo, estilo e estrutura da página dinamicamente. Métodos como `document.getElementById()`, `document.querySelector()`, `document.createElement()`, `element.appendChild()` e `element.removeChild()` são usados para manipulação do DOM.

**29.**"
O que são atributos `data-*` em HTML e como você pode acessá-los usando JavaScript?,"Atributos `data-*` são atributos HTML personalizados que permitem armazenar dados privados personalizados em elementos HTML. Você pode acessá-los usando a propriedade `dataset` de um elemento, ex: `element.dataset.nomeDoAtributo`.

**30.**"
Como você pode evitar memory leaks em JavaScript?,"Para evitar memory leaks, é importante remover event listeners quando não são mais necessários, evitar referências circulares entre objetos, liberar variáveis que não serão mais usadas (atribuindo `null` ou `undefined`), e usar ferramentas de análise de memória para identificar problemas.

**31.**"
O que é o operador `void` em JavaScript e qual é o seu uso?,"O operador `void` avalia uma expressão e retorna `undefined`. Ele é usado para evitar que o navegador siga um link (por exemplo, em um atributo `href`) ou para evitar que uma função retorne um valor inesperado.

**32.**"
Explique o que são expressões regulares (RegEx) em JavaScript e como elas são usadas.,"Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings. Em JavaScript, elas são usadas para validar formatos de dados, pesquisar e substituir texto, e realizar outras operações de manipulação de strings.

**33.**"
Como você pode trabalhar com datas em JavaScript?,"JavaScript fornece o objeto `Date` para trabalhar com datas. Você pode criar objetos `Date` para representar datas e horas específicas, obter e definir componentes de data (ano, mês, dia, hora, etc.) e formatar datas para exibição.

**34.**"
O que é o método `String.prototype.substring()` e qual a diferença para `String.prototype.slice()`?,"Tanto `substring()` quanto `slice()` extraem uma parte de uma string e retornam uma nova string. A principal diferença é como eles lidam com argumentos negativos. `substring()` trata argumentos negativos como 0, enquanto `slice()` os interpreta como deslocamentos do final da string.

**35.**"
Como você pode clonar um objeto em JavaScript?,"Você pode clonar um objeto usando o operador spread (`...`), o método `Object.assign()` para shallow copies, ou usando `JSON.parse(JSON.stringify(obj))` para deep copies (com limitações).

**36.**"
Explique o que é a função `eval()` em JavaScript e por que seu uso geralmente é desencorajado.,"A função `eval()` avalia uma string como código JavaScript. Seu uso é desencorajado devido a problemas de segurança (pode executar código malicioso) e desempenho (dificulta a otimização pelo motor JavaScript).

**37.**"
O que são arrow functions em JavaScript e quais são suas principais diferenças em relação às funções regulares?,"Arrow functions são uma sintaxe mais concisa para escrever funções em JavaScript. Suas principais diferenças incluem a ausência de um `this` próprio (herdam o `this` do contexto léxico), não possuem `arguments` object e não podem ser usadas como construtoras (não podem ser instanciadas com `new`).

**38.**"
Como você pode importar e exportar módulos em JavaScript usando `import` e `export`?,"Você pode usar `export` para exportar variáveis, funções ou classes de um módulo e `import` para importar esses elementos em outro módulo. Existem named exports (exportações nomeadas) e default exports (exportação padrão).

**39.**"
"O que é o conceito de ""truthy"" e ""falsy"" values em JavaScript?","Truthy values são valores que são avaliados como `true` em um contexto booleano, enquanto falsy values são valores que são avaliados como `false`. Falsy values incluem `false`, `0`, `""""` (string vazia), `null`, `undefined` e `NaN`. Todos os outros valores são truthy.

**40.**"
Como você pode verificar se uma propriedade existe em um objeto JavaScript?,"Você pode usar o operador `in` (ex: `'propriedade' in objeto`), o método `hasOwnProperty()` (ex: `objeto.hasOwnProperty('propriedade')`) ou simplesmente acessar a propriedade e verificar se o valor é diferente de `undefined` (ex: `objeto.propriedade !== undefined`).

**41.**"
O que é o objeto `arguments` dentro de uma função em JavaScript (especialmente em funções não-arrow)?,"`arguments` é um objeto semelhante a um array que contém os argumentos passados para uma função. Ele está disponível apenas em funções declaradas com a palavra-chave `function` e não em arrow functions.

**42.**"
Qual a diferença entre `preventDefault()` e `stopPropagation()` em manipulação de eventos?,"`preventDefault()` impede o comportamento padrão de um evento (por exemplo, um link seguindo para um URL). `stopPropagation()` impede que o evento se propague para elementos pais na árvore DOM.

**43.**"
O que são Web Workers em JavaScript e qual o propósito deles?,"Web Workers permitem executar scripts JavaScript em threads em segundo plano, sem bloquear a thread principal da UI. Isso é útil para realizar tarefas computacionalmente intensivas ou operações de rede sem comprometer a responsividade da interface do usuário.

**44.**"
Como você pode debugar código JavaScript em um navegador?,"Você pode usar as ferramentas de desenvolvedor do navegador (geralmente acessíveis pressionando F12) para debugar JavaScript. Elas permitem definir breakpoints, inspecionar variáveis, executar o código passo a passo e analisar logs.

**45.**"
"O que é o conceito de ""throttling"" e ""debouncing"" em JavaScript, e quando são usados?","Throttling limita a frequência com que uma função pode ser executada. Debouncing atrasa a execução de uma função até que um período de inatividade tenha passado. Ambos são usados para otimizar o desempenho, especialmente em resposta a eventos frequentes, como redimensionamento da janela ou entrada do usuário.

**46.**"
O que é o Local Storage e Session Storage em JavaScript e qual a diferença entre eles?,"Local Storage e Session Storage são APIs de armazenamento web que permitem armazenar dados localmente no navegador do usuário. Local Storage armazena dados permanentemente (até serem explicitamente removidos), enquanto Session Storage armazena dados apenas durante a duração da sessão do navegador.

**47.**"
"Como você pode detectar o tipo de dispositivo (mobile, tablet, desktop) usando JavaScript?","Você pode inspecionar a propriedade `navigator.userAgent` para obter informações sobre o navegador e o sistema operacional do usuário. No entanto, essa abordagem não é totalmente confiável devido a spoofing.  Outra abordagem é usar media queries CSS em conjunto com `window.matchMedia()` para verificar as características da tela.

**48.**"
O que é o uso do `Symbol` em JavaScript?,"`Symbol` é um tipo de dado primitivo que representa um identificador único e imutável. É frequentemente usado como chave de propriedade de objeto para evitar colisões com outras propriedades.

**49.**"
Como funciona o mecanismo de Garbage Collection em JavaScript?,"O Garbage Collection é o processo automático de liberar memória que não está mais sendo usada pelo programa. O JavaScript usa um garbage collector ""mark and sweep"" que identifica objetos que não são mais acessíveis a partir da raiz (objetos globais e variáveis ativas) e libera a memória que eles ocupam.

**50.**"
O que são Map e Set em JavaScript e qual a diferença entre eles e objetos e arrays?,"`Map` é uma coleção de pares chave-valor onde as chaves podem ser de qualquer tipo de dado. `Set` é uma coleção de valores únicos. Diferentemente de objetos, as chaves de um Map podem ser de qualquer tipo, e a ordem de inserção é preservada. Diferentemente de arrays, Sets garantem que cada valor seja único.

Continuando com mais perguntas e respostas exclusivas:

**51.**"
O que é o `Proxy` object em JavaScript e como ele pode ser usado?,"O `Proxy` object permite interceptar e personalizar operações fundamentais em objetos, como leitura, escrita, enumeração e chamadas de função. Ele é usado para criar wrappers, validar acesso a propriedades e implementar comportamento personalizado.

**52.**"
Como você pode verificar se um valor é um array em JavaScript?,"Você pode usar `Array.isArray(valor)` para verificar se um valor é um array.

**53.**"
Explique o que é destructuring em JavaScript e como ele é usado em arrays e objetos.,"Destructuring é uma forma concisa de extrair valores de objetos ou arrays e atribuí-los a variáveis. Ele simplifica a atribuição de valores e torna o código mais legível. Ex: `const { nome, idade } = pessoa;` ou `const [ primeiro, segundo ] = array;`

**54.**"
O que é a diferença entre `forEach` e um loop `for...in` ao iterar sobre um array?,"`forEach` itera sobre os valores de um array, enquanto `for...in` itera sobre os *índices* das propriedades enumeráveis de um objeto (o que inclui os índices de um array, mas não é recomendado para iterar arrays). `forEach` é geralmente preferível para iterar sobre arrays.

**55.**"
O que é a diferença entre `forEach` e um loop `for...of` ao iterar sobre um array?,"`forEach` é um método de array que executa uma função para cada elemento.  `for...of` é uma sintaxe de loop que itera sobre os *valores* de um objeto iterável (como um array). `for...of` permite usar `break` e `continue`, o que não é possível com `forEach`.

**56.**"
Como você pode converter um NodeList (retornado por `querySelectorAll`) para um array em JavaScript?,"Você pode usar `Array.from(nodeList)`, o operador spread `[...nodeList]` ou `Array.prototype.slice.call(nodeList)` para converter um NodeList para um array.

**57.**"
O que é a diferença entre uma shallow copy e uma deep copy de um objeto em JavaScript?,"Uma shallow copy cria uma nova referência para o objeto, mas as propriedades do objeto original ainda são compartilhadas com a cópia. Uma deep copy cria um novo objeto e copia recursivamente todos os valores do objeto original, de forma que a cópia e o original sejam completamente independentes.

**58.**"
Como você pode criar um timer (setTimeout e setInterval) em JavaScript?,"`setTimeout(funcao, atraso)` executa uma função após um atraso especificado em milissegundos. `setInterval(funcao, intervalo)` executa uma função repetidamente em um intervalo especificado em milissegundos.

**59.**"
Como você pode limpar um timer criado com `setTimeout` ou `setInterval`?,"Use `clearTimeout(idDoTimer)` para limpar um timer criado com `setTimeout` e `clearInterval(idDoTimer)` para limpar um timer criado com `setInterval`.

**60.**"
O que são eventos customizados em JavaScript e como você pode dispará-los e ouvi-los?,"Eventos customizados são eventos que você define e dispara manualmente. Você pode criar um evento usando `new Event('nomeDoEvento')`, dispará-lo usando `element.dispatchEvent(evento)` e ouvi-lo usando `element.addEventListener('nomeDoEvento', funcao)`.

**61.**"
"O que é ""event bubbling"" e ""event capturing"" em JavaScript?","Event bubbling é o processo em que um evento disparado em um elemento filho se propaga para seus elementos pais na árvore DOM. Event capturing é o oposto, onde o evento é primeiro capturado pelo elemento pai e, em seguida, propagado para o elemento filho.

**62.**"
Como você pode usar o método `fetch()` para fazer requisições HTTP em JavaScript?,"O método `fetch()` retorna uma Promise que resolve para a resposta da requisição. Você pode usar `.then()` para processar a resposta e `.catch()` para lidar com erros. Exemplo: `fetch('url').then(response => response.json()).then(data => console.log(data)).catch(error => console.error(error));`

**63.**"
O que é CORS (Cross-Origin Resource Sharing) e como ele afeta as requisições `fetch()` em JavaScript?,"CORS é um mecanismo de segurança que restringe requisições HTTP feitas a um domínio diferente do domínio do script que está sendo executado. Se o servidor não enviar os cabeçalhos CORS corretos, o navegador bloqueará a requisição.

**64.**"
O que é um Service Worker em JavaScript e quais são seus casos de uso?,"Service Workers são scripts que rodam em segundo plano, separados da página web. Eles podem interceptar e controlar requisições de rede, armazenar em cache recursos, e fornecer notificações push. São usados para criar experiências offline, melhorar o desempenho e habilitar recursos como Progressive Web Apps (PWAs).

**65.**"
Como você pode usar o operador `??` (nullish coalescing operator) em JavaScript?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Ele é diferente do operador `||`, que retorna o operando do lado direito quando o operando do lado esquerdo é falsy.

**66.**"
O que é o Optional Chaining Operator `?.` em JavaScript e como ele funciona?,"O Optional Chaining Operator `?.` permite acessar propriedades de um objeto que podem ser `null` ou `undefined` sem causar um erro. Se a propriedade anterior for `null` ou `undefined`, a expressão retorna `undefined` imediatamente. Ex: `objeto?.propriedade?.subPropriedade`.

**67.**"
Explique o que é o `this` keyword em JavaScript e como seu valor pode variar dependendo do contexto.,"`this` refere-se ao objeto no qual a função está sendo executada. Seu valor depende de como a função é chamada. Em funções globais, `this` geralmente se refere ao objeto global (window no navegador). Em métodos de objeto, `this` se refere ao objeto. Em event handlers, `this` se refere ao elemento que disparou o evento. Em arrow functions, `this` herda o contexto léxico da função pai.

**68.**"
O que é a diferença entre usar `bind()` e uma arrow function para manter o contexto do `this` dentro de um callback?,"`bind()` cria uma nova função com o `this` especificado. Uma arrow function captura o valor do `this` do escopo léxico em que foi definida, sem criar um novo contexto. Arrow functions são geralmente preferíveis porque são mais concisas e evitam a criação de funções desnecessárias.

**69.**"
O que é a função `Object.freeze()` em JavaScript e qual o seu efeito?,"`Object.freeze()` impede que novas propriedades sejam adicionadas a um objeto e impede que as propriedades existentes sejam removidas. Também impede a alteração dos valores das propriedades existentes. No entanto, as propriedades que contêm objetos ainda podem ser alteradas (shallow freeze).

**70.**"
O que é a função `Object.seal()` em JavaScript e qual o seu efeito?,"`Object.seal()` impede que novas propriedades sejam adicionadas a um objeto e impede que as propriedades existentes sejam removidas. No entanto, os valores das propriedades existentes ainda podem ser alterados.

**71.**"
Como você pode ordenar um array de objetos em JavaScript com base em uma propriedade específica?,"Use o método `array.sort()` com uma função de comparação que retorna um valor negativo, zero ou positivo dependendo da ordem desejada. A função de comparação deve comparar os valores da propriedade que você deseja usar para ordenar.

**72.**"
O que são WeakMap e WeakSet em JavaScript e qual a principal diferença para Map e Set?,"`WeakMap` e `WeakSet` são versões ""fracas"" de `Map` e `Set`. A principal diferença é que as chaves de um `WeakMap` e os valores de um `WeakSet` devem ser objetos. Além disso, eles não impedem que esses objetos sejam coletados pelo garbage collector se não houver outras referências a eles.

**73.**"
Como você pode lidar com erros em JavaScript usando `try...catch...finally`?,"O bloco `try` contém o código que pode lançar uma exceção. O bloco `catch` captura a exceção se ela for lançada. O bloco `finally` é executado sempre, independentemente de uma exceção ter sido lançada ou não.

**74.**"
O que é o operador `instanceof` em JavaScript e como ele é usado?,"O operador `instanceof` verifica se um objeto é uma instância de uma determinada classe ou construtor. Ele retorna `true` se o objeto for uma instância da classe ou construtor, e `false` caso contrário.

**75.**"
O que é uma função construtora em JavaScript e como você pode usá-la para criar objetos?,"Uma função construtora é uma função usada para criar objetos. Ela é chamada com a palavra-chave `new`. Dentro da função construtora, `this` se refere ao novo objeto que está sendo criado.

**76.**"
Qual é a diferença entre herança prototipal e herança clássica (como em outras linguagens OO)?,"Em herança prototipal (JavaScript), os objetos herdam propriedades diretamente de outros objetos (os protótipos). Não há classes no sentido tradicional. Em herança clássica, as classes definem a estrutura dos objetos, e a herança ocorre entre classes.

**77.**"
Explique como funciona a cadeia de protótipos em JavaScript.,"Cada objeto em JavaScript tem um protótipo, que é outro objeto. Quando você tenta acessar uma propriedade em um objeto, o JavaScript primeiro procura a propriedade no próprio objeto. Se a propriedade não for encontrada, o JavaScript procura no protótipo do objeto, e assim por diante, até chegar ao protótipo `null`.

**78.**"
O que é o método `Object.create()` em JavaScript e como ele é usado para criar objetos com protótipos específicos?,"`Object.create()` cria um novo objeto com o protótipo especificado. Ele permite criar objetos que herdam propriedades de um objeto existente.

**79.**"
Como você pode adicionar métodos a um protótipo de objeto em JavaScript?,"Você pode adicionar métodos a um protótipo de objeto atribuindo uma função à propriedade `prototype` da função construtora do objeto. Exemplo: `MinhaClasse.prototype.meuMetodo = function() { ... }`

**80.**"
O que é o uso de `super` em classes JavaScript?,"`super` é usado em classes para chamar o construtor da classe pai (`super()`) ou para acessar métodos da classe pai (`super.meuMetodo()`).

Continuando...

**81.**"
O que são Mixins em JavaScript e como eles podem ser usados?,"Mixins são classes ou objetos que contêm funcionalidades que podem ser ""misturadas"" em outras classes. Eles permitem reutilizar código e adicionar funcionalidades a classes existentes sem usar herança múltipla.

**82.**"
Como você pode prevenir o uso de `this` acidentalmente referenciando o objeto global (window) em strict mode?,"Em strict mode, o valor de `this` é `undefined` quando usado em uma função que não é um método de um objeto e não foi chamada com `call`, `apply` ou `bind`. Isso ajuda a prevenir erros acidentais.

**83.**"
O que é um Decorator em JavaScript (usando a sintaxe de proposta)?,"Decorators são uma proposta de sintaxe para adicionar metadados ou modificar classes e seus membros (métodos, propriedades). Eles usam a sintaxe `@decorator`. Decorators são funções que são aplicadas a classes ou membros de classes no momento da definição.

**84.**"
O que é a função `Object.entries()` em JavaScript e o que ela retorna?,"`Object.entries()` retorna um array de arrays, onde cada sub-array contém a chave e o valor de uma propriedade enumerável de um objeto.

**85.**"
O que é a função `Object.keys()` em JavaScript e o que ela retorna?,"`Object.keys()` retorna um array contendo os nomes de todas as propriedades enumeráveis de um objeto.

**86.**"
O que é a função `Object.values()` em JavaScript e o que ela retorna?,"`Object.values()` retorna um array contendo os valores de todas as propriedades enumeráveis de um objeto.

**87.**"
Como você pode verificar se um objeto está vazio em JavaScript?,"Você pode usar `Object.keys(objeto).length === 0` para verificar se um objeto está vazio.

**88.**"
Explique o que é memoization em JavaScript e como ela pode melhorar o desempenho.,"Memoization é uma técnica de otimização que armazena em cache os resultados de chamadas de função caras e retorna o resultado em cache quando as mesmas entradas ocorrem novamente. Isso pode melhorar o desempenho, especialmente para funções recursivas ou computacionalmente intensivas.

**89.**"
O que são Higher-Order Functions em JavaScript e quais são alguns exemplos comuns?,"Higher-Order Functions são funções que recebem outras funções como argumentos ou retornam outras funções como resultados. Exemplos comuns incluem `Array.map()`, `Array.filter()`, `Array.reduce()`, `setTimeout()` e `setInterval()`.

**90.**"
"Como você pode criar um contador que incrementa seu valor cada vez que é chamado, usando closures?","```javascript
function criarContador() {
  let contador = 0;
  return function() {
    contador++;
    return contador;
  };
}

const meuContador = criarContador();
console.log(meuContador()); // 1
console.log(meuContador()); // 2
```

**91.**"
O que são IIFE (Immediately Invoked Function Expressions) em JavaScript e qual o seu propósito?,"IIFE são funções que são executadas imediatamente após sua criação. Seu propósito é criar um escopo privado para evitar conflitos de nomes com outras variáveis no escopo global.

**92.**"
Como você pode detectar se o navegador do usuário tem o JavaScript habilitado?,"A maneira mais simples é usar a tag `<noscript>`. Se o JavaScript estiver desabilitado, o conteúdo dentro da tag `<noscript>` será exibido.

**93.**"
O que são características e vantagens de programação funcional em JavaScript?,"A programação funcional em JavaScript enfatiza o uso de funções puras (funções que sempre retornam o mesmo resultado para as mesmas entradas e não têm efeitos colaterais), imutabilidade de dados e funções de alta ordem. As vantagens incluem código mais previsível, fácil de testar e reutilizar.

**94.**"
O que são currying e partial application em JavaScript?,"Currying é uma técnica que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada. Partial application é quando você preenche alguns dos argumentos de uma função e retorna uma nova função que espera os argumentos restantes.

**95.**"
Como você pode usar a função `Date.now()` em JavaScript?,"`Date.now()` retorna o número de milissegundos que se passaram desde 1 de janeiro de 1970 00:00:00 UTC. Ele é frequentemente usado para medir o tempo de execução de um código.

**96.**"
O que é o `requestAnimationFrame()` em JavaScript e qual o seu uso?,"`requestAnimationFrame()` agenda uma função para ser executada antes da próxima repintura do navegador. Ele é usado para criar animações suaves e eficientes, pois sincroniza a animação com a taxa de atualização da tela.

**97.**"
Como você pode usar a função `cancelAnimationFrame()` em JavaScript?,"`cancelAnimationFrame()` cancela um quadro de animação previamente agendado com `requestAnimationFrame()`.

**98.**"
O que é o padrão de módulo em JavaScript e como ele é implementado?,"O padrão de módulo é uma forma de encapsular código e dados em um escopo privado, expondo apenas as partes que são necessárias para o exterior. Ele é implementado usando closures ou módulos ES6.

**99.**"
O que é o objeto `Intl` em JavaScript e para que ele é usado?,"O objeto `Intl` fornece APIs para internacionalização, como formatação de datas, números e moedas de acordo com as configurações regionais do usuário.

**100.**"
Como você pode verificar se um elemento está visível na tela usando JavaScript?,"Você pode usar a API Intersection Observer para verificar se um elemento está visível na tela. Essa API permite observar quando um elemento entra ou sai da viewport.

Mais 100 para completar a lista:

**101.**"
O que é o Resumable Functions (uma proposta para JavaScript)?,"Resumable Functions são funções que podem ser pausadas e retomadas em um ponto específico, mantendo o estado local. Elas são semelhantes a generators, mas podem ser mais fáceis de usar em alguns casos.

**102.**"
Como você pode transformar um array de arrays em um único array (flatten) em JavaScript?,Você pode usar `array.flat
Como você declara uma variável constante em JavaScript?,"Usando a palavra-chave `const`, por exemplo: `const PI = 3.14159;`"
Como você cria um array em JavaScript?,"Usando literais de array: `let myArray = [1, 2, 3];` ou o construtor `Array`: `let myArray = new Array(1, 2, 3);`"
Como você acessa o primeiro elemento de um array em JavaScript?,Usando o índice 0: `myArray[0];`
O que é o `this` em JavaScript?,`this` refere-se ao contexto de execução atual. Seu valor depende de como a função é chamada.
Como você cria uma função em JavaScript?,Usando a declaração de função: `function myFunction() { ... }` ou a expressão de função: `let myFunction = function() { ... };`
O que é um closure em JavaScript?,"Um closure é a capacidade de uma função de acessar variáveis de seu escopo léxico externo, mesmo após a função externa ter terminado de executar."
Como você lança um erro em JavaScript?,"Usando a palavra-chave `throw`, seguida de um objeto de erro. Por exemplo: `throw new Error('Mensagem de erro');`"
O que é o bloco `try...catch` em JavaScript?,"É usado para lidar com exceções. O código dentro do bloco `try` é executado, e se um erro for lançado, o código dentro do bloco `catch` é executado."
Como você previne o comportamento padrão de um evento em JavaScript?,Usando o método `preventDefault()` no objeto de evento.
O que são template literals em JavaScript?,"São strings que permitem expressões embutidas, delimitadas por crases (`)."
O que é o operador spread em JavaScript?,Permite expandir um array ou objeto em locais onde são esperados múltiplos argumentos ou elementos.
O que é herança em JavaScript?,É um mecanismo onde uma classe (subclasse ou classe filha) herda propriedades e métodos de outra classe (superclasse ou classe pai).
O que são módulos em JavaScript (ES6)?,"Permitem dividir o código em arquivos separados, tornando-o mais organizado e reutilizável."
Como você importa um módulo em JavaScript (ES6)?,Usando a palavra-chave `import`. Por exemplo: `import { myFunction } from './myModule.js';`
Como você exporta um módulo em JavaScript (ES6)?,Usando a palavra-chave `export`. Por exemplo: `export function myFunction() { ... }` ou `export default myFunction;`
Como você verifica se um array inclui um determinado valor em JavaScript?,Usando o método `includes()`.
O que é o método `join()` em JavaScript?,Junta todos os elementos de um array em uma string.
O que é o método `splice()` em JavaScript?,"Altera o conteúdo de um array removendo, substituindo ou adicionando elementos."
O que é o método `push()` em JavaScript?,Adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
O que é o método `pop()` em JavaScript?,Remove o último elemento de um array e retorna esse elemento.
O que é o método `shift()` em JavaScript?,Remove o primeiro elemento de um array e retorna esse elemento.
O que é o método `unshift()` em JavaScript?,Adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
O que é o método `sort()` em JavaScript?,Ordena os elementos de um array no local e retorna o array ordenado.
O que é o método `reverse()` em JavaScript?,Inverte a ordem dos elementos em um array.
Como você remove elementos duplicados de um array em JavaScript?,Usando `[...new Set(myArray)]`.
Como você calcula a potência de um número em JavaScript?,Usando `Math.pow()`.
Como você gera um número aleatório entre 0 (inclusive) e 1 (exclusivo) em JavaScript?,Usando `Math.random()`.
Como você obtém o ano atual a partir de um objeto `Date` em JavaScript?,Usando `myDate.getFullYear()`.
Como você obtém o mês atual a partir de um objeto `Date` em JavaScript?,Usando `myDate.getMonth()` (retorna um valor de 0 a 11).
Como você obtém o dia do mês a partir de um objeto `Date` em JavaScript?,Usando `myDate.getDate()`.
Como você converte um objeto JavaScript para uma string JSON?,Usando `JSON.stringify()`.
Como você converte uma string JSON para um objeto JavaScript?,Usando `JSON.parse()`.
O que é uma Promise em JavaScript?,"É um objeto que representa a eventual conclusão (ou falha) de uma operação assíncrona, e seu valor resultante."
Quais são os estados de uma Promise em JavaScript?,"Pendente (pending), Cumprida (fulfilled) e Rejeitada (rejected)."
Como você cria uma Promise em JavaScript?,"Usando o construtor `new Promise((resolve, reject) => { ... });`"
Como você lida com o sucesso de uma Promise em JavaScript?,Usando o método `.then()`.
Como você lida com o erro de uma Promise em JavaScript?,Usando o método `.catch()`.
O que é o método `finally()` em Promises JavaScript?,Executa um bloco de código independentemente de a Promise ser cumprida ou rejeitada.
Como você define uma função assíncrona em JavaScript?,Usando a palavra-chave `async` antes da declaração da função.
Como você seleciona um elemento HTML pelo ID em JavaScript?,Usando `document.getElementById('idDoElemento')`.
Como você seleciona elementos HTML por classe em JavaScript?,Usando `document.getElementsByClassName('nomeDaClasse')`.
Como você seleciona elementos HTML por tag em JavaScript?,Usando `document.getElementsByTagName('nomeDaTag')`.
Como você altera o conteúdo de um elemento HTML em JavaScript?,Usando a propriedade `innerHTML` ou `textContent`.
Como você define o valor de um atributo de um elemento HTML em JavaScript?,Usando o método `setAttribute()`.
Como você obtém o valor de um atributo de um elemento HTML em JavaScript?,Usando o método `getAttribute()`.
Como você cria um novo elemento HTML em JavaScript?,Usando `document.createElement('nomeDaTag')`.
Como você adiciona um elemento HTML ao DOM em JavaScript?,Usando o método `appendChild()` ou `insertBefore()`.
Como você remove um elemento HTML do DOM em JavaScript?,Usando o método `removeChild()`.
Como você adiciona um listener de evento a um elemento HTML em JavaScript?,Usando o método `addEventListener()`.
Como você remove um listener de evento de um elemento HTML em JavaScript?,Usando o método `removeEventListener()`.
O que é um evento em JavaScript?,"É uma ação ou ocorrência que acontece no navegador, como um clique, carregamento de página, ou envio de formulário."
Como você obtém o elemento que disparou um evento em JavaScript?,Usando a propriedade `target` do objeto `event`.
O que é o bubbling de eventos em JavaScript?,É o processo onde um evento disparado em um elemento se propaga para seus elementos pais no DOM.
O que é o capturing de eventos em JavaScript?,É o processo onde um evento é capturado pelo elemento mais externo antes de se propagar para o elemento alvo.
Como você armazena dados em `localStorage` em JavaScript?,"Usando `localStorage.setItem('chave', 'valor')`."
Como você recupera dados de `localStorage` em JavaScript?,Usando `localStorage.getItem('chave')`.
Como você remove dados de `localStorage` em JavaScript?,Usando `localStorage.removeItem('chave')`.
Como você limpa todo o `localStorage` em JavaScript?,Usando `localStorage.clear()`.
O que é uma expressão regular em JavaScript?,É um padrão usado para corresponder a combinações de caracteres em strings.
O que é o método `test()` em expressões regulares em JavaScript?,Testa se uma string corresponde ao padrão da expressão regular. Retorna `true` ou `false`.
O que é o método `exec()` em expressões regulares em JavaScript?,Executa uma busca por uma correspondência em uma string. Retorna um array com informações sobre a correspondência ou `null` se não houver correspondência.
O que é o método `match()` em strings em JavaScript?,Retorna uma correspondência entre uma string e uma expressão regular.
O que é o método `replace()` em strings em JavaScript?,Substitui uma parte de uma string por outra string ou por uma string retornada por uma função.
O que são quantificadores em expressões regulares em JavaScript?,"Símbolos que especificam quantas ocorrências de um caractere ou grupo de caracteres devem corresponder. Ex: `*`, `+`, `?`, `{n}`, `{n,}`, `{n,m}`."
O que são classes de caracteres em expressões regulares em JavaScript?,"Conjuntos de caracteres que representam um tipo específico de caractere. Ex: `\d` (dígito), `\w` (caractere alfanumérico), `\s` (espaço em branco)."
O que são grupos de captura em expressões regulares em JavaScript?,Partes da expressão regular que são delimitadas por parênteses `()`. As correspondências desses grupos podem ser recuperadas separadamente.
O que é programação orientada a protótipos em JavaScript?,É um estilo de programação orientada a objetos onde a herança é baseada em protótipos em vez de classes.
O que é duck typing em JavaScript?,"É um estilo de tipagem onde a validade de um objeto é determinada por sua capacidade de realizar certas operações, em vez de seu tipo específico."
O que é a diferença entre programação imperativa e declarativa em JavaScript?,"A programação imperativa foca em *como* realizar uma tarefa, enquanto a programação declarativa foca em *o que* deve ser realizado."
O que são funções de alta ordem em JavaScript?,São funções que recebem outras funções como argumentos ou retornam funções como resultados.
Como você cria um objeto imutável em JavaScript?,Usando `Object.freeze()` ou bibliotecas como Immutable.js.
O que é o princípio DRY (Don't Repeat Yourself) em programação JavaScript?,"É um princípio que afirma que cada parte do conhecimento deve ter uma representação única, inequívoca e confiável dentro de um sistema."
"O que é o princípio KISS (Keep It Simple, Stupid) em programação JavaScript?",É um princípio que afirma que a maioria dos sistemas funcionam melhor se forem mantidos simples em vez de complicados.
O que é o padrão de projeto Module em JavaScript?,É um padrão que permite criar módulos encapsulados com escopo privado e uma interface pública para interagir com o módulo.
O que é o padrão de projeto Revealing Module em JavaScript?,"Uma variação do padrão Module onde todos os métodos e variáveis são definidos no escopo privado, e apenas um conjunto selecionado é revelado como público."
"Explique o conceito de ""graceful degradation"" em JavaScript.","É a prática de construir uma aplicação web para que ela funcione corretamente nos navegadores mais recentes, enquanto ainda oferece uma experiência utilizável (embora talvez menos rica em recursos) em navegadores mais antigos."
"Explique o conceito de ""progressive enhancement"" em JavaScript.","É uma estratégia de design web que prioriza o conteúdo base e a funcionalidade essencial, adicionando recursos e aprimoramentos mais avançados quando o navegador do usuário os suporta."
"O que é o ""event loop"" em JavaScript e como ele funciona?","É o mecanismo que permite que o JavaScript, uma linguagem single-threaded, execute operações assíncronas. Ele monitora a pilha de chamadas e a fila de callbacks, movendo callbacks da fila para a pilha quando a pilha está vazia."
"O que é a ""callback queue"" (fila de callbacks) em JavaScript?","É uma fila que armazena callbacks assíncronos que estão prontos para serem executados, aguardando a pilha de chamadas ficar vazia."
"O que é a ""microtask queue"" (fila de microtarefas) em JavaScript?","Semelhante à callback queue, mas para microtarefas (Promises, MutationObserver). Microtarefas são executadas antes das tarefas da callback queue."
O que é o Garbage Collector em JavaScript?,É um processo automático que libera a memória que não está mais sendo usada pelo programa.
"O que é ""memoization"" e como ela pode otimizar funções em JavaScript?",Memoization é uma técnica de otimização que armazena em cache os resultados de chamadas de função caras e os retorna quando as mesmas entradas são usadas novamente.
"O que são ""side effects"" (efeitos colaterais) em funções JavaScript?","São alterações no estado fora do escopo da função, como modificar variáveis globais, fazer chamadas I/O ou interagir com o DOM. Funções com side effects podem ser mais difíceis de prever e testar."
"O que é a ""temporal dead zone"" (TDZ) em JavaScript?","É a área do código onde uma variável declarada com `let` ou `const` existe, mas não pode ser acessada antes de sua declaração ser alcançada."
"Qual a diferença entre ""shallow copy"" e ""deep copy"" em JavaScript?","Uma shallow copy cria uma nova referência para o mesmo objeto, enquanto uma deep copy cria um novo objeto com todos os valores copiados recursivamente."
Como você pode criar uma deep copy de um objeto em JavaScript?,Usando `JSON.parse(JSON.stringify(obj))` (para objetos simples) ou bibliotecas como Lodash.
"Explique o conceito de ""closures"" com um exemplo prático.","(Exemplo de uma função que retorna outra função, que acessa uma variável do escopo da função externa, mesmo após a função externa ter terminado de executar.)"
"O que é ""event delegation"" em JavaScript e por que é útil?",É uma técnica de adicionar um listener de evento a um elemento pai em vez de adicionar o listener a cada elemento filho individualmente. É útil para melhorar o desempenho e lidar com elementos que são adicionados dinamicamente.
O que é CORS (Cross-Origin Resource Sharing) e como ele afeta o JavaScript?,É um mecanismo de segurança do navegador que restringe solicitações HTTP de origens diferentes. Isso pode afetar o JavaScript se você estiver tentando fazer solicitações para um servidor que não compartilha a mesma origem.
"O que é ""strict mode"" em JavaScript e como ele pode ajudar a escrever código melhor?","É um modo que impõe regras mais rigorosas para o código JavaScript, ajudando a evitar erros comuns e tornando o código mais legível e manutenível. Ativado adicionando `""use strict"";` no início de um script ou função."
"O que são ""linter"" e por que são úteis em JavaScript?","São ferramentas que analisam o código-fonte para identificar erros de estilo, erros potenciais e outras questões de qualidade de código. Eles ajudam a manter a consistência e melhorar a qualidade do código."
"O que são ""unit tests"" (testes unitários) e por que são importantes em JavaScript?","São testes que verificam o comportamento de unidades individuais de código (funções, classes, módulos) de forma isolada. Eles ajudam a garantir que o código funcione conforme o esperado e a detectar erros precocemente."
Como você debuga o código JavaScript no navegador?,"Usando as ferramentas de desenvolvedor do navegador (console, debugger, network tab)."
"Qual a diferença entre ""synchronous"" (síncrono) e ""asynchronous"" (assíncrono) JavaScript?","O código síncrono é executado em sequência, bloqueando a execução até que cada operação seja concluída. O código assíncrono permite que o programa continue executando outras tarefas enquanto aguarda a conclusão de uma operação (por exemplo, uma solicitação de rede)."
"O que é um ""callback hell"" e como você pode evitá-lo em JavaScript?","É uma situação onde o código se torna aninhado e difícil de ler devido ao uso excessivo de callbacks aninhados. Pode ser evitado usando Promises, async/await, ou padrões de projeto como o padrão Observer."
"O que é ""code splitting"" e como ele pode melhorar o desempenho do seu aplicativo JavaScript?","É a prática de dividir o código do aplicativo em vários pedaços menores, que podem ser carregados sob demanda. Isso pode reduzir o tempo de carregamento inicial e melhorar a experiência do usuário."
"O que é ""tree shaking"" e como ele funciona em JavaScript?",É um processo de otimização que remove o código não utilizado de um aplicativo JavaScript durante o processo de construção. Isso pode reduzir o tamanho do pacote final e melhorar o desempenho.
"O que é ""minification"" e como ele funciona em JavaScript?","É um processo de otimização que remove espaços em branco, comentários e outros caracteres desnecessários do código JavaScript, reduzindo o tamanho do arquivo."
"O que é ""transpilation"" e por que é usado em JavaScript?",É o processo de converter código de uma versão do JavaScript para outra (geralmente uma versão mais antiga) para garantir a compatibilidade com navegadores mais antigos.
O que é o Symbol em JavaScript?,É um tipo de dado primitivo usado para criar propriedades de objeto únicas e imutáveis.
O que são Iterators e Generators em JavaScript?,"Iterators são objetos que permitem iterar sobre uma coleção de dados. Generators são um tipo especial de função que podem ser pausadas e retomadas, permitindo a criação de iterators mais facilmente."
Explique o conceito de tail call optimization (TCO) em JavaScript.,"É uma otimização do compilador que permite que chamadas recursivas de cauda (onde a chamada recursiva é a última operação realizada pela função) sejam executadas sem adicionar um novo frame à pilha de chamadas, evitando estouros de pilha."
O que é a API Fetch em JavaScript?,"É uma interface para fazer solicitações de rede, oferecendo uma alternativa moderna e mais flexível ao XMLHttpRequest."
Quais são os diferentes tipos de erros em JavaScript?,"SyntaxError, TypeError, ReferenceError, RangeError, URIError, EvalError, InternalError."
"O que é o uso de ""void"" em JavaScript?",O operador `void` avalia uma expressão e retorna `undefined`. É frequentemente usado para evitar que um link execute uma ação padrão ou para garantir que uma função não retorne um valor.
Como você otimiza loops em JavaScript?,"Minimizar cálculos dentro do loop, cache de valores que não mudam, usar loops mais eficientes (for vs. forEach), reduzir o número de acessos ao DOM."
O que é um Service Worker em JavaScript?,"É um script que roda em background, separado da página web, e pode interceptar e lidar com requisições de rede, cache de recursos e funcionalidades de push notifications."
O que é a API WebSockets em JavaScript?,"Fornece um canal de comunicação full-duplex sobre uma única conexão TCP, permitindo uma comunicação bidirecional em tempo real entre um cliente e um servidor."
O que são Proxy objects em JavaScript?,"Permitem interceptar e personalizar operações fundamentais em objetos, como leitura, escrita, enumeração e validação."
Como você compara dois objetos para determinar se eles são iguais em conteúdo?,"Uma comparação direta `obj1 === obj2` verifica se ambos apontam para a mesma referência de objeto. Para comparar o conteúdo, é necessário iterar sobre as propriedades e comparar os valores. Uma função deep equality pode ser implementada ou bibliotecas externas podem ser usadas."
O que é memoization usando Closures e qual é a sua vantagem?,"É a técnica de armazenar os resultados de chamadas de função ""caras"" dentro de um closure para que eles possam ser reutilizados para as mesmas entradas em chamadas futuras. Isso pode melhorar significativamente o desempenho, evitando recálculos repetitivos."
O que é 'use strict' e por que é uma boa prática?,"`use strict` habilita um modo restrito de JavaScript que impõe regras mais rigorosas, como proibir variáveis implícitas e lançar erros para certas ações silenciosas. Ele ajuda a evitar erros comuns e escrever um código mais limpo e seguro."
Explique o conceito de Data Binding e seu papel em frameworks JavaScript.,"Data binding é uma técnica que sincroniza automaticamente os dados entre um modelo (dados) e a visualização (interface do usuário). Quando os dados no modelo são alterados, a visualização é atualizada automaticamente e vice-versa. Isso simplifica a manipulação do DOM e melhora a reatividade."
Qual a diferença entre Immediate Invoked Function Expression (IIFE) e blocos anônimos?,"Um IIFE (Immediately Invoked Function Expression) é uma função anônima que é executada imediatamente após sua criação. Blocos anônimos, por outro lado, são apenas blocos de código envoltos em chaves `{}`. IIFEs criam um escopo privado para evitar conflitos de nomes, enquanto blocos anônimos não criam um novo escopo.

Espero que esta lista seja útil!"
Qual a diferença entre usar `let` e `const` para declarar variáveis em JavaScript?,"`let` declara variáveis que podem ser reatribuídas, enquanto `const` declara variáveis que não podem ser reatribuídas após a inicialização. No entanto, para objetos e arrays declarados com `const`, as propriedades internas podem ser modificadas."
O que é o operador `in` em JavaScript e como ele é usado?,O operador `in` é usado para verificar se uma propriedade específica existe dentro de um objeto. Ele retorna `true` se a propriedade existir e `false` caso contrário. Ele também pode ser usado para verificar se um índice existe em um array.
Explique o conceito de `template literals` em JavaScript.,Template literals (ou template strings) são strings que permitem a incorporação de expressões dentro de strings usando a sintaxe `${expressao}`. Eles também suportam strings multi-linha e interpolação de variáveis.
O que são `closures` em JavaScript?,"Closures são a habilidade de uma função de lembrar e acessar o escopo léxico no qual foi criada, mesmo após a função externa ter terminado sua execução. Isso permite que a função interna acesse variáveis da função externa."
Como funciona o operador `delete` em JavaScript?,"O operador `delete` é usado para remover uma propriedade de um objeto. Ele retorna `true` se a propriedade foi removida com sucesso ou se a propriedade não existia. Ele não pode ser usado para deletar variáveis declaradas com `var`, `let` ou `const`."
O que é `type coercion` em JavaScript?,Type coercion é o processo automático de conversão de um tipo de dado para outro quando um operador ou função espera um tipo diferente. Isso pode levar a resultados inesperados se não for compreendido.
Explique o conceito de `hoisting` em JavaScript.,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis (com `var`) e funções para o topo de seu escopo antes da execução do código. No entanto, apenas a declaração é movida; a inicialização permanece onde está no código. Variáveis declaradas com `let` e `const` são hoisted, mas não inicializadas, resultando em um erro se forem acessadas antes da declaração."
Como funciona o método `Array.prototype.forEach()` em JavaScript?,"O método `forEach()` itera sobre os elementos de um array e executa uma função fornecida para cada elemento. Ele não retorna um novo array e não interrompe a iteração, a menos que uma exceção seja lançada."
O que é o método `Array.prototype.map()` em JavaScript?,"O método `map()` itera sobre os elementos de um array e executa uma função fornecida para cada elemento, retornando um novo array com os resultados da função aplicada a cada elemento."
Explique o método `Array.prototype.filter()` em JavaScript.,O método `filter()` itera sobre os elementos de um array e retorna um novo array contendo apenas os elementos que satisfazem uma condição especificada na função fornecida.
O que faz o método `Array.prototype.reduce()` em JavaScript?,O método `reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzir o array a um único valor.
Qual a finalidade do método `Array.prototype.sort()` em JavaScript?,"O método `sort()` ordena os elementos de um array no local e retorna o array ordenado. Por padrão, ele ordena os elementos como strings, o que pode levar a resultados inesperados ao ordenar números. Uma função de comparação pode ser fornecida para personalizar a ordem de classificação."
Explique o que é o `spread operator` em JavaScript.,O spread operator (`...`) permite expandir um iterável (como um array ou string) em locais onde são esperados zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array).
O que é o `rest parameter` em JavaScript?,O rest parameter (`...`) permite que uma função aceite um número indefinido de argumentos como um array. Ele deve ser o último parâmetro da função.
O que é `JSON` e como é usado em JavaScript?,"JSON (JavaScript Object Notation) é um formato de dados leve para troca de dados. Em JavaScript, ele é usado para enviar e receber dados de servidores web. Os métodos `JSON.stringify()` e `JSON.parse()` são usados para converter objetos JavaScript em strings JSON e vice-versa."
Explique o conceito de `promises` em JavaScript.,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas podem estar em um de três estados: pendente, resolvida (fulfilled) ou rejeitada (rejected). Promises ajudam a lidar com operações assíncronas de forma mais organizada e legível, evitando o ""callback hell""."
Como funciona o tratamento de erros com `try...catch` em JavaScript?,"O bloco `try` contém o código que pode gerar uma exceção. O bloco `catch` captura a exceção, se ocorrer, e permite que você lide com o erro de forma apropriada."
O que é um `stack overflow` em JavaScript?,Um stack overflow ocorre quando a pilha de chamadas excede seu limite de tamanho. Isso geralmente acontece com chamadas recursivas infinitas ou muito profundas.
Qual a diferença entre `setTimeout()` e `setInterval()` em JavaScript?,`setTimeout()` executa uma função uma vez após um determinado atraso em milissegundos. `setInterval()` executa uma função repetidamente em intervalos regulares de tempo em milissegundos.
Como você pode limpar um `setTimeout()` ou `setInterval()` em JavaScript?,"Você pode usar `clearTimeout(idDoTimeout)` para limpar um `setTimeout()` e `clearInterval(idDoInterval)` para limpar um `setInterval()`, onde `idDoTimeout` e `idDoInterval` são os valores retornados pelas respectivas funções."
O que é o objeto `Math` em JavaScript e quais são alguns de seus métodos comuns?,"O objeto `Math` é um objeto nativo do JavaScript que fornece propriedades e métodos para operações matemáticas. Alguns métodos comuns incluem `Math.random()`, `Math.floor()`, `Math.ceil()`, `Math.round()`, `Math.max()`, `Math.min()` e `Math.pow()`."
O que é o objeto `Date` em JavaScript e como ele é usado?,"O objeto `Date` é usado para trabalhar com datas e horas em JavaScript. Ele permite criar objetos de data, obter informações sobre datas (como ano, mês, dia) e formatar datas."
O que é o método `Date.now()` em JavaScript?,"O método `Date.now()` retorna o número de milissegundos decorridos desde 1º de janeiro de 1970, 00:00:00 UTC (o Epoch Unix)."
O que é `RegExp` em JavaScript?,"`RegExp` (Regular Expression) é um objeto que representa um padrão de texto. Ele é usado para buscar, substituir e validar texto em JavaScript."
Quais são alguns dos metacaracteres comuns usados em expressões regulares em JavaScript?,"Alguns metacaracteres comuns incluem `.` (qualquer caractere), `*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `^` (início da string), `$` (fim da string), `\d` (dígito), `\w` (caractere alfanumérico), `\s` (espaço em branco)."
O que são `flags` em expressões regulares em JavaScript?,"Flags são modificadores que alteram o comportamento de uma expressão regular. Alguns flags comuns incluem `i` (ignorar maiúsculas/minúsculas), `g` (global, encontrar todas as ocorrências) e `m` (multiline, trata `^` e `$` como início e fim de cada linha)."
Explique o conceito de `inheritance` (herança) em JavaScript.,"Em JavaScript, a herança é implementada usando protótipos. Cada objeto tem um protótipo, que é outro objeto do qual herda propriedades e métodos. A cadeia de protótipos permite que objetos herdem características de seus ancestrais."
O que é o `prototype` em JavaScript?,O `prototype` é um objeto associado a cada função e objeto em JavaScript. Ele contém propriedades e métodos que são herdados por todos os objetos criados a partir dessa função ou objeto.
Como você pode criar um objeto em JavaScript usando a sintaxe de classe (ES6)?,"Você pode usar a palavra-chave `class` seguida do nome da classe, e dentro da classe, você pode definir o construtor e os métodos da classe."
O que é o construtor em uma classe JavaScript?,O construtor é um método especial dentro de uma classe que é chamado quando um novo objeto da classe é criado. Ele é usado para inicializar as propriedades do objeto.
Como você pode herdar de uma classe em JavaScript usando a sintaxe de classe (ES6)?,"Você pode usar a palavra-chave `extends` para herdar de outra classe. A classe que herda é chamada de subclasse, e a classe da qual herda é chamada de superclasse."
O que é o método `super()` em JavaScript?,O método `super()` é usado em uma subclasse para chamar o construtor da superclasse. Ele também pode ser usado para chamar outros métodos da superclasse.
Como o valor de `this` é determinado em uma função arrow em JavaScript?,"Em uma função arrow, o valor de `this` é herdado do contexto léxico circundante. Isso significa que `this` se refere ao mesmo objeto que `this` se referiria fora da função arrow."
O que é o objeto `window` em JavaScript (no navegador)?,O objeto `window` representa a janela do navegador. É o objeto global no contexto do navegador e contém propriedades e métodos para manipular a janela do navegador.
O que é o objeto `document` em JavaScript (no navegador)?,O objeto `document` representa o documento HTML exibido na janela do navegador. Ele permite acessar e manipular os elementos HTML da página.
O que é o `DOM` (Document Object Model) em JavaScript?,"O DOM (Document Object Model) é uma representação em forma de árvore da estrutura de um documento HTML ou XML. Ele permite que programas (como JavaScript) acessem e manipulem o conteúdo, a estrutura e o estilo do documento."
Como você pode selecionar múltiplos elementos HTML por sua classe em JavaScript?,Você pode usar o método `document.getElementsByClassName('nomeDaClasse')`.
Como você pode modificar o conteúdo de um elemento HTML em JavaScript?,"Você pode usar a propriedade `textContent` ou `innerHTML` do elemento. `textContent` define o texto dentro do elemento, enquanto `innerHTML` define o código HTML dentro do elemento."
Como você pode adicionar um ouvinte de evento a um elemento HTML em JavaScript?,"Você pode usar o método `addEventListener('nomeDoEvento', funcaoCallback)` do elemento."
Como você pode prevenir o comportamento padrão de um evento em JavaScript?,Você pode usar o método `event.preventDefault()`.
Como você pode interromper a propagação de um evento em JavaScript?,Você pode usar o método `event.stopPropagation()`.
O que é o `event bubbling` em JavaScript?,"Event bubbling é o processo em que um evento disparado em um elemento se propaga para cima na árvore DOM, acionando os ouvintes de evento em seus elementos pais."
O que é o `event capturing` em JavaScript?,"Event capturing é o processo oposto ao event bubbling. Em vez de começar no elemento alvo e subir na árvore DOM, o evento começa na raiz do documento e desce até o elemento alvo. O capturing é menos comum que o bubbling."
O que são `cookies` em JavaScript e como são usados?,"Cookies são pequenos arquivos de texto que um site armazena no computador de um usuário. Eles são usados para armazenar informações sobre o usuário, como preferências, informações de login, etc."
Como você pode ler e definir cookies em JavaScript?,"Você pode acessar os cookies através da propriedade `document.cookie`. Para definir um cookie, você atribui uma string no formato `nome=valor; expires=data; path=/` à propriedade `document.cookie`. Para ler os cookies, você precisa analisar a string `document.cookie`."
O que é `localStorage` em JavaScript e como é usado?,`localStorage` é um objeto que permite armazenar dados persistentemente no navegador do usuário. Os dados armazenados em `localStorage` permanecem disponíveis mesmo após o fechamento do navegador.
O que é `sessionStorage` em JavaScript e como é usado?,"`sessionStorage` é semelhante a `localStorage`, mas os dados armazenados são apenas válidos durante a sessão do navegador. Os dados são apagados quando o navegador é fechado."
Como você pode armazenar e recuperar dados de `localStorage` e `sessionStorage` em JavaScript?,"Você pode usar os métodos `localStorage.setItem('chave', 'valor')` para armazenar dados e `localStorage.getItem('chave')` para recuperar dados. O mesmo se aplica a `sessionStorage`."
O que é `strict mode` em JavaScript e como é usado?,"Strict mode é um modo de execução do JavaScript que impõe regras mais rígidas e ajuda a evitar erros comuns. Ele é ativado adicionando a string `""use strict"";` no início de um script ou função."
Quais são alguns dos benefícios de usar `strict mode` em JavaScript?,"Strict mode previne o uso de variáveis não declaradas, impede a atribuição a propriedades somente leitura, proíbe o uso de palavras reservadas como nomes de variáveis, e torna o código mais seguro e fácil de depurar."
O que são `modules` em JavaScript (ES6)?,Modules são unidades de código reutilizáveis que podem ser importadas e exportadas para compartilhar funcionalidades entre diferentes partes de um aplicativo JavaScript.
Como você pode exportar funcionalidades de um módulo JavaScript?,Você pode usar as palavras-chave `export` (para exportar individualmente) ou `export default` (para exportar um único valor padrão).
Como você pode importar funcionalidades de um módulo JavaScript?,Você pode usar a palavra-chave `import` seguida do nome da funcionalidade e do caminho do módulo.
Qual a diferença entre `named exports` e `default exports` em JavaScript?,`Named exports` permitem exportar múltiplos valores com nomes específicos. `Default exports` permitem exportar um único valor padrão.
O que é `IIFE` (Immediately Invoked Function Expression) em JavaScript?,IIFE é uma função que é definida e executada imediatamente após sua criação. É usada para criar um escopo privado para evitar conflitos de nomes e proteger variáveis.
Como você pode criar um `IIFE` em JavaScript?,Você pode criar um IIFE envolvendo a definição da função entre parênteses e adicionando parênteses adicionais no final para executá-la: `(function() { /* código */ })();`.
O que é `memoization` em JavaScript?,Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras e retorna o resultado armazenado em cache quando as mesmas entradas são usadas novamente.
Como você pode implementar `memoization` em JavaScript?,"Você pode criar um objeto para armazenar os resultados em cache, verificar se o resultado para uma determinada entrada já existe no cache antes de calcular o resultado, e armazenar o resultado no cache após o cálculo."
O que é `currying` em JavaScript?,Currying é uma técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.
Como você pode implementar `currying` em JavaScript?,"Você pode criar uma função que retorna outra função, que por sua vez retorna outra função, e assim por diante, até que todos os argumentos sejam fornecidos."
O que é `functional programming` (programação funcional) em JavaScript?,"Programação funcional é um paradigma de programação que enfatiza o uso de funções puras, imutabilidade de dados e evitar efeitos colaterais."
O que são `pure functions` (funções puras) em JavaScript?,Funções puras são funções que sempre retornam o mesmo resultado para as mesmas entradas e não têm efeitos colaterais (não modificam variáveis externas nem interagem com o mundo exterior).
O que é `immutability` (imutabilidade) em JavaScript?,"Imutabilidade significa que os dados não podem ser modificados após serem criados. Em vez de modificar dados existentes, você cria novos dados com as modificações desejadas."
O que são `higher-order functions` (funções de ordem superior) em JavaScript?,Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam funções como resultado.
O que são `callbacks` em JavaScript?,Callbacks são funções que são passadas como argumentos para outras funções e executadas quando a função receptora termina sua execução.
O que é `recursion` (recursão) em JavaScript?,Recursão é uma técnica em que uma função chama a si mesma dentro de sua própria definição.
Quais são os riscos de usar `recursion` em JavaScript?,"O principal risco é o `stack overflow`, que ocorre quando a função recursiva chama a si mesma infinitamente ou muito profundamente, excedendo o limite da pilha de chamadas."
Como você pode evitar um `stack overflow` ao usar `recursion` em JavaScript?,"Você pode usar uma condição de parada para interromper a recursão, ou usar uma técnica chamada `tail call optimization` (otimização de chamada final), que transforma a recursão em um loop. No entanto, a tail call optimization não é suportada em todos os ambientes JavaScript."
O que é `event delegation` em JavaScript?,Event delegation é uma técnica em que você adiciona um ouvinte de evento a um elemento pai em vez de adicionar ouvintes a vários elementos filhos. Isso é útil quando você tem muitos elementos filhos ou quando os elementos filhos são adicionados dinamicamente.
Como você pode implementar `event delegation` em JavaScript?,Você adiciona um ouvinte de evento ao elemento pai e usa a propriedade `event.target` para identificar o elemento filho que disparou o evento.
O que é `debouncing` em JavaScript?,Debouncing é uma técnica para limitar a taxa na qual uma função é executada. Ela garante que uma função não seja chamada mais de uma vez em um determinado período de tempo.
Como você pode implementar `debouncing` em JavaScript?,Você pode usar um `setTimeout()` para atrasar a execução da função e limpar o timeout sempre que a função é chamada novamente antes do timeout expirar.
O que é `throttling` em JavaScript?,Throttling é outra técnica para limitar a taxa na qual uma função é executada. Ela garante que uma função seja chamada no máximo uma vez em um determinado período de tempo.
Como você pode implementar `throttling` em JavaScript?,"Você pode usar uma flag para indicar se a função está atualmente sendo executada e definir a flag para `true` quando a função é chamada. Em seguida, você usa um `setTimeout()` para definir a flag para `false` após um determinado período de tempo."
O que é `polyfills` em JavaScript?,Polyfills são pedaços de código que fornecem funcionalidades que não estão nativamente disponíveis em navegadores mais antigos. Eles permitem que você use recursos mais recentes do JavaScript em navegadores que não os suportam.
O que é `transpilation` em JavaScript?,Transpilation é o processo de converter código JavaScript moderno (ES6+) em código JavaScript mais antigo (ES5) que é compatível com navegadores mais antigos.
O que é `minification` em JavaScript?,"Minification é o processo de remover espaços em branco, comentários e outros caracteres desnecessários do código JavaScript para reduzir o tamanho do arquivo."
O que é `bundling` em JavaScript?,Bundling é o processo de combinar vários arquivos JavaScript em um único arquivo para reduzir o número de solicitações HTTP que o navegador precisa fazer.
O que é `tree shaking` em JavaScript?,Tree shaking é uma técnica para remover o código não utilizado de um pacote JavaScript durante o processo de bundling.
O que é `code splitting` em JavaScript?,Code splitting é uma técnica para dividir o código JavaScript em vários pacotes menores que podem ser carregados sob demanda.
O que é `garbage collection` em JavaScript?,Garbage collection é o processo automático de liberar memória que não está mais sendo usada por um programa.
Como funciona o `garbage collection` em JavaScript?,O garbage collector identifica objetos que não são mais acessíveis a partir da raiz do programa e libera a memória ocupada por esses objetos.
O que são `web workers` em JavaScript?,"Web workers permitem que você execute código JavaScript em segundo plano, sem bloquear a thread principal do navegador. Isso é útil para realizar tarefas computacionalmente intensivas ou demoradas sem comprometer a capacidade de resposta da interface do usuário."
Como você pode criar e usar um `web worker` em JavaScript?,Você cria um novo `web worker` usando o construtor `new Worker('caminhoDoArquivoWorker.js')`. Você pode enviar mensagens para o worker usando o método `postMessage()` e receber mensagens do worker usando o evento `onmessage`.
O que é `linting` em JavaScript?,"Linting é o processo de analisar o código JavaScript para identificar erros de sintaxe, erros de estilo e outras potenciais problemas."
Quais são algumas das ferramentas de `linting` populares para JavaScript?,"Algumas ferramentas populares incluem ESLint, JSHint e JSLint."
O que é `debugging` em JavaScript?,Debugging é o processo de identificar e corrigir erros no código JavaScript.
Quais são algumas das técnicas de `debugging` comuns para JavaScript?,"Algumas técnicas comuns incluem usar o objeto `console` para exibir mensagens de depuração, usar o debugger do navegador para pausar a execução do código e inspecionar variáveis, e usar ferramentas de linting para identificar erros de sintaxe e estilo."
O que são `unit tests` em JavaScript?,Unit tests são testes automatizados que verificam se pequenas unidades de código (como funções ou classes) funcionam corretamente.
Quais são algumas das ferramentas de `unit testing` populares para JavaScript?,"Algumas ferramentas populares incluem Jest, Mocha, Jasmine e Chai."
O que é `integration testing` em JavaScript?,Integration testing são testes automatizados que verificam se diferentes partes de um aplicativo JavaScript funcionam corretamente juntas.
O que são `end-to-end tests` (E2E tests) em JavaScript?,"End-to-end tests são testes automatizados que simulam a interação de um usuário com um aplicativo JavaScript, verificando se o aplicativo funciona corretamente do ponto de vista do usuário."
O que é `AJAX` (Asynchronous JavaScript and XML) em JavaScript?,"AJAX é uma técnica que permite que um aplicativo JavaScript faça solicitações HTTP para um servidor web em segundo plano, sem precisar recarregar a página inteira."
Como você pode fazer uma solicitação `AJAX` em JavaScript?,Você pode usar o objeto `XMLHttpRequest` ou a função `fetch()`.
Quais são os métodos HTTP comuns usados em solicitações `AJAX`?,"Os métodos HTTP comuns incluem `GET` (para obter dados), `POST` (para enviar dados), `PUT` (para atualizar dados) e `DELETE` (para excluir dados)."
O que é o `callback hell` (inferno de callbacks) em JavaScript?,Callback hell é uma situação em que o código JavaScript se torna difícil de ler e manter devido ao aninhamento excessivo de callbacks.
Como você pode evitar o `callback hell` em JavaScript?,"Você pode usar promises, async/await, ou técnicas de programação funcional para organizar o código assíncrono de forma mais legível."
O que são `design patterns` (padrões de projeto) em JavaScript?,Design patterns são soluções reutilizáveis para problemas comuns de design de software.
Quais são alguns dos `design patterns` comuns usados em JavaScript?,"Alguns padrões comuns incluem Singleton, Factory, Observer, Module e Revealing Module."
O que é o padrão `Singleton` em JavaScript?,O padrão Singleton garante que uma classe tenha apenas uma instância e fornece um ponto de acesso global a essa instância.
O que é o padrão `Factory` em JavaScript?,O padrão Factory fornece uma interface para criar objetos sem especificar suas classes concretas.
O que é o padrão `Observer` em JavaScript?,"O padrão Observer define uma dependência um-para-muitos entre objetos, de forma que, quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
O que é o padrão `Module` em JavaScript?,"O padrão Module encapsula código em um escopo privado, expondo apenas as funcionalidades necessárias."
O que é o padrão `Revealing Module` em JavaScript?,O padrão Revealing Module é uma variação do padrão Module que expõe apenas as funcionalidades desejadas através de um objeto retornado pela função do módulo.
O que é `Progressive Enhancement` (Aprimoramento Progressivo) em JavaScript?,"Progressive Enhancement é uma estratégia de design web que foca em fornecer uma experiência básica de qualidade para todos os usuários, independentemente do navegador ou dispositivo que estejam usando, e então adicionar recursos mais avançados para usuários com navegadores mais modernos."
O que é `Graceful Degradation` (Degradação Elegante) em JavaScript?,"Graceful Degradation é uma estratégia oposta ao Progressive Enhancement. Ela foca em construir um site com os recursos mais avançados primeiro e, em seguida, garantir que o site ainda funcione de forma razoável em navegadores mais antigos ou com menos recursos."
O que é `SEO` (Search Engine Optimization) e como o JavaScript pode afetá-lo?,SEO é o processo de otimizar um site para que ele apareça nos resultados de pesquisa de mecanismos de busca como o Google. O JavaScript pode afetar o SEO de um site se for usado para gerar conteúdo dinamicamente ou para criar sites que são difíceis para os mecanismos de busca rastrearem.
Como você pode otimizar seu código JavaScript para `SEO`?,"Você pode usar renderização do lado do servidor (SSR) ou pré-renderização para fornecer aos mecanismos de busca conteúdo HTML estático. Você também deve garantir que o site seja fácil de rastrear e indexar, e que o conteúdo seja relevante e de alta qualidade."
O que é `Accessibility` (Acessibilidade) e como o JavaScript pode afetá-la?,Acessibilidade é a prática de tornar sites e aplicativos utilizáveis por pessoas com deficiência. O JavaScript pode afetar a acessibilidade de um site se for usado para criar interfaces complexas que são difíceis para usuários com leitores de tela ou outras tecnologias assistivas navegarem.
Como você pode otimizar seu código JavaScript para `Accessibility`?,"Você deve usar marcação HTML semântica, fornecer alternativas de texto para imagens e outros elementos não textuais, e garantir que o site seja navegável com o teclado. Você também deve testar o site com leitores de tela e outras tecnologias assistivas."
Como declarar uma variável constante em JavaScript?,Utilize a palavra-chave `const` seguida pelo nome da variável e o valor inicial. Ex: `const minhaConstante = 10;`
Qual o propósito do operador `typeof` em JavaScript?,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando. Ex: `typeof 42` retorna `""number""`."
O que são closures em JavaScript?,"Closures são funções que lembram o ambiente lexical em que foram criadas, mesmo quando executadas fora desse ambiente. Isso significa que uma função interna pode acessar variáveis da função externa, mesmo depois que a função externa já terminou de executar."
Como criar um objeto literal em JavaScript?,"Utilize chaves `{}` para definir um objeto literal. Dentro das chaves, defina propriedades como `chave: valor`. Ex: `const pessoa = { nome: ""João"", idade: 30 };`"
Qual a função do método `parseInt()` em JavaScript?,`parseInt()` converte uma string em um número inteiro. Ele tenta analisar a string e retorna um inteiro ou `NaN` se a string não puder ser convertida.
Como verificar se um valor é um array em JavaScript?,Utilize o método `Array.isArray(valor)`. Ele retorna `true` se o valor for um array e `false` caso contrário.
Como converter um objeto JavaScript para uma string JSON?,Utilize o método `JSON.stringify(objeto)`. Ele retorna uma string JSON representando o objeto.
Como criar um array em JavaScript?,Existem duas formas principais: usando o literal `[]` (ex: `const meuArray = [];`) ou usando o construtor `new Array()` (ex: `const meuArray = new Array();`).
O que é o escopo de uma variável em JavaScript?,"O escopo de uma variável define onde a variável pode ser acessada e usada no código. JavaScript tem escopo global, escopo de função e escopo de bloco (introduzido com `let` e `const`)."
Como adicionar um novo elemento ao final de um array em JavaScript?,"Utilize o método `push()`. Ex: `meuArray.push(""novoElemento"");`"
Qual a finalidade do método `map()` em arrays JavaScript?,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida para cada elemento do array original.
O que é o operador spread (`...`) em JavaScript?,O operador spread permite expandir um iterável (como um array ou string) em locais onde múltiplos argumentos (para chamadas de função) ou múltiplos elementos (para literais de array) são esperados.
Como criar um loop `for...in` em JavaScript?,O loop `for...in` itera sobre as propriedades enumeráveis de um objeto. Ex: `for (let propriedade in objeto) { console.log(propriedade); }`
Qual a função do método `filter()` em arrays JavaScript?,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
Como declarar uma função em JavaScript?,"Utilize a palavra-chave `function` seguida pelo nome da função, parênteses `()` e chaves `{}` para o corpo da função. Ex: `function minhaFuncao() { ... }`"
Como remover um elemento específico de um array em JavaScript?,"Utilize o método `splice(indice, quantidade)`. Ex: `meuArray.splice(2, 1)` remove o elemento no índice 2."
Como comparar duas strings em JavaScript?,Utilize o operador `===` para comparar as strings diretamente.
O que é o evento `onload` em JavaScript?,"O evento `onload` é disparado quando um elemento (como uma página, imagem ou script) terminou de carregar."
Como parar a propagação de um evento em JavaScript?,Utilize o método `event.stopPropagation()`.
Como gerar um número aleatório entre 0 e 1 em JavaScript?,Utilize o método `Math.random()`.
Como acessar o comprimento de uma string em JavaScript?,Utilize a propriedade `length`. Ex: `minhaString.length`.
O que é o método `substring()` em strings JavaScript?,O método `substring()` retorna uma parte da string entre os índices especificados.
Como converter uma string para letras maiúsculas em JavaScript?,Utilize o método `toUpperCase()`. Ex: `minhaString.toUpperCase()`.
O que é o método `indexOf()` em strings JavaScript?,O método `indexOf()` retorna o índice da primeira ocorrência de um valor especificado em uma string. Retorna -1 se o valor não for encontrado.
Como verificar se uma string começa com uma determinada substring em JavaScript?,"Utilize o método `startsWith()`. Ex: `minhaString.startsWith(""substring"")`."
O que é o método `replace()` em strings JavaScript?,O método `replace()` substitui uma ocorrência de um valor em uma string por outro valor.
Como dividir uma string em um array de substrings em JavaScript?,"Utilize o método `split()`. Ex: `minhaString.split("","")`."
O que é o método `trim()` em strings JavaScript?,O método `trim()` remove os espaços em branco do início e do fim de uma string.
Como verificar se um elemento está presente em um array em JavaScript?,"Utilize o método `includes()`. Ex: `meuArray.includes(""elemento"")`."
O que é o método `find()` em arrays JavaScript?,O método `find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida.
Como encontrar o índice de um elemento em um array em JavaScript?,"Utilize o método `indexOf()`. Ex: `meuArray.indexOf(""elemento"")`."
O que é o método `slice()` em arrays JavaScript?,O método `slice()` retorna uma cópia de uma porção de um array em um novo array.
Como ordenar um array em JavaScript?,"Utilize o método `sort()`. Por padrão, ele ordena os elementos como strings. Para ordenar números, você pode fornecer uma função de comparação."
O que é o método `reverse()` em arrays JavaScript?,O método `reverse()` inverte a ordem dos elementos em um array.
Como verificar se um objeto tem uma determinada propriedade em JavaScript?,"Utilize o método `hasOwnProperty()`. Ex: `objeto.hasOwnProperty(""propriedade"")`."
O que é o conceito de Truthy e Falsy em JavaScript?,"Truthy e Falsy são valores que são avaliados como `true` ou `false` em um contexto booleano. Falsy incluem `0`, `""""`, `null`, `undefined`, `NaN`, e `false`. Todos os outros valores são Truthy."
Como usar template literals (template strings) em JavaScript?,"Use backticks (`) para delimitar a string e `${}` para inserir variáveis ou expressões. Ex: `const nome = ""João""; console.log(`Olá, ${nome}!`);`"
O que é o método `padStart()` em strings JavaScript?,"O método `padStart()` preenche o início de uma string com outro string (repetidamente, se necessário) para que a string resultante atinja um determinado comprimento."
Qual a finalidade do operador `??` (nullish coalescing operator) em JavaScript?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Caso contrário, retorna o operando do lado esquerdo."
Como criar um loop `while` em JavaScript?,Utilize a palavra-chave `while` seguida por uma condição entre parênteses e um bloco de código entre chaves. Ex: `while (condicao) { ... }`
Qual a diferença entre um loop `while` e um loop `do...while` em JavaScript?,"O loop `while` verifica a condição antes de executar o bloco de código, enquanto o loop `do...while` executa o bloco de código pelo menos uma vez, e depois verifica a condição."
Como interromper um loop em JavaScript?,Utilize a palavra-chave `break`.
Como pular para a próxima iteração de um loop em JavaScript?,Utilize a palavra-chave `continue`.
Como converter um número para uma string em JavaScript?,Utilize o método `toString()`. Ex: `numero.toString()`.
O que é o operador de módulo (%) em JavaScript?,O operador de módulo (%) retorna o resto da divisão de um número por outro.
Como usar comentários de uma linha e de múltiplas linhas em JavaScript?,Comentários de uma linha começam com `//`. Comentários de múltiplas linhas começam com `/*` e terminam com `*/`.
O que é o Strict Mode em JavaScript?,"O Strict Mode é um modo restrito que impõe regras mais rigorosas para o código JavaScript, ajudando a prevenir erros e a melhorar a segurança. Ative-o adicionando `""use strict"";` no início de um script ou função."
Como declarar uma variável com escopo global em JavaScript?,Declare a variável fora de qualquer função. Evite isso tanto quanto possível e prefira o escopo de bloco.
Como usar a função `setTimeout()` em JavaScript?,"A função `setTimeout(funcao, tempo)` executa uma função após um determinado tempo (em milissegundos)."
O que é a função `setInterval()` em JavaScript?,"A função `setInterval(funcao, tempo)` executa uma função repetidamente em intervalos regulares (em milissegundos)."
Como limpar um timeout definido com `setTimeout()` em JavaScript?,"Utilize a função `clearTimeout(timeoutId)`, onde `timeoutId` é o valor retornado por `setTimeout()`."
Como limpar um intervalo definido com `setInterval()` em JavaScript?,"Utilize a função `clearInterval(intervalId)`, onde `intervalId` é o valor retornado por `setInterval()`."
O que é o operador de exponenciação (**) em JavaScript?,O operador de exponenciação (**) eleva um número à potência de outro. Ex: `2 ** 3` retorna 8.
Como arredondar um número para o inteiro mais próximo em JavaScript?,Utilize o método `Math.round()`.
O que é o método `Math.floor()` em JavaScript?,O método `Math.floor()` retorna o maior inteiro menor ou igual a um número.
Como obter o valor absoluto de um número em JavaScript?,Utilize o método `Math.abs()`.
O que é o método `Math.ceil()` em JavaScript?,O método `Math.ceil()` retorna o menor inteiro maior ou igual a um número.
Como limitar o número de casas decimais de um número em JavaScript?,Utilize o método `toFixed(casasDecimais)`. Ex: `numero.toFixed(2)`.
O que é a função `eval()` em JavaScript?,A função `eval()` avalia uma string como código JavaScript. O uso de `eval()` geralmente é desencorajado devido a riscos de segurança.
Como lançar um erro em JavaScript?,"Utilize a palavra-chave `throw` seguida por um objeto de erro. Ex: `throw new Error(""Mensagem de erro"");`"
Como criar um objeto a partir de uma classe em JavaScript?,Utilize a palavra-chave `new` seguida pelo nome da classe e parênteses `()`. Ex: `const meuObjeto = new MinhaClasse();`
Como implementar herança em JavaScript?,Utilize a palavra-chave `extends` para indicar que uma classe herda de outra. Ex: `class SubClasse extends SuperClasse { ... }`
O que é o conceito de protótipo em JavaScript?,"Em JavaScript, cada objeto tem um protótipo. O protótipo é outro objeto do qual o objeto herda propriedades e métodos."
Como acessar o protótipo de um objeto em JavaScript?,Utilize a propriedade `__proto__` (embora geralmente seja recomendado usar `Object.getPrototypeOf()`).
O que é a função `Object.create()` em JavaScript?,A função `Object.create()` cria um novo objeto com um protótipo especificado.
Como clonar um objeto em JavaScript?,"Uma forma é usar o operador spread: `const novoObjeto = {...objetoOriginal}`.  Para objetos complexos, considere `JSON.parse(JSON.stringify(objetoOriginal))` ou `structuredClone()`."
O que é a função `Object.assign()` em JavaScript?,A função `Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto de destino.
Como detectar o tipo de navegador em JavaScript?,"A informação do navegador está disponível no objeto `navigator`. A propriedade `navigator.userAgent` fornece uma string contendo informações sobre o navegador. No entanto, essa abordagem pode ser pouco confiável."
Como obter a data e hora atual em JavaScript?,Crie um novo objeto `Date`. Ex: `const agora = new Date();`
"O que é o conceito de ""event bubbling"" em JavaScript?","Event bubbling é um processo no qual um evento disparado em um elemento DOM se propaga para cima na hierarquia do DOM, acionando os manipuladores de eventos dos elementos pai."
"O que é o conceito de ""event capturing"" em JavaScript?","Event capturing é o oposto de event bubbling. Em vez de começar no elemento alvo e subir na hierarquia, ele começa no elemento raiz e desce até o elemento alvo. É menos comum do que bubbling."
Como selecionar um elemento HTML pelo seu ID em JavaScript?,"Utilize o método `document.getElementById(""idDoElemento"")`."
Como selecionar elementos HTML por sua classe em JavaScript?,"Utilize o método `document.getElementsByClassName(""nomeDaClasse"")`. Ele retorna uma coleção de elementos."
Como selecionar elementos HTML por sua tag em JavaScript?,"Utilize o método `document.getElementsByTagName(""nomeDaTag"")`. Ele retorna uma coleção de elementos."
O que é o método `querySelector()` em JavaScript?,O método `querySelector()` retorna o primeiro elemento dentro do documento que corresponde ao seletor CSS especificado.
O que é o método `querySelectorAll()` em JavaScript?,O método `querySelectorAll()` retorna uma lista de todos os elementos dentro do documento que correspondem ao seletor CSS especificado.
Como alterar o texto de um elemento HTML em JavaScript?,"Utilize a propriedade `textContent` ou `innerText`. Ex: `elemento.textContent = ""Novo texto"";`"
Como alterar o HTML interno de um elemento HTML em JavaScript?,"Utilize a propriedade `innerHTML`. Ex: `elemento.innerHTML = ""<b>Novo HTML</b>"";`"
Como adicionar um novo elemento HTML ao DOM em JavaScript?,"Crie o elemento usando `document.createElement()`, configure suas propriedades e adicione-o ao DOM usando `appendChild()` ou `insertBefore()`."
Como remover um elemento HTML do DOM em JavaScript?,Utilize o método `removeChild()` do elemento pai.
Como alterar o estilo CSS de um elemento HTML em JavaScript?,"Utilize a propriedade `style` do elemento. Ex: `elemento.style.color = ""red"";`"
Como adicionar uma classe CSS a um elemento HTML em JavaScript?,"Utilize a propriedade `classList.add(""nomeDaClasse"")`."
Como remover uma classe CSS de um elemento HTML em JavaScript?,"Utilize a propriedade `classList.remove(""nomeDaClasse"")`."
Como verificar se um elemento HTML possui uma determinada classe CSS em JavaScript?,"Utilize a propriedade `classList.contains(""nomeDaClasse"")`."
Como alternar uma classe CSS em um elemento HTML em JavaScript?,"Utilize a propriedade `classList.toggle(""nomeDaClasse"")`."
Como adicionar um ouvinte de eventos a um elemento HTML em JavaScript?,"Utilize o método `addEventListener(""nomeDoEvento"", funcaoCallback)`."
Como remover um ouvinte de eventos de um elemento HTML em JavaScript?,"Utilize o método `removeEventListener(""nomeDoEvento"", funcaoCallback)`."
O que é o objeto `event` passado para um manipulador de eventos em JavaScript?,"O objeto `event` contém informações sobre o evento que foi disparado, como o tipo de evento, o elemento que disparou o evento e outras propriedades relacionadas ao evento."
O que é o método `preventDefault()` do objeto `event` em JavaScript?,"O método `preventDefault()` impede o comportamento padrão do evento. Por exemplo, impede que um link siga seu URL ou que um formulário seja enviado."
Como obter o elemento que disparou um evento em JavaScript?,Utilize a propriedade `event.target`.
Como obter as coordenadas do mouse em um evento de clique em JavaScript?,"Utilize as propriedades `event.clientX` e `event.clientY` para obter as coordenadas relativas à janela do navegador, ou `event.pageX` e `event.pageY` para obter as coordenadas relativas ao documento."
O que é a API `Fetch` em JavaScript (sem mencionar bibliotecas externas)?,A API `Fetch` fornece uma interface para buscar recursos através da rede. Ela é uma alternativa mais moderna e poderosa para o `XMLHttpRequest`.
Como fazer uma requisição GET usando a API `Fetch` em JavaScript?,"Utilize a função `fetch(""url"")` para fazer a requisição. Em seguida, use `.then()` para lidar com a resposta."
Como lidar com erros em uma requisição `Fetch` em JavaScript?,Utilize o método `.catch()` para capturar erros que ocorram durante a requisição.
Como enviar dados em uma requisição POST usando a API `Fetch` em JavaScript?,"Passe um objeto de opções para a função `fetch()` com o método definido como ""POST"" e o corpo da requisição configurado com os dados a serem enviados."
Como converter a resposta de uma requisição `Fetch` para JSON em JavaScript?,Utilize o método `.json()` na resposta. Ex: `resposta.json().then(data => { ... });`
Como lidar com o sucesso de uma Promise em JavaScript?,Utilize o método `.then(funcao)` para executar uma função quando a Promise for resolvida.
Como lidar com a falha de uma Promise em JavaScript?,Utilize o método `.catch(funcao)` para executar uma função quando a Promise for rejeitada.
Como usar `async` e `await` para lidar com operações assíncronas em JavaScript?,"Marque uma função como `async`, e dentro dela use `await` antes de uma Promise. Isso faz com que a execução da função espere até que a Promise seja resolvida antes de continuar."
Como lidar com erros ao usar `async` e `await` em JavaScript?,Envolva o código que usa `await` em um bloco `try...catch` para capturar erros que possam ser lançados pela Promise.
Como exportar funcionalidades de um módulo em JavaScript?,"Utilize a palavra-chave `export` antes da declaração da variável, função ou classe que você deseja exportar."
Como importar funcionalidades de um módulo em JavaScript?,"Utilize a palavra-chave `import` seguida pelo nome da variável, função ou classe que você deseja importar e a origem do módulo."
"Qual a diferença entre ""default exports"" e ""named exports"" em JavaScript?","""Default exports"" permitem exportar um único valor por módulo e importar sem usar chaves. ""Named exports"" permitem exportar múltiplos valores por módulo, e na importação deve-se usar chaves e o nome exato do valor exportado."
Como exibir uma mensagem no console do navegador em JavaScript?,"Utilize o método `console.log(""Mensagem"");`."
O que é o método `console.table()` em JavaScript?,O método `console.table()` exibe dados tabulares como tabelas formatadas no console.
Como usar flags em expressões regulares em JavaScript?,"As flags são usadas para modificar o comportamento da expressão regular. Algumas flags comuns incluem `i` (ignore case), `g` (global), e `m` (multiline). Ex: `/padrao/i`."
O que é o método `match()` de uma string em JavaScript (relacionado a RegEx)?,O método `match()` busca por uma correspondência de uma expressão regular em uma string. Retorna um array com as correspondências ou `null` se não houver correspondência.
O que é o método `replace()` de uma string em JavaScript (relacionado a RegEx)?,O método `replace()` substitui as correspondências de uma expressão regular em uma string por outra string.
Como criar um `Symbol` em JavaScript?,"Utilize a função `Symbol()`. Ex: `const meuSimbolo = Symbol(""descricao"");`"
Como criar um iterator em JavaScript?,Implemente um objeto com um método `next()` que retorna um objeto com as propriedades `value` e `done`.
Como criar um generator em JavaScript?,Utilize a sintaxe `function* minhaFuncaoGeradora() { yield valor; }`.
O que é a palavra-chave `yield` em generators JavaScript?,A palavra-chave `yield` pausa a execução do generator e retorna o valor especificado. A execução pode ser retomada posteriormente.
Como criar um WeakMap em JavaScript?,Utilize o construtor `new WeakMap()`.
Como criar um WeakSet em JavaScript?,Utilize o construtor `new WeakSet()`.
O que é o método `Proxy` em JavaScript?,"O objeto `Proxy` permite criar proxies para outros objetos, que podem interceptar e modificar operações fundamentais, como leitura de propriedades, atribuição, enumeração e chamadas de função."
Como criar um Proxy em JavaScript?,"Utilize o construtor `new Proxy(target, handler)`. `target` é o objeto que você está criando um proxy para, e `handler` é um objeto que define os traps (métodos) que interceptam as operações."
O que são os traps (handlers) em um Proxy JavaScript?,"Os traps são funções que interceptam operações específicas no objeto proxy, como `get`, `set`, `apply`, etc. Eles permitem personalizar o comportamento do proxy."
"O que é o padrão de projeto ""Revealing Module Pattern"" em JavaScript?",É um padrão de projeto para encapsular e organizar o código JavaScript.  Ele usa closures para manter o estado privado e retorna um objeto com acesso público a métodos selecionados.
"Como aplicar o ""Revealing Module Pattern"" em JavaScript?","Envolva o código em uma função anônima imediatamente invocada (IIFE). Dentro da função, declare variáveis e funções privadas. Retorne um objeto com apenas as funções que você deseja tornar públicas."
O que são tagged templates em JavaScript?,Tagged templates são uma forma de chamar uma função com um template literal. A função recebe um array de strings literais e um array de valores interpolados.
Como criar uma tagged template em JavaScript?,"Defina uma função que recebe um array de strings e um array de valores. Chame a função usando um template literal com a função como a ""tag"". Ex: `minhaFuncao`Hello, ${nome}!``"
O que é o operador de atribuição com desestruturação (destructuring assignment) em JavaScript?,Permite extrair valores de objetos ou arrays e atribuí-los a variáveis de forma concisa.
Como usar a atribuição com desestruturação em JavaScript com objetos?,"Utilize chaves `{}` para especificar as propriedades que você deseja extrair. Ex: `const { nome, idade } = pessoa;`"
Qual a diferença entre `undefined` e `null` em JavaScript?,"`undefined` significa que uma variável foi declarada mas ainda não recebeu um valor. `null` é um valor de atribuição que representa a ausência intencional de qualquer valor de objeto ou primitivo. `undefined` geralmente indica um estado inicial ou um erro, enquanto `null` é uma atribuição explícita."
Como funciona o operador `typeof` em JavaScript e quais os tipos que ele pode retornar?,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando.  Os tipos que ele pode retornar incluem: ""undefined"", ""boolean"", ""number"", ""string"", ""symbol"", ""bigint"", ""function"", e ""object"". Note que `typeof null` retorna ""object"" (um bug histórico)."
O que é hoisting em JavaScript e como ele afeta a declaração de variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seus respectivos escopos durante a fase de compilação. Isso significa que você pode usar uma variável ou função *antes* de sua declaração no código, mas apenas a *declaração* é movida, não a inicialização. Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto `let` e `const` não são inicializadas e acessar antes da declaração resulta em um `ReferenceError`. Funções declaradas usando a sintaxe `function declaration` são completamente hoisted, enquanto `function expression` estão sujeitas ao mesmo hoisting que as variáveis."
Explique o conceito de closure em JavaScript.,"Um closure é a capacidade de uma função lembrar e acessar variáveis de seu escopo léxico, mesmo quando a função é executada fora desse escopo. Em outras palavras, uma função interna tem acesso às variáveis da função externa onde foi definida, mesmo depois que a função externa terminou de executar."
O que é o objeto `arguments` em JavaScript e como ele pode ser usado?,"Dentro de uma função, `arguments` é um objeto semelhante a um array que contém todos os argumentos passados para a função. Ele permite acessar argumentos por índice (por exemplo, `arguments[0]`, `arguments[1]`) e tem uma propriedade `length` indicando o número de argumentos. No entanto, `arguments` não é um array verdadeiro e não possui os métodos de array (como `forEach`, `map`, etc.) diretamente.  Em funções arrow, `arguments` não está disponível."
Como você pode criar um novo objeto em JavaScript usando a sintaxe de literal de objeto?,"A sintaxe de literal de objeto é usar chaves `{}` para definir um objeto e pares chave-valor dentro das chaves. Por exemplo: `let person = { name: ""John"", age: 30 };`."
"Explique o conceito de ""truthy"" e ""falsy"" em JavaScript.","Em JavaScript, ""truthy"" e ""falsy"" são valores que, quando avaliados em um contexto booleano (por exemplo, em uma condição `if`), se comportam como `true` ou `false`, respectivamente. Valores falsy incluem `false`, `0`, `""""` (string vazia), `null`, `undefined`, e `NaN`. Todos os outros valores são considerados truthy."
Como você pode criar um array em JavaScript?,"Você pode criar um array usando a sintaxe de literal de array `[]`, por exemplo, `let myArray = [1, 2, 3];`, ou usando o construtor `new Array()`, por exemplo, `let myArray = new Array(1, 2, 3);`. A forma literal é geralmente preferida."
O que é o método `map` em arrays JavaScript e como ele funciona?,O método `map` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele não modifica o array original.
O que é o método `filter` em arrays JavaScript e como ele funciona?,O método `filter` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. Ele não modifica o array original.
O que é o método `reduce` em arrays JavaScript e como ele funciona?,"O método `reduce` executa uma função reducer (fornecida) em cada elemento do array, resultando em um único valor de retorno. A função reducer recebe dois argumentos: um acumulador e o valor atual."
Como você pode encontrar o índice de um elemento em um array em JavaScript?,"Você pode usar o método `indexOf()` para encontrar o índice da primeira ocorrência de um elemento em um array. Se o elemento não for encontrado, `indexOf()` retorna `-1`."
O que é o método `forEach` em arrays JavaScript e como ele funciona?,"O método `forEach` executa uma função fornecida uma vez para cada elemento do array. Diferente de `map`, `forEach` não cria um novo array. Ele é usado principalmente para realizar efeitos colaterais."
Como você pode verificar se um array inclui um determinado elemento em JavaScript?,Você pode usar o método `includes()` para verificar se um array inclui um determinado elemento. `includes()` retorna `true` se o elemento estiver presente e `false` caso contrário.
"Qual a diferença entre `let`, `const` e `var` ao declarar variáveis em JavaScript?","`var` tem escopo de função ou escopo global, enquanto `let` e `const` têm escopo de bloco. `let` permite reatribuição, enquanto `const` cria uma variável cujo valor não pode ser reatribuído após a inicialização."
Explique o que são template literals em JavaScript e como eles são usados.,Template literals são strings delimitadas por backticks (``) que permitem a incorporação de expressões JavaScript dentro da string usando `${expression}`. Eles também suportam strings de várias linhas.
O que é destructuring em JavaScript e como ele pode ser usado com objetos e arrays?,"Destructuring é uma expressão JavaScript que permite descompactar valores de arrays ou propriedades de objetos em variáveis distintas. Por exemplo: `let [a, b] = [1, 2];` ou `let { name, age } = { name: ""John"", age: 30 };`."
O que são arrow functions em JavaScript e quais são suas principais diferenças em relação às funções tradicionais?,"Arrow functions são uma sintaxe mais concisa para escrever funções em JavaScript. Elas têm algumas diferenças importantes: não têm seu próprio `this` (herdam o `this` do escopo envolvente), não têm o objeto `arguments` e não podem ser usadas como construtoras (não podem ser chamadas com `new`)."
O que é o operador spread (`...`) em JavaScript e como ele pode ser usado?,O operador spread permite expandir um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados. Ele também pode ser usado para criar cópias rasas de arrays e objetos.
O que é o operador rest (`...`) em JavaScript e como ele pode ser usado?,"O operador rest é usado para coletar um número indefinido de argumentos em uma função como um array. Ele também pode ser usado para desestruturar arrays e objetos, coletando o restante dos elementos ou propriedades em um novo array ou objeto."
Explique o conceito de default parameters em funções JavaScript.,"Default parameters permitem definir valores padrão para parâmetros de função que serão usados se o argumento correspondente não for fornecido ou for `undefined` durante a chamada da função. Exemplo: `function greet(name = ""Guest"") { ... }`."
O que são generators em JavaScript e como eles funcionam?,"Generators são funções que podem ser pausadas e retomadas, permitindo a produção de múltiplos valores ao longo do tempo. Elas são definidas usando a palavra-chave `function*` e usam a palavra-chave `yield` para retornar valores."
O que são iterators em JavaScript e como eles são usados?,Iterators são objetos que definem uma sequência e retornam um valor por vez. Eles possuem um método `next()` que retorna um objeto com duas propriedades: `value` (o próximo valor da sequência) e `done` (um booleano indicando se a sequência terminou).  Iterators são usados por loops `for...of`.
Como você pode criar um loop `for...of` em JavaScript?,"O loop `for...of` é usado para iterar sobre os valores de um objeto iterável, como um array, string, Map, Set, etc. Por exemplo: `for (let value of myArray) { ... }`."
O que são Maps em JavaScript e como eles diferem dos objetos regulares?,"Maps são coleções de pares chave-valor, onde as chaves podem ser de qualquer tipo de dado (incluindo objetos). Ao contrário dos objetos regulares, Maps mantêm a ordem de inserção das chaves e têm propriedades e métodos específicos para manipulação (como `set`, `get`, `has`, `delete`, `size`)."
O que são Sets em JavaScript e como eles são usados?,"Sets são coleções de valores únicos. Eles não permitem valores duplicados. Sets possuem métodos como `add`, `delete`, `has`, e `size` para manipular os elementos."
O que é o método `Object.keys()` em JavaScript e como ele funciona?,O método `Object.keys()` retorna um array com todas as chaves (nomes de propriedades) de um objeto. A ordem das chaves no array retornado é a mesma que a ordem em que as propriedades são iteradas manualmente.
O que é o método `Object.values()` em JavaScript e como ele funciona?,O método `Object.values()` retorna um array com todos os valores das propriedades de um objeto. A ordem dos valores no array retornado é a mesma que a ordem em que as propriedades são iteradas manualmente.
O que é o método `Object.entries()` em JavaScript e como ele funciona?,"O método `Object.entries()` retorna um array de arrays, onde cada sub-array contém o par chave-valor de uma propriedade de um objeto. A ordem dos pares chave-valor no array retornado é a mesma que a ordem em que as propriedades são iteradas manualmente."
Como você pode criar uma cópia rasa de um objeto em JavaScript?,"Você pode criar uma cópia rasa de um objeto usando o operador spread (`...`) ou o método `Object.assign()`. Por exemplo: `let newObj = { ...originalObj };` ou `let newObj = Object.assign({}, originalObj);`."
"O que é o conceito de ""imutabilidade"" em JavaScript e por que ele é importante?","Imutabilidade significa que um objeto não pode ser modificado após sua criação. Em JavaScript, isso é importante porque ajuda a evitar efeitos colaterais inesperados, torna o código mais fácil de depurar e testar e permite otimizações de desempenho."
Como você pode tornar um objeto imutável em JavaScript?,"Você pode usar `Object.freeze()` para tornar um objeto imutável. Isso impede que novas propriedades sejam adicionadas, propriedades existentes sejam removidas ou seus valores sejam modificados. No entanto, `Object.freeze()` apenas torna o objeto *raso* imutável; objetos aninhados ainda podem ser modificados."
"O que é ""currying"" em JavaScript?","Currying é uma técnica em programação funcional que transforma uma função que recebe múltiplos argumentos em uma sequência de funções, cada uma recebendo um único argumento. Em vez de chamar a função com todos os argumentos de uma vez, você chama a primeira função com o primeiro argumento, que retorna uma nova função esperando o próximo argumento, e assim por diante, até que todos os argumentos tenham sido fornecidos."
"O que é ""composição de funções"" em JavaScript?","Composição de funções é o processo de combinar duas ou mais funções para produzir uma nova função. O resultado de cada função é passado como argumento para a próxima, formando um fluxo de transformação de dados."
"Explique o conceito de ""higher-order functions"" em JavaScript.",Higher-order functions são funções que podem receber outras funções como argumentos ou retornar funções como seus resultados. Elas são um conceito fundamental na programação funcional e permitem abstrações poderosas e reutilização de código.
O que é o objeto `Math` em JavaScript e quais são alguns de seus métodos úteis?,"O objeto `Math` é um objeto embutido que fornece propriedades e métodos para operações matemáticas. Alguns métodos úteis incluem `Math.random()`, `Math.floor()`, `Math.ceil()`, `Math.round()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`."
Como você pode gerar um número aleatório entre um intervalo específico em JavaScript?,"Você pode usar a seguinte fórmula: `Math.floor(Math.random() * (max - min + 1)) + min;`, onde `min` e `max` são os limites inferior e superior do intervalo, respectivamente."
Como você pode obter o timestamp atual em JavaScript?,Você pode obter o timestamp atual em milissegundos usando `Date.now()` ou `new Date().getTime()`.
O que são expressões regulares (RegEx) em JavaScript e como elas são usadas?,"Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings. Elas são usadas para pesquisa, substituição e validação de strings."
Quais são alguns metacaracteres comuns usados em expressões regulares em JavaScript?,"Alguns metacaracteres comuns incluem: `.` (qualquer caractere), `*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `[]` (conjunto de caracteres), `[^]` (conjunto de caracteres negado), `\d` (dígito), `\w` (caractere alfanumérico), `\s` (espaço em branco)."
Como você pode usar o método `match()` em JavaScript para encontrar correspondências de uma expressão regular em uma string?,"O método `match()` retorna um array com as correspondências encontradas ou `null` se nenhuma correspondência for encontrada. Se a expressão regular tiver o flag `g` (global), ele retorna todas as correspondências. Caso contrário, ele retorna apenas a primeira correspondência e grupos de captura."
Como você pode usar o método `replace()` em JavaScript com uma expressão regular para substituir partes de uma string?,O método `replace()` substitui partes de uma string que correspondem a uma expressão regular por uma nova string. Você pode usar grupos de captura na string de substituição para referenciar as partes correspondentes.
Explique o conceito de programação assíncrona em JavaScript.,"A programação assíncrona permite que o JavaScript execute múltiplas operações simultaneamente sem bloquear a thread principal. Isso é crucial para evitar que a interface do usuário fique travada durante operações demoradas, como solicitações de rede ou leitura de arquivos."
O que são Promises em JavaScript e como elas são usadas?,"Promises são objetos que representam o eventual resultado (ou falha) de uma operação assíncrona. Elas têm três estados: `pending` (pendente), `fulfilled` (resolvida) e `rejected` (rejeitada). Promises permitem encadear operações assíncronas de forma mais legível e evitar o ""callback hell""."
Como você pode criar uma Promise em JavaScript?,"Você pode criar uma Promise usando o construtor `new Promise((resolve, reject) => { ... })`, onde `resolve` é uma função para resolver a Promise com um valor e `reject` é uma função para rejeitar a Promise com um motivo."
"O que são os métodos `then()`, `catch()` e `finally()` em Promises JavaScript?","`then()` é usado para lidar com o resultado bem-sucedido (resolvido) de uma Promise. `catch()` é usado para lidar com a falha (rejeição) de uma Promise. `finally()` é executado sempre, independentemente de a Promise ter sido resolvida ou rejeitada."
O que são `async` e `await` em JavaScript e como eles são usados?,"`async` e `await` são palavras-chave que simplificam a escrita de código assíncrono em JavaScript. `async` é usado para definir uma função assíncrona, que sempre retorna uma Promise. `await` é usado dentro de uma função `async` para pausar a execução até que uma Promise seja resolvida ou rejeitada."
O que é o Event Loop em JavaScript e como ele funciona?,"O Event Loop é um mecanismo que permite ao JavaScript lidar com operações assíncronas de forma eficiente. Ele monitora a pilha de chamadas e a fila de tarefas (task queue). Quando a pilha de chamadas está vazia, o Event Loop pega a primeira tarefa da fila de tarefas e a coloca na pilha de chamadas para execução."
"O que é o conceito de ""single-threaded"" em JavaScript?","""Single-threaded"" significa que o JavaScript executa código em uma única thread (linha de execução) por vez. Isso significa que se uma operação bloquear a thread principal, toda a aplicação ficará travada. É por isso que a programação assíncrona é tão importante em JavaScript."
O que é o objeto `window` em JavaScript e qual é seu propósito?,"O objeto `window` representa a janela do navegador. É o objeto global no ambiente do navegador e fornece acesso a várias funcionalidades, como manipulação do DOM, histórico do navegador, cookies, temporizadores, etc."
O que é o objeto `document` em JavaScript e qual é seu propósito?,"O objeto `document` representa a página HTML carregada no navegador. Ele fornece acesso ao DOM (Document Object Model), que é uma representação estruturada da página HTML como uma árvore de nós. Através do `document`, você pode manipular o conteúdo e a estrutura da página."
Qual a diferença entre `querySelector()` e `querySelectorAll()` em JavaScript?,`querySelector()` retorna o primeiro elemento que corresponde a um seletor CSS especificado. `querySelectorAll()` retorna uma NodeList com todos os elementos que correspondem ao seletor CSS especificado.
Como você pode modificar o conteúdo de um elemento HTML usando JavaScript?,"Você pode modificar o conteúdo de um elemento HTML usando propriedades como `innerHTML`, `textContent`, ou `innerText`."
O que são eventos em JavaScript e como eles são usados?,"Eventos são ações ou ocorrências que acontecem no navegador, como cliques do mouse, carregamento de página, envio de formulário, etc. JavaScript permite que você responda a esses eventos executando código quando eles acontecem."
Como você pode adicionar um listener de evento a um elemento HTML usando JavaScript?,"Você pode adicionar um listener de evento usando o método `addEventListener()` do elemento. Por exemplo: `element.addEventListener(""click"", function() { ... });`."
O que é o objeto `event` em JavaScript e quais são algumas de suas propriedades úteis?,"O objeto `event` é passado como argumento para a função de callback de um listener de evento. Ele contém informações sobre o evento que ocorreu, como o tipo do evento, o elemento alvo, as coordenadas do mouse, etc. Algumas propriedades úteis incluem `type`, `target`, `clientX`, `clientY`, `preventDefault()`, `stopPropagation()`."
O que é o método `stopPropagation()` do objeto `event` em JavaScript?,O método `stopPropagation()` impede que um evento se propague para elementos pais no DOM (fase de bubbling).
"O que é ""event delegation"" em JavaScript e por que ele é útil?","""Event delegation"" é uma técnica em que você adiciona um listener de evento a um elemento pai em vez de a múltiplos elementos filhos. Isso é útil para melhorar o desempenho, especialmente quando você tem muitos elementos filhos ou quando os elementos filhos são adicionados dinamicamente."
O que são cookies em JavaScript e como eles são usados?,"Cookies são pequenos arquivos de texto que os sites armazenam no navegador do usuário para lembrar informações sobre o usuário, como preferências, informações de login, etc. Eles podem ser acessados e manipulados usando JavaScript."
O que é o Local Storage em JavaScript e como ele difere dos cookies?,"Local Storage é um mecanismo de armazenamento web que permite armazenar dados no navegador do usuário persistentemente (mesmo depois que o navegador é fechado). Ao contrário dos cookies, o Local Storage não é enviado para o servidor a cada solicitação e tem uma capacidade de armazenamento muito maior."
Como você pode salvar dados no Local Storage usando JavaScript?,"Você pode salvar dados no Local Storage usando o método `localStorage.setItem(key, value)`, onde `key` é o nome da chave e `value` é o valor a ser salvo (que deve ser uma string)."
Como você pode recuperar dados do Local Storage usando JavaScript?,"Você pode recuperar dados do Local Storage usando o método `localStorage.getItem(key)`, onde `key` é o nome da chave."
Como você pode remover dados do Local Storage usando JavaScript?,"Você pode remover dados do Local Storage usando o método `localStorage.removeItem(key)`, onde `key` é o nome da chave."
O que é o Session Storage em JavaScript e como ele difere do Local Storage?,"Session Storage é semelhante ao Local Storage, mas os dados são armazenados apenas durante a sessão do navegador. Quando o navegador é fechado, os dados são apagados."
O que é JSON (JavaScript Object Notation) e como ele é usado em JavaScript?,"JSON é um formato de dados leve e fácil de ler, usado para transmitir dados entre um servidor e um navegador. Ele é baseado na sintaxe de objetos JavaScript, mas é independente da linguagem."
O que são erros em JavaScript e como você pode lidar com eles?,Erros são problemas que ocorrem durante a execução do código JavaScript. Você pode lidar com erros usando blocos `try...catch` para capturar e tratar as exceções lançadas pelo código.
Como você pode lançar um erro manualmente em JavaScript?,"Você pode lançar um erro manualmente usando a palavra-chave `throw`. Por exemplo: `throw new Error(""Mensagem de erro"");`."
O que é o bloco `try...catch...finally` em JavaScript e como ele funciona?,"O bloco `try` contém o código que pode lançar uma exceção. O bloco `catch` captura a exceção (se ocorrer) e executa o código para lidar com o erro. O bloco `finally` é executado sempre, independentemente de uma exceção ter sido lançada ou não."
O que é o objeto `console` em JavaScript e quais são alguns de seus métodos úteis?,"O objeto `console` fornece acesso ao console de depuração do navegador. Alguns métodos úteis incluem `console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`."
Como você pode depurar código JavaScript usando o console do navegador?,"Você pode usar `console.log()` para imprimir valores de variáveis e mensagens no console. Você também pode usar a ferramenta de depuração do navegador para definir breakpoints, inspecionar variáveis e executar o código passo a passo."
O que são Source Maps em JavaScript e como eles são usados?,"Source Maps são arquivos que mapeiam o código JavaScript minificado e transpilado de volta para o código fonte original. Isso facilita a depuração do código em produção, pois você pode ver o código original em vez do código minificado."
"O que são ""strict mode"" em JavaScript e como você pode habilitá-lo?","""Strict mode"" é um modo restrito de execução do JavaScript que impõe regras mais rígidas e elimina alguns comportamentos considerados perigosos ou propensos a erros. Você pode habilitá-lo adicionando a diretiva `""use strict"";` no início de um script ou função."
"Quais são algumas vantagens de usar ""strict mode"" em JavaScript?","Algumas vantagens incluem: prevenir o uso de variáveis não declaradas, lançar erros em atribuições a propriedades somente leitura, eliminar alguns comportamentos ambíguos, melhorar a segurança do código."
O que são closures e como eles se relacionam com o garbage collection em JavaScript?,"Closures permitem que funções internas acessem variáveis do escopo externo, mesmo após a função externa ter terminado de executar. Isso pode impedir que as variáveis do escopo externo sejam coletadas pelo garbage collector, pois elas ainda estão sendo referenciadas pela função interna."
O que é o garbage collection em JavaScript e como ele funciona?,Garbage collection é o processo automático de liberar memória que não está mais sendo usada pelo programa. O JavaScript tem um garbage collector que rastreia objetos e remove aqueles que não são mais referenciados por nenhuma variável ou outro objeto.
Quais são as formas de evitar memory leaks em JavaScript?,"Para evitar memory leaks, é importante: remover listeners de eventos quando não forem mais necessários, liberar referências a objetos grandes quando não forem mais usados, evitar criar referências circulares entre objetos, e ter cuidado com closures que podem manter variáveis em memória por mais tempo do que o necessário."
O que é o operador `void` em JavaScript e como ele é usado?,O operador `void` avalia uma expressão e retorna `undefined`. Ele é frequentemente usado para evitar que um link execute o comportamento padrão (como navegar para uma nova página) ou para garantir que uma função não retorne nenhum valor.
Como você pode criar uma função memoized em JavaScript?,Você pode criar uma função memoized usando um objeto para armazenar os resultados em cache. A chave do objeto pode ser uma string que representa os argumentos da função e o valor pode ser o resultado da função.
O que é um Polyfill em JavaScript e por que ele é usado?,Um polyfill é um código (geralmente JavaScript) que fornece funcionalidade moderna em navegadores mais antigos que não a suportam nativamente. Ele permite que você use recursos novos sem se preocupar com a compatibilidade com navegadores legados.
O que é transpilação em JavaScript e qual a diferença para um Polyfill?,"Transpilação é o processo de converter código de uma versão do JavaScript (ou uma linguagem que se converte em JavaScript) para uma versão mais antiga, de forma que possa ser executada em navegadores mais antigos. Diferente de um polyfill que adiciona *funcionalidade*, a transpilação muda a *sintaxe* do código. Babel é uma ferramenta popular para transpilação."
O que são Web Workers em JavaScript e como eles são usados?,"Web Workers permitem executar scripts JavaScript em threads de background, separados da thread principal do navegador. Isso evita que operações demoradas bloqueiem a interface do usuário."
Quais são as limitações de Web Workers em JavaScript?,Web Workers não têm acesso direto ao DOM. Eles se comunicam com a thread principal por meio de mensagens (usando o método `postMessage()`).
O que são módulos em JavaScript e como eles são usados?,"Módulos são unidades de código reutilizáveis que encapsulam funcionalidades específicas. Eles ajudam a organizar o código, evitar conflitos de nomes e melhorar a capacidade de manutenção."
Como você pode exportar um módulo em JavaScript?,"Você pode usar as palavras-chave `export` (nomeado) ou `export default` (padrão) para exportar valores, funções, classes ou objetos de um módulo."
Como você pode importar um módulo em JavaScript?,"Você pode usar a palavra-chave `import` para importar valores, funções, classes ou objetos de um módulo."
Qual a diferença entre `export` e `export default` em JavaScript?,"`export` permite exportar múltiplos valores, funções, classes ou objetos nomeados. `export default` permite exportar um único valor padrão. Ao importar um módulo exportado com `export`, você deve usar o mesmo nome usado na exportação. Ao importar um módulo exportado com `export default`, você pode usar qualquer nome."
O que é o padrão CommonJS e como ele difere dos módulos ES (ECMAScript)?,CommonJS é um sistema de módulos usado principalmente no Node.js. Ele usa as funções `require()` para importar módulos e o objeto `module.exports` para exportar módulos. Os módulos ES são o padrão nativo de módulos do JavaScript e usam as palavras-chave `import` e `export`.
O que é o padrão AMD (Asynchronous Module Definition) em JavaScript?,AMD é um sistema de módulos assíncrono usado principalmente em navegadores. Ele usa a função `define()` para definir módulos e permite carregar módulos de forma assíncrona. RequireJS é uma implementação popular de AMD.
O que são IIFE (Immediately Invoked Function Expressions) em JavaScript e por que eles são usados?,IIFE são funções que são definidas e
Como você declara uma variável em JavaScript que não pode ser reatribuída após a inicialização?,Utiliza-se a palavra-chave `const`.
Como se define uma função anônima em JavaScript?,Uma função anônima é definida sem um nome. Exemplo: `function() { // código da função }`. Geralmente é atribuída a uma variável ou passada como argumento para outra função.
Como se cria um objeto literal em JavaScript?,"Utiliza-se chaves `{}` e pares chave-valor separados por vírgulas. Exemplo: `let pessoa = { nome: ""João"", idade: 30 };`"
Como se itera sobre as propriedades de um objeto em JavaScript?,Utiliza-se o loop `for...in`. Exemplo: `for (let propriedade in objeto) { console.log(propriedade); }`
O que é o método `map()` em arrays JavaScript e o que ele retorna?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele retorna um novo array com o mesmo número de elementos que o array original.
Como se adiciona um elemento ao final de um array em JavaScript?,Utiliza-se o método `push()`.
Qual é o propósito do método `pop()` em arrays JavaScript?,Remove o último elemento de um array e retorna esse elemento.
Como se converte uma string em um número em JavaScript?,"Pode-se usar `parseInt()`, `parseFloat()` ou o operador unário `+`."
O que é o método `toFixed()` em JavaScript?,"Formata um número, arredondando-o para um número específico de casas decimais. Retorna uma string."
Como se verifica se uma variável é um array em JavaScript?,Utiliza-se `Array.isArray(variavel)`.
O que é o método `concat()` em arrays JavaScript?,Retorna um novo array resultante da concatenação de dois ou mais arrays.
Como se remove elementos duplicados de um array em JavaScript?,Pode-se usar `[...new Set(array)]`.
"Qual a diferença entre `let`, `const` e `var` em JavaScript?",`var` tem escopo de função ou global. `let` e `const` têm escopo de bloco. `const` também impede a reatribuição da variável após a inicialização.
O que é a função `setTimeout()` em JavaScript?,Executa uma função ou trecho de código após um determinado atraso em milissegundos.
Como se para a execução de um `setInterval()` em JavaScript?,Utiliza-se a função `clearInterval()` e o ID retornado por `setInterval()`.
Como se obtém o comprimento de uma string em JavaScript?,Utiliza-se a propriedade `length`.
Como se divide uma string em um array de substrings em JavaScript?,Utiliza-se o método `String.prototype.split()`.
O que são template literals (template strings) em JavaScript?,São strings que permitem a interpolação de variáveis e expressões dentro da string usando crases (`` ` ``) e `${}`.
O que é o método `Array.prototype.reduce()` em JavaScript?,Aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é tratamento de erros em JavaScript e como é geralmente feito?,É o processo de identificar e lidar com erros que ocorrem durante a execução do código. Geralmente feito com blocos `try...catch`.
O que é o método `String.prototype.search()` em JavaScript?,Procura por uma correspondência entre uma expressão regular e uma string e retorna o índice da primeira correspondência ou -1 se não houver correspondência.
Quais são alguns modificadores comuns em expressões regulares em JavaScript?,"`i` (ignorar maiúsculas/minúsculas), `g` (global, encontrar todas as correspondências) e `m` (multilinhas)."
Como se obtém a data e hora atual em JavaScript?,`new Date()`.
Como se obtém o ano de um objeto `Date` em JavaScript?,Utiliza-se o método `getFullYear()`.
Como se obtém o mês de um objeto `Date` em JavaScript?,"Utiliza-se o método `getMonth()`. Retorna um valor de 0 a 11 (0 = Janeiro, 11 = Dezembro)."
Como se obtém o dia do mês de um objeto `Date` em JavaScript?,Utiliza-se o método `getDate()`.
Qual a diferença do valor de `this` em funções normais e arrow functions?,"Em funções normais, `this` é dinâmico e depende de como a função é chamada. Em arrow functions, `this` é léxico, ou seja, herda o `this` do contexto envolvente."
Como se pode forçar o valor de `this` dentro de uma função em JavaScript?,"Utilizando os métodos `call()`, `apply()` ou `bind()`."
O que são objetos globais em JavaScript? Dê exemplos.,"São objetos que estão disponíveis em todos os contextos de execução. Exemplos: `window` (em navegadores), `global` (em Node.js), `Math`, `Date`, `Array`, `String`."
O que é o padrão de módulo em JavaScript?,"É um padrão de design que permite encapsular o código e expor apenas as partes necessárias para o exterior, criando um módulo autocontido."
Como se cria um módulo em JavaScript usando IIFE?,Envolvendo o código em uma IIFE e retornando um objeto com as propriedades e métodos que se deseja expor.
O que é o прототип em JavaScript?,É um objeto associado a cada função e objeto em JavaScript. Ele fornece propriedades e métodos que podem ser herdados por outros objetos.
Como se define o protótipo de um objeto em JavaScript?,Usando a propriedade `prototype` do construtor do objeto ou usando o método `Object.setPrototypeOf()`.
O que é a palavra-chave `class` em JavaScript?,"É uma sintaxe mais clara e concisa para criar objetos e herança prototípica em JavaScript, introduzida no ECMAScript 2015 (ES6)."
Como se cria uma classe em JavaScript?,"Utiliza-se a palavra-chave `class` seguida do nome da classe e, dentro das chaves, define-se o construtor e os métodos da classe."
Como se herda de outra classe em JavaScript?,Utiliza-se a palavra-chave `extends`.
O que é a palavra-chave `super` em JavaScript?,É usada dentro de uma classe filha para chamar o construtor da classe pai ou acessar métodos da classe pai.
O que são getters e setters em JavaScript?,"São métodos especiais dentro de uma classe que permitem acessar e modificar propriedades de um objeto de forma controlada. Getters são usados para obter o valor de uma propriedade, e setters são usados para definir o valor de uma propriedade."
O que são Iterators em JavaScript?,São objetos que definem uma sequência e retornam um valor por vez. Eles implementam um método `next()` que retorna um objeto com as propriedades `value` (o próximo valor da sequência) e `done` (um booleano indicando se a sequência terminou).
O que são Iterables em JavaScript?,São objetos que podem ser iterados usando um loop `for...of`. Eles implementam um método `Symbol.iterator()` que retorna um objeto iterador.
O que é o método `Symbol.iterator` em JavaScript?,"É um símbolo especial que define o iterador padrão para um objeto. Quando um objeto implementa esse método, ele se torna iterável e pode ser usado em loops `for...of`."
O que são Memory Leaks em JavaScript?,"São situações em que a memória não é liberada corretamente pelo coletor de lixo, levando ao aumento do uso de memória ao longo do tempo e, eventualmente, podendo causar lentidão ou travamento do programa."
Como evitar Memory Leaks em JavaScript?,"Evitando referências circulares, removendo ouvintes de eventos desnecessários, liberando referências a objetos grandes quando não forem mais necessários, e utilizando ferramentas de análise de memória para identificar problemas."
O que é o Event Loop em JavaScript?,"É um mecanismo que permite que o JavaScript execute operações assíncronas de forma não bloqueante. Ele gerencia a fila de tarefas e a pilha de chamadas, garantindo que o código seja executado em ordem e que as operações assíncronas sejam tratadas quando estiverem prontas."
O que é a Call Stack em JavaScript?,"É uma estrutura de dados que rastreia a sequência de funções que estão sendo executadas em um determinado momento. Quando uma função é chamada, ela é adicionada à pilha. Quando a função termina de ser executada, ela é removida da pilha."
O que é a Task Queue em JavaScript?,"É uma fila que contém as tarefas assíncronas que estão esperando para serem executadas. Quando uma operação assíncrona é concluída, sua função de callback é adicionada à fila. O Event Loop pega as tarefas da fila e as coloca na Call Stack quando a Call Stack está vazia."
O que são microtasks em JavaScript?,São tarefas que têm prioridade sobre as tarefas normais na Task Queue. Promises e `MutationObserver` usam microtasks.
Qual a ordem de prioridade de execução das tarefas no Event Loop?,1. Call Stack. 2. Microtask Queue. 3. Task Queue.
O que é a diferença entre herança clássica e prototípica em JavaScript?,"A herança clássica (comum em outras linguagens) se baseia em classes, enquanto a herança prototípica se baseia em protótipos de objetos. Em JavaScript, a herança é prototípica."
O que é Currying em JavaScript?,Currying é uma técnica de transformação de uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.
O que é Memoization em JavaScript?,Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras e retorna o resultado armazenado em cache quando as mesmas entradas ocorrem novamente.
O que é Composição de Funções em JavaScript?,É uma técnica de combinar duas ou mais funções para criar uma nova função. O resultado de uma função é passado como argumento para a próxima função.
O que é a programação reativa em JavaScript?,É um paradigma de programação que lida com fluxos de dados assíncronos e a propagação da mudança. Observables são um conceito central na programação reativa.
O que são Observables em JavaScript?,São fluxos de dados que podem emitir valores ao longo do tempo. Os observadores se inscrevem nos Observables para receber notificações quando novos valores são emitidos.
O que são sujeitos (Subjects) em JavaScript (em programação reativa)?,São um tipo especial de Observable que permite que os valores sejam multicast para vários observadores.
O que são operadores em programação reativa em JavaScript?,"São funções que transformam, filtram ou combinam Observables."
O que é a diferença entre `Observable.subscribe()` e `Observable.pipe()`?,`subscribe()` é usado para iniciar a emissão de valores de um Observable e receber notificações. `pipe()` é usado para aplicar operadores a um Observable para transformá-lo.
Como se seleciona um elemento HTML pelo seu ID usando JavaScript?,Utiliza-se o método `document.getElementById('idDoElemento')`.
Como se seleciona múltiplos elementos HTML por sua classe usando JavaScript?,Utiliza-se o método `document.getElementsByClassName('nomeDaClasse')`.
Como se seleciona elementos HTML usando seletores CSS em JavaScript?,Utiliza-se o método `document.querySelector('seletorCSS')` (para selecionar o primeiro elemento que corresponde) ou `document.querySelectorAll('seletorCSS')` (para selecionar todos os elementos que correspondem).
Como se altera o conteúdo de um elemento HTML usando JavaScript?,Utiliza-se a propriedade `textContent` ou `innerHTML` do elemento.
Como se adiciona ou remove classes CSS de um elemento HTML usando JavaScript?,"Utiliza-se a propriedade `classList` do elemento, que tem métodos como `add()`, `remove()` e `toggle()`."
Como se define um estilo CSS diretamente em um elemento HTML usando JavaScript?,Utiliza-se a propriedade `style` do elemento. Exemplo: `elemento.style.color = 'red';`
Como se adiciona um ouvinte de evento a um elemento HTML usando JavaScript?,"Utiliza-se o método `addEventListener('nomeDoEvento', funçãoDeCallback)`."
O que é a diferença entre `addEventListener()` e `onclick`?,"`addEventListener()` permite adicionar múltiplos ouvintes de eventos a um mesmo elemento, enquanto `onclick` permite apenas um. `addEventListener()` também oferece mais controle sobre o bubbling e capturing."
O que é bubbling de eventos em JavaScript?,"É o processo em que um evento disparado em um elemento se propaga para cima na árvore do DOM, ativando ouvintes de eventos em seus elementos pais."
O que é capturing de eventos em JavaScript?,"É o processo em que um evento se propaga para baixo na árvore do DOM, ativando ouvintes de eventos em seus elementos pais antes de chegar ao elemento alvo. É o oposto de bubbling."
Como se previne o comportamento padrão de um evento em JavaScript?,Utiliza-se o método `preventDefault()` do objeto de evento.
Como se interrompe a propagação de um evento em JavaScript?,Utiliza-se o método `stopPropagation()` do objeto de evento.
O que é event delegation em JavaScript?,É uma técnica de adicionar um ouvinte de evento a um elemento pai em vez de adicionar ouvintes de evento a vários elementos filhos. Isso pode melhorar o desempenho e simplificar o código.
O que é AJAX (Asynchronous JavaScript and XML)?,"É uma técnica que permite que as páginas web se comuniquem com um servidor em segundo plano, sem precisar recarregar a página inteira."
Como se faz uma requisição AJAX usando a API `fetch` em JavaScript?,Utiliza-se a função `fetch('url')` que retorna uma Promise que é resolvida com a resposta do servidor.
O que são cabeçalhos (Headers) em uma requisição HTTP?,"São informações adicionais que são enviadas com a requisição ou resposta HTTP. Eles fornecem informações sobre o tipo de conteúdo, o método HTTP usado, o estado da requisição, etc."
O que são métodos HTTP? Dê exemplos.,"São verbos que definem a ação que deve ser realizada em um recurso no servidor. Exemplos: GET (obter um recurso), POST (criar um novo recurso), PUT (atualizar um recurso existente), DELETE (excluir um recurso)."
O que são códigos de status HTTP? Dê exemplos.,"São códigos numéricos que indicam o estado da requisição HTTP. Exemplos: 200 (OK), 404 (Não Encontrado), 500 (Erro Interno do Servidor)."
O que é Local Storage?,É uma API que permite que os sites armazenem dados no navegador do usuário de forma persistente. Os dados ficam armazenados mesmo após o navegador ser fechado.
O que é Session Storage?,"É semelhante ao Local Storage, mas os dados são armazenados apenas durante a sessão do navegador. Quando o navegador é fechado, os dados são perdidos."
Qual a diferença entre Local Storage e Session Storage?,"Local Storage armazena dados de forma persistente, enquanto Session Storage armazena dados apenas durante a sessão do navegador."
O que é CORS (Cross-Origin Resource Sharing)?,"É um mecanismo de segurança que restringe o acesso a recursos de um domínio diferente do domínio da página web atual. Ele impede que scripts de um domínio acessem dados de outro domínio, a menos que o servidor do outro domínio permita explicitamente."
Como habilitar o CORS em um servidor?,Configurando o cabeçalho `Access-Control-Allow-Origin` na resposta HTTP do servidor.
O que é o JSONP (JSON with Padding)?,É uma técnica antiga para contornar as restrições de CORS usando a tag `<script>`. Ela envolve a solicitação de dados em um formato JSON envolto em uma função de callback. É menos segura e menos flexível que o CORS.
Como se cria um Web Worker em JavaScript?,"Criando um arquivo JavaScript separado que contém o código do worker, e então criando um objeto `Worker` no thread principal, passando o caminho do arquivo do worker como argumento."
Como se comunica entre o thread principal e um Web Worker?,Usando o método `postMessage()` para enviar mensagens e o evento `message` para receber mensagens.
O que é Code Splitting?,"É uma técnica para dividir o código de uma aplicação em vários bundles menores que podem ser carregados sob demanda. Isso pode melhorar o desempenho inicial da aplicação, pois o navegador não precisa carregar todo o código de uma vez."
O que são Módulos ES (ES Modules)?,São um sistema de módulos padrão para JavaScript que permite organizar o código em arquivos separados e importá-los e exportá-los conforme necessário.
Quais são as palavras-chave `import` e `export` em ES Modules?,"`import` é usado para importar módulos de outros arquivos, e `export` é usado para exportar funções, classes ou variáveis de um módulo.

Espero que esta lista seja útil e cubra uma ampla gama de tópicos importantes em JavaScript. Se precisar de mais alguma coisa, é só pedir!"
O que são closures em JavaScript e por que são úteis?,"Um closure é a combinação de uma função com o ambiente lexical (escopo) onde essa função foi criada. Isso significa que a função ""lembra"" das variáveis que estavam em seu escopo no momento da sua criação, mesmo depois que o escopo original não estiver mais ativo. São úteis para encapsulamento, privacidade de dados e criação de funções ""factory"" (fábricas de funções)."
Explique o conceito de hoisting em JavaScript.,"Hoisting é um comportamento no JavaScript onde as declarações de variáveis (usando `var`) e funções são movidas para o topo do seu escopo antes da execução do código. No entanto, a inicialização das variáveis (atribuição de valores) não é movida. Com `let` e `const`, as variáveis são hoisted, mas não podem ser acessadas antes da declaração (ReferenceError)."
O que é o método `bind()` em JavaScript e como ele é usado?,"O método `bind()` cria uma nova função que, quando chamada, tem sua palavra-chave `this` definida para o valor fornecido.  Ele também permite predefinir argumentos para a função original. É usado principalmente para controlar o contexto de `this` dentro de funções."
Explique o que é Event Bubbling em JavaScript.,"Event Bubbling é o processo em que um evento disparado em um elemento DOM se propaga (sobe) pela árvore DOM, disparando os mesmos event listeners em cada elemento pai até chegar ao elemento raiz (`document`)."
O que é Event Capturing em JavaScript?,"Event Capturing é o oposto do Event Bubbling. Em vez de começar no elemento alvo e subir a árvore DOM, o Event Capturing começa no elemento raiz (`document`) e desce a árvore até o elemento alvo, disparando os event listeners no caminho."
Qual a diferença entre `setTimeout` e `setInterval` em JavaScript?,`setTimeout` executa uma função apenas uma vez após um determinado atraso (em milissegundos). `setInterval` executa uma função repetidamente em intervalos regulares (em milissegundos).
O que é o método `forEach()` e como ele funciona?,"`forEach()` é um método de array que executa uma função fornecida uma vez para cada elemento do array. Ele recebe uma função de callback como argumento, que recebe o elemento atual, o índice e o array como parâmetros."
Qual a diferença entre `map()` e `forEach()` em JavaScript?,"Ambos `map()` e `forEach()` iteram sobre um array. `forEach()` executa uma função para cada elemento, mas não retorna nada (ou retorna `undefined`). `map()` também executa uma função para cada elemento, mas retorna um *novo* array com os resultados da aplicação da função a cada elemento."
Explique como funciona o `this` em JavaScript.,"O valor de `this` em JavaScript depende de como a função é chamada. Em uma função global, `this` se refere ao objeto global (window no navegador, global no Node.js). Em um método de objeto, `this` se refere ao objeto que possui o método. Em uma função chamada com `call`, `apply` ou `bind`, `this` é definido pelo primeiro argumento."
Como você cria um objeto em JavaScript usando a sintaxe literal de objeto?,"A sintaxe literal de objeto usa chaves `{}` para definir um objeto. As propriedades são definidas dentro das chaves como pares chave-valor, separados por dois pontos `:`. Exemplo: `const pessoa = { nome: ""João"", idade: 30 };`."
Explique o que são funções de primeira classe (First-Class Functions) em JavaScript.,"Funções de primeira classe significam que as funções em JavaScript são tratadas como qualquer outra variável. Elas podem ser atribuídas a variáveis, passadas como argumentos para outras funções e retornadas como valores de outras funções."
Explique o que é o operador spread em JavaScript.,O operador spread (`...`) permite expandir um iterável (como um array ou string) em locais onde se espera múltiplos argumentos (em chamadas de função) ou múltiplos elementos (em literais de array e objeto).
O que são funções assíncronas (`async/await`) em JavaScript?,"`async/await` são construções sintáticas que facilitam o trabalho com código assíncrono em JavaScript, tornando-o mais legível e semelhante a código síncrono. `async` declara uma função assíncrona que sempre retorna uma Promise. `await` pausa a execução da função assíncrona até que a Promise seja resolvida ou rejeitada."
Como você lida com erros em Promises em JavaScript?,Você pode usar o método `.catch()` para lidar com erros em Promises. O método `.catch()` é chamado quando a Promise é rejeitada. Você também pode usar o bloco `try...catch` dentro de uma função `async` para lidar com erros lançados por `await`.
"Qual a diferença entre `call()`, `apply()` e `bind()` em JavaScript?","Todos os três são usados para definir o valor de `this` dentro de uma função. `call()` e `apply()` invocam a função imediatamente. `call()` recebe os argumentos individualmente, enquanto `apply()` recebe os argumentos como um array. `bind()` retorna uma nova função com o `this` definido e os argumentos predefinidos, mas não a invoca imediatamente."
O que é o padrão de módulo (module pattern) em JavaScript?,"O padrão de módulo é uma forma de encapsular código JavaScript, fornecendo privacidade (variáveis e funções privadas) e um namespace para evitar conflitos de nomes globais. Ele geralmente usa closures para manter o estado privado."
Explique o que é a função `Object.create()` em JavaScript.,`Object.create()` cria um novo objeto com o protótipo especificado e propriedades opcionais. É uma maneira de criar herança prototipal em JavaScript.
O que é Truthy e Falsy em JavaScript?,"Em JavaScript, Truthy são valores que são avaliados como `true` em um contexto booleano, e Falsy são valores que são avaliados como `false`. Os valores Falsy incluem: `false`, `0`, `""""` (string vazia), `null`, `undefined` e `NaN`. Todos os outros valores são Truthy."
O que é um IIFE (Immediately Invoked Function Expression) em JavaScript?,"Um IIFE (Expressão de Função Invocada Imediatamente) é uma função JavaScript que é definida e executada imediatamente após a sua criação. Ele é usado para criar um escopo privado, protegendo variáveis e funções internas de interferência externa."
O que é 'use strict' em JavaScript?,"`'use strict'` é uma diretiva que habilita o modo estrito em JavaScript. O modo estrito impõe um conjunto mais restritivo de regras para o código, ajudando a prevenir erros comuns e tornando o código mais seguro e fácil de depurar."
Como você interrompe a propagação de um evento em JavaScript?,Você pode usar o método `event.stopPropagation()` para impedir que um evento se propague para os elementos pais na árvore DOM (Event Bubbling). Você também pode usar `event.stopImmediatePropagation()` para impedir que outros event listeners no mesmo elemento sejam executados.
O que é type coercion em JavaScript?,"Type coercion é a conversão automática (implícita) de valores de um tipo de dados para outro pelo JavaScript. Isso pode ocorrer durante operações aritméticas, comparações ou outras operações."
O que é a diferença entre funções declaradas e expressões de função em JavaScript?,Uma declaração de função é definida usando a palavra-chave `function` seguida pelo nome da função. Ela é hoisted para o topo do seu escopo. Uma expressão de função é criada atribuindo uma função anônima a uma variável. Ela não é hoisted.
O que são promessas (Promises) em JavaScript e como elas ajudam com o código assíncrono?,"Promessas são objetos que representam o resultado eventual (sucesso ou falha) de uma operação assíncrona. Elas ajudam a evitar o ""callback hell"" (aninhamento excessivo de callbacks) e tornam o código assíncrono mais fácil de ler e gerenciar."
O que são objetos proxy em JavaScript?,"Objetos Proxy permitem interceptar e personalizar operações fundamentais em objetos (como leitura, escrita, enumeração, etc.). Eles são usados para criar comportamentos personalizados para objetos, como validação, logging ou virtualização."
O que são WeakMap e WeakSet em JavaScript e qual a sua utilidade?,"`WeakMap` e `WeakSet` são versões fracas de `Map` e `Set`. A diferença é que as chaves de um `WeakMap` devem ser objetos (e não podem ser tipos primitivos) e os valores em um `WeakSet` devem ser objetos. Se um objeto usado como chave em um `WeakMap` ou como valor em um `WeakSet` não for mais referenciado por nenhum outro lugar no código, ele pode ser coletado pelo garbage collector, liberando a memória. Isso evita vazamentos de memória."
Como você pode comparar dois objetos em JavaScript para verificar se são iguais?,"A comparação direta de objetos (`obj1 === obj2`) verifica apenas se as referências são iguais, não se os conteúdos são iguais. Para comparar os conteúdos, você precisa iterar sobre as propriedades e comparar os valores ou usar bibliotecas especializadas para comparações profundas. `JSON.stringify(obj1) === JSON.stringify(obj2)` pode funcionar para objetos simples, mas tem limitações (ordem das propriedades, funções, etc.)."
O que é o Garbage Collector (Coletor de Lixo) em JavaScript e como ele funciona?,"O Garbage Collector é um processo automático que libera a memória ocupada por objetos que não são mais usados pelo programa. O JavaScript usa um garbage collector ""mark-and-sweep"" (marcar e limpar) que identifica quais objetos são alcançáveis a partir das raízes (variáveis globais, pilha de execução, etc.) e marca esses objetos como ""vivos"". Em seguida, ele limpa a memória ocupada pelos objetos não marcados como ""vivos""."
O que é strict mode em JavaScript e quais suas vantagens?,"Strict mode é um modo restritivo em JavaScript que ajuda a escrever código mais seguro e limpo. Ele elimina alguns comportamentos ""silenciosos"" do JavaScript (que não lançam erros, mas podem causar problemas) e lança erros em vez disso. Algumas vantagens são: impede o uso de variáveis não declaradas, proíbe a atribuição a propriedades somente leitura e aumenta a segurança."
Explique o conceito de Shadowing de variáveis em JavaScript.,"Shadowing de variáveis ocorre quando uma variável declarada dentro de um escopo interno (como uma função ou bloco) tem o mesmo nome de uma variável declarada em um escopo externo. A variável interna ""sombra"" a variável externa dentro do escopo interno, tornando a variável externa inacessível nesse escopo."
Como você seleciona um elemento HTML no DOM usando JavaScript?,"Você pode usar métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`, `document.querySelector()` e `document.querySelectorAll()` para selecionar elementos HTML no DOM."
Como você modifica o conteúdo de um elemento HTML no DOM usando JavaScript?,"Você pode usar a propriedade `textContent` ou `innerHTML` para modificar o conteúdo de um elemento HTML. `textContent` define o conteúdo de texto do elemento, enquanto `innerHTML` define o conteúdo HTML do elemento."
O que são atributos de dados (data attributes) em HTML e como você os acessa em JavaScript?,"Atributos de dados são atributos personalizados que você pode adicionar a elementos HTML usando o prefixo `data-`. Eles permitem armazenar dados adicionais sobre o elemento. Você pode acessá-los em JavaScript usando a propriedade `dataset` do elemento. Por exemplo, `element.dataset.nomeDoAtributo`."
Como você adiciona um event listener a um elemento HTML usando JavaScript?,"Você pode usar o método `addEventListener()` para adicionar um event listener a um elemento HTML. O método recebe o nome do evento (por exemplo, ""click"", ""mouseover"") e a função de callback que será executada quando o evento ocorrer."
Como você remove um event listener de um elemento HTML usando JavaScript?,Você pode usar o método `removeEventListener()` para remover um event listener de um elemento HTML. Você precisa passar o mesmo nome de evento e a mesma função de callback que foram usados ao adicionar o event listener.
"Como você define, lê e exclui cookies em JavaScript?","Você pode acessar e manipular cookies usando a propriedade `document.cookie`. Para definir um cookie, você atribui uma string com o formato ""nome=valor; expires=data; path=caminho"" a `document.cookie`. Para ler os cookies, você analisa a string `document.cookie`. Para excluir um cookie, você define o valor do cookie para uma string vazia e define a data de expiração para um tempo passado."
"Como você armazena, lê e remove dados do Local Storage e do Session Storage em JavaScript?","Você pode usar os métodos `localStorage.setItem()`, `localStorage.getItem()` e `localStorage.removeItem()` para armazenar, ler e remover dados do Local Storage, respectivamente. Você pode usar os métodos `sessionStorage.setItem()`, `sessionStorage.getItem()` e `sessionStorage.removeItem()` para armazenar, ler e remover dados do Session Storage."
Como você converte um objeto JavaScript para JSON e vice-versa?,Você pode usar o método `JSON.stringify()` para converter um objeto JavaScript para JSON. Você pode usar o método `JSON.parse()` para converter uma string JSON para um objeto JavaScript.
Como você faz uma requisição AJAX usando o objeto `XMLHttpRequest` em JavaScript?,"Você cria uma nova instância de `XMLHttpRequest`, define o método HTTP (GET, POST, PUT, DELETE, etc.) e o URL, adiciona um event listener para o evento `onload` para lidar com a resposta do servidor e, em seguida, envia a requisição usando o método `send()`."
O que é a API `fetch` em JavaScript e como ela é usada para fazer requisições HTTP?,A API `fetch` é uma interface moderna para fazer requisições HTTP assíncronas em JavaScript. Ela retorna uma Promise que resolve para a resposta do servidor. Ela é mais fácil de usar e mais poderosa do que o objeto `XMLHttpRequest`.
Como você lida com erros em requisições `fetch` em JavaScript?,Você pode usar o método `.catch()` para lidar com erros na Promise retornada por `fetch()`. Você também pode verificar o status da resposta usando a propriedade `response.ok` e lançar um erro se o status não for bem-sucedido.
O que são CORS (Cross-Origin Resource Sharing)?,CORS (Cross-Origin Resource Sharing) é um mecanismo de segurança do navegador que restringe requisições HTTP feitas de um domínio para outro domínio diferente (cross-origin). Ele impede que sites maliciosos acessem recursos de outros sites sem permissão.
Como você lida com problemas de CORS em JavaScript?,"Você pode habilitar o CORS no servidor definindo os cabeçalhos HTTP apropriados na resposta do servidor, como `Access-Control-Allow-Origin`. Você também pode usar um proxy no seu servidor para fazer a requisição para o outro domínio e, em seguida, retornar a resposta para o seu cliente."
O que é um service worker em JavaScript?,"Um service worker é um script JavaScript que roda em segundo plano, separado da página web, e atua como um proxy entre a página web e a rede. Ele permite implementar funcionalidades como cache offline, notificações push e sincronização em segundo plano."
Como você registra um service worker em JavaScript?,Você pode usar o método `navigator.serviceWorker.register()` para registrar um service worker. O método recebe o URL do script do service worker como argumento.
"O que é o objeto global em JavaScript (window no navegador, global no Node.js)?","O objeto global é um objeto que existe em todos os escopos em JavaScript. No navegador, o objeto global é a janela (`window`). No Node.js, o objeto global é chamado `global`. Ele contém propriedades e métodos que estão disponíveis globalmente, como `setTimeout()`, `console.log()` e `parseInt()`."
O que é a diferença entre `null` e `object` quando typeof é aplicado?,"`typeof null` retorna ""object"", que é um bug histórico no JavaScript. Na verdade, `null` é um tipo primitivo. `typeof` retorna ""object"" para qualquer objeto, incluindo objetos criados com a sintaxe literal de objeto ou instâncias de classes."
"Explique o conceito de ""Shallow Copy"" (Cópia Superficial) em JavaScript.","Uma cópia superficial cria um novo objeto, mas não copia recursivamente os objetos aninhados. Em vez disso, ela copia as referências aos objetos aninhados do objeto original para o novo objeto. Portanto, se você modificar um objeto aninhado no novo objeto, a mudança também será refletida no objeto original."
"Explique o conceito de ""Deep Copy"" (Cópia Profunda) em JavaScript.",Uma cópia profunda cria um novo objeto e copia recursivamente todos os objetos aninhados do objeto original para o novo objeto. Isso significa que o novo objeto é completamente independente do objeto original e as modificações em um não afetam o outro.
Como você pode verificar se um objeto possui uma determinada propriedade em JavaScript?,Você pode usar o método `hasOwnProperty()` do objeto para verificar se ele possui uma determinada propriedade diretamente (não herdada da cadeia de protótipos). Também pode usar o operador `in` para verificar se a propriedade existe no objeto ou em sua cadeia de protótipos.
Quais são os principais métodos para usar expressões regulares em JavaScript?,"Os principais métodos são: `test()` (verifica se uma string corresponde ao padrão), `exec()` (executa uma pesquisa por uma correspondência e retorna informações sobre a correspondência), `match()` (retorna um array com as correspondências) e `replace()` (substitui as correspondências por outra string)."
O que são os quantificadores em expressões regulares?,"Quantificadores especificam quantas vezes um determinado elemento deve ocorrer para que uma correspondência seja encontrada. Exemplos: `*` (zero ou mais vezes), `+` (uma ou mais vezes), `?` (zero ou uma vez), `{n}` (exatamente n vezes), `{n,}` (pelo menos n vezes), `{n,m}` (entre n e m vezes)."
O que são lookarounds (positive e negative lookahead/lookbehind) em expressões regulares?,"Lookarounds são asserções que permitem verificar se um determinado padrão está presente antes ou depois de outro padrão, sem incluir o padrão verificado no resultado da correspondência. Lookahead verifica à frente, lookbehind verifica para trás. Positive lookaround requer que o padrão esteja presente, negative lookaround requer que o padrão *não* esteja presente."
Como você usa modificadores (flags) em expressões regulares em JavaScript?,"Modificadores (flags) alteram o comportamento de uma expressão regular. Os modificadores mais comuns são: `i` (ignora a diferenciação entre maiúsculas e minúsculas), `g` (encontra todas as correspondências, não apenas a primeira) e `m` (permite correspondências em várias linhas)."
O que é o método `padStart()` e `padEnd()` em JavaScript?,"`padStart()` e `padEnd()` são métodos de string que preenchem uma string com outro string (repetidamente, se necessário) para que a string resultante atinja um determinado comprimento. `padStart()` preenche do início da string, enquanto `padEnd()` preenche do final."
O que é o operador de coalescência nula (`??`) em JavaScript?,"O operador de coalescência nula (`??`) retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Caso contrário, ele retorna o operando do lado esquerdo. Ele é usado para fornecer um valor padrão para uma variável que pode ser nula ou indefinida."
O que é o operador de encadeamento opcional (`?.`) em JavaScript?,"O operador de encadeamento opcional (`?.`) permite acessar propriedades de objetos aninhados sem ter que verificar explicitamente se cada nível do objeto existe. Se um nível do objeto for `null` ou `undefined`, o operador retorna `undefined` em vez de lançar um erro."
O que é o conceito de Imutabilidade em JavaScript e como ele é importante?,"Imutabilidade significa que, uma vez que um objeto é criado, seu estado (suas propriedades) não pode ser alterado.  É importante porque simplifica o rastreamento de mudanças, previne efeitos colaterais inesperados e facilita a implementação de otimizações."
Como você pode criar objetos imutáveis em JavaScript?,"Você pode criar objetos imutáveis usando `Object.freeze()`, que impede que novas propriedades sejam adicionadas e que as propriedades existentes sejam modificadas ou removidas. No entanto, `Object.freeze()` faz apenas uma cópia superficial. Para imutabilidade profunda, você precisaria usar bibliotecas ou técnicas de cópia profunda e `Object.freeze()` recursivamente."
O que são iterators e iterables em JavaScript?,"Um iterable é um objeto que define como seus elementos podem ser iterados (percorridos). Ele deve ter um método `Symbol.iterator` que retorna um objeto iterator. Um iterator é um objeto que define como acessar os elementos de um iterable, um por um. Ele deve ter um método `next()` que retorna um objeto com as propriedades `value` (o próximo elemento) e `done` (um booleano indicando se a iteração está completa)."
Como você cria um iterator personalizado em JavaScript?,Você cria um objeto com um método `Symbol.iterator` que retorna um objeto com um método `next()`. O método `next()` deve retornar um objeto com as propriedades `value` e `done`.
O que é uma coleção em JavaScript?,"Uma coleção é um tipo de dado que armazena um conjunto de dados.  Exemplos incluem arrays, objetos, Sets e Maps. Cada tipo de coleção tem suas próprias características em termos de como os dados são armazenados e acessados."
Qual a diferença entre um Array e um Set em JavaScript?,"Um Array é uma lista ordenada de valores, que podem ser duplicados. Um Set é uma coleção de valores únicos, sem uma ordem específica. Sets oferecem performance melhor para verificar se um elemento já existe na coleção."
Qual a diferença entre um Objeto e um Map em JavaScript?,"Ambos Objeto e Map armazenam pares chave-valor, mas"
"O que é o ""hoisting"" em JavaScript e como ele afeta as variáveis declaradas com `var`, `let` e `const`?","Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted e inicializadas com `undefined`. Variáveis declaradas com `let` e `const` são hoisted, mas não são inicializadas (ficam em um ""temporal dead zone"") até que a declaração seja alcançada no código, resultando em um erro se forem acessadas antes."
"O que é uma ""closure"" em JavaScript?","Uma closure é a combinação de uma função e o ambiente léxico no qual essa função foi declarada. Em outras palavras, uma closure permite que uma função interna acesse variáveis do escopo de uma função externa, mesmo após a função externa ter terminado sua execução."
"O que são ""template literals"" e quais são suas vantagens?","Template literals são strings literais delimitadas por acentos graves (``). Eles permitem a interpolação de expressões JavaScript e strings multi-linha, tornando o código mais legível e conciso. A interpolação é feita usando `${expressão}`."
Descreva o que é o objeto `arguments` em JavaScript.,"`arguments` é um objeto array-like (não é um array real) disponível dentro de todas as funções não-arrow, contendo os argumentos passados para a função. Pode ser acessado por índice (arguments[0], arguments[1], etc.) e possui uma propriedade `length`."
"O que é ""event bubbling"" e ""event capturing"" no DOM?","Event bubbling é o processo em que um evento disparado em um elemento DOM se propaga para cima na árvore DOM, acionando os manipuladores de eventos dos elementos pai. Event capturing é o processo inverso, onde o evento é capturado pelo elemento mais externo antes de chegar ao elemento alvo."
"O que é a ""temporal dead zone"" em JavaScript?","A ""temporal dead zone"" (TDZ) é a área no código onde uma variável declarada com `let` ou `const` existe, mas não pode ser acessada antes de sua declaração ser alcançada no código. Acessar a variável na TDZ resulta em um `ReferenceError`."
Explique o uso do operador `void` em JavaScript.,O operador `void` avalia uma expressão e retorna `undefined`. É frequentemente usado para evitar que o navegador siga um link `javascript:` ou para suprimir o valor de retorno de uma função.
"O que é ""strict mode"" em JavaScript e como ativá-lo?","""Strict mode"" é um modo restrito de execução do JavaScript que impõe regras mais rígidas, ajuda a evitar erros comuns e torna o código mais otimizado. É ativado adicionando `""use strict"";` no início de um script ou função."
Como funciona o garbage collection em JavaScript?,"O garbage collection em JavaScript é um processo automático que libera a memória alocada para objetos que não são mais referenciados. O motor JavaScript rastreia objetos e, quando um objeto não é mais acessível a partir da raiz (por exemplo, variáveis globais), ele é marcado para coleta de lixo e sua memória é liberada."
"O que são ""proxies"" em JavaScript?","Proxies permitem interceptar e personalizar operações fundamentais em objetos, como leitura, escrita, enumeração e chamadas de função. Eles são criados usando o construtor `Proxy` e um manipulador (handler) que define o comportamento das operações interceptadas."
Descreva o propósito e o uso do método `Object.freeze()` em JavaScript.,`Object.freeze()` impede que novas propriedades sejam adicionadas a um objeto e impede que as propriedades existentes sejam removidas ou alteradas. O objeto congelado torna-se imutável.
Explique a diferença entre as funções `map()` e `forEach()` em arrays.,"`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. `forEach()` executa uma função fornecida uma vez para cada elemento do array, mas não retorna um novo array."
"O que são ""generators"" em JavaScript e como eles funcionam?","Generators são funções que podem ser pausadas e retomadas, permitindo que produzam múltiplos valores ao longo do tempo. São definidas usando a sintaxe `function*` e usam a palavra-chave `yield` para retornar um valor e pausar a execução."
"Qual a diferença entre `apply()`, `call()` e `bind()` em JavaScript?","`apply()` e `call()` são usados para invocar uma função com um determinado valor `this` e argumentos. `apply()` recebe os argumentos como um array, enquanto `call()` recebe os argumentos individualmente. `bind()` cria uma nova função com o valor `this` especificado, mas não invoca a função imediatamente."
"O que é um ""promise"" em JavaScript e como ele resolve o problema do ""callback hell""?","Um promise é um objeto que representa o resultado eventual de uma operação assíncrona. Ele pode estar em um dos três estados: pendente, cumprido (resolved) ou rejeitado (rejected). Promises ajudam a evitar o ""callback hell"" encadeando operações assíncronas usando `.then()` e `.catch()`."
Explique o uso de `async` e `await` em JavaScript.,"`async` e `await` são palavras-chave que simplificam o trabalho com promises. `async` declara uma função como assíncrona, permitindo que use `await` dentro dela. `await` pausa a execução da função até que a promise seja resolvida ou rejeitada, retornando o valor resolvido ou lançando o erro rejeitado."
"O que são ""modules"" em JavaScript (ES Modules)?",ES Modules são a forma padrão de modularizar o código JavaScript. Eles permitem dividir o código em arquivos separados (módulos) e importar/exportar funcionalidades entre eles usando `import` e `export`.
Descreva o uso do método `reduce()` em arrays.,`reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
"O que é ""debounce"" e ""throttle"" e quando devemos usá-los?","Debounce e throttle são técnicas para limitar a taxa de execução de uma função, geralmente em resposta a eventos frequentes como rolagem ou redimensionamento. Debounce atrasa a execução da função até que um certo período de inatividade tenha passado. Throttle executa a função no máximo uma vez a cada certo período de tempo."
Como funciona o operador `??` (nullish coalescing operator) em JavaScript?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Caso contrário, retorna o operando do lado esquerdo. É diferente do `||` (operador OR lógico) que retorna o operando do lado direito se o operando do lado esquerdo for ""falsy"" (por exemplo, `0`, `""""`, `false`)."
"O que são ""weak references"" (WeakMap e WeakSet) e qual a sua utilidade?","WeakMap e WeakSet são coleções que mantêm referências ""fracas"" aos seus objetos. Isso significa que, se não houver outras referências a um objeto armazenado em um WeakMap ou WeakSet, o garbage collector pode liberar a memória do objeto, e a entrada no WeakMap/WeakSet será automaticamente removida. São úteis para associar dados a objetos DOM sem impedir que eles sejam coletados pelo garbage collector."
"O que é ""Tail Call Optimization"" (TCO) e como o JavaScript lida com isso?","Tail Call Optimization (TCO) é uma otimização que permite que uma chamada de função no final de outra função (uma ""tail call"") seja executada sem adicionar um novo quadro à pilha de chamadas. Isso evita o estouro da pilha em chamadas recursivas. O JavaScript moderno geralmente não implementa TCO de forma confiável."
Descreva como funciona o método `Object.create()` em JavaScript.,`Object.create()` cria um novo objeto com o objeto especificado como seu protótipo. Isso permite criar uma cadeia de protótipos e implementar herança prototípica.
"O que são ""symbols"" em JavaScript e quais são seus casos de uso?",Symbols são um tipo de dado primitivo introduzido no ES6 que representam um identificador único e imutável. São frequentemente usados para adicionar propriedades privadas a objetos ou para evitar conflitos de nomes em propriedades de objetos.
Qual a diferença entre `Array.isArray()` e `instanceof Array` em JavaScript?,"`Array.isArray()` verifica se um valor é um array de forma mais precisa do que `instanceof Array`. `instanceof Array` pode falhar em alguns casos, especialmente quando lidando com arrays de diferentes contextos (por exemplo, diferentes frames em um navegador)."
"O que é ""destructuring"" em JavaScript?",Destructuring é uma expressão JavaScript que permite extrair valores de objetos ou arrays e atribuí-los a variáveis de forma concisa.
Como funciona o operador spread (`...`) em JavaScript?,"O operador spread (`...`) pode ser usado para expandir um iterável (como um array ou string) em elementos individuais. Ele é usado em diversos contextos, como passar argumentos para funções, criar cópias de arrays e objetos, e juntar arrays."
"O que é um ""iterator"" e um ""iterable"" em JavaScript?","Um ""iterable"" é um objeto que pode ser iterado, ou seja, seus elementos podem ser acessados sequencialmente (ex: Arrays, Strings, Maps, Sets). Um ""iterator"" é um objeto que define uma sequência e, ao ser chamado repetidamente (através do método `next()`), retorna um objeto com duas propriedades: `value` (o próximo valor da sequência) e `done` (um booleano indicando se a sequência terminou)."
"Explique o conceito de ""hoisting"" para funções em JavaScript.","Funções declaradas usando a sintaxe `function declaration` são hoisted, o que significa que elas podem ser chamadas antes de serem declaradas no código. Funções declaradas usando `function expression` (ex: `const myFunction = function() {}`) são hoisted como variáveis, e portanto, não podem ser chamadas antes da declaração."
"O que é um ""Map"" e como ele se diferencia de um objeto literal em JavaScript?","Um `Map` é uma coleção de pares chave-valor, onde tanto as chaves quanto os valores podem ser de qualquer tipo de dado (incluindo objetos). Diferente de objetos literais, as chaves em um `Map` podem ser de qualquer tipo de dado, e a ordem de inserção das chaves é preservada."
"O que é um ""Set"" em JavaScript?",Um `Set` é uma coleção de valores únicos. Isso significa que um `Set` nunca conterá valores duplicados.
Como funciona o método `Object.assign()` em JavaScript?,`Object.assign()` copia os valores de todas as propriedades enumeráveis próprias de um ou mais objetos de origem para um objeto de destino. Ele retorna o objeto de destino. É usado para copiar propriedades de um objeto para outro.
"O que é um ""regex"" (regular expression) em JavaScript e como ele é usado?","Uma regex (regular expression) é um padrão para combinar sequências de caracteres em strings. Elas são usadas para buscar, substituir e validar texto."
"O que são ""event listeners"" em JavaScript e como eles são usados?","Event listeners são funções que ""escutam"" eventos específicos que ocorrem em elementos HTML (ex: click, mouseover, etc.). Quando o evento ocorre, o event listener é executado."
Descreva o uso do método `preventDefault()` em JavaScript.,"`preventDefault()` impede o comportamento padrão de um evento. Por exemplo, em um formulário, impede o envio padrão; em um link, impede a navegação para outra página."
Como funciona o método `stopPropagation()` em JavaScript?,`stopPropagation()` impede que um evento se propague para os elementos pais na árvore DOM (evita o bubbling).
"O que é ""DOM traversal"" em JavaScript?","DOM traversal é o processo de navegar pela estrutura do DOM (Document Object Model) para encontrar, acessar ou manipular elementos HTML."
Explique como usar `querySelector()` e `querySelectorAll()` em JavaScript.,"`querySelector()` retorna o primeiro elemento dentro do documento que corresponde ao seletor CSS especificado. `querySelectorAll()` retorna todos os elementos dentro do documento que correspondem ao seletor CSS especificado, como um NodeList."
Como funciona o método `setTimeout()` em JavaScript?,`setTimeout()` executa uma função ou trecho de código após um determinado atraso (em milissegundos).
Descreva o uso de `JSON.stringify()` e `JSON.parse()` em JavaScript.,`JSON.stringify()` converte um objeto JavaScript em uma string JSON. `JSON.parse()` converte uma string JSON de volta em um objeto JavaScript.
"O que é ""localStorage"" e ""sessionStorage"" em JavaScript?","`localStorage` e `sessionStorage` são APIs de armazenamento web que permitem armazenar dados no navegador do usuário. `localStorage` armazena dados permanentemente (a menos que sejam explicitamente removidos), enquanto `sessionStorage` armazena dados apenas durante a sessão do navegador."
"Explique o conceito de ""AJAX"" em JavaScript.","AJAX (Asynchronous JavaScript and XML) é uma técnica que permite que páginas web atualizem conteúdo de forma assíncrona, sem precisar recarregar a página inteira."
"O que é ""CORS"" (Cross-Origin Resource Sharing) e como ele afeta as requisições AJAX?",CORS (Cross-Origin Resource Sharing) é um mecanismo de segurança que restringe requisições HTTP de um script que é executado em uma origem para um recurso em uma origem diferente. É usado para prevenir ataques de cross-site scripting (XSS).
O que é a API `Fetch` em JavaScript e como ela é usada?,A API `Fetch` fornece uma interface para buscar recursos através da rede. Ela retorna um `Promise` que resolve para a resposta da requisição.
"Qual a diferença entre ""call stack"" e ""event loop"" em JavaScript?","A ""call stack"" é uma estrutura de dados que rastreia a execução de funções no JavaScript. O ""event loop"" é um mecanismo que monitora a call stack e a fila de eventos (event queue). Quando a call stack está vazia, o event loop pega o próximo evento da fila de eventos e o coloca na call stack para ser executado."
"O que é ""callback hell"" e como ele pode ser evitado usando promises e async/await?","""Callback hell"" é um padrão de código onde callbacks aninhados tornam o código difícil de ler e manter. Promises e async/await simplificam o tratamento de operações assíncronas e ajudam a evitar o callback hell."
"Explique o conceito de ""prototypal inheritance"" em JavaScript.","Prototypal inheritance é um mecanismo em JavaScript onde objetos herdam propriedades e métodos de outros objetos através de seus protótipos. Cada objeto tem um protótipo, e a cadeia de protótipos é percorrida para encontrar propriedades e métodos."
"O que são ""classes"" em JavaScript (ES6)?","Classes em JavaScript (introduzidas no ES6) são uma forma de sintaxe para criar objetos e implementar herança prototípica. Elas são, na verdade, ""syntactic sugar"" sobre a herança prototípica existente, tornando-a mais fácil de usar."
O que é o operador `super` em JavaScript (dentro de classes)?,O operador `super` é usado dentro de classes para chamar o construtor da classe pai ou para acessar métodos da classe pai.
"Explique o que é ""shadow DOM"".","Shadow DOM é uma tecnologia que permite encapsular o CSS e JavaScript de um componente web, isolando-o do resto da página. Isso evita conflitos de estilo e script."
"O que são ""Custom Elements"" em JavaScript?","Custom Elements permitem que você crie seus próprios elementos HTML personalizados, estendendo a funcionalidade do HTML padrão."
Descreva como funciona o método `Array.from()` em JavaScript.,`Array.from()` cria um novo array a partir de um objeto array-like ou iterable.
"O que são ""tagged templates"" em JavaScript?","Tagged templates são uma forma de usar template literals com uma função ""tag"" que processa o template literal antes de retornar a string final. A função tag recebe o array de strings literais e os valores interpolados como argumentos."
Como você pode verificar se um objeto tem uma propriedade específica em JavaScript?,"Você pode usar os operadores `in` ou `hasOwnProperty()` para verificar se um objeto tem uma propriedade específica. `in` verifica se a propriedade existe no objeto ou em sua cadeia de protótipos, enquanto `hasOwnProperty()` verifica apenas se a propriedade existe diretamente no objeto, sem olhar para a cadeia de protótipos."
"O que é ""memoization"" em JavaScript e como ela é usada?","Memoization é uma técnica de otimização que armazena em cache os resultados de chamadas de função caras para que, quando a mesma entrada ocorrer novamente, o resultado possa ser retornado do cache em vez de ser recalculado."
"O que é ""code splitting"" e por que é importante?","Code splitting é a prática de dividir o código de um aplicativo em vários pacotes menores que podem ser carregados sob demanda. Isso pode melhorar significativamente o desempenho do carregamento inicial, pois o navegador precisa baixar e analisar menos código no início."
"O que é ""tree shaking"" e como ele funciona?",Tree shaking é uma técnica de otimização que remove o código não utilizado de um pacote JavaScript durante o processo de construção. Ele analisa o código para determinar quais funções e variáveis são realmente usadas e descarta o resto.
"Explique o conceito de ""functional programming"" em JavaScript.","Programação funcional é um paradigma de programação que trata a computação como a avaliação de funções matemáticas e evita a mudança de estado e dados mutáveis. Funções são tratadas como cidadãos de primeira classe, podendo ser passadas como argumentos para outras funções e retornadas como valores."
"O que são ""pure functions"" em JavaScript?","Uma ""pure function"" é uma função que sempre retorna o mesmo resultado para as mesmas entradas, e não tem efeitos colaterais (não modifica variáveis fora de seu escopo)."
"O que são ""higher-order functions"" em JavaScript?","""Higher-order functions"" são funções que recebem outras funções como argumentos ou retornam outras funções como resultados."
"O que é ""immutability"" em JavaScript e por que é importante?","Immutability significa que, depois de criado, o estado de um objeto não pode ser alterado. Isso ajuda a evitar efeitos colaterais indesejados e torna o código mais fácil de entender e depurar."
Quais são algumas maneiras de criar objetos imutáveis em JavaScript?,"Você pode usar `Object.freeze()`, a biblioteca Immutable.js, ou abordagens funcionais como `map`, `filter` e `reduce` para criar novas cópias de objetos com as modificações desejadas."
"O que é ""recursion"" em JavaScript?",Recursion é uma técnica de programação onde uma função chama a si mesma para resolver um problema.
Qual é o risco de usar recursão sem um caso base adequado?,"Se uma função recursiva não tiver um caso base adequado para parar a recursão, ela continuará se chamando indefinidamente, levando a um estouro da pilha (stack overflow)."
Como você pode debugar o código JavaScript no navegador?,"A maioria dos navegadores modernos possui ferramentas de desenvolvedor (geralmente acessadas pressionando F12) que permitem definir breakpoints, inspecionar variáveis, examinar a pilha de chamadas e percorrer o código passo a passo."
"O que é o ""console"" em JavaScript e como ele é usado para depuração?","O objeto `console` fornece acesso ao console de depuração do navegador. Ele possui métodos como `console.log()`, `console.warn()`, `console.error()`, e `console.table()` para exibir informações e mensagens de erro durante a depuração."
"O que são ""breakpoints"" e como eles são usados na depuração de JavaScript?",Breakpoints são marcadores colocados no código que fazem com que a execução do programa pause quando atingidos. Isso permite que você inspecione o estado do programa em um ponto específico.
"O que é um ""try...catch"" block em JavaScript e como ele é usado para lidar com erros?","Um bloco `try...catch` é usado para lidar com exceções em JavaScript. O código dentro do bloco `try` é executado e, se uma exceção for lançada, o código dentro do bloco `catch` é executado."
"O que é um ""finally"" block em JavaScript e quando ele é executado?","Um bloco `finally` é executado sempre após o bloco `try` e o bloco `catch`, independentemente de uma exceção ter sido lançada ou não. É usado para realizar limpeza ou liberar recursos."
"O que é um ""throw"" statement em JavaScript e como ele é usado para lançar exceções?","Um statement `throw` é usado para lançar uma exceção em JavaScript. Você pode lançar qualquer valor como uma exceção, mas geralmente é recomendado lançar um objeto `Error`."
"O que são ""error objects"" em JavaScript e quais propriedades eles têm?","Objetos de erro em JavaScript são instâncias da classe `Error` ou de suas subclasses (ex: `TypeError`, `ReferenceError`). Eles geralmente têm propriedades como `name` (o tipo de erro), `message` (uma descrição do erro) e `stack` (o rastreamento da pilha de chamadas)."
"O que é o ""event loop"" e como ele lida com tarefas assíncronas?","O event loop é um ciclo infinito que monitora a call stack e a fila de eventos (event queue). Quando a call stack está vazia, o event loop move o próximo evento da fila de eventos para a call stack para ser executado. Isso permite que o JavaScript execute tarefas assíncronas sem bloquear a thread principal."
Como você pode lidar com erros em promises usando `.catch()`?,O método `.catch()` em promises é usado para lidar com erros que ocorrem durante a execução da promise. Ele recebe uma função como argumento que é executada se a promise for rejeitada.
Como você pode lidar com erros em funções `async/await` usando `try...catch`?,Você pode usar um bloco `try...catch` ao redor do código que usa `await` para capturar exceções lançadas por promises rejeitadas.
"O que é o ""this"" keyword em JavaScript e como ele se comporta em diferentes contextos?","A palavra-chave `this` se refere ao contexto de execução atual. Seu valor depende de como a função é chamada. Em um método de objeto, `this` se refere ao objeto. Em uma função global, `this` se refere ao objeto global (window no navegador, global no Node.js). O valor de `this` pode ser explicitamente definido usando `call`, `apply` ou `bind`."
"Como você pode vincular o valor de ""this"" em uma função usando `call()`, `apply()` e `bind()`?","`call()` e `apply()` invocam a função imediatamente com o valor `this` especificado e argumentos (passados individualmente para `call()` e como um array para `apply()`). `bind()` cria uma nova função com o valor `this` especificado, mas não invoca a função imediatamente."
"O que são ""arrow functions"" em JavaScript e como elas se diferenciam das funções regulares?",Arrow functions são uma sintaxe mais concisa para definir funções em JavaScript. Uma das principais diferenças é que arrow functions não têm seu próprio valor de `this`. Eles herdam o valor de `this` do contexto léxico circundante.
Como você pode criar um escopo privado para variáveis em JavaScript usando closures?,Você pode criar um escopo privado para variáveis em JavaScript envolvendo o código em uma função anônima auto-executável (IIFE - Immediately Invoked Function Expression). As variáveis dentro da função são acessíveis apenas dentro da função e de quaisquer closures criadas dentro dela.
"O que é ""IIFE"" (Immediately Invoked Function Expression) e qual é o seu uso?",IIFE (Immediately Invoked Function Expression) é uma função JavaScript que é executada assim que é definida. É usada para criar um escopo privado e evitar conflitos de nomes no escopo global.
"O que é um ""generator function"" e como ela pode ser usada para criar iteradores personalizados?","Uma ""generator function"" é uma função que pode ser pausada e retomada durante a execução. Ela usa a palavra-chave `yield` para retornar um valor e pausar a execução. Generators podem ser usados para criar iteradores personalizados que produzem uma sequência de valores sob demanda."
"O que é o ""event delegation"" e quais são seus benefícios?","Event delegation é uma técnica onde você adiciona um event listener a um elemento pai em vez de adicionar listeners individuais a cada um de seus filhos. Isso pode melhorar o desempenho, especialmente quando você tem muitos elementos filhos ou quando os elementos filhos são adicionados dinamicamente."
"O que são ""MutationObserver"" e como eles podem ser usados para monitorar mudanças no DOM?","MutationObserver é uma API que permite observar mudanças no DOM, como a adição ou remoção de elementos, a alteração de atributos ou o texto de um nó. Eles são usados para reagir a mudanças no DOM de forma assíncrona."
"O que é o ""requestAnimationFrame"" e como ele é usado para animações suaves no navegador?",`requestAnimationFrame` é uma API que solicita ao navegador que execute uma função antes do próximo repintar da tela. Isso permite que você crie animações suaves e sincronizadas com a taxa de atualização da tela.
"O que é ""Web Workers"" em JavaScript e como eles são usados para executar tarefas em segundo plano?","Web Workers permitem que você execute scripts JavaScript em threads em segundo plano, separados da thread principal do navegador. Isso evita que tarefas demoradas bloqueiem a interface do usuário."
"O que são ""Service Workers"" em JavaScript e como eles são usados para criar aplicativos web offline?","Service Workers são scripts que são executados em segundo plano e atuam como um proxy entre o navegador e a rede. Eles podem interceptar requisições de rede, armazenar em cache recursos e fornecer funcionalidades offline."
"O que é o ""Canvas API"" em JavaScript e como ele é usado para desenhar gráficos e imagens?",O Canvas API fornece uma interface para desenhar gráficos e imagens usando JavaScript. Ele permite que você crie gráficos vetoriais e rasterizados dinamicamente.
"O que é o ""SVG"" (Scalable Vector Graphics) e como ele é usado em JavaScript?",SVG (Scalable Vector Graphics) é um formato baseado em XML para descrever gráficos vetoriais. Você pode manipular elementos SVG usando JavaScript para criar gráficos dinâmicos e interativos.
"O que é o ""Web Audio API"" em JavaScript e como ele é usado para criar áudio interativo?","O Web Audio API fornece uma interface para manipular áudio em JavaScript. Ele permite que você crie efeitos sonoros, analise áudio e sintetize som."
"O que é o ""Geolocation API"" em JavaScript e como ele é usado para obter a localização do usuário?",O Geolocation API fornece uma interface para acessar a localização geográfica do usuário (com permissão do usuário).
"O que é a ""History API"" em JavaScript e como ela é usada para manipular o histórico do navegador?",A History API permite que você manipule o histórico do navegador sem recarregar a página. Isso é usado para criar aplicativos de página única (SPAs) com navegação fluida.
"O que é o ""Drag and Drop API"" em JavaScript e como ele é usado para criar interfaces de arrastar e soltar?",O Drag and Drop API fornece uma interface para criar interfaces de arrastar e soltar em JavaScript.
"O que é o ""Fullscreen API"" em JavaScript e como ele é usado para exibir elementos em tela cheia?",O Fullscreen API permite que você coloque um elemento em tela cheia.
"O que é o ""Clipboard API"" em JavaScript e como ele é usado para copiar e colar texto?",O Clipboard API fornece uma interface para acessar a área de transferência do sistema (com permissão do usuário) para copiar e colar texto e imagens.
"O que é o ""Battery API"" em JavaScript e como ele é usado para obter informações sobre a bateria do dispositivo?",O Battery API (agora obsoleta e não recomendada para uso em produção devido a preocupações com privacidade) fornecia informações sobre o estado da bateria do dispositivo.
"O que é o ""Web Speech API"" em JavaScript e como ele é usado para reconhecimento de voz e síntese de fala?",O Web Speech API fornece interfaces para reconhecimento de voz (speech recognition) e síntese de fala (text-to-speech).
"O que são ""polyfills"" e como eles são usados para fornecer suporte a recursos modernos do JavaScript em navegadores mais antigos?",Polyfills são trechos de código que fornecem a funcionalidade de recursos modernos do JavaScript em navegadores mais antigos que não os suportam nativamente.
"O que são ""transpilers"" e como eles são usados para converter código JavaScript moderno em código compatível com navegadores mais antigos?",Transpilers são ferramentas que convertem código JavaScript escrito em uma versão mais recente da linguagem (ex: ES6+) para uma versão mais antiga (ex: ES5) que é compatível com navegadores mais antigos. Babel é um transpiler popular.
"O que é o ""DocumentFragment"" e qual a sua utilidade para otimizar a manipulação do DOM?","DocumentFragment é um nó DOM leve que pode conter uma árvore de nós. Ele não faz parte da árvore DOM principal e, portanto, as operações realizadas em um DocumentFragment são mais rápidas do que as operações realizadas diretamente no DOM. Ele é frequentemente usado para construir grandes estruturas de DOM antes de adicioná-las ao documento principal."
Como criar uma cópia profunda (deep copy) de um objeto em JavaScript?,"Uma cópia profunda cria um novo objeto com todas as suas propriedades copiadas recursivamente, incluindo objetos aninhados e arrays.  Uma forma de fazer isso é usar `JSON.parse(JSON.stringify(objeto))`, mas isso não funciona com funções, datas ou objetos que contêm referências circulares. Outras opções incluem usar bibliotecas como Lodash ou implementar uma função de cópia profunda recursiva."
"O que é ""Internationalization (i18n)"" e ""Localization (l10n)"" em JavaScript?",Internationalization (i18n) é o processo de projetar e desenvolver aplicativos para que possam ser facilmente adaptados a diferentes idiomas e regiões. Localization (l10n) é o processo de adaptar um aplicativo internacionalizado para uma região ou idioma específico.
"O que é o ""Intl API"" em JavaScript e como ele é usado para formatar datas, números e moedas com base em diferentes localidades?","O Intl API fornece objetos e métodos para realizar tarefas de internacionalização, como formatar datas, números, moedas e classificar strings de acordo com diferentes localidades."
"O que são ""web components"" e quais as tecnologias que os compõem?","Web Components são um conjunto de tecnologias que permitem criar elementos HTML reutilizáveis ​​e encapsulados. As principais tecnologias que os compõem são: Custom Elements, Shadow DOM, HTML Templates e ES Modules."
Como detectar a largura e altura da viewport no JavaScript?,"Você pode usar `window.innerWidth` e `window.innerHeight` para obter a largura e altura internas da janela do navegador (a área da viewport, excluindo barras de ferramentas e bordas). Para obter a largura e altura externas (incluindo barras de ferramentas), você pode usar `window.outerWidth` e `window.outerHeight`."
Como obter a posição de um elemento na página usando JavaScript?,"Você pode usar o método `getBoundingClientRect()` para obter a posição e o tamanho de um elemento em relação à viewport. O objeto retornado tem propriedades como `top`, `left`, `right`, `bottom`, `width` e `height`. Para obter a posição em relação ao documento, você pode adicionar o deslocamento de rolagem da janela (window.pageXOffset e window.pageYOffset) às propriedades `top` e `left`."
Como verificar se um elemento está visível na viewport usando JavaScript?,"Uma forma de verificar se um elemento está visível na viewport é usar `getBoundingClientRect()` para obter sua posição e tamanho, e então comparar esses valores com as dimensões da viewport (window.innerWidth e window.innerHeight) e o deslocamento de rolagem da página (window.pageXOffset e window.pageYOffset)."
Como adicionar e remover classes CSS de um elemento usando JavaScript?,"Você pode usar a propriedade `classList` de um elemento para adicionar, remover ou alternar classes CSS. Por exemplo: `element.classList.add('classe');`, `element.classList.remove('classe');`, `element.classList.toggle('classe');`."
"O que são ""data attributes"" (atributos `data-*`) em HTML e como eles são usados em JavaScript?",Data attributes são atributos HTML personalizados que começam com o prefixo `data-`. Eles são usados para armazenar dados adicionais em elementos HTML que podem ser acessados e manipulados usando JavaScript.
"Como você declara uma variável em JavaScript usando `let`, `const` e `var`? Quais as diferenças?","`var` é a forma mais antiga, tem escopo de função ou global. `let` e `const` têm escopo de bloco. `const` também declara uma variável que não pode ser reatribuída após a inicialização."
O que são tipos de dados primitivos em JavaScript? Cite exemplos.,"São tipos de dados imutáveis que não são objetos. Exemplos: `string`, `number`, `boolean`, `null`, `undefined`, `symbol`, `bigint`."
O que é o operador `typeof` e para que é usado?,"É um operador unário que retorna uma string indicando o tipo de dado de um operando.  Ex: `typeof 42` retorna `""number""`."
Como você cria um comentário de uma linha e um comentário de múltiplas linhas em JavaScript?,Comentário de uma linha: `// Este é um comentário`. Comentário de múltiplas linhas: `/* Este é um comentário que se estende por várias linhas */`.
Explique a diferença entre atribuição por valor e atribuição por referência em JavaScript.,Primitivos são atribuídos por valor (uma cópia é criada). Objetos e arrays são atribuídos por referência (a variável aponta para o mesmo local na memória).
O que são template literals em JavaScript e como eles funcionam?,São strings delimitadas por crases (``). Permitem interpolação de variáveis e expressões diretamente na string usando `${}`.
Como você concatena strings em JavaScript?,"Usando o operador `+` ou template literals. Exemplo: `""Olá "" + ""Mundo""` ou `""Olá ${nome}""`."
Como você define e chama uma função em JavaScript?,Definição: `function minhaFuncao() { /* código */ }`. Chamada: `minhaFuncao();`.
O que são parâmetros e argumentos de uma função?,Parâmetros são as variáveis listadas na definição da função. Argumentos são os valores passados para a função quando ela é chamada.
O que é o operador `return` em uma função?,"Ele especifica o valor que a função retorna ao chamador. Se não houver `return`, a função retorna `undefined`."
O que é uma função auto-invocada (IIFE)?,Uma função que é definida e executada imediatamente após sua criação. Ex: `(function() { /* código */ })();`.
Quais são os tipos de escopo em JavaScript?,"Escopo global, escopo de função e escopo de bloco (introduzido com `let` e `const`)."
O que é closure em JavaScript?,"Closure é a capacidade de uma função de acessar variáveis em seu escopo léxico, mesmo quando a função é executada fora desse escopo."
O que é o objeto `arguments` em uma função?,"É um objeto semelhante a um array que contém todos os argumentos passados para a função, independentemente dos parâmetros definidos.

**Conjunto 3: Objetos e Arrays**"
Como você acessa as propriedades de um objeto?,Usando a notação de ponto (`.`) ou a notação de colchetes (`[]`). Ex: `meuObjeto.propriedade` ou `meuObjeto['propriedade']`.
O que é o operador `this` em JavaScript?,`this` se refere ao objeto em que a função está sendo executada. Seu valor depende de como a função é chamada.
Como você acessa os elementos de um array?,"Usando o índice do elemento, começando em 0. Ex: `meuArray[0]`."
Quais são alguns métodos comuns para manipular arrays em JavaScript?,"`push()`, `pop()`, `shift()`, `unshift()`, `slice()`, `splice()`, `concat()`, `join()`, `indexOf()`, `includes()`, `map()`, `filter()`, `reduce()`."
O que é o método `map()` em arrays e para que é usado?,Cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em arrays e para que é usado?,"Cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.

**Conjunto 4: Operadores e Estruturas de Controle**"
Quais são os operadores aritméticos em JavaScript?,"`+` (adição), `-` (subtração), `*` (multiplicação), `/` (divisão), `%` (resto), `**` (exponenciação)."
Quais são os operadores de comparação em JavaScript?,"`==` (igual), `!=` (diferente), `>` (maior que), `<` (menor que), `>=` (maior ou igual), `<=` (menor ou igual), `===` (estritamente igual), `!==` (estritamente diferente)."
Quais são os operadores lógicos em JavaScript?,"`&&` (AND lógico), `||` (OR lógico), `!` (NOT lógico)."
O que é uma instrução `if...else` em JavaScript?,Permite executar um bloco de código se uma condição for verdadeira e outro bloco de código se a condição for falsa.
O que é uma instrução `switch` em JavaScript?,Permite executar diferentes blocos de código com base no valor de uma expressão.
O que são as palavras-chave `break` e `continue` em loops?,"`break` sai do loop imediatamente. `continue` pula a iteração atual e passa para a próxima.

**Conjunto 5: Manipulação de Strings e Números**"
Quais são alguns métodos comuns para manipular strings em JavaScript?,"`toUpperCase()`, `toLowerCase()`, `substring()`, `slice()`, `replace()`, `trim()`, `indexOf()`, `split()`."
Como você verifica se um valor é um número em JavaScript?,Usando `isNaN()` (verifica se NÃO é um número).  `Number.isNaN()` é uma versão mais estrita.
Como você formata um número em JavaScript?,Usando métodos como `toFixed()` (fixa o número de casas decimais) ou `toLocaleString()` (formata de acordo com a localidade).
O que é o objeto `Math` em JavaScript e para que é usado?,É um objeto embutido que fornece constantes e funções matemáticas.
Quais são algumas funções comuns do objeto `Math`?,"`Math.random()`, `Math.round()`, `Math.ceil()`, `Math.floor()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`."
Como você gera um número aleatório entre dois valores em JavaScript?,`Math.floor(Math.random() * (max - min + 1)) + min;`.
Como você obtém a raiz quadrada de um número em JavaScript?,"Usando `Math.sqrt()`.

**Conjunto 6: Eventos e o DOM**"
Como você modifica os atributos de um elemento HTML usando JavaScript?,Usando os métodos `setAttribute()` e `getAttribute()`.
Como você adiciona um ouvinte de evento a um elemento HTML usando JavaScript?,Usando o método `addEventListener()`.
O que é o objeto `event` em um manipulador de evento?,"Contém informações sobre o evento que ocorreu, como o elemento que o disparou, as coordenadas do mouse, etc."
O que é bubbling e capturing em eventos?,"Bubbling é quando o evento ""sobe"" pela árvore DOM, do elemento mais interno para o mais externo. Capturing é o oposto, o evento ""desce"" pela árvore.

**Conjunto 7: Tratamento de Erros e Debugging**"
O que é um erro em JavaScript?,Uma indicação de que algo inesperado aconteceu durante a execução do código.
Como você lança um erro manualmente em JavaScript?,Usando a palavra-chave `throw`. Ex: `throw new Error('Mensagem de erro');`.
O que é o console em JavaScript e para que é usado?,"É um objeto que fornece acesso ao console de depuração do navegador. Usado para exibir mensagens, avisos, erros e outras informações."
Como você usa o debugger do navegador para depurar código JavaScript?,Inserindo a palavra-chave `debugger` no código ou usando as ferramentas de desenvolvedor do navegador para definir breakpoints.
O que são breakpoints em depuração?,"Pontos no código onde a execução é interrompida, permitindo que você inspecione o estado das variáveis e execute o código passo a passo."
Qual a importância de tratamento de erros em aplicações JavaScript?,"Evitar que a aplicação quebre inesperadamente, fornecer feedback ao usuário e facilitar a identificação e correção de bugs.

**Conjunto 8: Funções Avançadas e Recursão**"
O que é uma função callback?,Uma função passada como argumento para outra função e que é executada após a conclusão de alguma operação.
Quais são os riscos de usar recursão?,Potencial para estouro de pilha (stack overflow) se a condição de parada não for definida corretamente ou se a recursão for muito profunda.
O que é uma função pura?,Uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais (não modifica variáveis externas).
O que são arrow functions em JavaScript e quais as suas vantagens?,Uma sintaxe mais concisa para definir funções anônimas. Elas herdam o valor de `this` do contexto circundante e não têm seu próprio `arguments`.
O que é o operador rest (`...`) em JavaScript?,Permite agrupar um número indefinido de argumentos em um array. Usado em definições de funções para receber múltiplos argumentos.
O que é o objeto `Symbol` em JavaScript e para que é usado?,"É um tipo de dado primitivo que representa um identificador único. Usado para criar propriedades de objeto que não entram em conflito com outras propriedades existentes.

**Conjunto 10:  Modularização e Conceitos Avançados II**"
Quais são as formas de modularização em JavaScript?,"CommonJS (usado em Node.js), AMD (usado em navegadores), e ES Modules (a forma padrão moderna)."
Como você importa e exporta módulos em JavaScript (ES Modules)?,`import` para importar e `export` para exportar. Ex: `import { minhaFuncao } from './meuModulo.js';` e `export function minhaFuncao() { ... }`.
"O que é ""strict mode"" em JavaScript e como habilitá-lo?","Uma forma de executar o JavaScript com regras mais rigorosas, ajudando a prevenir erros comuns. Habilitado adicionando `""use strict"";` no início de um script ou função."
O que é o garbage collector em JavaScript?,Um processo automático que libera a memória ocupada por objetos que não estão mais sendo usados.
O que são protótipos em JavaScript?,Mecanismo pelo qual objetos JavaScript herdam propriedades e métodos de outros objetos.
O que é herança prototípica em JavaScript?,"Um objeto herda propriedades e métodos do protótipo de outro objeto.  Cada objeto tem um protótipo, e esse protótipo pode ter outro protótipo, formando uma cadeia."
Como você cria uma classe em JavaScript (ES6)?,Usando a palavra-chave `class`. Ex: `class MinhaClasse { constructor(parametro) { this.propriedade = parametro; } }`.
Qual é o propósito do método `constructor` em uma classe JavaScript?,"É um método especial para criar e inicializar um objeto criado a partir de uma classe.

**Conjunto 11: Curiosidades e Casos Específicos**"
Por que `0.1 + 0.2 !== 0.3` em JavaScript?,"Devido à forma como os números de ponto flutuante são representados em binário, pode haver pequenas imprecisões."
O que acontece se você tentar acessar uma propriedade inexistente de um objeto em JavaScript?,Retorna `undefined`.
Qual é a saída de `[] == ![]` em JavaScript? Por quê?,"`true`. Devido à coerção de tipo, o lado direito se torna `false`, e `[] == false` também é `true`."
Como você clona um objeto em JavaScript de forma a criar uma cópia profunda?,Utilizando `JSON.parse(JSON.stringify(objeto))` para objetos simples ou bibliotecas especializadas para casos mais complexos com referências circulares.
O que são WeakMap e WeakSet em JavaScript e quando utilizá-los?,"São estruturas de dados que armazenam referências fracas para objetos.  São úteis para evitar vazamentos de memória quando você precisa associar dados a objetos, mas não quer impedir que o garbage collector os colete."
Qual a diferença entre `const` e `Object.freeze` em JavaScript?,"`const` impede a reatribuição da variável, mas permite a modificação das propriedades do objeto. `Object.freeze` impede a modificação das propriedades do objeto, tornando-o imutável."
O que é o event loop em JavaScript e qual sua importância?,É um mecanismo que permite que o JavaScript execute operações assíncronas sem bloquear a thread principal. Ele gerencia a fila de tarefas e a execução de callbacks.
Como funciona o `setTimeOut` e `setInterval` em JavaScript?,`setTimeOut` executa uma função após um determinado atraso. `setInterval` executa uma função repetidamente em intervalos regulares.
O que é Internacionalização em JavaScript?,"É o processo de adaptar um software para diferentes idiomas, regiões e culturas.

Essas 150 perguntas e respostas cobrem uma variedade de tópicos fundamentais e avançados em JavaScript, focando na linguagem em si e evitando dependências externas. Elas foram elaboradas para serem distintas umas das outras, maximizando a abrangência do conhecimento testado."
O que é o `use strict` em JavaScript e qual o seu propósito?,"`use strict` é uma diretiva que habilita o modo estrito no JavaScript. Seu propósito é ativar um conjunto mais restritivo de regras semânticas, ajudando a prevenir erros comuns e tornando o código mais fácil de depurar. Ele impede o uso de variáveis não declaradas, atribuições a propriedades somente leitura e outras práticas consideradas problemáticas."
Como você pode remover duplicatas de um array em JavaScript?,Uma forma é usar o `Set`: `[...new Set(array)]`. Sets armazenam apenas valores únicos.
Explique o que são arrow functions em JavaScript.,Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas usam a sintaxe `() => {}` e não possuem seu próprio `this` (lexically bound).
Como você pode copiar um objeto em JavaScript? Qual a diferença entre shallow copy e deep copy?,"Você pode usar `Object.assign({}, objeto)` para shallow copy ou `JSON.parse(JSON.stringify(objeto))` para deep copy (com limitações para funções e objetos complexos). Shallow copy copia referências, enquanto deep copy cria novos objetos com os mesmos valores."
Explique o que é prototype em JavaScript.,"Todo objeto em JavaScript possui um prototype, que é outro objeto do qual herda propriedades e métodos. O prototype é usado para implementar herança em JavaScript."
Como você pode converter um objeto JavaScript em JSON?,Você pode usar o método `JSON.stringify(objeto)`.
Como você adiciona um event listener a um elemento em JavaScript?,"Você pode usar o método `addEventListener('nomeDoEvento', funcaoDeCallback)`."
Como você pode selecionar um elemento HTML pelo ID usando JavaScript?,Você pode usar o método `document.getElementById('idDoElemento')`.
Como você pode selecionar múltiplos elementos HTML por classe usando JavaScript?,Você pode usar o método `document.getElementsByClassName('nomeDaClasse')`. Ele retorna um HTMLCollection.
Como você pode selecionar múltiplos elementos HTML usando um seletor CSS usando JavaScript?,Você pode usar o método `document.querySelectorAll('seletorCSS')`. Ele retorna um NodeList.
Como você pode alterar o texto de um elemento HTML usando JavaScript?,Você pode usar a propriedade `textContent` ou `innerText` do elemento.
Como você pode alterar o atributo de um elemento HTML usando JavaScript?,"Você pode usar o método `setAttribute('nomeDoAtributo', 'novoValor')`."
O que é AJAX em JavaScript?,AJAX (Asynchronous JavaScript and XML) é uma técnica para criar aplicações web interativas. Ele permite que páginas web atualizem partes do seu conteúdo sem recarregar a página inteira.
Como você faz uma requisição AJAX usando JavaScript?,Você pode usar o objeto `XMLHttpRequest` (mais tradicional) ou a API `fetch` (mais moderna).
Como você lida com o resultado de uma Promise?,Você pode usar os métodos `.then()` para lidar com o sucesso (fulfilled) e `.catch()` para lidar com a falha (rejected).
O que é o método `test()` em expressões regulares JavaScript?,O método `test()` executa uma pesquisa por uma correspondência entre uma expressão regular e uma string especificada. Retorna `true` ou `false`.
O que é o método `match()` em strings JavaScript?,O método `match()` recupera as correspondências entre uma string e uma expressão regular. Retorna um array contendo as correspondências ou `null` se nenhuma correspondência for encontrada.
Como você pode acessar os cookies usando JavaScript?,Você pode acessar os cookies através da propriedade `document.cookie`.
Como você pode definir um cookie usando JavaScript?,Você pode definir um cookie atribuindo um valor à propriedade `document.cookie`.
O que é localStorage em JavaScript?,`localStorage` é um objeto do objeto `window` que permite armazenar dados no navegador do usuário persistentemente (mesmo após o fechamento do navegador).
O que é sessionStorage em JavaScript?,"`sessionStorage` é semelhante ao `localStorage`, mas os dados são armazenados apenas para a duração da sessão do navegador (são apagados quando o navegador é fechado)."
Qual a diferença entre localStorage e sessionStorage?,"`localStorage` armazena dados persistentemente, enquanto `sessionStorage` armazena dados apenas para a sessão atual do navegador."
Como você pode parar um `setInterval()` em JavaScript?,Você pode usar a função `clearInterval()` passando o ID retornado pelo `setInterval()`.
Como você pode parar um `setTimeout()` em JavaScript?,Você pode usar a função `clearTimeout()` passando o ID retornado pelo `setTimeout()`.
O que é o método `Math.random()` em JavaScript?,"O método `Math.random()` retorna um número pseudoaleatório de ponto flutuante, maior ou igual a 0 e menor que 1."
Como você pode gerar um número inteiro aleatório em JavaScript?,"Você pode usar `Math.floor(Math.random() * max)` para gerar um número inteiro entre 0 (inclusive) e `max` (exclusive), ou `Math.floor(Math.random() * (max - min + 1)) + min` para gerar um número inteiro entre `min` (inclusive) e `max` (inclusive)."
Dê um exemplo de destructuring de um objeto em JavaScript.,"`const { nome, idade } = pessoa;` (onde `pessoa` é um objeto com as propriedades `nome` e `idade`)."
Dê um exemplo de destructuring de um array em JavaScript.,"`const [primeiro, segundo] = array;` (onde `array` é um array com pelo menos dois elementos)."
O que são High-Order Functions em JavaScript?,High-Order Functions são funções que recebem outras funções como argumentos ou retornam funções como resultado.
Qual a diferença entre `forEach()` e `map()` em arrays JavaScript?,"`forEach()` itera sobre os elementos de um array e executa uma função para cada um, mas não retorna um novo array. `map()` itera sobre os elementos de um array e retorna um novo array com os resultados da função aplicada a cada elemento."
O que é o método `findIndex()` em arrays JavaScript?,"O método `findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1."
O que é o método `some()` em arrays JavaScript?,O método `some()` testa se pelo menos um elemento no array passa no teste implementado pela função fornecida. Retorna `true` ou `false`.
O que é o método `every()` em arrays JavaScript?,O método `every()` testa se todos os elementos no array passam no teste implementado pela função fornecida. Retorna `true` ou `false`.
O que é composition em JavaScript?,Composition é uma técnica para combinar duas ou mais funções para produzir uma nova função.
Explique o conceito de immutability em JavaScript.,"Immutability significa que, uma vez que um objeto ou valor é criado, ele não pode ser alterado. Em vez de modificar o objeto original, você cria uma nova cópia com as alterações desejadas."
O que são funções geradoras em JavaScript?,Funções geradoras são funções que podem ser pausadas e retomadas. Elas usam a palavra-chave `yield` para retornar valores em etapas.
Como você declara uma função geradora em JavaScript?,Você usa o asterisco (*) após a palavra-chave `function`: `function* minhaFuncaoGeradora() {}`.
O que é a palavra-chave `yield` em funções geradoras?,`yield` pausa a execução da função geradora e retorna um valor. A execução pode ser retomada posteriormente.
O que é a propriedade `constructor` em JavaScript?,A propriedade `constructor` retorna uma referência à função construtora que criou o objeto.
Qual a diferença entre um objeto JavaScript e um Map?,"Em objetos, as chaves são sempre strings (ou Symbols). Em Maps, as chaves podem ser de qualquer tipo de dado. Maps também preservam a ordem de inserção, enquanto objetos não garantem isso."
O que é um WeakMap em JavaScript?,"WeakMap é semelhante ao Map, mas as chaves devem ser objetos. Ele não impede que os objetos chaves sejam coletados pelo garbage collector se não houver outras referências a eles."
O que é um WeakSet em JavaScript?,"WeakSet é semelhante ao Set, mas só pode conter objetos. Ele não impede que os objetos sejam coletados pelo garbage collector se não houver outras referências a eles."
O que é reflection em JavaScript?,"Reflection permite que um programa examine e modifique sua própria estrutura e comportamento em tempo de execução. Em JavaScript, o objeto `Reflect` fornece métodos para interceptar e personalizar operações em objetos."
O que são decorators em JavaScript?,"Decorators são uma proposta (ainda não padronizada) para adicionar metadados e modificar classes, métodos, propriedades ou parâmetros."
O que são iterables e iterators em JavaScript?,"Um iterable é um objeto que pode ser iterado (por exemplo, usando um loop `for...of`). Um iterator é um objeto que define como um iterable é iterado, fornecendo um método `next()` que retorna o próximo valor."
O que é o protocolo de iteração em JavaScript?,O protocolo de iteração define como um objeto pode ser iterado. Ele requer que o objeto tenha um método `[Symbol.iterator]()` que retorna um objeto iterator.
O que é o método `Object.defineProperty()` em JavaScript?,"O método `Object.defineProperty()` define uma nova propriedade diretamente em um objeto, ou modifica uma propriedade existente em um objeto, e retorna o objeto."
O que é memory leak em JavaScript?,"Memory leak ocorre quando um programa retém memória que não é mais necessária, impedindo que o garbage collector a libere."
Quais são os diferentes tipos de bubbling e capturing em JavaScript?,"Bubbling é quando um evento é acionado em um elemento e, em seguida, se propaga para cima na árvore DOM para seus elementos pai. Capturing é o oposto: o evento se propaga para baixo da árvore DOM do elemento raiz para o elemento alvo."
O que é CORS (Cross-Origin Resource Sharing) e como ele se relaciona com JavaScript?,CORS é um mecanismo de segurança do navegador que restringe o acesso a recursos de um domínio diferente daquele de onde o script foi carregado. JavaScript frequentemente encontra problemas de CORS ao fazer requisições AJAX para APIs de outros domínios.
Como você pode lidar com erros de CORS em JavaScript?,"A solução geralmente envolve configurar o servidor da API para enviar cabeçalhos HTTP que permitam o acesso cross-origin (por exemplo, `Access-Control-Allow-Origin`)."
O que é o método `requestAnimationFrame()` em JavaScript?,O método `requestAnimationFrame()` informa ao navegador que você deseja realizar uma animação e solicita que o navegador chame uma função especificada para atualizar uma animação antes da próxima repintura.
Como você pode se comunicar entre a thread principal e um Web Worker?,"Você pode usar o método `postMessage()` para enviar mensagens entre a thread principal e o Web Worker, e o evento `message` para receber mensagens."
O que são metadados em JavaScript?,"Metadados são dados sobre dados. Eles fornecem informações adicionais sobre o código, como tipo de dado, descrição, ou outra informação relevante. Em Javascript, metadados podem ser adicionados usando comentários, ou através de bibliotecas e padrões de programação."
"O que é a diferença entre `var`, `let`, e `const`?","`var` tem escopo de função ou global, enquanto `let` e `const` têm escopo de bloco. `var` permite redeclaração e reatribuição, `let` permite reatribuição, mas não redeclaração, e `const` não permite redeclaração nem reatribuição."
Qual é o propósito do operador `??` (nullish coalescing operator) em JavaScript?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Ele é diferente do operador `||`, que retorna o operando do lado direito se o operando do lado esquerdo for falsy (incluindo `0`, `''`, `false`, `null`, `undefined`)."
Qual a finalidade da função `eval()` em JavaScript e por que é geralmente desencorajada?,"A função `eval()` avalia uma string como código JavaScript. É desencorajada porque pode ser perigosa se usada com strings que vêm de fontes não confiáveis, pois pode executar código arbitrário, representando riscos de segurança. Além disso, geralmente é mais lenta do que outras formas de executar código dinamicamente.

Espero que estas perguntas e respostas sejam úteis!"
O que é o conceito de hoisting em JavaScript?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis (usando `var`) e declarações de funções para o topo de seu escopo antes da execução do código. Variáveis declaradas com `let` e `const` também sofrem hoisting, mas não são inicializadas."
O que é o operador `===` (igualdade estrita) em JavaScript?,"O operador `===` compara dois valores, retornando `true` somente se eles forem iguais tanto em valor quanto em tipo, sem realizar conversão de tipo."
Como você cria um objeto em JavaScript usando a notação literal?,"Você cria um objeto usando chaves `{}` e definindo pares chave-valor dentro delas, separados por vírgulas. Exemplo: `let pessoa = { nome: ""João"", idade: 30 };`"
"Qual a diferença entre `var`, `let` e `const` na declaração de variáveis?",`var` tem escopo de função ou global e sofre hoisting. `let` e `const` têm escopo de bloco e não sofrem hoisting (mas são 'hoisted' sem inicialização). `const` declara variáveis que não podem ser reatribuídas.
Como você verifica se um objeto possui uma determinada propriedade em JavaScript?,"Você pode usar o operador `in` (ex: `""nome"" in pessoa`), o método `hasOwnProperty()` (ex: `pessoa.hasOwnProperty(""nome"")`), ou simplesmente acessar a propriedade e verificar se é diferente de `undefined` (ex: `pessoa.nome !== undefined`)."
Qual a diferença entre `slice()` e `splice()` em arrays JavaScript?,"`slice()` retorna uma cópia de uma parte de um array, sem modificar o array original. `splice()` modifica o array original removendo ou substituindo elementos."
Como você cria um loop `for` em JavaScript?,A sintaxe do loop `for` é `for (inicialização; condição; incremento) { // código a ser executado }`.
Como você cria um loop `while` em JavaScript?,A sintaxe do loop `while` é `while (condição) { // código a ser executado }`.
Como você cria um loop `do...while` em JavaScript?,"A sintaxe do loop `do...while` é `do { // código a ser executado } while (condição);`. A principal diferença é que o bloco de código é executado pelo menos uma vez, mesmo que a condição seja falsa na primeira iteração."
O que é a palavra-chave `break` em JavaScript?,"A palavra-chave `break` é usada para sair de um loop (`for`, `while`, `do...while`) ou de um bloco `switch`."
O que é a palavra-chave `continue` em JavaScript?,A palavra-chave `continue` é usada para pular a iteração atual de um loop e passar para a próxima iteração.
Como você clona um objeto em JavaScript?,"Existem várias maneiras de clonar um objeto. Para um clone superficial, você pode usar `Object.assign({}, obj)` ou o operador spread `{...obj}`. Para um clone profundo, você pode usar `JSON.parse(JSON.stringify(obj))` (mas isso não funciona para funções ou objetos com referências circulares) ou bibliotecas externas."
O que é um stub?,Um stub é um trecho de código que substitui temporariamente uma funcionalidade maior durante o desenvolvimento ou teste. Ele fornece um valor de retorno controlado para simular o comportamento de um componente ainda não implementado ou para isolar o código em teste.
O que é um mock?,Um mock é um objeto simulado que imita o comportamento de um objeto real em um ambiente de teste. Ele permite verificar se as interações esperadas com esse objeto ocorreram durante a execução do código testado.
O que é programação assíncrona?,"É um paradigma de programação que permite executar tarefas simultaneamente, sem bloquear a execução principal do programa. Útil para lidar com operações demoradas, como requisições de rede ou leitura de arquivos."
Explique a diferença entre `forEach` e `map` em JavaScript.,"`forEach` itera sobre os elementos de um array e executa uma função para cada elemento, mas não retorna um novo array. `map`, por outro lado, executa uma função para cada elemento e retorna um novo array com os resultados."
Como selecionar um elemento HTML usando JavaScript?,"Métodos como `document.getElementById()`, `document.querySelector()`, e `document.querySelectorAll()` são usados para selecionar elementos HTML no DOM."
Como modificar o conteúdo de um elemento HTML usando JavaScript?,A propriedade `innerHTML` e o método `textContent` podem ser usados para modificar o conteúdo de um elemento HTML.
Como adicionar um evento a um elemento HTML usando JavaScript?,O método `addEventListener()` é usado para adicionar um listener de evento a um elemento HTML.
Como você armazena dados no Local Storage em JavaScript?,"Você pode usar o método `localStorage.setItem(""chave"", ""valor"")` para armazenar dados no Local Storage."
Como você recupera dados do Local Storage em JavaScript?,"Você pode usar o método `localStorage.getItem(""chave"")` para recuperar dados do Local Storage."
O que é a função `setTimeout` em JavaScript?,A função `setTimeout` agenda a execução de uma função após um determinado período de tempo (em milissegundos).
O que é a função `setInterval` em JavaScript?,A função `setInterval` executa repetidamente uma função em intervalos regulares de tempo (em milissegundos).
Como você limpa um `setTimeout` em JavaScript?,"Você pode usar a função `clearTimeout(id)` para cancelar um `setTimeout` agendado, onde `id` é o valor retornado por `setTimeout`."
Como você limpa um `setInterval` em JavaScript?,"Você pode usar a função `clearInterval(id)` para cancelar um `setInterval` agendado, onde `id` é o valor retornado por `setInterval`."
Como você faz uma requisição AJAX usando `fetch` em JavaScript?,"Você pode usar a função `fetch(""url"")` para fazer uma requisição HTTP, que retorna uma Promise."
Como você lida com a resposta de uma requisição `fetch` em JavaScript?,Você pode usar os métodos `.then()` e `.catch()` para lidar com a resposta da Promise retornada por `fetch`.
O que são cabeçalhos HTTP?,"Os cabeçalhos HTTP são metadados enviados em requisições e respostas HTTP, que fornecem informações adicionais sobre a requisição ou resposta, como o tipo de conteúdo, o comprimento do conteúdo e o status da requisição."
O que são status codes HTTP?,"Status codes HTTP são códigos numéricos de três dígitos que indicam o resultado de uma requisição HTTP, como `200 OK`, `404 Not Found`, `500 Internal Server Error`."
Como você habilita CORS em um servidor?,"Você pode habilitar CORS em um servidor configurando os cabeçalhos HTTP apropriados, como `Access-Control-Allow-Origin`."
Quais são os principais métodos para trabalhar com expressões regulares em JavaScript?,"Os principais métodos são `test()` (para verificar se uma string corresponde ao padrão), `exec()` (para encontrar a primeira correspondência) e `match()` (para encontrar todas as correspondências)."
O que é o método `split()` em strings JavaScript?,"O método `split()` divide uma string em um array de substrings, usando um separador especificado."
O que é o método `toUpperCase()` em strings JavaScript?,O método `toUpperCase()` converte uma string para letras maiúsculas.
O que é o método `toLowerCase()` em strings JavaScript?,O método `toLowerCase()` converte uma string para letras minúsculas.
O que é o método `charAt()` em strings JavaScript?,O método `charAt(índice)` retorna o caractere na posição especificada de uma string.
O que é o método `charCodeAt()` em strings JavaScript?,O método `charCodeAt(índice)` retorna o código Unicode do caractere na posição especificada de uma string.
O que é o método `concat()` em strings JavaScript?,O método `concat()` concatena duas ou mais strings e retorna uma nova string.
O que é o método `lastIndexOf()` em strings JavaScript?,"O método `lastIndexOf(substring)` retorna o índice da última ocorrência de uma substring em uma string, ou -1 se a substring não for encontrada."
O que é o método `substr()` em strings JavaScript?,"O método `substr(startIndex, length)` retorna uma parte de uma string começando no índice especificado e com o comprimento especificado. *Observação:* Este método é considerado legado e `substring` é preferível."
O que é o método `padEnd()` em strings JavaScript?,"O método `padEnd(targetLength, padString)` preenche o final de uma string com uma string especificada até atingir o comprimento desejado."
Como você define parâmetros padrão para funções em JavaScript?,Você pode definir parâmetros padrão usando a sintaxe `function minhaFuncao(parametro = valorPadrao) {}`.
O que é a função `Object.keys()` em JavaScript?,A função `Object.keys(objeto)` retorna um array com todas as chaves (nomes de propriedades) do objeto especificado.
O que é a função `Object.values()` em JavaScript?,A função `Object.values(objeto)` retorna um array com todos os valores das propriedades do objeto especificado.
O que é a função `Object.entries()` em JavaScript?,"A função `Object.entries(objeto)` retorna um array de arrays, onde cada array interno contém a chave e o valor de uma propriedade do objeto especificado."
O que é o método `push()` em arrays JavaScript?,O método `push(elemento)` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
O que é o método `pop()` em arrays JavaScript?,O método `pop()` remove o último elemento de um array e retorna esse elemento.
O que é o método `shift()` em arrays JavaScript?,O método `shift()` remove o primeiro elemento de um array e retorna esse elemento.
O que é o método `unshift()` em arrays JavaScript?,O método `unshift(elemento)` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
O que é o método `sort()` em arrays JavaScript?,"O método `sort()` ordena os elementos de um array no local e retorna o array ordenado. Por padrão, a ordenação é alfabética."
O que é o método `join()` em arrays JavaScript?,"O método `join(separador)` junta todos os elementos de um array em uma string, usando um separador especificado."
O que é o método `includes()` em arrays JavaScript?,"O método `includes(elemento)` retorna `true` se um array contém um elemento especificado, caso contrário, retorna `false`."
O que é o método `flat()` em arrays JavaScript?,O método `flat()` cria um novo array com todos os elementos de sub-arrays concatenados recursivamente até uma profundidade especificada.
O que é o método `flatMap()` em arrays JavaScript?,"O método `flatMap()` mapeia cada elemento usando uma função de mapeamento e, em seguida, nivela o resultado em um novo array. É idêntico a um `map()` seguido por um `flat()` de profundidade 1."
Qual a diferença entre funções declaradas e funções expressas?,"Funções declaradas são definidas usando a palavra-chave `function`, enquanto funções expressas são atribuídas a uma variável. Funções declaradas são ""hoisted"", enquanto funções expressas não (a variável é hoisted, mas não a função)."
Como você simula herança em JavaScript antes do ES6?,"Antes do ES6, a herança era simulada usando o sistema de protótipos, manipulando o protótipo de uma função construtora para apontar para o protótipo de outra."
O que são IIFE (Immediately Invoked Function Expression)?,São funções que são executadas assim que são definidas. São usadas para criar um escopo isolado e evitar conflitos de nomes.
"O que é ""use strict""?","`""use strict"";` é uma diretiva que habilita o modo estrito em JavaScript. Isso impõe regras mais rigorosas e ajuda a evitar erros comuns."
Como você lida com erros em Promises?,Você pode lidar com erros em Promises usando o método `.catch()` ou o bloco `try...catch` em funções `async/await`.
O que são eventos personalizados em JavaScript?,Eventos personalizados são eventos que você pode criar e disparar manualmente em JavaScript para sinalizar mudanças de estado ou interações específicas.
Como você dispara um evento personalizado em JavaScript?,Você pode criar um evento personalizado usando o construtor `new Event()` e dispará-lo usando o método `dispatchEvent()` em um elemento.
O que são metaprogramação em JavaScript?,"Metaprogramação é a capacidade de um programa manipular outros programas (ou ele mesmo) como dados. Em JavaScript, isso envolve usar Reflect API e Proxies."
O que é o Proxy object em JavaScript?,"Proxy object é usado para customizar operações fundamentais em objetos (ex: leitura, escrita, enumeração, invocação). Permite a criação de hooks em operações de objetos.

Espero que esta lista seja útil e contenha perguntas diferentes e desafiadoras!"
O que é hoisting em JavaScript e como ele afeta variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seus escopos antes da execução do código.  No caso de variáveis declaradas com `var`, apenas a declaração é movida, a atribuição permanece onde está. Já as funções declaradas com a palavra-chave `function` são totalmente movidas para o topo."
Como você pode criar um objeto em JavaScript usando a sintaxe literal?,"Um objeto literal é criado usando chaves `{}` e definindo propriedades no formato `chave: valor`, separadas por vírgulas. Exemplo: `const pessoa = { nome: ""João"", idade: 30 };`"
Explique o que é a coerção de tipo (type coercion) em JavaScript.,"Coerção de tipo é a conversão automática de um tipo de dado para outro durante operações em JavaScript. Por exemplo, ao somar uma string com um número, o número pode ser convertido para string."
Qual a diferença entre `let` e `const` em JavaScript?,"`let` permite redeclarar e reatribuir o valor de uma variável dentro de seu escopo. `const` declara uma variável com escopo de bloco, cujo valor não pode ser reatribuído após a inicialização."
Explique como funciona o operador ternário em JavaScript.,O operador ternário é uma forma abreviada de escrever uma declaração `if...else`. Sua sintaxe é `condição ? expressão_se_verdadeiro : expressão_se_falso`.
O que é uma promise em JavaScript?,"Uma promise representa o eventual resultado (sucesso ou falha) de uma operação assíncrona.  Possui três estados: pendente (pending), resolvida (fulfilled) ou rejeitada (rejected)."
Como você pode lidar com erros em JavaScript usando `try...catch`?,O bloco `try` contém o código que pode lançar uma exceção. O bloco `catch` captura a exceção se ela for lançada dentro do bloco `try` e permite o tratamento do erro.
Explique o que é o operador `...` (spread operator) em JavaScript.,O operador spread pode ser usado para expandir elementos de um array ou propriedades de um objeto em outro array ou objeto.
Qual a diferença entre `call()` e `apply()` em JavaScript?,"Tanto `call()` quanto `apply()` são usados para invocar uma função com um determinado valor `this`. A diferença é que `call()` aceita argumentos individualmente, enquanto `apply()` aceita um array de argumentos."
"Explique o que é o conceito de ""truthy"" e ""falsy"" em JavaScript.","Em JavaScript, um valor ""truthy"" é um valor que é avaliado como `true` em um contexto booleano, enquanto um valor ""falsy"" é avaliado como `false`. Exemplos de valores falsy incluem `0`, `""""`, `null`, `undefined`, `NaN`, e `false`."
Como você pode definir valores padrão para parâmetros de função em JavaScript?,Você pode usar a sintaxe de parâmetros padrão: `function minhaFuncao(parametro1 = valorPadrao) { ... }`.
"Qual a diferença entre `var`, `let` e `const` em relação ao escopo?","`var` tem escopo de função ou escopo global, enquanto `let` e `const` têm escopo de bloco. Isso significa que variáveis declaradas com `let` e `const` são visíveis apenas dentro do bloco em que foram declaradas."
Explique o que é recursão em JavaScript.,Recursão é quando uma função chama a si mesma dentro de sua própria definição. É usada para resolver problemas que podem ser divididos em subproblemas menores semelhantes.
Como você pode verificar se uma propriedade existe em um objeto em JavaScript?,"Você pode usar o operador `in` ou o método `hasOwnProperty()`. Por exemplo: `""propriedade"" in objeto` ou `objeto.hasOwnProperty(""propriedade"")`."
Explique o que é o conceito de imutabilidade em JavaScript.,"Imutabilidade significa que, uma vez que um objeto é criado, seu estado não pode ser alterado. Em JavaScript, strings são imutáveis. Para objetos e arrays, você pode usar técnicas para criar novas instâncias em vez de modificar as existentes."
Como você pode criar um array imutável em JavaScript?,"Você pode usar métodos como `slice()`, `map()`, `filter()`, `concat()`, ou o spread operator para criar novas cópias do array em vez de modificar o array original."
Como você pode criar um objeto imutável em JavaScript?,"Você pode usar `Object.freeze()` para impedir que novas propriedades sejam adicionadas, que propriedades existentes sejam removidas ou que os valores das propriedades existentes sejam alterados.  No entanto, `Object.freeze()` apenas faz uma imutabilidade superficial."
O que é o método `Object.preventExtensions()` em JavaScript?,`Object.preventExtensions()` impede que novas propriedades sejam adicionadas a um objeto. As propriedades existentes ainda podem ser removidas ou modificadas.
"Explique o que é o padrão de projeto ""revealing module pattern"" em JavaScript.",É um padrão de projeto que permite encapsular o código em uma função e retornar apenas as partes que você deseja expor como uma API pública.
Como você pode converter uma string em um número em JavaScript?,"Você pode usar `parseInt()`, `parseFloat()`, ou o operador unário `+`. Por exemplo: `parseInt(""123"")`, `parseFloat(""3.14"")`, ou `+""42""`."
Como você pode verificar se um valor é um número em JavaScript?,"Você pode usar `typeof valor === ""number""` e `!isNaN(valor)`. É importante usar `!isNaN()` porque `typeof NaN` retorna `""number""`."
O que é o valor `NaN` em JavaScript?,`NaN` (Not-a-Number) é um valor que representa um valor numérico que não é um número válido.
Como você pode verificar se um valor é `NaN` em JavaScript?,Você deve usar a função `isNaN(valor)`. É importante notar que `NaN === NaN` retorna `false`.
Explique o que é a pilha de chamadas (call stack) em JavaScript.,"A pilha de chamadas é uma estrutura de dados que rastreia a execução de funções em JavaScript. Cada vez que uma função é chamada, ela é adicionada ao topo da pilha. Quando a função termina de executar, ela é removida da pilha."
O que é a fila de eventos (event queue) em JavaScript?,"A fila de eventos é uma fila que armazena callbacks de operações assíncronas (como `setTimeout`, `setInterval`, eventos DOM, etc.) que estão aguardando para serem executadas."
Explique o que é o escopo léxico (lexical scope) em JavaScript.,"Escopo léxico significa que o escopo de uma variável é determinado por sua posição no código-fonte, não por como a função é chamada."
Como o valor de `this` é determinado em uma função normal em JavaScript?,"Em uma função normal, o valor de `this` é determinado por como a função é chamada. Se a função é chamada como um método de um objeto, `this` se refere ao objeto. Se a função é chamada sem um objeto, `this` se refere ao objeto global (window no navegador, global no Node.js). Em modo estrito, o valor de `this` será `undefined` se não for explicitamente definido."
O que são Generators em JavaScript?,"Generators são funções que podem ser pausadas e retomadas, permitindo que você produza múltiplos valores ao longo do tempo. São definidas usando `function*`."
Como você usa a palavra-chave `yield` dentro de um Generator?,A palavra-chave `yield` pausa a execução do Generator e retorna o valor especificado. A execução pode ser retomada posteriormente.
Como você itera sobre os valores produzidos por um Generator?,Você pode usar um loop `for...of` ou o método `next()` do objeto Generator.
O que são Módulos em JavaScript?,Módulos são arquivos de código JavaScript que podem ser importados e exportados para reutilização em outros arquivos.
Como você exporta valores de um módulo em JavaScript?,"Você pode usar as palavras-chave `export` para exportar variáveis, funções, classes ou outros valores de um módulo. Existem exportações nomeadas (named exports) e exportações padrão (default exports)."
Como você importa valores de um módulo em JavaScript?,Você pode usar a palavra-chave `import` para importar valores de um módulo. Você pode importar exportações nomeadas usando chaves `{}` e exportações padrão sem chaves.
O que são Named Exports em JavaScript?,"Named exports permitem exportar múltiplos valores de um módulo, cada um com seu próprio nome. Eles são importados usando chaves `{}`."
O que é Default Export em JavaScript?,Default export permite exportar um único valor de um módulo como padrão. Ele é importado sem chaves.
O que são Template Strings com Tag em JavaScript?,"Template strings com tag permitem personalizar a forma como um template literal é processado, usando uma função ""tag"" que recebe os valores e strings do template literal."
O que é o operador `in` usado com Arrays em JavaScript?,"Quando usado com arrays, o operador `in` verifica se um índice existe no array. Por exemplo, `0 in [1,2,3]` retorna `true`, enquanto `5 in [1,2,3]` retorna `false`."
O que é um Typed Array em JavaScript?,"Typed Arrays fornecem um mecanismo para acessar dados binários brutos de forma eficiente. Eles representam arrays de um tipo específico (e.g., Int8Array, Uint16Array) e são úteis para lidar com áudio, vídeo, e outros dados binários."
O que é o objeto `Intl` em JavaScript?,"O objeto `Intl` é um namespace para a API de internacionalização do ECMAScript, que fornece formatação sensível à linguagem para datas, números, moedas e outras informações."
O que é Partial Application em JavaScript?,"Partial application é semelhante ao currying, mas em vez de transformar uma função em uma sequência de funções que recebem um argumento, ela cria uma nova função preenchendo alguns dos argumentos da função original."
Explique o conceito de memoization em JavaScript.,Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras e retorna o resultado armazenado quando as mesmas entradas ocorrem novamente.
O que é o Global Object em JavaScript?,"O objeto global é um objeto que sempre existe no escopo global. No navegador, é o objeto `window`. No Node.js, é o objeto `global`."
Como você pode obter a hora atual em milissegundos em JavaScript?,Você pode usar `Date.now()` ou `new Date().getTime()`.
O que são regular expressions (regex) em JavaScript?,Regular expressions são padrões usados para corresponder combinações de caracteres em strings.
Como você cria uma regular expression em JavaScript?,"Você pode criar uma regular expression usando a sintaxe literal: `/padrao/flags` ou usando o construtor `new RegExp(""padrao"", ""flags"")`."
Quais são alguns exemplos de flags que você pode usar com regular expressions em JavaScript?,"Algumas flags comuns incluem `i` (ignorar maiúsculas e minúsculas), `g` (correspondência global), e `m` (multiline)."
O que é o método `test()` em regular expressions em JavaScript?,O método `test()` testa se uma string corresponde a uma regular expression e retorna `true` ou `false`.
O que é o método `exec()` em regular expressions em JavaScript?,O método `exec()` executa uma busca por uma correspondência em uma string e retorna um array com informações sobre a correspondência ou `null` se não houver correspondência.
O que é o método `split()` em strings em JavaScript?,"O método `split()` divide uma string em um array de substrings, usando um separador especificado."
O que é o método `search()` em strings em JavaScript?,O método `search()` procura por uma correspondência de uma regular expression em uma string e retorna o índice da primeira correspondência ou `-1` se não houver correspondência.
O que é JSONP (JSON with Padding)?,"É uma técnica para contornar a restrição de mesma origem (same-origin policy) em navegadores, permitindo que um script em uma página web recupere dados de um domínio diferente.  JSONP funciona encapsulando os dados JSON em uma chamada de função.  É um tanto obsoleta devido a alternativas mais seguras como CORS."
O que são Data Attributes em HTML e como acessá-los com JavaScript?,"Data Attributes são atributos HTML que permitem armazenar dados personalizados em elementos HTML. Eles começam com o prefixo `data-`. Você pode acessá-los em JavaScript usando a propriedade `dataset` do elemento. Exemplo: `<div data-meu-valor=""123"">`. Em Javascript: `element.dataset.meuValor`."
Qual a diferença entre uma função declarada e uma função expressa em JavaScript?,"Uma função declarada é definida usando a palavra-chave `function` e tem seu nome hoisted para o topo do escopo. Uma função expressa é atribuída a uma variável e não é hoisted (ou seja, a função não pode ser chamada antes de ser definida)."
O que são side effects (efeitos colaterais) em funções JavaScript?,"Side effects são alterações no estado fora da função, como modificar variáveis globais, alterar propriedades de objetos passados como argumentos ou realizar operações de I/O. Funções com side effects são mais difíceis de testar e depurar."
O que são Immediately Invoked Function Expressions (IIFE) em JavaScript?,"IIFEs são funções anônimas que são executadas imediatamente após sua definição. Elas são usadas para criar um escopo privado para evitar conflitos de nomes e encapsular o código. Exemplo: `(function() { console.log(""IIFE""); })();`"
O que é Function Composition em JavaScript?,Function Composition é o processo de combinar duas ou mais funções para produzir uma nova função. A saída de uma função se torna a entrada da próxima.
O que é Transpilação em JavaScript?,"Transpilação é o processo de converter o código-fonte de uma linguagem de programação em uma linguagem de programação diferente, normalmente para permitir que o código seja executado em ambientes mais antigos que não suportam os recursos mais recentes."
Qual é a diferença entre shallow copy e deep copy em JavaScript?,"Shallow copy cria uma nova cópia de um objeto, mas as propriedades que são objetos ou arrays ainda referenciam os mesmos locais de memória do objeto original. Deep copy cria uma nova cópia do objeto e de todos os seus objetos e arrays aninhados, garantindo que não haja referências compartilhadas."
Como você pode realizar uma deep copy em JavaScript?,"Uma forma de realizar uma deep copy é usando `JSON.parse(JSON.stringify(objeto))`. No entanto, este método não funciona para funções, datas ou objetos complexos. Outras opções incluem bibliotecas especializadas ou implementar uma função de deep copy recursiva."
O que é Object Destructuring em JavaScript?,"Object destructuring é uma expressão JavaScript que torna possível extrair dados de objetos e atribuí-los a variáveis de forma concisa. Exemplo: `const { nome, idade } = pessoa;`"
O que é Array Destructuring em JavaScript?,"Array destructuring é semelhante ao object destructuring, mas é usado para extrair valores de arrays e atribuí-los a variáveis. Exemplo: `const [primeiro, segundo] = array;`"
O que é a palavra-chave `new` em JavaScript?,"A palavra-chave `new` é usada para criar uma nova instância de um objeto a partir de uma função construtora. Ela realiza as seguintes ações: cria um novo objeto vazio, define o protótipo do objeto para o protótipo da função construtora, executa a função construtora com `this` definido para o novo objeto e retorna o novo objeto (a menos que a função construtora retorne explicitamente outro objeto)."
Como você pode acessar o protótipo de um objeto em JavaScript?,Você pode acessar o protótipo de um objeto usando a propriedade `__proto__` (embora não seja recomendada para uso em produção) ou usando o método `Object.getPrototypeOf()`.
O que é o conceito de Prototype Chain em JavaScript?,"Prototype Chain é a cadeia de protótipos que um objeto herda. Se uma propriedade ou método não for encontrado no objeto, o JavaScript procurará no protótipo do objeto e, em seguida, no protótipo do protótipo e assim por diante, até chegar ao protótipo `null`."
Como você pode simular herança em JavaScript usando protótipos?,Você pode simular herança criando uma nova função construtora e definindo o protótipo dessa função para uma instância da função construtora pai. Isso permite que a função construtora filha herde as propriedades e métodos da função construtora pai.
O que são Mixins em JavaScript?,Mixins são classes ou objetos que contêm funcionalidades que podem ser adicionadas a outras classes ou objetos. Eles são usados para reutilizar o código e adicionar funcionalidades a objetos que não estão relacionados hierarquicamente.
O que é Composition over Inheritance?,"Composition over Inheritance é um princípio de design de software que favorece a composição de objetos sobre a herança. Em vez de criar hierarquias de classes com herança, você cria objetos combinando outros objetos menores e mais especializados."
O que é o conceito de Debouncing em JavaScript?,"Debouncing é uma técnica usada para limitar a taxa na qual uma função é executada. Ela agrupa várias chamadas de função consecutivas em uma única chamada, executando a função somente após um determinado período de inatividade."
O que é o conceito de Throttling em JavaScript?,"Throttling é semelhante a debouncing, mas em vez de agrupar todas as chamadas de função consecutivas em uma única chamada, ele executa a função em intervalos regulares de tempo."
Como funciona o Garbage Collection em JavaScript?,"O Garbage Collection em JavaScript geralmente usa um algoritmo de ""marcação e varredura"" (mark and sweep). Ele marca todos os objetos que estão sendo usados pelo programa e, em seguida, varre a memória para liberar todos os objetos que não foram marcados."
O que são Memory Leaks (vazamentos de memória) em JavaScript?,"Memory Leaks ocorrem quando a memória não está mais sendo usada pelo programa, mas não é liberada pelo Garbage Collection. Isso pode levar a um consumo excessivo de memória e, eventualmente, a um travamento do programa."
Quais são algumas causas comuns de Memory Leaks em JavaScript?,"Algumas causas comuns incluem variáveis globais não intencionais, closures que mantêm referências a variáveis que não são mais necessárias, manipuladores de eventos que não são removidos e referências circulares entre objetos."
Como você pode depurar Memory Leaks em JavaScript?,"Você pode usar ferramentas de desenvolvedor do navegador para analisar o uso da memória e identificar objetos que não estão sendo liberados pelo Garbage Collection.

Ufa! Espero que estas perguntas e respostas sejam úteis para aprofundar o seu conhecimento em JavaScript.  Boa sorte!"
O que é o hoisting em JavaScript e como ele afeta o código?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do seu escopo antes da execução do código.  No caso de variáveis declaradas com `var`, apenas a declaração é movida, não a inicialização. Variáveis declaradas com `let` e `const` também sofrem hoisting, mas não são inicializadas, resultando em um erro se forem acessadas antes da declaração real no código. Funções declaradas com a palavra-chave `function` são completamente movidas, incluindo a inicialização."
O que é o objeto `arguments` em JavaScript e como ele é usado?,"O objeto `arguments` é um objeto semelhante a um array disponível dentro de todas as funções não-arrow (não-arrow functions). Ele contém uma lista de todos os argumentos passados para a função, independentemente dos parâmetros definidos na declaração da função. Pode ser usado para acessar argumentos adicionais passados para a função."
O que são template literals em JavaScript e como eles são úteis?,Template literals são strings delimitadas com crases (` `` `) em vez de aspas simples ou duplas. Elas permitem interpolação de strings (substituir variáveis dentro da string) usando `${expressao}` e strings de múltiplas linhas sem necessidade de concatenação ou caracteres de escape.
"Explique o conceito de ""truthy"" e ""falsy"" values em JavaScript.","""Truthy"" values são valores que são avaliados como `true` em um contexto booleano. ""Falsy"" values são valores que são avaliados como `false` em um contexto booleano.  Valores falsy incluem: `false`, `0`, `-0`, `0n`, `""""`, `null`, `undefined`, e `NaN`. Todos os outros valores são truthy."
O que é o método `bind()` em JavaScript e para que ele serve?,"O método `bind()` cria uma nova função que, quando chamada, tem sua palavra-chave `this` definida para o valor fornecido.  É usado para definir o contexto (`this`) de uma função explicitamente."
O que são arrow functions em JavaScript e como elas diferem das funções regulares?,"Arrow functions são uma sintaxe mais curta para escrever funções em JavaScript. Elas diferem das funções regulares em relação ao valor de `this` (arrow functions herdam o `this` do escopo circundante), na ausência do objeto `arguments` (você pode usar o operador rest `...` para obter os argumentos), e não podem ser usadas como construtoras (não podem ser usadas com `new`)."
Como você pode prevenir a modificação de um objeto em JavaScript?,"Você pode usar: `Object.freeze()` (impede que novas propriedades sejam adicionadas e impede a modificação de propriedades existentes), `Object.seal()` (impede que novas propriedades sejam adicionadas, mas permite a modificação de propriedades existentes), ou `Object.preventExtensions()` (impede que novas propriedades sejam adicionadas)."
O que são Promises em JavaScript e como elas são usadas para lidar com operações assíncronas?,"Promises são objetos que representam a eventual conclusão (ou falha) de uma operação assíncrona e seu valor resultante. Elas têm três estados: `pending` (pendente), `fulfilled` (resolvida) e `rejected` (rejeitada). Promises ajudam a evitar o ""callback hell"" e tornam o código assíncrono mais legível e gerenciável."
O que são as palavras-chave `async` e `await` em JavaScript e como elas se relacionam com Promises?,`async` é uma palavra-chave usada para declarar uma função assíncrona. Uma função `async` retorna implicitamente uma Promise. `await` é uma palavra-chave usada dentro de uma função `async` para pausar a execução da função até que uma Promise seja resolvida (fulfilled) ou rejeitada. `async/await` simplifica a escrita de código assíncrono baseado em Promises.
"O que é o conceito de ""event loop"" em JavaScript e como ele funciona?","O event loop é o mecanismo que permite que o JavaScript execute operações assíncronas sem bloquear a thread principal. Ele monitora a pilha de chamadas (call stack) e a fila de callbacks (callback queue). Quando a pilha de chamadas está vazia, o event loop pega o primeiro callback da fila e o coloca na pilha de chamadas para ser executado."
O que são generators em JavaScript e como eles são usados?,"Generators são funções que podem ser pausadas e retomadas, permitindo que você crie funções que retornam múltiplos valores ao longo do tempo. Elas são definidas usando a sintaxe `function*`. A palavra-chave `yield` é usada para pausar a execução da função e retornar um valor."
O que é o método `forEach()` em JavaScript e como ele se compara ao loop `for`?,"O método `forEach()` executa uma função fornecida uma vez para cada elemento em um array. Ele é semelhante a um loop `for`, mas é mais conciso para iterar sobre todos os elementos de um array. Ao contrário do loop `for`, não é possível interromper a execução de `forEach()` usando `break` ou `continue`; você deve usar um loop `for` se precisar dessa funcionalidade."
O que são eventos em JavaScript e como eles são usados para tornar as páginas web interativas?,"Eventos são ações ou ocorrências que acontecem em um navegador web, como cliques de mouse, carregamento de páginas, envio de formulários, etc. O JavaScript pode detectar e responder a esses eventos, permitindo que você crie páginas web interativas."
Como você pode adicionar um event listener a um elemento HTML usando JavaScript?,"Você pode usar o método `element.addEventListener(tipoEvento, funcaoCallback)`. Por exemplo: `elemento.addEventListener('click', minhaFuncao);`"
O que é o método `preventDefault()` no objeto `event` em JavaScript?,"O método `preventDefault()` impede o comportamento padrão de um evento. Por exemplo, ele pode ser usado para impedir que um link redirecione para uma nova página ou que um formulário seja enviado."
O que é o método `stopPropagation()` no objeto `event` em JavaScript?,O método `stopPropagation()` impede que o evento se propague para elementos pais no DOM (event bubbling). Ele é usado para evitar que múltiplos event listeners sejam executados em elementos diferentes na hierarquia do DOM.
Como você pode delegar eventos em JavaScript?,"Delegação de eventos é uma técnica em que você adiciona um event listener a um elemento pai em vez de adicionar event listeners a múltiplos elementos filhos. Quando um evento ocorre em um elemento filho, ele ""borbulha"" para o elemento pai, onde o event listener pode determinar qual elemento filho disparou o evento e executar a ação apropriada. Isso é útil para lidar com grandes quantidades de elementos ou elementos que são adicionados dinamicamente ao DOM."
O que é o método `setTimeout()` em JavaScript e como ele é usado?,O método `setTimeout()` agenda a execução de uma função (ou um trecho de código) após um determinado período de tempo (em milissegundos). Ele retorna um ID que pode ser usado para cancelar o timeout com `clearTimeout()`.
O que é o método `setInterval()` em JavaScript e como ele é usado?,O método `setInterval()` executa repetidamente uma função (ou um trecho de código) em intervalos de tempo regulares (em milissegundos). Ele retorna um ID que pode ser usado para cancelar o intervalo com `clearInterval()`.
O que é memoization em JavaScript e como ela pode melhorar o desempenho?,"Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras (ou funções puras) e retorna o resultado armazenado em cache quando as mesmas entradas ocorrem novamente. Isso pode melhorar significativamente o desempenho, especialmente para funções recursivas."
O que são closures e como eles estão relacionados ao padrão de módulo?,"Closures permitem que as funções internas de um módulo acessem as variáveis privadas definidas no escopo externo da função IIFE, mesmo depois que a função IIFE termina de ser executada. Isso permite que o módulo mantenha o estado privado."
Como você pode armazenar dados no navegador do usuário usando JavaScript?,Você pode usar `localStorage` (armazenamento persistente) ou `sessionStorage` (armazenamento temporário para a sessão atual).
Quais são os perigos de usar cookies em JavaScript e como você pode mitigar esses riscos?,"Os cookies podem ser vulneráveis a ataques de Cross-Site Scripting (XSS) e Cross-Site Request Forgery (CSRF). Para mitigar esses riscos, você pode usar cookies com atributos `HttpOnly` (para evitar que sejam acessados por JavaScript), `Secure` (para garantir que sejam transmitidos apenas por HTTPS) e `SameSite` (para controlar como os cookies são enviados em solicitações entre sites)."
Quais são os quatro pilares da programação orientada a objetos (OOP)?,"Os quatro pilares da OOP são: Abstração, Encapsulamento, Herança e Polimorfismo."
O que é encapsulamento em JavaScript?,Encapsulamento é o princípio de agrupar dados (atributos) e os métodos que operam nesses dados em uma única unidade (uma classe). Também envolve ocultar os detalhes de implementação internos do objeto do mundo exterior e fornecer uma interface pública para interagir com o objeto.
O que é polimorfismo em JavaScript?,"Polimorfismo é a capacidade de um objeto assumir muitas formas. Em outras palavras, é a capacidade de chamar o mesmo método em objetos diferentes e obter resultados diferentes, dependendo do tipo do objeto."
Como você pode criar uma classe em JavaScript usando a sintaxe `class` (ES6)?,"Você pode usar a palavra-chave `class` seguida pelo nome da classe. Dentro da classe, você pode definir um construtor (usando o método `constructor`) para inicializar as propriedades do objeto e métodos para definir os comportamentos do objeto."
O que é o método `constructor` em uma classe JavaScript?,O método `constructor` é um método especial dentro de uma classe JavaScript que é executado quando um novo objeto da classe é criado. Ele é usado para inicializar as propriedades do objeto.
Como você pode criar uma instância de uma classe em JavaScript?,"Você pode usar a palavra-chave `new` seguida pelo nome da classe e os argumentos necessários para o construtor. Por exemplo: `const meuObjeto = new MinhaClasse(argumento1, argumento2);`."
Como você pode herdar de outra classe em JavaScript usando a sintaxe `class` (ES6)?,Você pode usar a palavra-chave `extends` para indicar que uma classe herda de outra classe. Por exemplo: `class MinhaSubclasse extends MinhaSuperclasse { ... }`.
Como você pode chamar o construtor da classe pai em uma classe filha usando a sintaxe `class` (ES6)?,Você pode usar a palavra-chave `super()` dentro do construtor da classe filha para chamar o construtor da classe pai. Isso garante que as propriedades da classe pai sejam inicializadas corretamente.
O que é o método `static` em uma classe JavaScript?,"Métodos estáticos são métodos que pertencem à classe em si, e não a instâncias da classe. Eles são chamados diretamente na classe, usando a sintaxe `Classe.metodoEstatico()`. Métodos estáticos geralmente são usados para funções utilitárias ou para criar métodos factory."
Como você pode definir um getter em JavaScript?,Você pode usar a palavra-chave `get` antes do nome do método dentro de um objeto literal ou classe. Por exemplo: `get minhaPropriedade() { return this._minhaPropriedade; }`.
Como você pode definir um setter em JavaScript?,Você pode usar a palavra-chave `set` antes do nome do método dentro de um objeto literal ou classe. Por exemplo: `set minhaPropriedade(valor) { this._minhaPropriedade = valor; }`.
Qual o valor de `this` em uma função global em JavaScript (fora de qualquer objeto)?,"Em uma função global, o valor de `this` é o objeto global (o objeto `window` no navegador ou o objeto `global` no Node.js). No modo estrito (`""use strict""`), o valor de `this` é `undefined` em funções globais."
Qual o valor de `this` em um método de objeto em JavaScript?,"Em um método de objeto, o valor de `this` é o próprio objeto."
"Qual o valor de `this` em uma função chamada com `call()`, `apply()` ou `bind()` em JavaScript?","Quando uma função é chamada com `call()`, `apply()` ou `bind()`, você pode especificar explicitamente o valor de `this` como o primeiro argumento para esses métodos."
"O que é o modo estrito (`""use strict""`) em JavaScript e como ele afeta o código?","O modo estrito é uma forma de executar o JavaScript de forma mais ""segura"" e ""limpa"". Ele impõe regras mais rigorosas e elimina alguns comportamentos ""ruins"" da linguagem. Por exemplo, ele impede o uso de variáveis não declaradas, impede a atribuição a propriedades somente leitura e altera o valor de `this` em funções globais."
O que são erros (errors) em JavaScript e como você pode lidar com eles?,"Erros são problemas que ocorrem durante a execução de um código JavaScript. Eles podem ser erros de sintaxe, erros de tempo de execução ou erros lógicos. Você pode lidar com erros usando blocos `try...catch` para capturar e tratar exceções."
O que é o bloco `try...catch` em JavaScript e como ele funciona?,"O bloco `try...catch` permite que você execute um bloco de código (dentro do bloco `try`) e, se ocorrer uma exceção, capture e trate essa exceção no bloco `catch`. Isso impede que o programa quebre e permite que você lide com o erro de forma controlada."
O que são expressões regulares (regex) em JavaScript e como elas são usadas?,"Expressões regulares (regex) são padrões usados para corresponder sequências de caracteres em strings. Elas podem ser usadas para validar entrada de dados, pesquisar e substituir texto, extrair informações de strings e realizar outras operações de processamento de texto."
O que são flags em expressões regulares em JavaScript?,"Flags modificam o comportamento de uma expressão regular. As flags mais comuns são: `i` (insensível a maiúsculas e minúsculas), `g` (global, encontra todas as ocorrências), `m` (multilinhas)."
Como você pode usar o método `test()` para verificar se uma string corresponde a uma expressão regular em JavaScript?,O método `test()` retorna `true` se a string corresponder à expressão regular e `false` caso contrário. Por exemplo: `/padrao/.test('string')`.
Como você pode usar o método `exec()` para encontrar correspondências em uma string usando uma expressão regular em JavaScript?,O método `exec()` procura por uma correspondência na string e retorna um array com informações sobre a correspondência (incluindo os grupos de captura) ou `null` se não houver correspondência.
Como você pode usar o método `match()` para encontrar correspondências em uma string usando uma expressão regular em JavaScript?,"O método `match()` retorna um array com todas as correspondências encontradas na string ou `null` se não houver correspondências. Se a expressão regular tiver a flag `g`, ele retorna um array com todas as correspondências. Se não tiver a flag `g`, ele retorna um array com a primeira correspondência e os grupos de captura."
Como você pode usar o método `replace()` para substituir partes de uma string usando uma expressão regular em JavaScript?,O método `replace()` substitui partes de uma string que correspondem a uma expressão regular por uma nova string. Você pode usar grupos de captura na string de substituição para referenciar partes da string correspondente.
O que são callbacks em JavaScript e como eles são usados?,"Callbacks são funções que são passadas como argumentos para outras funções e são executadas posteriormente, geralmente após a conclusão de uma operação assíncrona. Eles são usados para lidar com eventos, operações de I/O e outras tarefas assíncronas."
"O que é o ""callback hell"" e como você pode evitá-lo em JavaScript?","""Callback hell"" é uma situação em que você tem várias callbacks aninhadas umas dentro das outras, tornando o código difícil de ler, entender e manter. Você pode evitar o ""callback hell"" usando Promises, async/await ou técnicas de modularização."
Como você pode criar e usar um Web Worker em JavaScript?,Você pode criar um Web Worker instanciando um objeto `Worker` com o caminho para um arquivo JavaScript que contém o código do worker. Você pode se comunicar com o worker enviando mensagens usando o método `postMessage()` e recebendo mensagens usando o event listener `onmessage`.
O que é o método `requestAnimationFrame()` em JavaScript e como ele é usado?,"O método `requestAnimationFrame()` agenda uma função para ser executada antes da próxima repintura do navegador. Ele é usado para criar animações suaves e eficientes, pois garante que as animações sejam sincronizadas com a taxa de atualização do monitor."
O que é o objeto `console` em JavaScript e como ele é usado para depuração?,"O objeto `console` fornece acesso ao console de depuração do navegador. Ele contém métodos como `console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()` e `console.timeEnd()` que podem ser usados para exibir mensagens, avisos, erros, tabelas e medir o tempo de execução de trechos de código."
O que é o método `debugger` em JavaScript e como ele é usado para depuração?,"O método `debugger` é uma instrução que pausa a execução do código e abre o depurador do navegador (se estiver aberto). Ele permite que você inspecione o estado do código, defina breakpoints e execute o código passo a passo."
O que é a API Fetch em JavaScript e como ela é usada para fazer requisições HTTP?,"A API Fetch fornece uma interface moderna e flexível para fazer requisições HTTP em JavaScript. Ela retorna Promises, o que facilita o tratamento de respostas assíncronas."
Como você pode fazer uma requisição GET usando a API Fetch em JavaScript?,Você pode usar o método `fetch()` com a URL do recurso que você deseja obter. Por
O que é hoisting em JavaScript e quais declarações são afetadas?,"Hoisting é o comportamento do JavaScript de mover declarações para o topo do escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto funções declaradas com a sintaxe de declaração (`function myFunction() {}`) são hoisted completamente. Variáveis declaradas com `let` e `const` também são hoisted, mas não inicializadas, resultando em um erro se forem acessadas antes da declaração."
O que é uma função construtora em JavaScript e como ela é usada?,"Uma função construtora é uma função usada para criar objetos. Ela é chamada com a palavra-chave `new`, que cria um novo objeto, define `this` dentro da função para se referir ao novo objeto, e implicitamente retorna o novo objeto."
O que é a diferença entre `slice()` e `splice()` em JavaScript?,"`slice()` retorna uma cópia de uma parte de um array, sem modificar o array original. `splice()` modifica o array original, removendo ou substituindo elementos, e retorna os elementos removidos."
O que são template literals em JavaScript e quais vantagens eles oferecem?,"Template literals são strings delimitadas por backticks (` `). Eles permitem a incorporação de expressões (variáveis, cálculos, etc.) diretamente dentro da string usando a sintaxe `${expressao}`. Eles também suportam strings multi-linha sem necessidade de concatenação."
Qual a utilidade do operador spread (`...`) em JavaScript?,O operador spread permite expandir um iterável (como um array ou string) em lugares onde múltiplos argumentos (para chamadas de função) ou múltiplos elementos (para literais de array) são esperados.  Ele também pode ser usado para clonar arrays e objetos (shallow copy).
O que são arrow functions em JavaScript e quais as diferenças em relação às funções tradicionais?,"Arrow functions são uma sintaxe mais concisa para escrever funções em JavaScript. Elas não têm seu próprio `this` (herdam o `this` do contexto pai), não têm o objeto `arguments` e não podem ser usadas como funções construtoras."
Explique o conceito de truthy e falsy values em JavaScript.,"Truthy values são valores que são avaliados como `true` em um contexto booleano. Falsy values são valores que são avaliados como `false` em um contexto booleano. Exemplos de falsy values são: `0`, `""""` (string vazia), `null`, `undefined`, `NaN` e `false`."
O que é o método `map()` em arrays JavaScript e como ele funciona?,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele não modifica o array original.
O que é o método `filter()` em arrays JavaScript e como ele funciona?,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. Ele não modifica o array original.
O que é o método `reduce()` em arrays JavaScript e como ele funciona?,"O método `reduce()` executa uma função reducer (fornecida por você) em cada elemento do array, resultando em um único valor de saída. Ele recebe um acumulador e o elemento atual como argumentos."
O que é o método `forEach()` em arrays JavaScript e como ele funciona?,O método `forEach()` executa uma função fornecida uma vez para cada elemento do array. Ele não retorna um novo array e não pode ser interrompido com `break` ou `continue`.
O que é o conceito de immutability em JavaScript e por que é importante?,"Immutability significa que o estado de um objeto não pode ser modificado após a sua criação. É importante porque torna o código mais previsível, fácil de depurar e testar, e ajuda a evitar efeitos colaterais indesejados."
Como você pode evitar a mutação de um array em JavaScript?,"Você pode usar métodos que retornam um novo array sem modificar o original, como `slice()`, `map()`, `filter()`, `reduce()` ou o operador spread para criar uma cópia."
O que são flags em expressões regulares JavaScript e quais são algumas comuns?,"Flags modificam o comportamento da pesquisa de expressões regulares. Algumas flags comuns são: `i` (ignorar maiúsculas/minúsculas), `g` (global - encontrar todas as correspondências), `m` (multiline - `^` e `$` correspondem ao início/fim de cada linha)."
O que é o método `exec()` em expressões regulares JavaScript?,O método `exec()` executa uma pesquisa por uma correspondência em uma string especificada. Retorna um array com informações sobre a correspondência (ou `null` se não houver correspondência).
O que é backtracking em expressões regulares?,Backtracking é o processo que o mecanismo de regex usa para tentar diferentes combinações de correspondências quando uma parte do padrão falha em corresponder. Pode ser ineficiente em alguns casos.
Como você obtém o dia da semana a partir de um objeto `Date` em JavaScript?,"Você pode usar o método `getDay()`, que retorna um número representando o dia da semana (0 para Domingo, 1 para Segunda, etc.)."
Como você converte um objeto JavaScript para JSON?,Você pode usar o método `JSON.stringify(obj)` para converter um objeto JavaScript para uma string JSON.
O que são os eventos em JavaScript?,"Eventos são ações ou ocorrências que acontecem no navegador (por exemplo, clique do mouse, carregamento de página, envio de formulário). JavaScript permite que você responda a esses eventos."
Como você seleciona um elemento do DOM em JavaScript?,"Você pode usar métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`, `document.querySelector()` e `document.querySelectorAll()`."
Como você adiciona um ouvinte de evento a um elemento do DOM em JavaScript?,"Você pode usar o método `addEventListener()` para adicionar um ouvinte de evento a um elemento do DOM. Por exemplo: `elemento.addEventListener('click', function() { ... });`"
O que são os timers em JavaScript?,Timers permitem que você execute funções após um determinado período de tempo ou em intervalos regulares.
Quais são as funções `setTimeout()` e `setInterval()` em JavaScript?,`setTimeout()` executa uma função uma vez após um determinado período de tempo (em milissegundos). `setInterval()` executa uma função repetidamente em intervalos regulares (em milissegundos).
Como você cancela um timer criado com `setTimeout()` ou `setInterval()`?,Você pode usar `clearTimeout()` para cancelar um timer criado com `setTimeout()` e `clearInterval()` para cancelar um timer criado com `setInterval()`.
O que é o conceito de callback em JavaScript?,Um callback é uma função que é passada como argumento para outra função e é executada após a conclusão de alguma operação.
O que é programação assíncrona em JavaScript?,Programação assíncrona permite que seu código continue a ser executado enquanto espera que uma operação seja concluída (como uma solicitação de rede ou um timer). Isso evita que a interface do usuário fique travada.
"Quais são os métodos `then()`, `catch()` e `finally()` em Promises?",`then()` é chamado quando a Promise é cumprida (resolvida). `catch()` é chamado quando a Promise é rejeitada. `finally()` é chamado independentemente de a Promise ser cumprida ou rejeitada.
Como você armazena dados no localStorage e sessionStorage?,"Você pode usar os métodos `setItem(chave, valor)` para armazenar dados e `getItem(chave)` para recuperá-los. Por exemplo: `localStorage.setItem('nome', 'João');` e `const nome = localStorage.getItem('nome');`"
O que é o escopo léxico em JavaScript?,O escopo léxico significa que o escopo de uma variável é determinado por sua posição no código fonte (onde ela é declarada) e não por onde a função é chamada.
Como você pode forçar o valor de `this` em uma função em JavaScript?,"Você pode usar os métodos `call()`, `apply()` e `bind()` para forçar o valor de `this` em uma função."
"O que é o modo estrito (`""use strict""`) em JavaScript?","O modo estrito impõe um conjunto mais rigoroso de regras ao código JavaScript, ajudando a prevenir erros comuns e melhorar a segurança. Ele é ativado declarando `""use strict"";` no início de um script ou função."
Quais são algumas das restrições impostas pelo modo estrito em JavaScript?,"Algumas restrições incluem: atribuir a variáveis não declaradas resulta em erro, `this` é `undefined` em funções chamadas como funções simples (não como métodos de objeto), a palavra-chave `with` é proibida, argumentos com o mesmo nome não são permitidos, entre outras."
O que são iteradores em JavaScript?,Iteradores são objetos que definem uma sequência e retornam um valor por vez quando o método `next()` é chamado. Eles são usados para percorrer estruturas de dados como arrays e strings.
O que é o método `yield` em generators JavaScript?,`yield` pausa a execução da função generator e retorna um valor. A execução pode ser retomada posteriormente.
Quais são as duas formas principais de módulos em JavaScript (antes do ES Modules)?,As duas formas principais são: Immediately Invoked Function Expression (IIFE) e CommonJS (usado no Node.js).
O que são ES Modules em JavaScript?,"ES Modules são o sistema de módulos padrão para JavaScript, introduzido no ECMAScript 2015 (ES6). Eles usam as palavras-chave `import` e `export` para importar e exportar módulos."
Qual a diferença entre `export default` e `export` em ES Modules?,`export default` exporta um único valor padrão do módulo. `export` exporta múltiplos valores nomeados. Você só pode ter um `export default` por módulo.
Como você importa um módulo em JavaScript usando ES Modules?,"Você usa a palavra-chave `import`. Para importar um export default: `import nomeDoValor from './modulo.js';` Para importar exports nomeados: `import { nome1, nome2 } from './modulo.js';`"
O que são classes em JavaScript?,Classes são um modelo para criar objetos. Elas definem a estrutura e o comportamento dos objetos daquela classe.
O que é herança em programação orientada a objetos?,Herança é um mecanismo que permite que uma classe (subclasse ou classe filha) herde propriedades e métodos de outra classe (superclasse ou classe pai).
O que é polimorfismo em programação orientada a objetos?,"Polimorfismo significa ""muitas formas"". Em POO, significa que objetos de diferentes classes podem responder à mesma mensagem (método) de maneiras diferentes."
O que é encapsulamento em programação orientada a objetos?,Encapsulamento é o princípio de ocultar os detalhes internos de um objeto e expor apenas uma interface pública para interagir com ele.
Como você cria um objeto em JavaScript usando a notação literal de objeto?,"Você usa chaves `{}` para criar um objeto vazio. Você pode adicionar propriedades ao objeto dentro das chaves ou posteriormente. Por exemplo: `const objeto = { propriedade1: valor1, propriedade2: valor2 };`"
Como você faz destructuring de um objeto em JavaScript?,"Você usa chaves `{}` para especificar as propriedades que deseja extrair. Por exemplo: `const { propriedade1, propriedade2 } = objeto;`"
Como você faz destructuring de um array em JavaScript?,"Você usa colchetes `[]` para especificar os elementos que deseja extrair. Por exemplo: `const [elemento1, elemento2] = array;`"
O que são default parameters em funções JavaScript?,"Default parameters permitem que você defina valores padrão para os parâmetros de uma função, que serão usados se o argumento correspondente não for fornecido quando a função for chamada."
Como você define um default parameter em uma função JavaScript?,Você usa o operador `=` para atribuir um valor padrão ao parâmetro na declaração da função. Por exemplo: `function minhaFuncao(parametro1 = 'valorPadrao') { ... }`
O que é rest parameter em funções JavaScript?,O rest parameter permite que você represente um número indefinido de argumentos como um array.
Como você define um rest parameter em uma função JavaScript?,Você usa o operador `...` antes do nome do parâmetro na declaração da função. Por exemplo: `function minhaFuncao(...parametros) { ... }`
O que são template string tags em JavaScript?,"Template string tags permitem que você personalize a forma como os template literals são interpretados, passando a string e as expressões para uma função tag."
O que são weakmaps em JavaScript?,"WeakMaps são similares a Maps, mas as chaves em WeakMaps devem ser objetos, e as chaves são mantidas ""fracas"". Isso significa que se não houver outras referências a um objeto que é usado como chave em um WeakMap, o objeto pode ser coletado pelo coletor de lixo, e a entrada correspondente no WeakMap será removida."
O que são weaksets em JavaScript?,"WeakSets são similares a Sets, mas só podem conter objetos, e os objetos são mantidos ""fracos"". Isso significa que se não houver outras referências a um objeto em um WeakSet, o objeto pode ser coletado pelo coletor de lixo, e o objeto será removido do WeakSet."
O que é o método `for await...of` em JavaScript?,"O laço `for await...of` itera sobre um iterável assíncrono, esperando que cada Promise seja resolvida antes de continuar a iteração."
Como você cria um BigInt em JavaScript?,"Você pode criar um BigInt adicionando o sufixo `n` a um número literal (por exemplo, `123n`) ou usando a função `BigInt()` (por exemplo, `BigInt(123)`)."
O que é o operador nullish coalescing (`??`) em JavaScript?,"O operador nullish coalescing retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo."
O que é optional chaining (`?.`) em JavaScript?,"O operador optional chaining permite acessar propriedades de um objeto, mesmo que uma propriedade intermediária seja `null` ou `undefined`, sem causar um erro."
O que são private class fields em JavaScript?,Private class fields são propriedades de uma classe que só podem ser acessadas de dentro da classe. Elas são declaradas com o prefixo `#`.
O que são static class fields em JavaScript?,"Static class fields são propriedades que pertencem à classe em si, e não a instâncias da classe."
O que é um array tipado (Typed Array) em JavaScript?,"Um Array Tipado (Typed Array) é um objeto similar a um array que fornece um mecanismo para acessar dados binários brutos em um buffer de memória. Eles são úteis para lidar com dados binários, como imagens, áudio ou vídeo."
O que é tree shaking em JavaScript?,"Tree shaking é um processo de otimização que remove código não utilizado de um projeto JavaScript, reduzindo o tamanho do pacote final."
O que são side effects (efeitos colaterais) em JavaScript?,"Side effects são mudanças no estado do programa que não são explicitamente retornadas pela função. Exemplos incluem modificar variáveis globais, interagir com o DOM ou fazer requisições HTTP."
O que é o Garbage Collector (Coletor de Lixo) em JavaScript?,O Garbage Collector é um processo automático que libera a memória que não está mais sendo utilizada por um programa. Ele identifica e remove objetos que não são mais acessíveis.
O que é hoisting de variáveis e funções em JavaScript?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do escopo antes da execução do código. Variáveis declaradas com `var` são hoisted e inicializadas com `undefined`, enquanto funções declaradas com a sintaxe de declaração (`function myFunction() {}`) são hoisted completamente."
O que é a pilha de chamadas (Call Stack) em JavaScript?,"A pilha de chamadas é uma estrutura de dados que rastreia as funções que estão sendo executadas em um programa JavaScript. Quando uma função é chamada, ela é adicionada ao topo da pilha. Quando a função termina de ser executada, ela é removida da pilha."
O que é a fila de tarefas (Task Queue) em JavaScript?,"A fila de tarefas (também conhecida como fila de callback) é uma fila que contém as funções que estão prontas para serem executadas, mas estão esperando que a pilha de chamadas esteja vazia. Isso inclui callbacks de eventos, timers e Promises resolvidas."
"O que é o conceito de ""throttle"" em JavaScript?",Throttling é uma técnica para limitar a taxa na qual uma função é executada. Garante que uma função não seja executada mais do que um certo número de vezes dentro de um período de tempo especificado.
"O que é o conceito de ""debounce"" em JavaScript?","Debouncing é uma técnica para atrasar a execução de uma função até que um certo período de inatividade tenha passado. É útil para lidar com eventos que são acionados rapidamente e repetidamente, como redimensionamento de janela ou entrada de teclado."
O que é strict mode em JavaScript e como ele é usado?,"Strict mode é um modo restrito de execução do JavaScript que ajuda a prevenir erros comuns e melhora a segurança do código. É ativado adicionando a diretiva `""use strict"";` no início de um script ou função."
Quais são as diferenças entre `undefined` e `undeclared` em JavaScript?,"`undefined` significa que uma variável foi declarada, mas ainda não foi atribuído um valor a ela. `undeclared` significa que a variável não foi declarada em nenhum escopo acessível."
O que são os diferentes tipos de erros em JavaScript?,"Existem vários tipos de erros em JavaScript, incluindo"
O que é hoisting em JavaScript e como ele afeta a execução do código?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seu escopo antes da execução do código. Isso significa que você pode usar uma variável ou função antes de sua declaração literal no código, embora com algumas ressalvas (especialmente com variáveis declaradas com `let` e `const`)."
O que são closures em JavaScript e como são úteis?,"Um closure é a capacidade de uma função interna acessar as variáveis do escopo da função externa, mesmo após a função externa ter retornado.  São úteis para encapsular dados, criar funções privadas e manter o estado entre as invocações de uma função."
"Qual é a diferença entre `var`, `let` e `const` ao declarar variáveis em JavaScript?","`var` tem escopo de função ou global, permitindo hoisting e redeclaração. `let` tem escopo de bloco, não permite redeclaração no mesmo escopo e sofre hoisting, mas não pode ser acessada antes da declaração. `const` também tem escopo de bloco, não permite redeclaração ou reatribuição e sofre hoisting, com as mesmas restrições do `let`."
Explique o que são arrow functions em JavaScript e como elas diferem das funções tradicionais.,"Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas têm uma sintaxe mais curta e não possuem seu próprio `this`, `arguments`, `super` ou `new.target`. O `this` dentro de uma arrow function herda o `this` do contexto circundante (lexical `this`)."
Como você pode adicionar uma propriedade a um objeto em JavaScript?,Você pode adicionar uma propriedade a um objeto usando a notação de ponto ( `objeto.novaPropriedade = valor;` ) ou a notação de colchetes ( `objeto['novaPropriedade'] = valor;` ).
O que é o método `map()` em JavaScript e qual é o seu propósito?,O método `map()` é um método de array que cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele transforma cada elemento.
O que é o método `filter()` em JavaScript e qual é o seu propósito?,O método `filter()` é um método de array que cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. Ele seleciona elementos com base em uma condição.
O que é o método `reduce()` em JavaScript e qual é o seu propósito?,O método `reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é JSON em JavaScript e como ele é usado?,"JSON (JavaScript Object Notation) é um formato de dados leve e legível por humanos usado para transmitir dados entre um servidor e um aplicativo web. Em JavaScript, é usado para representar objetos e arrays como strings."
Como você pode adicionar um event listener a um elemento em JavaScript?,"Você pode adicionar um event listener a um elemento usando o método `addEventListener(tipoDoEvento, funcaoCallback)`."
Como você pode selecionar um elemento HTML no DOM usando JavaScript?,"Você pode selecionar um elemento HTML no DOM usando métodos como `document.getElementById()`, `document.querySelector()` ou `document.querySelectorAll()`."
O que é o escopo em JavaScript?,"Escopo define a visibilidade e a acessibilidade de variáveis em diferentes partes do código JavaScript. Existem escopos global, de função (em `var`) e de bloco (em `let` e `const`)."
O que são High-Order Functions (Funções de Ordem Superior)?,"Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam funções como resultados. `map`, `filter` e `reduce` são exemplos."
O que são os estados de uma Promise?,"Uma Promise tem três estados: *pending* (pendente), *fulfilled* (realizada) e *rejected* (rejeitada)."
Como você pode encadear Promises em JavaScript?,Você pode encadear Promises usando o método `.then()` para executar uma função quando a Promise for resolvida e o método `.catch()` para lidar com erros.
O que são async/await em JavaScript?,"`async/await` são palavras-chave que tornam o código assíncrono mais fácil de ler e escrever.  `async` marca uma função como assíncrona, e `await` pausa a execução da função até que uma Promise seja resolvida."
O que é o método `fetch()` em JavaScript?,O método `fetch()` é usado para fazer requisições de rede para buscar recursos de um servidor. Ele retorna uma Promise que resolve para a resposta dessa requisição.
Como você pode limpar um timeout criado com `setTimeout()` em JavaScript?,"Você pode limpar um timeout usando o método `clearTimeout(idTimeout)`, onde `idTimeout` é o valor retornado por `setTimeout()`."
Como você pode limpar um interval criado com `setInterval()` em JavaScript?,"Você pode limpar um interval usando o método `clearInterval(idInterval)`, onde `idInterval` é o valor retornado por `setInterval()`."
O que é o método `Math.round()` em JavaScript?,O método `Math.round()` retorna o valor de um número arredondado para o inteiro mais próximo.
Como você pode criar um objeto com um protótipo específico em JavaScript?,Você pode usar `Object.create(prototipo)` para criar um novo objeto com o protótipo especificado.
Como o valor de `this` é determinado em uma função normal (não arrow function)?,"Em uma função normal, o valor de `this` é determinado pelo contexto de chamada.  Pode ser o objeto global (window), um objeto explícito (usando `call`, `apply` ou `bind`), ou o objeto que chama o método."
Como o valor de `this` é determinado em uma arrow function?,"Em uma arrow function, o valor de `this` é lexical, ou seja, ele herda o valor de `this` do escopo circundante."
O que são classes em JavaScript (a partir do ES6)?,"Classes em JavaScript são um modelo para criar objetos. Elas fornecem uma sintaxe mais clara e estruturada para definir objetos e suas propriedades e métodos, mas ainda são baseadas na herança prototípica."
Como você pode definir um construtor em uma classe JavaScript?,Você define um construtor usando o método `constructor()`. O construtor é chamado quando um novo objeto da classe é criado.
Como você pode definir métodos em uma classe JavaScript?,"Você define métodos dentro do corpo da classe, sem usar a palavra-chave `function`."
O que é herança em classes JavaScript?,Herança em classes JavaScript permite que uma classe (classe filha) herde propriedades e métodos de outra classe (classe pai). Isso é feito usando a palavra-chave `extends`.
Como você pode exportar um valor de um módulo JavaScript?,Você pode exportar um valor usando a palavra-chave `export`. Você pode exportar valores individualmente (named exports) ou exportar um valor padrão (default export).
Como você pode importar um valor para um módulo JavaScript?,Você pode importar um valor usando a palavra-chave `import`. Você pode importar valores individuais (named imports) ou importar um valor padrão (default import).
Qual a diferença entre Named Exports e Default Exports?,"Named exports permitem exportar múltiplos valores com seus respectivos nomes. Default exports permitem exportar um único valor como padrão, que pode ser importado com qualquer nome."
O que são template strings tagged?,Template strings tagged são uma forma avançada de template literals onde uma função é usada para processar o template literal antes que a string final seja construída. A função recebe um array de strings literais e um array de valores interpolados.
O que é o objeto `Symbol` em JavaScript?,Um `Symbol` é um tipo de dado primitivo cujo valor é único e imutável. Eles são frequentemente usados como chaves de propriedade de objeto para evitar conflitos de nomes.
O que são Array-like Objects (Objetos Similares a Arrays)?,"Array-like objects são objetos que têm uma propriedade `length` e propriedades indexadas, mas não têm todos os métodos de um array verdadeiro (por exemplo, `arguments`)."
Como você pode converter um array-like object em um array verdadeiro em JavaScript?,Você pode usar `Array.from(arrayLikeObject)` ou `[].slice.call(arrayLikeObject)` para converter um array-like object em um array verdadeiro.
O que é destructuring assignment em JavaScript?,Destructuring assignment permite extrair valores de objetos ou arrays e atribuí-los a variáveis em uma única declaração.
Como você pode usar destructuring assignment com objetos em JavaScript?,"Você pode usar destructuring assignment com objetos usando a sintaxe `{ propriedade1, propriedade2 } = objeto;`."
Como você pode usar destructuring assignment com arrays em JavaScript?,"Você pode usar destructuring assignment com arrays usando a sintaxe `[elemento1, elemento2] = array;`."
Quais são algumas das restrições impostas pelo Strict Mode em JavaScript?,"Algumas das restrições incluem: não permitir o uso de variáveis não declaradas, proibir a atribuição a propriedades somente leitura, lançar erros em atribuições silenciosas, e alterar o valor de `this` em algumas situações."
Como você pode criar um IIFE em JavaScript?,"Você pode criar um IIFE envolvendo uma função anônima entre parênteses e, em seguida, chamando a função imediatamente com outros parênteses: `(function() { /* código */ })();`."
O que é o método `Array.forEach()` em JavaScript?,O método `Array.forEach()` executa uma função fornecida uma vez para cada elemento no array.
O que é o método `Array.indexOf()` em JavaScript?,"O método `Array.indexOf()` retorna o primeiro índice em que um dado elemento pode ser encontrado no array, ou -1 se não estiver presente."
O que é o método `Array.lastIndexOf()` em JavaScript?,"O método `Array.lastIndexOf()` retorna o último índice em que um dado elemento pode ser encontrado no array, ou -1 se não estiver presente."
O que é o método `Array.includes()` em JavaScript?,"O método `Array.includes()` determina se um array inclui um determinado elemento, retornando `true` ou `false` conforme apropriado."
O que é o método `Array.find()` em JavaScript?,"O método `Array.find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
O que é o método `Array.findIndex()` em JavaScript?,"O método `Array.findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1."
O que é o método `Array.slice()` em JavaScript?,O método `Array.slice()` retorna uma cópia de uma parte de um array em um novo array.
O que é o método `Array.splice()` em JavaScript?,O método `Array.splice()` altera o conteúdo de um array removendo ou substituindo elementos existentes e/ou adicionando novos elementos no lugar.
O que é o método `Array.concat()` em JavaScript?,"O método `Array.concat()` retorna um novo array consistindo nos elementos do array no qual foi chamado, seguido pelos elementos de cada um dos outros arrays fornecidos como argumentos."
O que é o método `Array.join()` em JavaScript?,"O método `Array.join()` cria e retorna uma nova string concatenando todos os elementos em um array, separados por um separador especificado."
O que é o método `Array.push()` em JavaScript?,O método `Array.push()` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
O que é o método `Array.pop()` em JavaScript?,O método `Array.pop()` remove o último elemento de um array e retorna esse elemento.
O que é o método `Array.shift()` em JavaScript?,O método `Array.shift()` remove o primeiro elemento de um array e retorna esse elemento.
O que é o método `Array.unshift()` em JavaScript?,O método `Array.unshift()` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
O que é o método `Array.sort()` em JavaScript?,"O método `Array.sort()` ordena os elementos de um array no local e retorna o array ordenado. Por padrão, ele ordena os elementos como strings."
O que é o método `Array.reverse()` em JavaScript?,O método `Array.reverse()` inverte a ordem dos elementos em um array no local.
O que é o método `String.length` em JavaScript?,`String.length` é uma propriedade que retorna o comprimento de uma string.
O que é o método `String.charAt()` em JavaScript?,O método `String.charAt()` retorna o caractere em um índice especificado em uma string.
O que é o método `String.charCodeAt()` em JavaScript?,O método `String.charCodeAt()` retorna um número inteiro representando o valor Unicode do caractere no índice especificado.
O que é o método `String.concat()` em JavaScript?,O método `String.concat()` concatena um ou mais valores de string a uma string e retorna uma nova string.
O que é o método `String.indexOf()` em JavaScript?,O método `String.indexOf()` retorna o índice da primeira ocorrência de um valor especificado em uma string.
O que é o método `String.lastIndexOf()` em JavaScript?,O método `String.lastIndexOf()` retorna o índice da última ocorrência de um valor especificado em uma string.
O que é o método `String.startsWith()` em JavaScript?,"O método `String.startsWith()` determina se uma string começa com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado."
O que é o método `String.endsWith()` em JavaScript?,"O método `String.endsWith()` determina se uma string termina com os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado."
O que é o método `String.includes()` em JavaScript?,"O método `String.includes()` determina se uma string contém os caracteres de uma string especificada, retornando `true` ou `false` conforme apropriado."
O que é o método `String.slice()` em JavaScript?,O método `String.slice()` extrai uma parte de uma string e retorna uma nova string.
O que é o método `String.substring()` em JavaScript?,O método `String.substring()` extrai os caracteres entre dois índices (posições) especificados em uma string.
O que é o método `String.substr()` em JavaScript?,"O método `String.substr()` extrai uma parte de uma string, começando em um índice especificado e retornando um determinado número de caracteres."
O que é o método `String.replace()` em JavaScript?,O método `String.replace()` retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por uma substituição.
O que é o método `String.replaceAll()` em JavaScript?,O método `String.replaceAll()` retorna uma nova string com todas as correspondências de um padrão substituídas por uma substituição.
O que é o método `String.toLowerCase()` em JavaScript?,O método `String.toLowerCase()` retorna o valor da string chamada convertido em minúsculas.
O que é o método `String.toUpperCase()` em JavaScript?,O método `String.toUpperCase()` retorna o valor da string chamada convertido em maiúsculas.
O que é o método `String.trim()` em JavaScript?,O método `String.trim()` remove espaços em branco de ambos os lados de uma string.
O que é o método `String.trimStart()` ou `String.trimLeft()` em JavaScript?,O método `String.trimStart()` (ou `String.trimLeft()`) remove espaços em branco do início de uma string.
O que é o método `String.trimEnd()` ou `String.trimRight()` em JavaScript?,O método `String.trimEnd()` (ou `String.trimRight()`) remove espaços em branco do final de uma string.
O que é o método `String.split()` em JavaScript?,"O método `String.split()` divide uma string em uma lista ordenada de substrings, coloca essas substrings em um array e retorna o array."
Quais são os principais métodos de RegExp em JavaScript?,Os principais métodos são `test()` (verifica se há uma correspondência) e `exec()` (retorna a correspondência e informações).
O que são quantificadores em expressões regulares? Dê exemplos.,"Quantificadores especificam quantas vezes um elemento deve corresponder. Exemplos: `*` (zero ou mais), `+` (um ou mais), `?` (zero ou um), `{n}` (exatamente n vezes), `{n,}` (n ou mais vezes), `{n,m}` (entre n e m vezes)."
O que são classes de caracteres em expressões regulares? Dê exemplos.,"Classes de caracteres representam um conjunto de caracteres. Exemplos: `.` (qualquer caractere exceto nova linha), `\d` (dígito), `\w` (caractere de palavra), `\s` (espaço em branco), `[abc]` (a, b ou c), `[^abc]` (qualquer caractere exceto a, b ou c)."
O que são âncoras em expressões regulares? Dê exemplos.,"Âncoras especificam uma posição na string onde a correspondência deve ocorrer. Exemplos: `^` (início da string), `$` (fim da string), `\b` (fronteira de palavra)."
Como você pode referenciar grupos de captura em uma expressão regular?,"Você pode referenciar grupos de captura usando `\1`, `\2`, etc., dentro da própria expressão regular (backreferences), ou usando `$1`, `$2`, etc., na string de substituição do método `replace()`.

Espero que esta lista detalhada seja útil!"
Como você pode evitar a mutação de um objeto em JavaScript?,"Usando métodos como `Object.freeze()`, `Object.assign()` ou o operador spread (`...`) para criar cópias superficiais ou profundas do objeto."
"Explique o que é o conceito de ""hoisting"" em JavaScript.","Hoisting é o comportamento em JavaScript onde as declarações de variáveis (usando `var`) e funções são movidas para o topo de seu escopo antes da execução do código. No entanto, a inicialização (atribuição de valor) não é ""hoisted"" para variáveis declaradas com `var`. Variáveis com `let` e `const` são hoisted, mas não podem ser acessadas antes de serem declaradas (Temporal Dead Zone)."
O que é o operador `??` (nullish coalescing operator) e qual a sua utilidade?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Caso contrário, ele retorna o operando do lado esquerdo. Ele é útil para fornecer um valor padrão quando uma variável pode ser `null` ou `undefined`."
Explique o que é o método `bind()` e como ele funciona.,`bind()` cria uma nova função com o `this` definido para o valor passado como argumento. Ele também permite predefinir argumentos para a função original.
O que é o `strict mode` em JavaScript e como você o habilita?,"`strict mode` é um modo restrito de JavaScript que impõe regras mais rigorosas e elimina alguns comportamentos ""silenciosos"" do JavaScript. Ele é habilitado adicionando a string `""use strict"";` no início de um script ou função."
"Qual a diferença entre `forEach`, `map`, `filter` e `reduce` em arrays?","* `forEach` itera sobre um array e executa uma função para cada elemento.
    * `map` cria um novo array com os resultados da aplicação de uma função a cada elemento do array original.
    * `filter` cria um novo array com todos os elementos que passam em um teste implementado por uma função fornecida.
    * `reduce` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor."
Como você pode interromper a execução de um loop `forEach` em JavaScript?,"Não é possível interromper a execução de um loop `forEach` usando `break` ou `continue`. Se você precisa dessa funcionalidade, use um loop `for` tradicional."
O que é o `spread operator` e como ele é utilizado?,"O `spread operator` (`...`) permite expandir um iterável (como um array ou string) em locais onde múltiplos argumentos (para chamadas de função) ou múltiplos elementos (para literais de array) são esperados. Ele é usado para criar cópias de arrays/objetos, concatenar arrays, passar múltiplos argumentos para funções, etc."
Explique o que são `template literals` e quais suas vantagens.,Template literals são strings delimitadas por crases (``). Eles permitem incorporar expressões JavaScript dentro da string usando `${expression}` e suportam strings de múltiplas linhas. Suas vantagens incluem melhor legibilidade e facilidade de interpolação de strings.
O que são `generators` em JavaScript?,"Generators são funções que podem ser pausadas e retomadas, permitindo a criação de iteradores personalizados. Elas usam a palavra-chave `yield` para pausar a execução e retornar um valor."
Qual a diferença entre `let` e `const`?,"`let` declara uma variável com escopo de bloco, que pode ser reatribuída. `const` declara uma constante com escopo de bloco, que deve ser inicializada no momento da declaração e não pode ser reatribuída (mas o objeto em si pode ser alterado, se for um objeto)."
O que são `arrow functions` e quais suas diferenças em relação às funções tradicionais?,"Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Diferenças incluem a sintaxe, a não ligação do `this` (herda o `this` do contexto circundante) e a não disponibilização dos argumentos `arguments`."
O que é o `event loop` em JavaScript?,"O `event loop` é um mecanismo que permite ao JavaScript executar operações assíncronas de forma não bloqueante. Ele monitora a pilha de chamadas e a fila de tarefas, movendo tarefas da fila de tarefas para a pilha de chamadas quando esta está vazia."
Qual a função do método `setTimeout` em JavaScript?,`setTimeout` agenda a execução de uma função após um determinado período de tempo (em milissegundos).
O que é o `localStorage` e como ele é usado?,`localStorage` é uma API do navegador que permite armazenar dados localmente no navegador do usuário. Os dados armazenados em `localStorage` permanecem disponíveis mesmo após o fechamento da aba ou do navegador.
Como você pode remover um elemento do DOM usando JavaScript?,Usando o método `removeChild()` do elemento pai ou o método `remove()` do próprio elemento.
O que é o conceito de `event delegation` em JavaScript?,`Event delegation` é uma técnica onde um único event listener é anexado a um elemento pai para lidar com eventos disparados por seus filhos. Isso é mais eficiente do que anexar event listeners a cada filho individualmente.
O que é o `shadow DOM`?,"O Shadow DOM permite encapsular HTML, CSS e JavaScript de um componente web, isolando-o do resto do documento. Isso ajuda a evitar conflitos de estilo e a criar componentes reutilizáveis."
Explique o que é `JSON` e como ele é usado em JavaScript.,"JSON (JavaScript Object Notation) é um formato leve para troca de dados. Em JavaScript, ele é usado para serializar e desserializar objetos JavaScript para serem enviados através da rede ou armazenados em um arquivo."
O que é o método `JSON.stringify()`?,O método `JSON.stringify()` converte um objeto JavaScript em uma string JSON.
O que é o método `JSON.parse()`?,O método `JSON.parse()` analisa uma string JSON e converte-a em um objeto JavaScript.
Qual a diferença entre `push` e `unshift` em arrays?,`push` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array. `unshift` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
Qual a diferença entre `pop` e `shift` em arrays?,`pop` remove o último elemento de um array e retorna esse elemento. `shift` remove o primeiro elemento de um array e retorna esse elemento.
Como você pode inverter a ordem dos elementos em um array?,Usando o método `reverse()`.
Como você pode encontrar a posição de um elemento em um array?,Usando o método `indexOf()` ou `lastIndexOf()`.
O que é o método `includes()` em arrays?,"O método `includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado."
O que são `promises` em JavaScript e como elas são usadas?,"Promises representam o resultado eventual de uma operação assíncrona. Elas têm três estados: pendente, cumprida (resolved) e rejeitada (rejected). São usadas para lidar com operações assíncronas de forma mais organizada e legível do que callbacks."
O que é o `DOM`?,"O DOM (Document Object Model) é uma representação em árvore da estrutura de um documento HTML ou XML. Ele permite que o JavaScript acesse e manipule os elementos, atributos e estilos do documento."
Como você pode selecionar um elemento do DOM usando JavaScript?,"Usando métodos como `document.getElementById()`, `document.querySelector()`, `document.querySelectorAll()`."
Como você pode adicionar um evento a um elemento do DOM?,Usando o método `addEventListener()`.
Como você pode adicionar um elemento a outro elemento no DOM?,Usando o método `appendChild()` ou `insertBefore()`.
Como você pode alterar o texto de um elemento no DOM?,Atribuindo um novo valor à propriedade `textContent` ou `innerText` do elemento.
Como você pode alterar o atributo de um elemento no DOM?,Usando o método `setAttribute()` ou acessando diretamente a propriedade do elemento correspondente ao atributo.
Como você pode alterar o estilo de um elemento no DOM?,"Através da propriedade `style` do elemento, que permite acessar e modificar as propriedades CSS diretamente."
O que são `event listeners`?,`Event listeners` são funções que são executadas em resposta a um evento específico que ocorre em um elemento do DOM.
O que é `event bubbling`?,"`Event bubbling` é o processo em que um evento disparado em um elemento do DOM ""borbulha"" para cima na árvore do DOM, acionando event listeners em elementos pai."
O que é `event capturing`?,`Event capturing` é o oposto de event bubbling. O evento é capturado primeiro pelo elemento pai e depois se propaga para o elemento filho.
Como você pode impedir o comportamento padrão de um evento?,Usando o método `preventDefault()` do objeto de evento.
O que é o método `Object.keys()`?,O método `Object.keys()` retorna um array com as chaves (nomes das propriedades) de um objeto.
O que é o método `Object.values()`?,O método `Object.values()` retorna um array com os valores das propriedades de um objeto.
O que é o método `Object.entries()`?,"O método `Object.entries()` retorna um array de arrays, onde cada array interno contém a chave e o valor de cada propriedade de um objeto."
O que é o conceito de `currying` em JavaScript?,`Currying` é uma técnica de transformação de uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.
O que são funções de alta ordem (higher-order functions)?,Funções de alta ordem são funções que recebem outras funções como argumentos ou retornam uma função como resultado.
"O que é o padrão de projeto ""module"" em JavaScript?","O padrão de projeto ""module"" é uma técnica para encapsular código JavaScript, criando um escopo privado para variáveis e funções internas e expondo apenas uma interface pública."
"O que é o padrão de projeto ""revealing module"" em JavaScript?","O padrão de projeto ""revealing module"" é uma variação do padrão ""module"" onde todas as variáveis e funções são definidas no escopo privado, e apenas as que devem ser públicas são explicitamente retornadas como parte da interface pública."
O que é `recursion`?,Recursion é uma técnica de programação onde uma função chama a si mesma para resolver um problema.
O que é `tail call optimization`?,"Tail call optimization é uma otimização que algumas implementações de JavaScript realizam, eliminando a necessidade de criar um novo frame na pilha de chamadas quando uma função faz uma chamada recursiva no final de sua execução. Isso evita o estouro da pilha em recursões profundas."
Como você pode verificar se uma variável foi definida em JavaScript?,"Verificando se o `typeof` da variável é diferente de `undefined`.  No entanto, é importante notar que tentar acessar uma variável que nunca foi declarada lançará um `ReferenceError`."
O que é um `Symbol` em JavaScript?,Um `Symbol` é um tipo de dado primitivo cujas instâncias são únicas e imutáveis. Eles são frequentemente usados como chaves de propriedade de objeto para evitar conflitos com chaves de propriedade existentes.
O que é o método `Object.assign()`?,O método `Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto de destino. Ele retorna o objeto de destino.
Qual a diferença entre uma cópia superficial e uma cópia profunda de um objeto?,"Uma cópia superficial cria um novo objeto que compartilha as mesmas referências dos objetos internos do objeto original. Uma cópia profunda cria um novo objeto com novos objetos internos, sem compartilhar referências."
O que é `destructuring` em JavaScript?,Destructuring é uma expressão JavaScript que torna possível descompactar valores de arrays ou propriedades de objetos em variáveis distintas.
O que são `default parameters` em funções?,Default parameters permitem que parâmetros de função sejam inicializados com valores padrão caso nenhum valor seja passado ou o valor passado seja `undefined`.
O que é o `Rest parameter` em funções?,O `Rest parameter` permite que uma função aceite um número indefinido de argumentos como um array. Ele é denotado por `...`.
O que é `spread syntax` para objetos?,A spread syntax para objetos permite copiar propriedades de um objeto para outro.
Como você pode mesclar dois objetos em um novo objeto usando spread syntax?,"Usando a sintaxe `{ ...objeto1, ...objeto2 }`."
O que é `inheritance` em JavaScript?,Inheritance é um mecanismo que permite que uma classe herde propriedades e métodos de outra classe (a classe pai ou superclasse).
Como você pode implementar inheritance em JavaScript usando classes?,Usando a palavra-chave `extends`.
Como você pode chamar o construtor da classe pai em uma classe filha?,Usando a palavra-chave `super()`.
O que são `getters` e `setters` em classes JavaScript?,"`Getters` e `setters` são métodos especiais que permitem acessar e modificar as propriedades de um objeto como se fossem propriedades diretamente, mas com lógica adicional."
Como você pode definir um getter em uma classe JavaScript?,Usando a palavra-chave `get` antes do nome do método.
Como você pode definir um setter em uma classe JavaScript?,Usando a palavra-chave `set` antes do nome do método.
Como você pode definir um método estático em uma classe JavaScript?,Usando a palavra-chave `static` antes do nome do método.
O que é a cadeia de protótipos?,"A cadeia de protótipos é uma sequência de objetos protótipos que um objeto herda propriedades e métodos. Quando uma propriedade ou método é acessado em um objeto, o JavaScript procura primeiro no próprio objeto. Se não encontrar, procura no protótipo do objeto, e assim por diante, subindo na cadeia de protótipos até encontrar a propriedade ou método, ou chegar ao final da cadeia."
Como você pode adicionar uma propriedade a um protótipo?,Acessando o objeto `prototype` da função construtora e adicionando a propriedade a ele.
O que é o método `Object.create()`?,O método `Object.create()` cria um novo objeto com o protótipo especificado e propriedades opcionais.
O que é o método `Object.getPrototypeOf()`?,O método `Object.getPrototypeOf()` retorna o protótipo do objeto especificado.
O que é o método `isPrototypeOf()`?,O método `isPrototypeOf()` testa se um objeto existe na cadeia de protótipos de outro objeto.
O que é o método `hasOwnProperty()`?,O método `hasOwnProperty()` retorna um booleano indicando se o objeto tem a propriedade especificada como uma propriedade direta (não herdada).
Como você pode iterar sobre as propriedades de um objeto?,"Usando um loop `for...in` para iterar sobre todas as propriedades enumeráveis (incluindo herdadas) ou usando `Object.keys()`, `Object.values()`, `Object.entries()` para iterar sobre as propriedades diretas."
O que são `weak maps`?,"WeakMaps são coleções de pares chave/valor onde as chaves devem ser objetos e os valores podem ser de qualquer tipo. Ao contrário de Maps, as chaves de WeakMaps são mantidas ""fracamente"", o que significa que o garbage collector pode coletá-las se não houver outras referências a elas."
O que são `weak sets`?,"WeakSets são coleções de objetos. Da mesma forma que WeakMaps, os objetos em um WeakSet são mantidos ""fracamente"", permitindo que o garbage collector os colete se não houver outras referências a eles."
O que são iteradores e iteráveis?,"Um iterável é um objeto que pode ser iterado, ou seja, seus elementos podem ser acessados sequencialmente. Um iterador é um objeto que define uma sequência e retorna um valor de cada vez."
Como você pode criar um iterador personalizado em JavaScript?,Implementando um objeto com um método `next()` que retorna um objeto com as propriedades `value` (o próximo valor na sequência) e `done` (um booleano indicando se a sequência terminou).
O que é a interface `Symbol.iterator`?,A interface `Symbol.iterator` é um método que deve ser implementado em um objeto para torná-lo iterável. Ele deve retornar um objeto iterador.
O que são `generators`?,"Generators são funções que podem ser pausadas e retomadas, permitindo a criação de iteradores personalizados de forma mais concisa."
Como você pode pausar a execução de um generator?,Usando a palavra-chave `yield`.
Como você pode obter o próximo valor de um generator?,Chamando o método `next()` do objeto generator.
O que são `promises`?,Promises representam o resultado eventual de uma operação assíncrona.
Quais são os estados de uma Promise?,"Pendente (pending), Cumprida (fulfilled) e Rejeitada (rejected)."
Como você pode criar uma Promise?,"Usando o construtor `new Promise((resolve, reject) => { ... })`."
Como você pode lidar com o resultado de uma Promise?,Usando os métodos `then()` (para lidar com o caso de cumprimento) e `catch()` (para lidar com o caso de rejeição).
O que é o método `Promise.all()`?,"O método `Promise.all()` recebe um array de Promises e retorna uma única Promise que é cumprida quando todas as Promises no array são cumpridas, ou rejeitada se alguma das Promises for rejeitada."
O que é o método `Promise.race()`?,O método `Promise.race()` recebe um array de Promises e retorna uma única Promise que é cumprida ou rejeitada assim que a primeira Promise no array for cumprida ou rejeitada.
O que é o método `Promise.resolve()`?,O método `Promise.resolve()` retorna uma Promise cumprida com o valor especificado.
O que é o método `Promise.reject()`?,O método `Promise.reject()` retorna uma Promise rejeitada com o motivo especificado.
O que são funções `async`?,"Funções `async` são uma forma mais concisa de escrever código assíncrono em JavaScript, usando as palavras-chave `async` e `await`."
Como você pode declarar uma função `async`?,Usando a palavra-chave `async` antes da palavra-chave `function`.
O que a palavra-chave `await` faz?,A palavra-chave `await` pausa a execução de uma função `async` até que uma Promise seja cumprida ou rejeitada.
O que acontece se uma Promise é rejeitada dentro de uma função `async`?,"A rejeição lança uma exceção, que pode ser capturada usando um bloco `try...catch`."
O que é o operador `void`?,O operador `void` avalia uma expressão e retorna `undefined`. Ele é frequentemente usado para evitar que um navegador execute a ação padrão quando um link é clicado.
Qual a utilidade do `debugger` em JavaScript?,"`debugger` é uma declaração que invoca qualquer funcionalidade de depuração disponível, como configurar um breakpoint, permitindo que o desenvolvedor pause o script e examine seu estado."
O que é o operador ternário e como ele funciona?,O operador ternário é uma forma abreviada de escrever uma instrução `if...else`. Sua sintaxe é `condição ? expressãoSeVerdadeira : expressãoSeFalsa`.
Explique o que é o objeto `arguments` em JavaScript.,"O objeto `arguments` é um objeto semelhante a um array disponível dentro de funções não-arrow, contendo os argumentos passados para a função. Não é um array verdadeiro, mas pode ser convertido em um."
O que é o `this` em JavaScript e como ele funciona?,"O `this` é uma palavra-chave que se refere ao contexto de execução atual. Seu valor depende de como a função é chamada. Pode se referir ao objeto global (window em navegadores), ao objeto que chamou a função, ou pode ser explicitamente definido usando `call`, `apply` ou `bind`."
"Qual a diferença entre `let`, `const` e `var` ao declarar variáveis?","`var` tem escopo de função ou global, pode ser redeclarada e reatribuída. `let` tem escopo de bloco, pode ser reatribuída, mas não redeclarada dentro do mesmo escopo. `const` tem escopo de bloco e não pode ser reatribuída após a inicialização."
O que são arrow functions em JavaScript e quais suas vantagens?,Arrow functions são uma sintaxe mais curta para escrever funções. Elas herdam o `this` do contexto circundante (não têm seu próprio `this`) e são implicitamente retornadas se a expressão for simples.
Explique o que é o método `map()` em arrays.,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
Qual a diferença entre `forEach()` e `map()` em arrays?,"`forEach()` itera sobre os elementos de um array, executando uma função para cada elemento, mas não retorna um novo array. `map()` itera sobre os elementos de um array e retorna um novo array com os resultados da aplicação de uma função a cada elemento."
Explique o que é destructuring em JavaScript.,Destructuring é uma forma de extrair valores de objetos e arrays e atribuí-los a variáveis de forma concisa.
O que são promises em JavaScript e como elas funcionam?,"Promises são objetos que representam o resultado eventual (sucesso ou falha) de uma operação assíncrona. Elas têm três estados: pendente (pending), cumprida (fulfilled) e rejeitada (rejected)."
Qual a diferença entre `throw` e `return` em JavaScript?,"`throw` é usado para lançar uma exceção, interrompendo o fluxo normal do programa e passando o controle para o bloco `catch` mais próximo (se houver). `return` é usado para retornar um valor de uma função e encerrar sua execução."
Explique o que é JSON em JavaScript.,JSON (JavaScript Object Notation) é um formato leve para troca de dados. É baseado em um subconjunto da linguagem JavaScript e é usado para representar dados estruturados.
Explique o conceito de prototype em JavaScript.,"Em JavaScript, cada objeto tem um prototype. Quando você tenta acessar uma propriedade de um objeto, o JavaScript primeiro verifica se o objeto possui essa propriedade diretamente. Se não, ele procura no prototype do objeto, e assim por diante, subindo na cadeia de protótipos até encontrar a propriedade ou chegar ao fim da cadeia."
Qual a diferença entre funções declaradas (function declaration) e expressões de função (function expression)?,"Funções declaradas são hoisted (a declaração é movida para o topo do escopo), enquanto expressões de função não são (apenas a variável que armazena a função é hoisted, mas não a função em si)."
O que é um IIFE (Immediately Invoked Function Expression)?,Um IIFE (Immediately Invoked Function Expression) é uma função que é definida e executada imediatamente após a sua criação. É usado para criar um escopo privado para variáveis.
Explique o que é currying em JavaScript.,Currying é uma técnica em que uma função com múltiplos argumentos é transformada em uma sequência de funções que recebem um único argumento cada.
Qual a diferença entre shallow copy e deep copy de objetos em JavaScript?,"Shallow copy cria uma cópia superficial do objeto, onde apenas as referências aos objetos internos são copiadas. Deep copy cria uma cópia completa do objeto, incluindo todos os objetos internos, de forma que a cópia seja independente do original."
O que é um setter e getter em JavaScript?,"Getters são métodos usados para acessar propriedades de um objeto, enquanto setters são métodos usados para definir valores de propriedades de um objeto. Eles permitem controlar o acesso e a modificação das propriedades."
Explique o que são generators em JavaScript.,"Generators são funções que podem ser pausadas e retomadas, permitindo produzir uma sequência de valores ao longo do tempo. Elas usam a palavra-chave `yield` para pausar a execução e retornar um valor."
O que é um iterator em JavaScript?,"Um iterator é um objeto que define uma sequência e, após sua criação, pode retornar elementos dessa sequência um de cada vez. Ele implementa o método `next()` que retorna um objeto com as propriedades `value` (o próximo valor da sequência) e `done` (um booleano indicando se a sequência foi concluída)."
O que é o símbolo `Symbol` em JavaScript?,"`Symbol` é um tipo de dado primitivo que representa um identificador único. Eles são frequentemente usados para adicionar propriedades ""privadas"" a objetos ou para evitar conflitos de nomes de propriedades."
O que é o strict mode em JavaScript e como ativá-lo?,"O strict mode é um modo restritivo em JavaScript que impõe regras mais rigorosas para detectar erros e evitar práticas consideradas perigosas. É ativado adicionando a string `""use strict"";` no início do script ou da função."
O que é o Local Storage e Session Storage em JavaScript?,"Local Storage e Session Storage são mecanismos de armazenamento web que permitem armazenar dados localmente no navegador do usuário. Local Storage armazena dados permanentemente (a menos que o usuário os exclua), enquanto Session Storage armazena dados apenas durante a sessão do navegador."
Explique o que é Event Delegation em JavaScript.,"Event delegation é uma técnica em que um listener de evento é anexado a um elemento pai em vez de a cada elemento filho individualmente. Isso melhora o desempenho, especialmente quando há muitos elementos filhos."
O que é Event Bubbling em JavaScript?,"Event bubbling é o processo em que um evento disparado em um elemento filho ""borbulha"" para cima na árvore DOM, disparando os listeners de evento dos elementos pais."
Explique o que é CORS (Cross-Origin Resource Sharing).,CORS (Cross-Origin Resource Sharing) é um mecanismo de segurança do navegador que restringe requisições HTTP de scripts que se originam de um domínio diferente daquele que serve o recurso solicitado.
O que é o objeto `RegExp` em JavaScript?,"O objeto `RegExp` representa uma expressão regular, que é um padrão usado para corresponder a combinações de caracteres em strings."
O que é o método `test()` de uma RegExp em JavaScript?,O método `test()` executa uma pesquisa por uma correspondência entre uma expressão regular e uma string especificada. Retorna `true` se houver uma correspondência e `false` caso contrário.
O que é o método `exec()` de uma RegExp em JavaScript?,O método `exec()` executa uma pesquisa por uma correspondência em uma string especificada. Retorna um array com informações sobre a correspondência ou `null` se não houver correspondência.
O que são as flags em expressões regulares (RegExp)?,"Flags são modificadores que alteram o comportamento da pesquisa de uma expressão regular. Exemplos: `i` (ignora maiúsculas e minúsculas), `g` (pesquisa globalmente), `m` (pesquisa em múltiplas linhas)."
Como se converte um objeto `Date` em uma string formatada?,"Pode-se usar métodos como `toLocaleDateString()`, `toLocaleTimeString()`, `toISOString()` ou `toLocaleString()` para formatar um objeto `Date` em uma string."
O que é o método `isFinite()` em JavaScript?,"O método `isFinite()` verifica se um valor é um número finito. Semelhante a `isNaN()`, ele realiza conversão de tipo."
Quais são os principais métodos do objeto `console`?,"`console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`."
Qual a diferença entre `||` (OR operator) e `??` (nullish coalescing operator)?,"O operador `||` retorna o operando do lado direito se o operando do lado esquerdo for falsy (como `0`, `""""`, `false`, `null`, `undefined`), enquanto o operador `??` retorna o operando do lado direito apenas se o operando do lado esquerdo for `null` ou `undefined`."
O que é o encadeamento opcional (optional chaining) em JavaScript?,O encadeamento opcional (`?.`) permite acessar propriedades aninhadas de um objeto sem lançar um erro se uma propriedade intermediária for `null` ou `undefined`. Ele retorna `undefined` nesse caso.
Quais são as duas formas de importar e exportar módulos em JavaScript (ES Modules)?,"`export default` (para exportar um único valor padrão) e `export` (para exportar múltiplos valores nomeados). Para importar, usa-se `import defaultExport from 'module'` e `import { namedExport } from 'module'`."
Como se cancela um `setTimeout()` ou `setInterval()` em JavaScript?,Usa-se `clearTimeout()` para cancelar um `setTimeout()` e `clearInterval()` para cancelar um `setInterval()`. Ambos recebem o ID retornado pela respectiva função.
O que é o hell de callbacks (callback hell)?,"Callback hell é uma situação em que várias callbacks são aninhadas umas dentro das outras, tornando o código difícil de ler e manter."
O que é a função `requestAnimationFrame()` em JavaScript?,A função `requestAnimationFrame()` solicita ao navegador que execute uma animação antes da próxima repintura da tela. É usada para criar animações suaves e eficientes.
Como se seleciona um elemento HTML pelo ID em JavaScript?,Usa-se o método `document.getElementById('idDoElemento')`.
Como se selecionam elementos HTML por classe em JavaScript?,Usa-se o método `document.getElementsByClassName('nomeDaClasse')`.
Como se selecionam elementos HTML por tag name em JavaScript?,Usa-se o método `document.getElementsByTagName('nomeDaTag')`.
Como se usa `querySelector()` em JavaScript?,O método `querySelector()` retorna o primeiro elemento dentro do documento que corresponde ao seletor CSS especificado. Ex: `document.querySelector('.minha-classe > p')`
Como se usa `querySelectorAll()` em JavaScript?,O método `querySelectorAll()` retorna uma NodeList contendo todos os elementos dentro do documento que correspondem ao seletor CSS especificado.
Como se altera o texto de um elemento HTML em JavaScript?,Pode-se usar a propriedade `textContent` ou `innerText` do elemento.
Como se altera o HTML interno de um elemento HTML em JavaScript?,Usa-se a propriedade `innerHTML` do elemento.
Como se adiciona um novo elemento HTML ao DOM em JavaScript?,"Primeiro, cria-se o elemento usando `document.createElement('tagName')`. Depois, define-se suas propriedades e adiciona-se ao DOM usando métodos como `appendChild()` ou `insertBefore()`."
Como se remove um elemento HTML do DOM em JavaScript?,Usa-se o método `removeChild()` do elemento pai ou `remove()` do próprio elemento.
Como se adiciona um atributo a um elemento HTML em JavaScript?,"Usa-se o método `setAttribute('nomeDoAtributo', 'valorDoAtributo')`."
Como se obtém o valor de um atributo de um elemento HTML em JavaScript?,Usa-se o método `getAttribute('nomeDoAtributo')`.
Como se remove um atributo de um elemento HTML em JavaScript?,Usa-se o método `removeAttribute('nomeDoAtributo')`.
Como se adiciona uma classe CSS a um elemento HTML em JavaScript?,Usa-se a propriedade `classList.add('nomeDaClasse')`.
Como se remove uma classe CSS de um elemento HTML em JavaScript?,Usa-se a propriedade `classList.remove('nomeDaClasse')`.
Como se verifica se um elemento HTML possui uma determinada classe CSS em JavaScript?,Usa-se a propriedade `classList.contains('nomeDaClasse')`.
Como se alterna a presença de uma classe CSS em um elemento HTML em JavaScript?,Usa-se a propriedade `classList.toggle('nomeDaClasse')`.
Como se adiciona um listener de evento a um elemento HTML em JavaScript?,"Usa-se o método `addEventListener('nomeDoEvento', funcaoCallback)`."
Como se remove um listener de evento de um elemento HTML em JavaScript?,"Usa-se o método `removeEventListener('nomeDoEvento', funcaoCallback)`."
O que é o objeto `event` passado para uma função callback de evento?,"O objeto `event` contém informações sobre o evento que foi disparado, como o elemento alvo, o tipo de evento, e outros detalhes."
Como se obtém o elemento que disparou um evento em JavaScript?,Usa-se a propriedade `event.target`.
Como se obtém a posição do mouse em relação à janela do navegador em um evento de mouse?,Usa-se as propriedades `event.clientX` e `event.clientY`.
Como se obtém a posição do mouse em relação ao documento em um evento de mouse?,Usa-se as propriedades `event.pageX` e `event.pageY`.
Como se cria um evento personalizado em JavaScript?,Usa-se a classe `CustomEvent` e o método `dispatchEvent()` do elemento.
O que é o polyfill em JavaScript?,"Um polyfill é um código que implementa uma funcionalidade que ainda não é suportada por alguns navegadores, permitindo que os desenvolvedores usem a funcionalidade em todos os navegadores, mesmo nos mais antigos."
O que é transpilação em JavaScript?,Transpilação é o processo de converter código JavaScript escrito em uma versão mais nova (com novas funcionalidades) para uma versão mais antiga que é suportada por navegadores mais antigos. Isso é geralmente feito usando ferramentas como Babel.
O que é o garbage collection em JavaScript?,Garbage collection é um processo automático em JavaScript que libera a memória que não está mais sendo usada pelo programa. Isso ajuda a prevenir vazamentos de memória e a melhorar o desempenho.
Explique o conceito de imutabilidade em JavaScript.,"Imutabilidade significa que um objeto, depois de criado, não pode ser modificado. Em vez de modificar um objeto existente, você cria um novo objeto com as alterações desejadas."
Como se cria um objeto imutável em JavaScript?,"Pode-se usar `Object.freeze()` para impedir que um objeto seja modificado diretamente.  Para imutabilidade mais profunda, considere bibliotecas especializadas."
O que é o pattern Module em JavaScript?,"O pattern Module é uma forma de criar um escopo privado para variáveis e funções em JavaScript, expondo apenas uma interface pública. Ele é geralmente implementado usando IIFEs e closures."
O que é o pattern Revealing Module em JavaScript?,O pattern Revealing Module é uma variação do pattern Module em que todas as variáveis e funções são definidas no escopo privado e apenas algumas são explicitamente reveladas como parte da interface pública.
O que é a técnica de memoization em JavaScript?,Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras para que possam ser reutilizados em chamadas futuras com os mesmos argumentos.
O que é o design pattern Observer em JavaScript?,"O design pattern Observer define uma dependência um-para-muitos entre objetos, de forma que quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
O que é programação reativa em JavaScript?,"Programação reativa é um paradigma de programação que lida com fluxos de dados assíncronos e a propagação da mudança. Ela usa streams de dados e operadores para transformar, combinar e filtrar esses streams."
Qual é o significado da sigla AJAX?,Asynchronous JavaScript and XML
O que é a Same Origin Policy?,"É uma medida de segurança imposta pelos navegadores que impede que um documento ou script carregado de uma origem acesse recursos de uma origem diferente. Uma origem é definida pela combinação de protocolo, host e porta."
Explique o processo de Debounce.,Debounce é uma técnica de programação para limitar a taxa em que uma função pode ser chamada. Ele garante que uma função seja executada somente após um certo período de inatividade.
Explique o processo de Throttling.,"Throttling é uma técnica que limita a taxa na qual uma função é executada, garantindo que ela não seja chamada com mais frequência do que um determinado intervalo."
Quais são os tipos primitivos de dados em JavaScript?,"String, Number, Boolean, Null, Undefined e Symbol (ES6)."
"Em JavaScript, qual é o valor retornado quando você compara uma string com um número usando o operador `==`?",JavaScript tenta converter a string em um número antes de fazer a comparação. O resultado depende do valor da string.
Explique o que é o operador `in` em JavaScript.,O operador `in` retorna `true` se uma propriedade especificada existe no objeto dado.
Explique o que é JSON.stringify e JSON.parse.,`JSON.stringify()` converte um objeto JavaScript em uma string JSON. `JSON.parse()` converte uma string JSON em um objeto JavaScript.
O que são eventos touch em JavaScript?,"Eventos touch são eventos disparados por interações do usuário com telas sensíveis ao toque, como touchstart, touchmove, touchend e touchcancel."
Qual é a função do operador `new` em JavaScript?,"Cria uma nova instância de um objeto. Ele cria um novo objeto, define o prototype do objeto para o prototype da função construtora, executa a função construtora com o novo objeto como `this`, e retorna o novo objeto."
Explique o conceito de 'as propriedades de um objeto JavaScript são ordenadas'?,"Em versões mais antigas do JavaScript, a ordem das propriedades não era garantida. Em versões modernas (ES2015 e posteriores), as propriedades de objetos seguem uma ordem específica: primeiro as propriedades numéricas em ordem crescente, depois as strings e Symbols na ordem de inserção."
Qual é o propósito do método `finally()` em uma Promise?,"O método `finally()` é executado sempre, independentemente da Promise ser resolvida ou rejeitada. É usado para código de limpeza."
Como você pode fazer um loop em um objeto em JavaScript?,"Você pode usar `for...in` para iterar sobre as chaves do objeto ou `Object.keys()`, `Object.values()` ou `Object.entries()` em conjunto com um loop `for...of` ou método de array como `forEach()`."
"Explique o conceito de ""Shadow DOM"".","O Shadow DOM permite encapsular o estilo e a estrutura de um componente web, de forma que o estilo e o código do componente não interfiram no restante da página, e vice-versa."
Como você pode cancelar uma Fetch API request?,"Usando um `AbortController`. Você cria um `AbortController`, passa o sinal dele para a requisição Fetch, e então chama `abort()` no `AbortController` para cancelar a requisição."
"Explique o conceito de ""Memoization"" em JavaScript.","Memoization é uma técnica de otimização que envolve o armazenamento dos resultados de uma função para entradas específicas e, em seguida, retornar o resultado armazenado quando a mesma entrada ocorrer novamente."
O que é o operador de identidade `===` em JavaScript?,O operador de identidade (`===`) compara se dois valores são iguais sem realizar conversão de tipo. Ele retorna `true` somente se os valores forem do mesmo tipo e tiverem o mesmo valor.
"Explique o conceito de ""Tree Shaking"" em JavaScript.",Tree Shaking é uma técnica usada por bundlers (como Webpack ou Parcel) para remover o código não utilizado de um projeto JavaScript. Isso ajuda a reduzir o tamanho do bundle final.
Qual é o propósito da declaração `debugger` em JavaScript?,A declaração `debugger` interrompe a execução do código e abre as ferramentas de desenvolvedor do navegador (se estiverem abertas). Isso permite inspecionar o estado do código em um determinado ponto.
"Explique o conceito de ""Dynamic Imports"" em JavaScript.","Dynamic Imports permitem importar módulos JavaScript de forma assíncrona, o que pode melhorar o desempenho e a capacidade de resposta de um aplicativo. Eles são feitos usando a função `import()`."
Qual é a diferença entre usar `Array.prototype.slice.call(arguments)` e `Array.from(arguments)` para converter `arguments` em um array?,"Ambos os métodos convertem o objeto `arguments` (que se comporta como um array, mas não é um array real) em um array real. `Array.from()` geralmente é mais legível e pode lidar com mais tipos de iteráveis, enquanto `slice.call()` é uma técnica mais antiga que ainda funciona bem."
O que são proxy objects em JavaScript?,"Proxy objects fornecem controle sobre as operações básicas de um objeto (por exemplo, obtenção, definição, enumeração, invocação), permitindo que você crie objetos com comportamento personalizado."
Explique o conceito de tail call optimization. O JavaScript suporta isso?,"Tail call optimization (TCO) é uma técnica que otimiza chamadas de função recursivas quando a chamada recursiva é a última operação realizada na função. Embora as especificações do ECMAScript permitam TCO, o suporte em implementações de JavaScript (navegadores e Node.js) é inconsistente."
O que é a diferença entre `null` e `0`?,"`null` representa a ausência intencional de um valor de objeto, enquanto `0` é um valor numérico. Eles são tipos diferentes e têm propósitos diferentes."
"O que é o ""boxing"" e ""unboxing"" em JavaScript?","Boxing é o processo de converter um tipo primitivo (como um número, string ou booleano) em um objeto wrapper correspondente (como `Number`, `String` ou `Boolean`). Unboxing é o processo oposto, de extrair o valor primitivo do objeto wrapper. JavaScript faz isso automaticamente em muitos casos.

Espero que isso seja útil!"
Como você pode verificar se um objeto tem uma determinada propriedade em JavaScript?,"Você pode usar o operador `in`, o método `hasOwnProperty()`, ou verificar se a propriedade é diferente de `undefined`. Exemplo: `'prop' in obj; obj.hasOwnProperty('prop'); obj.prop !== undefined;`"
Qual a diferença entre os operadores `==` e `===` em JavaScript?,"`==` é o operador de igualdade abstrata (com type coercion), que converte os tipos antes de comparar. `===` é o operador de igualdade estrita (sem type coercion), que compara os valores e os tipos."
Como você pode prevenir a propagação de um evento em JavaScript?,Você pode usar o método `stopPropagation()` do objeto de evento. Isso impede que o evento se propague para os elementos pai no DOM.
O que é o método `preventDefault()` e quando você o usaria?,"`preventDefault()` impede a ação padrão que um evento normalmente executaria. Por exemplo, impede o envio de um formulário ou a navegação para um link."
Explique o que é o DOM (Document Object Model).,"O DOM é uma representação da estrutura do documento HTML ou XML como uma árvore de objetos. JavaScript pode usar o DOM para acessar e manipular o conteúdo, a estrutura e o estilo do documento."
Como você seleciona um elemento no DOM usando JavaScript?,"Você pode usar métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`, `document.querySelector()`, e `document.querySelectorAll()`."
Como você adiciona um evento a um elemento no DOM?,"Você pode usar o método `addEventListener()` do elemento. Exemplo: `element.addEventListener('click', function() { ... });`"
O que é o método `appendChild()` em JavaScript?,`appendChild()` é um método usado para adicionar um novo nó como o último filho de um nó pai especificado no DOM.
Como você remove um elemento do DOM usando JavaScript?,Você pode usar o método `removeChild()` do nó pai ou o método `remove()` do próprio nó. Exemplo: `parentElement.removeChild(childElement)` ou `childElement.remove()`.
O que é um callback function em JavaScript?,Um callback function é uma função que é passada como argumento para outra função e é executada após a conclusão de alguma operação.
Explique os estados de uma Promise.,"Uma Promise pode estar em um dos três estados: `pending` (pendente), `fulfilled` (resolvida) ou `rejected` (rejeitada)."
Qual a diferença entre `parseInt()` e `parseFloat()`?,"`parseInt()` converte um valor para um inteiro, enquanto `parseFloat()` converte um valor para um número de ponto flutuante (decimal)."
Como você pode verificar se um valor é NaN em JavaScript?,"Você pode usar a função `isNaN()`. No entanto, é recomendável usar `Number.isNaN()` para uma verificação mais precisa."
O que é o método `includes()` em strings e arrays JavaScript?,"`includes()` determina se um array ou string contém um determinado elemento, retornando `true` ou `false` conforme apropriado."
O que é o método `indexOf()` em strings e arrays JavaScript?,"`indexOf()` retorna o primeiro índice em que um determinado elemento pode ser encontrado no array ou string, ou -1 se não estiver presente."
O que é o método `slice()` em strings e arrays JavaScript?,`slice()` retorna uma cópia de uma parte do array ou string em um novo objeto array/string selecionado do início ao fim (fim não incluído) onde start e end representam o índice de itens nesse array/string. O array/string original não será modificado.
O que é o método `splice()` em arrays JavaScript?,`splice()` altera o conteúdo de um array removendo ou substituindo elementos existentes e/ou adicionando novos elementos no lugar.
O que é o método `test()` de uma expressão regular?,`test()` executa uma pesquisa por uma correspondência entre uma expressão regular e uma string especificada. Retorna `true` ou `false`.
O que é o método `match()` de uma string?,`match()` recupera as correspondências entre uma string e uma expressão regular.
O que é o método `replace()` de uma string?,`replace()` retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por um substituto. O padrão pode ser uma string ou uma expressão regular.
Como você pode criar um timer em JavaScript?,Você pode usar as funções `setTimeout()` (para executar uma função uma vez após um atraso) ou `setInterval()` (para executar uma função repetidamente em intervalos regulares).
O que é o método `clearTimeout()` e `clearInterval()`?,`clearTimeout()` cancela um timer definido com `setTimeout()`. `clearInterval()` cancela um timer definido com `setInterval()`.
Dê alguns exemplos de métodos do objeto `Math`.,"`Math.random()`, `Math.round()`, `Math.ceil()`, `Math.floor()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`."
Como você obtém o ano atual usando o objeto `Date()`?,`new Date().getFullYear()`
Como você redireciona para outra página usando JavaScript?,Você pode usar `window.location.href = 'url';`
Como você pode voltar para a página anterior no histórico do navegador usando JavaScript?,Você pode usar `window.history.back();`
O que é LocalStorage em JavaScript?,LocalStorage é um mecanismo de armazenamento web que permite armazenar dados persistentemente no navegador do usuário. Os dados permanecem disponíveis mesmo depois que o navegador é fechado e reaberto.
Como você armazena dados em LocalStorage usando JavaScript?,"`localStorage.setItem('chave', 'valor');`"
Como você recupera dados de LocalStorage usando JavaScript?,`localStorage.getItem('chave');`
Como você remove dados de LocalStorage usando JavaScript?,`localStorage.removeItem('chave');`
Como você limpa todo o LocalStorage usando JavaScript?,`localStorage.clear();`
O que é SessionStorage em JavaScript?,"SessionStorage é semelhante ao LocalStorage, mas os dados armazenados em SessionStorage são excluídos quando a sessão do navegador termina (quando o navegador é fechado)."
Como você verifica o tipo de uma variável em JavaScript?,Você pode usar o operador `typeof`.
O que é strict mode em JavaScript?,"Strict mode é uma maneira de optar por uma variante restrita do JavaScript.  Ajuda a evitar erros comuns e torna o código mais ""seguro"". É ativado colocando `""use strict"";` no início do script ou função."
O que são template strings tagged em JavaScript?,"Template strings tagged permitem que você processe template literals com uma função.  A função recebe a string literal e os valores interpolados como argumentos, permitindo que você manipule a string antes que ela seja renderizada."
O que são parâmetros rest em JavaScript?,Os parâmetros rest permitem que uma função aceite um número indefinido de argumentos como um array.  Eles são representados por `...nomeDoParametro`.
O que são valores padrão de parâmetros em JavaScript?,Valores padrão de parâmetros permitem que você especifique um valor padrão para um parâmetro de função caso nenhum argumento seja fornecido.
Qual a diferença entre um objeto JavaScript normal e um objeto `Map`?,"As chaves em um objeto JavaScript normal devem ser strings ou símbolos. Em um `Map`, as chaves podem ser de qualquer tipo de dado (incluindo objetos). A ordem das chaves em um `Map` é preservada."
O que é um iterável em JavaScript?,"Um iterável é um objeto que pode ser iterado, ou seja, percorrido sequencialmente.  Ele implementa o protocolo iterable, que requer um método com o símbolo `Symbol.iterator` que retorna um iterador."
O que é o protocolo iterable em JavaScript?,"O protocolo iterable exige que um objeto implemente um método com a chave `Symbol.iterator`. Esse método deve retornar um objeto iterador que, por sua vez, implementa o protocolo iterator."
O que é o operador `in` em um loop `for...in`?,"No loop `for...in`, o operador `in` itera sobre os nomes das propriedades enumeráveis de um objeto (incluindo as propriedades herdadas da cadeia de protótipos)."
O que é o operador `of` em um loop `for...of`?,"O loop `for...of` itera sobre os valores de um objeto iterável (como um array, string, Map, Set, etc.)."
Como você acessa o prototype de um objeto em JavaScript?,Você pode acessar o prototype de um objeto usando a propriedade `__proto__` (não recomendada) ou o método `Object.getPrototypeOf()`.
O que é o construtor `class` em JavaScript?,"`class` é uma sintaxe introduzida no ES6 que fornece uma maneira mais clara e estruturada de criar objetos e lidar com herança prototipal.  É essencialmente ""syntactic sugar"" sobre a herança baseada em protótipos."
O que é o construtor `super()` em classes JavaScript?,`super()` é usado para chamar o construtor da classe pai (superclasse) dentro do construtor da classe filha.
O que é abstração em JavaScript?,"Abstração é o conceito de simplificar a representação de um objeto, expondo apenas as informações essenciais e ocultando os detalhes de implementação complexos."
O que é o princípio DRY (Don't Repeat Yourself) em programação?,"O princípio DRY afirma que você deve evitar a duplicação de código.  Se você precisar fazer a mesma coisa em vários lugares, crie uma função ou módulo para reutilizar o código."
"O que é o princípio KISS (Keep It Simple, Stupid) em programação?",O princípio KISS afirma que você deve manter o código o mais simples possível.  Evite soluções complexas quando uma solução simples for suficiente.
"O que é o conceito de ""code smell"" em programação?","Um ""code smell"" é uma característica no código que pode indicar um problema mais profundo.  Não são erros técnicos, mas sugerem que o código pode ser difícil de manter, entender ou modificar."
O que é o princípio YAGNI (You Ain't Gonna Need It) em programação?,"O princípio YAGNI afirma que você não deve adicionar funcionalidades até que realmente precise delas. Evite adicionar funcionalidades que você acha que pode precisar no futuro, pois pode acabar não usando-as."
O que é um closure assíncrono em JavaScript?,"Um closure assíncrono ocorre quando uma função dentro de uma closure é executada de forma assíncrona, como dentro de um `setTimeout` ou uma Promise. A closure ainda mantém acesso às variáveis do escopo externo, mesmo que a função seja executada posteriormente."
Explique como usar o método `bind()` em JavaScript e qual seu propósito.,"`bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido. É usado para fixar o contexto `this` de uma função. Ex: `const newFunc = minhaFuncao.bind(meuObjeto);`"
O que são módulos ES (ES Modules) em JavaScript?,"Módulos ES são o sistema de módulos nativo do JavaScript, introduzido no ES6. Eles permitem que você organize o código em arquivos separados e importe e exporte funcionalidades entre eles."
Qual a diferença entre `import` e `require` em JavaScript?,"`import` é usado para importar módulos ES (ES Modules), enquanto `require` é usado para importar módulos CommonJS. `import` é estático (determinado em tempo de compilação), enquanto `require` é dinâmico (determinado em tempo de execução)."
Como você exporta um módulo em JavaScript usando módulos ES?,"Você pode usar `export default nomeDaFuncao;` para exportar um valor padrão ou `export { funcao1, funcao2 };` para exportar múltiplos valores nomeados."
O que é o objeto `globalThis` em JavaScript?,"`globalThis` é uma variável global que se refere ao objeto global, independentemente do ambiente (navegador, Node.js, etc.). Ele fornece uma maneira padronizada de acessar o objeto global."
O que é o operador de atribuição de coalescência nula (??=) em JavaScript?,O operador de atribuição de coalescência nula (??=) atribui o valor do lado direito ao operando do lado esquerdo apenas se o operando do lado esquerdo for nulo (null ou undefined).
O que é o operador de atribuição lógica OU (||=) em JavaScript?,"O operador de atribuição lógica OU (||=) atribui o valor do lado direito ao operando do lado esquerdo apenas se o operando do lado esquerdo for falsy (por exemplo, false, 0, """", null, undefined, NaN)."
O que é o operador de atribuição lógica E (&&=) em JavaScript?,"O operador de atribuição lógica E (&&=) atribui o valor do lado direito ao operando do lado esquerdo apenas se o operando do lado esquerdo for truthy (por exemplo, true, um número diferente de 0, uma string não vazia, um objeto)."
O que são Private Class Fields em JavaScript?,"Private Class Fields, introduzidos recentemente, permitem que você declare propriedades e métodos dentro de uma classe que só podem ser acessados dentro da própria classe, promovendo o encapsulamento. Eles são declarados com o prefixo `#` (ex: `#privateField`)."
"Explique o conceito de ""Shadow DOM"" em JavaScript.","Shadow DOM é um recurso que permite encapsular a estrutura, o estilo e o comportamento de um componente web. Isso significa que o CSS e o JavaScript dentro do Shadow DOM não afetam (e não são afetados por) o código fora do Shadow DOM."
O que são Web Components em JavaScript?,"Web Components são um conjunto de tecnologias que permitem criar elementos HTML reutilizáveis e encapsulados. Eles consistem em Custom Elements, Shadow DOM e HTML Templates."
O que são Custom Elements em JavaScript?,"Custom Elements são elementos HTML personalizados que você define usando JavaScript. Eles permitem que você crie seus próprios tags HTML com comportamento específico.

Espero que esta lista seja útil e forneça um bom ponto de partida para testar seu conhecimento de JavaScript!"
O que é hoisting em JavaScript e como ele funciona?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seu escopo antes da execução do código. No entanto, apenas a declaração é movida, não a inicialização. Variáveis declaradas com `var` são hoisted e inicializadas com `undefined`. Variáveis declaradas com `let` e `const` também são hoisted, mas não são inicializadas, resultando em um erro se forem acessadas antes de serem declaradas.

**3.**"
O que é o conceito de closures em JavaScript?,"Uma closure é a combinação de uma função e o ambiente lexical (escopo) no qual essa função foi declarada. Isso permite que uma função interna acesse variáveis do escopo externo mesmo depois que a função externa já tenha sido executada.

**4.**"
Explique o que é a keyword `this` em JavaScript.,"A keyword `this` se refere ao objeto no qual a função está sendo executada. Seu valor depende de como a função é chamada. Em um método de objeto, `this` se refere ao objeto. Se uma função é chamada sozinha, `this` se refere ao objeto global (window no navegador, global no Node.js), a menos que o modo estrito esteja ativado, caso em que `this` é `undefined`.  `call`, `apply`, e `bind` permitem definir explicitamente o valor de `this`.

**5.**"
Explique o que são arrow functions e quais são suas principais diferenças em relação às funções regulares?,"Arrow functions são uma forma mais concisa de escrever funções em JavaScript. As principais diferenças são: sintaxe mais curta, não possuem seu próprio `this` (herdam o `this` do escopo circundante), não possuem o objeto `arguments` (use parâmetros rest), e não podem ser usadas como construtoras (não podem ser usadas com `new`).

**8.**"
O que são Promises em JavaScript e como elas ajudam no tratamento de código assíncrono?,"Promises são objetos que representam o eventual resultado (sucesso ou falha) de uma operação assíncrona. Elas fornecem uma maneira mais estruturada e legível de lidar com código assíncrono, evitando o ""callback hell"". Uma Promise tem três estados: `pending` (pendente), `fulfilled` (resolvida com sucesso) e `rejected` (rejeitada com erro).

**9.**"
Explique o que são async/await em JavaScript e como eles se relacionam com Promises.,"`async/await` são uma sintaxe mais recente no JavaScript que facilita o trabalho com Promises. `async` é usado para declarar uma função assíncrona, e `await` é usado dentro de uma função `async` para pausar a execução até que uma Promise seja resolvida ou rejeitada. Eles fornecem uma maneira mais síncrona e legível de escrever código assíncrono.

**10.**"
"Qual a diferença entre `map`, `filter` e `reduce` em JavaScript?","*   `map`: Cria um novo array com os resultados da chamada de uma função para cada elemento do array original.
*   `filter`: Cria um novo array com todos os elementos que passam em um teste implementado por uma função fornecida.
*   `reduce`: Aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.

**12.**"
O que é o operador spread (`...`) em JavaScript e quais são seus usos?,"O operador spread (`...`) permite expandir um iterável (como um array ou string) em locais onde se espera zero ou mais argumentos (em chamadas de função) ou elementos (em literais de array). Seus usos incluem: copiar arrays, concatenar arrays, passar um array como argumentos para uma função, e clonar objetos (superficialmente).

**13.**"
O que é destructuring em JavaScript e quais são suas vantagens?,"Destructuring é uma expressão JavaScript que permite extrair dados de arrays e objetos para variáveis distintas. Suas vantagens incluem: simplificar a atribuição de valores, tornar o código mais legível, e facilitar a manipulação de dados.

**14.**"
Explique o que é o JSON e como ele é usado em JavaScript.,"JSON (JavaScript Object Notation) é um formato de texto leve para troca de dados. É baseado em um subconjunto da linguagem JavaScript e é usado para representar dados estruturados. Em JavaScript, é usado para serializar e desserializar dados, especialmente ao enviar e receber dados de APIs.

**16.**"
O que é o modo estrito (strict mode) em JavaScript e como ele é ativado?,"O modo estrito é uma forma de executar JavaScript com uma semântica mais rígida. Ele ajuda a evitar erros comuns e práticas ruins. É ativado adicionando a string `""use strict"";` no início de um script ou função.

**18.**"
Explique o que é o evento loop em JavaScript e como ele lida com operações assíncronas.,"O event loop é um mecanismo que permite que o JavaScript, que é single-threaded, execute operações assíncronas sem bloquear a thread principal. Ele monitora a pilha de chamadas (call stack) e a fila de tarefas (task queue). Quando a pilha de chamadas está vazia, o event loop pega a primeira tarefa da fila de tarefas e a coloca na pilha de chamadas para execução.

**19.**"
O que são callbacks em JavaScript e quais são seus problemas potenciais?,"Callbacks são funções passadas como argumentos para outras funções, que são então executadas após a conclusão de alguma operação. Problemas potenciais incluem o ""callback hell"" (aninhamento excessivo de callbacks), dificuldade em lidar com erros e inversão de controle.

**20.**"
Explique o que é a propriedade `prototype` em JavaScript e como ela é usada.,"A propriedade `prototype` é um objeto associado a cada função em JavaScript. Ela permite adicionar propriedades e métodos que serão herdados por todas as instâncias (objetos) criadas a partir dessa função usando o operador `new`. É a base da herança prototípica em JavaScript.

**21.**"
O que é o método `Object.create()` em JavaScript e como ele difere da criação de objetos com `new`?,"`Object.create()` cria um novo objeto com o protótipo especificado. Diferente de `new`, ele permite definir o protótipo do novo objeto explicitamente, enquanto `new` usa o `prototype` da função construtora. `Object.create(null)` cria um objeto sem nenhum protótipo, ou seja, não herda propriedades e métodos de `Object.prototype`.

**23.**"
Explique o que é o escopo léxico em JavaScript.,"Escopo léxico significa que o escopo de uma variável em JavaScript é determinado pela sua posição no código fonte. Uma função interna tem acesso às variáveis declaradas em seu próprio escopo, bem como às variáveis declaradas nos escopos das funções externas que a contêm.

**24.**"
"O que é a diferença entre `apply()`, `call()` e `bind()` em JavaScript?","`apply()` e `call()` são usados para invocar uma função com um determinado valor `this`. A diferença é que `apply()` recebe os argumentos da função como um array, enquanto `call()` recebe os argumentos individualmente. `bind()` cria uma nova função com o valor `this` especificado, mas não invoca a função imediatamente. Em vez disso, retorna uma nova função que pode ser invocada posteriormente.

**25.**"
O que é a diferença entre shallow copy e deep copy em JavaScript?,"Shallow copy cria uma nova referência a um objeto, copiando apenas as propriedades de nível superior. Se um objeto contiver outros objetos aninhados, a shallow copy apenas copia as referências a esses objetos aninhados, não os objetos em si. Deep copy cria uma nova cópia completa do objeto, incluindo todos os objetos aninhados, de forma que a nova cópia não compartilhe nenhuma referência com o objeto original.

**27.**"
O que são eventos em JavaScript e como você pode adicionar e remover listeners de eventos?,"Eventos são ações ou ocorrências que acontecem no navegador, como cliques de mouse, pressionamentos de teclas, carregamento de páginas e envio de formulários. Você pode adicionar listeners de eventos usando o método `addEventListener()` do objeto DOM, especificando o tipo de evento e a função de callback a ser executada quando o evento ocorrer. Para remover um listener de evento, use o método `removeEventListener()`, especificando o mesmo tipo de evento e função de callback.

**32.**"
O que é event bubbling e event capturing em JavaScript?,"Event bubbling é o processo em que um evento disparado em um elemento DOM se propaga para cima na árvore do DOM, acionando os listeners de eventos em seus elementos pais. Event capturing é o processo inverso, onde o evento se propaga para baixo na árvore do DOM, acionando os listeners de eventos nos elementos ancestrais antes de atingir o elemento alvo.

**33.**"
O que é event delegation em JavaScript e quais são suas vantagens?,"Event delegation é uma técnica em que você adiciona um listener de evento a um elemento pai em vez de adicionar listeners de eventos a cada um de seus elementos filhos. Quando um evento ocorre em um elemento filho, ele se propaga para o elemento pai (event bubbling), e o listener de evento no elemento pai é acionado. As vantagens incluem: reduzir o número de listeners de eventos, melhorar o desempenho e simplificar a adição e remoção de elementos dinamicamente.

**35.**"
O que é a diferença entre `localStorage` e `sessionStorage` em JavaScript?,"Tanto `localStorage` quanto `sessionStorage` são APIs para armazenar dados no navegador do cliente. `localStorage` armazena dados persistentemente, ou seja, os dados são mantidos mesmo após o fechamento do navegador. `sessionStorage` armazena dados apenas para a duração da sessão do navegador, ou seja, os dados são perdidos quando o navegador é fechado.

**36.**"
Como você pode detectar o tipo de dado de uma variável em JavaScript?,"Você pode usar o operador `typeof` para detectar o tipo de dado de uma variável. No entanto, `typeof null` retorna ""object"", o que é um erro histórico. Para verificar se uma variável é `null`, você deve compará-la explicitamente com `null` usando `===`. Para verificar se uma variável é um array, você pode usar `Array.isArray(variable)`.

**37.**"
O que é NaN em JavaScript e como você pode verificar se um valor é NaN?,"NaN (Not-a-Number) é um valor numérico especial que representa o resultado de uma operação matemática indefinida ou impossível. Você pode verificar se um valor é NaN usando a função `isNaN(value)`. No entanto, `isNaN()` pode realizar type coercion, então é recomendado usar `Number.isNaN(value)`, que não realiza type coercion e retorna `true` apenas se o valor for NaN.

**40.**"
O que é um array em JavaScript e como você pode criar um array?,"Um array em JavaScript é uma coleção ordenada de valores. Você pode criar um array usando a sintaxe de literal de array `[]` ou usando o construtor `new Array()`.

**42.**"
Como você pode acessar os elementos de um array em JavaScript?,"Você pode acessar os elementos de um array usando seu índice, que começa em 0. Por exemplo, `array[0]` acessa o primeiro elemento do array.

**43.**"
"O que são os métodos `push()`, `pop()`, `shift()` e `unshift()` em JavaScript e como eles modificam um array?","*   `push()`: Adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
*   `pop()`: Remove o último elemento de um array e retorna esse elemento.
*   `shift()`: Remove o primeiro elemento de um array e retorna esse elemento.
*   `unshift()`: Adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.

**44.**"
O que é o método `splice()` em JavaScript e como ele é usado para modificar um array?,"O método `splice()` modifica um array removendo, substituindo ou adicionando elementos em um determinado índice. Ele recebe três argumentos: o índice de início, o número de elementos a serem removidos e os elementos a serem adicionados (opcional).

**45.**"
O que é o método `slice()` em JavaScript e como ele é usado para criar um novo array a partir de um array existente?,"O método `slice()` retorna uma cópia superficial de uma parte de um array em um novo array. Ele recebe dois argumentos: o índice de início e o índice de fim (opcional). Se o índice de fim não for especificado, o `slice()` retorna uma cópia de todos os elementos a partir do índice de início.

**46.**"
O que é o método `concat()` em JavaScript e como ele é usado para combinar arrays?,"O método `concat()` retorna um novo array contendo a junção de dois ou mais arrays. Ele não modifica os arrays originais.

**47.**"
O que é o método `join()` em JavaScript e como ele é usado para converter um array em uma string?,"O método `join()` retorna uma string com todos os elementos de um array concatenados. Ele recebe um argumento opcional, que é o separador a ser usado entre os elementos. Se o separador não for especificado, o separador padrão é a vírgula.

**48.**"
Como você pode iterar sobre os elementos de um array em JavaScript usando um loop `for`?,"Você pode iterar sobre os elementos de um array usando um loop `for` com um índice que varia de 0 até o comprimento do array menos 1.

**49.**"
Como você pode iterar sobre os elementos de um array em JavaScript usando um loop `for...of`?,"O loop `for...of` permite iterar sobre os valores de um array diretamente, sem precisar usar um índice.

**50.**"
O que é o método `forEach()` em JavaScript e como ele é usado para iterar sobre os elementos de um array?,"O método `forEach()` executa uma função fornecida uma vez para cada elemento do array. Ele recebe uma função de callback como argumento, que é chamada com o valor do elemento, o índice do elemento e o array em si.

**51.**"
O que são objetos em JavaScript e como você pode criar um objeto?,"Um objeto em JavaScript é uma coleção de propriedades, onde cada propriedade é uma associação entre um nome (ou chave) e um valor. Você pode criar um objeto usando a sintaxe de literal de objeto `{}` ou usando o construtor `new Object()`.

**52.**"
Como você pode adicionar novas propriedades a um objeto em JavaScript?,"Você pode adicionar novas propriedades a um objeto usando a notação de ponto (`object.newProperty = value`) ou a notação de colchetes (`object['newProperty'] = value`).

**54.**"
Como você pode remover propriedades de um objeto em JavaScript?,"Você pode remover propriedades de um objeto usando o operador `delete`. Por exemplo, `delete object.property` remove a propriedade `property` do objeto.

**55.**"
O que é o método `Object.keys()` em JavaScript e como ele é usado para obter um array com as chaves de um objeto?,"O método `Object.keys()` retorna um array com todas as chaves (nomes de propriedades) de um objeto.

**57.**"
O que é o método `Object.values()` em JavaScript e como ele é usado para obter um array com os valores de um objeto?,"O método `Object.values()` retorna um array com todos os valores das propriedades de um objeto.

**58.**"
O que é o método `Object.entries()` em JavaScript e como ele é usado para obter um array com os pares chave-valor de um objeto?,"O método `Object.entries()` retorna um array com todos os pares chave-valor de um objeto, onde cada par é um array com dois elementos: a chave e o valor.

**59.**"
Como você pode iterar sobre as propriedades de um objeto em JavaScript usando um loop `for...in`?,"O loop `for...in` permite iterar sobre as chaves (nomes de propriedades) de um objeto.

**60.**"
O que é a diferença entre um objeto literal e um objeto criado com uma função construtora em JavaScript?,"Um objeto literal é criado usando a sintaxe `{}`, enquanto um objeto criado com uma função construtora é criado usando o operador `new` seguido do nome da função construtora. A principal diferença é que as funções construtoras podem ter métodos e propriedades definidos em seu `prototype`, que são herdados por todas as instâncias criadas a partir dessa função.

**61.**"
Como você pode definir métodos em um objeto em JavaScript?,"Você pode definir métodos em um objeto atribuindo uma função a uma propriedade do objeto.

**63.**"
O que é o método `Object.assign()` em JavaScript e como ele é usado para copiar propriedades de um objeto para outro?,"O método `Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto de destino. Ele retorna o objeto de destino.

**64.**"
O que é o método `Object.freeze()` em JavaScript e como ele impede a modificação de um objeto?,"O método `Object.freeze()` congela um objeto, impedindo que novas propriedades sejam adicionadas, propriedades existentes sejam removidas e valores de propriedades existentes sejam alterados.

**65.**"
O que é o método `Object.seal()` em JavaScript e como ele impede a adição e remoção de propriedades de um objeto?,"O método `Object.seal()` sela um objeto, impedindo que novas propriedades sejam adicionadas ou que propriedades existentes sejam removidas. No entanto, os valores de propriedades existentes ainda podem ser alterados.

**66.**"
Qual é a diferença entre `Object.freeze()` e `Object.seal()` em JavaScript?,"Ambos `Object.freeze()` e `Object.seal()` impedem a adição e remoção de propriedades. `Object.freeze()` também impede a modificação dos valores das propriedades, enquanto `Object.seal()` permite a modificação dos valores das propriedades.

**67.**"
O que é a diferença entre uma função declarada e uma função expressa em JavaScript?,"Uma função declarada é definida usando a palavra-chave `function` seguida pelo nome da função. Ela é hoisted para o topo de seu escopo. Uma função expressa é definida atribuindo uma função a uma variável. Ela não é hoisted, portanto, deve ser definida antes de ser usada.

**68.**"
O que são IIFEs (Immediately Invoked Function Expressions) em JavaScript e quais são seus usos?,"IIFEs (Immediately Invoked Function Expressions) são funções que são definidas e executadas imediatamente. Elas são usadas para criar um escopo privado para variáveis, evitando conflitos com outras variáveis no escopo global.

**70.**"
O que são parâmetros rest em JavaScript e como eles são usados?,"Parâmetros rest permitem representar um número indefinido de argumentos como um array. Eles são definidos usando a sintaxe `...param`. O parâmetro rest deve ser o último parâmetro da função.

**71.**"
O que são parâmetros padrão em JavaScript e como eles são usados?,"Parâmetros padrão permitem definir valores padrão para parâmetros de função que não são fornecidos quando a função é chamada.

**72.**"
O que é recursion em JavaScript?,"Recursion é uma técnica de programação onde uma função chama a si mesma dentro de sua própria definição. É usado para resolver problemas que podem ser divididos em subproblemas menores e semelhantes.

**73.**"
Quais são os riscos de usar recursion em JavaScript?,"O principal risco de usar recursion é o estouro da pilha de chamadas (stack overflow). Isso ocorre quando a função recursiva chama a si mesma um número excessivo de vezes sem atingir uma condição de parada, resultando em um erro.

**74.**"
Como você pode evitar o estouro da pilha de chamadas ao usar recursion em JavaScript?,"Você pode evitar o estouro da pilha de chamadas garantindo que a função recursiva tenha uma condição de parada clara e que a função se aproxime da condição de parada a cada chamada recursiva. Você também pode usar técnicas como tail call optimization (se suportada pelo ambiente) ou transformar a recursion em um loop iterativo.

**75.**"
Quais são os benefícios de usar funções puras em JavaScript?,"Os benefícios de usar funções puras incluem: maior previsibilidade, facilidade de teste, facilidade de otimização e facilidade de paralelização.

**78.**"
O que são efeitos colaterais (side effects) em JavaScript?,"Efeitos colaterais são modificações no estado externo de um programa que ocorrem como resultado da execução de uma função. Exemplos de efeitos colaterais incluem: modificar variáveis globais, modificar objetos passados como argumentos, realizar operações de I/O (entrada/saída) e exibir mensagens na tela.

**79.**"
O que são closures e como elas se relacionam com o escopo léxico em JavaScript?,"Closures são a combinação de uma função e o ambiente lexical (escopo) no qual essa função foi declarada. Isso permite que uma função interna acesse variáveis do escopo externo mesmo depois que a função externa já tenha sido executada. O escopo léxico determina quais variáveis são acessíveis dentro de uma função.

**80.**"
Como você pode usar closures para criar variáveis privadas em JavaScript?,"Você pode usar closures para criar variáveis privadas encapsulando as variáveis dentro de uma função e retornando uma função interna que tem acesso a essas variáveis. As variáveis encapsuladas não podem ser acessadas diretamente de fora da função externa, mas podem ser acessadas através da função interna retornada.

**81.**"
O que são higher-order functions e como elas são usadas em JavaScript?,"Higher-order functions são funções que podem receber outras funções como argumentos e/ou retornar funções como resultados. Elas são usadas para criar código mais flexível e reutilizável.

**82.**"
Como você pode usar higher-order functions para criar funções mais genéricas e reutilizáveis em JavaScript?,"Você pode usar higher-order functions para criar funções mais genéricas e reutilizáveis abstraindo a lógica específica para uma função separada que é passada como argumento para a higher-order function. Isso permite que a higher-order function seja usada com diferentes lógicas específicas, tornando-a mais flexível e reutilizável.

**83.**"
O que são partial application e currying em JavaScript?,"Partial application é o processo de criar uma nova função aplicando alguns dos argumentos de uma função existente. Currying é uma técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.

**84.**"
Como você pode usar `bind()` para realizar partial application em JavaScript?,"O método `bind()` pode ser usado para criar uma nova função com um valor `this` especificado e com alguns argumentos predefinidos. Isso permite realizar partial application, criando uma nova função que recebe apenas os argumentos restantes.

**85.**"
Como você pode usar generators para criar iteradores personalizados em JavaScript?,"Você pode usar generators para criar iteradores personalizados definindo uma função generator que usa a palavra-chave `yield` para produzir os valores que você deseja iterar. A função generator retorna um objeto iterator que pode ser usado com o loop `for...of`.

**87.**"
Como você pode tornar um objeto iterável em JavaScript?,"Para tornar um objeto iterável em JavaScript, você precisa definir um método `[Symbol.iterator]()` no objeto, que retorna um objeto iterator. O objeto iterator deve ter um método `next()` que retorna um objeto com as propriedades `value` (o valor atual) e `done` (um booleano indicando se a iteração está completa).

**89.**"
"O que são os métodos `then()`, `catch()` e `finally()` em JavaScript e como eles são usados com Promises?","*   `then()`: É usado para registrar callbacks que serão executados quando a Promise for resolvida com sucesso.
*   `catch()`: É usado para registrar callbacks que serão executados quando a Promise for rejeitada com erro.
*   `finally()`: É usado para registrar callbacks que serão executados independentemente de a Promise ser resolvida ou rejeitada.

**92.**"
Como você pode encadear Promises em JavaScript usando o método `then()`?,"Você pode encadear Promises em JavaScript retornando uma nova Promise dentro do callback do método `then()`. Isso permite que você execute uma sequência de operações assíncronas em ordem.

**93.**"
O que são `async` e `await` em JavaScript e como eles se relacionam com Promises?,"`async` e `await` são uma sintaxe mais recente no JavaScript que facilita o trabalho com Promises. `async` é usado para declarar uma função assíncrona, e `await` é usado dentro de uma função `async` para pausar a execução até que uma Promise seja resolvida ou rejeitada.

**94.**"
O que é o operador `typeof` e qual é seu uso?,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando. É usado para verificar o tipo de uma variável ou expressão.

**3.**"
"Explique o conceito de ""hoisting"" em JavaScript.","Hoisting é um comportamento onde as declarações de variáveis (com `var`) e funções são movidas para o topo do seu escopo antes da execução do código. Isso permite que você use variáveis e funções antes de declará-las textualmente no seu código, embora com algumas nuances para `var`.

**4.**"
"Como você declara uma variável em JavaScript usando `let`, `const` e `var`? Quais são as diferenças?","`var` é a forma antiga de declarar variáveis, com escopo de função ou global. `let` e `const` foram introduzidos no ES6 e têm escopo de bloco. `let` permite reatribuição, enquanto `const` declara uma constante, cujo valor não pode ser reatribuído após a inicialização.

**7.**"
"Explique o conceito de ""escopo"" em JavaScript.","Escopo define a visibilidade e acessibilidade de variáveis e funções em diferentes partes do código. Existem escopo global, escopo de função (com `var`) e escopo de bloco (com `let` e `const`).

**9.**"
Como criar um objeto em JavaScript?,"Objetos podem ser criados usando a notação literal de objeto `{}` ou usando o construtor `new Object()`. Também podem ser criados usando classes (introduzidas no ES6).

**11.**"
"O que são ""callbacks"" em JavaScript?","Callbacks são funções passadas como argumentos para outras funções, que são então executadas dentro da função principal, geralmente após a conclusão de alguma operação.

**13.**"
O que é o método `bind()` em JavaScript e qual é seu uso?,"`bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido. É usado para fixar o valor de `this` em uma função.

**14.**"
Qual a diferença entre `apply()` e `call()` em JavaScript?,"Ambos `apply()` e `call()` são usados para chamar uma função com um valor específico para `this`. A diferença é que `call()` aceita argumentos individualmente, enquanto `apply()` aceita argumentos como um array.

**15.**"
O que é o método `map()` em JavaScript e qual é seu uso?,"`map()` é um método de array que cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.

**16.**"
O que é o método `filter()` em JavaScript e qual é seu uso?,"`filter()` é um método de array que cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.

**17.**"
O que é o método `reduce()` em JavaScript e qual é seu uso?,"`reduce()` é um método de array que executa uma função ""reducer"" (fornecida por você) em cada elemento do array, resultando em um único valor de retorno.

**18.**"
O que é o método `parseInt()` em JavaScript e qual é seu uso?,"`parseInt()` analisa uma string e retorna um inteiro. Opcionalmente, pode receber um segundo argumento que especifica a base numérica.

**21.**"
O que é o método `parseFloat()` em JavaScript e qual é seu uso?,"`parseFloat()` analisa uma string e retorna um número de ponto flutuante.

**22.**"
Explique o que é a coerção de tipo em JavaScript.,"Coerção de tipo é a conversão automática de um tipo de dado para outro pelo JavaScript. Isso pode acontecer durante operações matemáticas, comparações, ou outras situações.

**23.**"
O que são Template Literals (Template Strings) em JavaScript?,"Template literals são strings delimitadas por backticks (``), que permitem a interpolação de variáveis e expressões dentro da string usando `${}`.

**24.**"
O que são Arrow Functions em JavaScript?,"Arrow functions são uma sintaxe mais concisa para escrever funções anônimas. Elas também têm um comportamento diferente em relação ao `this`.

**25.**"
O que é o JSON em JavaScript?,"JSON (JavaScript Object Notation) é um formato leve de troca de dados. É baseado em um subconjunto da linguagem JavaScript, mas é usado independentemente da linguagem.

**29.**"
"Explique o conceito de ""protótipo"" em JavaScript.","Em JavaScript, cada objeto tem um protótipo. Quando você tenta acessar uma propriedade de um objeto que não existe diretamente, o JavaScript procura no protótipo do objeto e, em seguida, no protótipo do protótipo, e assim por diante, até encontrar a propriedade ou atingir o fim da cadeia de protótipos.

**32.**"
O que é a herança prototípica em JavaScript?,"Herança prototípica é um mecanismo em JavaScript onde objetos herdam propriedades e métodos de seus protótipos.

**33.**"
O que é uma classe em JavaScript (ES6)?,"Classes em JavaScript (introduzidas no ES6) são um açúcar sintático sobre a herança prototípica. Elas fornecem uma maneira mais clara e concisa de criar e herdar objetos.

**35.**"
Como você define um construtor em uma classe JavaScript?,"O construtor é definido usando o método `constructor()` dentro da classe. Ele é executado quando um novo objeto é criado a partir da classe.

**36.**"
Como você herda de outra classe em JavaScript usando `extends`?,"A palavra-chave `extends` é usada para criar uma classe filha (subclasse) que herda propriedades e métodos de uma classe pai (superclasse).

**37.**"
O que é o método `super()` em classes JavaScript?,"`super()` é usado dentro do construtor de uma classe filha para chamar o construtor da classe pai e inicializar as propriedades herdadas.

**38.**"
O que é um Set em JavaScript?,"Um Set é uma coleção de valores únicos. Ele permite armazenar qualquer tipo de valor, seja primitivo ou objeto.

**46.**"
O que é um Map em JavaScript?,"Um Map é uma coleção de pares chave-valor, onde as chaves podem ser de qualquer tipo de dado.

**47.**"
Qual a diferença entre um objeto JavaScript comum e um Map?,"Em um objeto JavaScript comum, as chaves são sempre strings ou Symbols. Em um Map, as chaves podem ser de qualquer tipo de dado. Além disso, Maps preservam a ordem de inserção.

**48.**"
"O que são os métodos `.then()`, `.catch()` e `.finally()` em Promises?","`.then()` é usado para lidar com o resultado de uma Promise resolvida. `.catch()` é usado para lidar com o erro de uma Promise rejeitada. `.finally()` é executado independentemente de a Promise ser resolvida ou rejeitada.

**51.**"
Como você lança um erro personalizado em JavaScript?,"Você pode usar a palavra-chave `throw` seguida por um objeto de erro, como `new Error(""Mensagem de erro"")`.

**53.**"
O que é o conceito de imutabilidade em JavaScript?,"Imutabilidade significa que, uma vez que um objeto é criado, seu estado não pode ser alterado.  Em JavaScript, isso geralmente é alcançado criando novas cópias de objetos em vez de modificá-los diretamente.

**59.**"
Como você cria uma cópia superficial de um objeto em JavaScript?,"Você pode criar uma cópia superficial usando o operador spread (`...`) ou o método `Object.assign()`.

**60.**"
Como você cria uma cópia profunda de um objeto em JavaScript?,"Para uma cópia profunda, você pode usar `JSON.parse(JSON.stringify(objeto))` (com limitações para funções e objetos complexos) ou bibliotecas especializadas.

**61.**"
"O que são ""destructuring assignments"" em JavaScript?","Destructuring assignments são uma forma concisa de extrair valores de objetos ou arrays e atribuí-los a variáveis.

**62.**"
O que são modules em JavaScript (ES6)?,"Modules são uma forma de organizar o código em unidades separadas e reutilizáveis. Eles permitem que você exporte e importe variáveis, funções e classes entre diferentes arquivos.

**64.**"
Como você exporta e importa módulos em JavaScript?,"Você pode usar as palavras-chave `export` para tornar variáveis, funções ou classes disponíveis para outros módulos e `import` para importar esses elementos em outro módulo.

**65.**"
Qual a diferença entre `export default` e `export` em JavaScript?,"`export default` define uma única exportação padrão para um módulo, enquanto `export` permite exportar múltiplas variáveis, funções ou classes com seus nomes.

**66.**"
O que é o operador `??` (Nullish Coalescing Operator) em JavaScript?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo.

**71.**"
O que é o operador `?.` (Optional Chaining Operator) em JavaScript?,"O operador `?.` permite acessar propriedades de um objeto sem causar um erro se uma propriedade intermediária for `null` ou `undefined`. Ele retorna `undefined` nesse caso.

**72.**"
Quais são alguns dos flags comuns usados em regular expressions JavaScript?,"Alguns flags comuns incluem `i` (ignorar maiúsculas e minúsculas), `g` (corresponder globalmente) e `m` (multi-linha).

**78.**"
O que são grupos de captura em regular expressions?,"Grupos de captura são partes do padrão de uma regular expression que são delimitadas por parênteses `()`. Eles permitem que você extraia partes específicas da string correspondida.

**79.**"
O que é backtracking em regular expressions?,"Backtracking é o processo pelo qual o motor da regular expression retrocede em uma string para tentar encontrar uma correspondência. Pode ser ineficiente em certos casos.

**80.**"
Como você formata datas em JavaScript?,"Você pode usar os métodos do objeto `Date` (como `getFullYear()`, `getMonth()`, `getDate()`) ou usar `Intl.DateTimeFormat` para formatação mais avançada e localizada.

**85.**"
Como você mede o tempo de execução de um trecho de código em JavaScript?,"Você pode usar `console.time('label')` e `console.timeEnd('label')` para medir o tempo decorrido entre os dois pontos.

**87.**"
Como você comunica entre um Web Worker e a thread principal?,"Você pode usar o método `postMessage()` para enviar mensagens entre o Web Worker e a thread principal, e o evento `onmessage` para receber mensagens.

**89.**"
O que é o objeto `console` em JavaScript e quais são seus métodos comuns?,"O objeto `console` fornece acesso ao console de depuração do navegador ou ambiente de execução. Métodos comuns incluem `console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, e `console.timeEnd()`.

**90.**"
O que são bitwise operators em JavaScript?,"Bitwise operators realizam operações em nível de bits em números inteiros. Exemplos incluem `&` (AND), `|` (OR), `^` (XOR), `~` (NOT), `<<` (left shift), `>>` (right shift), e `>>>` (unsigned right shift).

**92.**"
O que é o método `String.fromCharCode()` em JavaScript?,"`String.fromCharCode()` retorna uma string criada a partir de uma sequência de valores Unicode.

**93.**"
O que é o método `String.prototype.charCodeAt()` em JavaScript?,"`charCodeAt()` retorna o valor Unicode de um caractere em uma string.

**94.**"
Como você verifica se uma variável é um número em JavaScript?,"Você pode usar `typeof valor === 'number'` (mas isso inclui `NaN` e `Infinity`). Para ser mais preciso, você pode usar `Number.isFinite(valor)`.

**96.**"
O que é `NaN` em JavaScript?,"`NaN` (Not-a-Number) é um valor que representa um resultado numérico indefinido ou não representável.

**97.**"
Como você verifica se um valor é `NaN` em JavaScript?,"Você deve usar `Number.isNaN(valor)` em vez de `valor === NaN`, porque `NaN` nunca é igual a si mesmo.

**98.**"
O que é o método `Number.isInteger()` em JavaScript?,"`Number.isInteger()` retorna `true` se um valor é um inteiro, caso contrário, retorna `false`.

**99.**"
O que é o objeto `Math` em JavaScript e quais são algumas de suas propriedades e métodos?,"O objeto `Math` fornece funções matemáticas e constantes. Algumas propriedades incluem `Math.PI`, `Math.E`, e métodos como `Math.round()`, `Math.floor()`, `Math.ceil()`, `Math.random()`, `Math.abs()`, `Math.pow()`, e `Math.sqrt()`.

**100.**"
Como você arredonda um número para o inteiro menor mais próximo em JavaScript?,"Você pode usar `Math.floor()`.

**103.**"
Como você arredonda um número para o inteiro maior mais próximo em JavaScript?,"Você pode usar `Math.ceil()`.

**104.**"
Quais são alguns exemplos de TypedArrays em JavaScript?,"Exemplos incluem `Int8Array`, `Uint8Array`, `Int16Array`, `Uint16Array`, `Int32Array`, `Uint32Array`, `Float32Array`, e `Float64Array`.

**109.**"
O que é um ArrayBuffer em JavaScript?,"Um ArrayBuffer é um objeto que representa um buffer de dados binários genérico e de comprimento fixo.

**110.**"
O que é uma DataView em JavaScript?,"Uma DataView fornece uma interface de baixo nível para ler e escrever dados em um ArrayBuffer, permitindo que você especifique o formato dos dados (como inteiro de 8 bits, ponto flutuante de 32 bits, etc.).

**111.**"
O que é o método `Array.from()` em JavaScript?,"`Array.from()` cria um novo array a partir de um objeto iterable ou semelhante a um array.

**112.**"
O que é o método `Array.of()` em JavaScript?,"`Array.of()` cria um novo array com um número variável de argumentos, independentemente do número ou do tipo dos argumentos.

**113.**"
O que é o método `Array.prototype.flat()` em JavaScript?,"`flat()` cria um novo array com todos os elementos de sub-arrays concatenados nele recursivamente até a profundidade especificada.

**119.**"
O que é o método `Array.prototype.flatMap()` em JavaScript?,"`flatMap()` mapeia cada elemento usando uma função de mapeamento e, em seguida, nivela o resultado em um novo array. É idêntico a um `map()` seguido por um `flat()` de profundidade 1.

**120.**"
Quais são alguns usos comuns para Proxy objects?,"Usos comuns incluem validação, logging, rastreamento, virtualização e revogação de acesso.

**122.**"
O que é a diferença entre `Array.prototype.forEach` e um loop `for` tradicional?,"`forEach` é um método de array projetado para iterar sobre cada elemento, enquanto o loop `for` tradicional oferece mais controle sobre a iteração, permitindo interromper o loop com `break` ou pular iterações com `continue`. `forEach` não permite essas operações diretamente.

**127.**"
O que é a diferença entre um laço `while` e um laço `do...while`?,"O loop `while` avalia a condição antes de executar o bloco de código, enquanto o loop `do...while` executa o bloco de código pelo menos uma vez antes de avaliar a condição.

**128.**"
Como você remove duplicatas de um array em JavaScript?,"Você pode usar `[...new Set(array)]` para remover duplicatas.

**129.**"
Como você verifica se uma string começa com uma determinada substring em JavaScript?,"Você pode usar o método `String.prototype.startsWith()`.

**131.**"
Como você verifica se uma string termina com uma determinada substring em JavaScript?,"Você pode usar o método `String.prototype.endsWith()`.

**132.**"
Como você inclui um arquivo JavaScript externo em um arquivo HTML?,"Você usa a tag `<script src=""caminho/do/arquivo.js""></script>` no seu HTML.

**133.**"
Qual a importância de colocar a tag `<script>` no final do `<body>` em um documento HTML?,"Colocar a tag `<script>` no final do `<body>` garante que o HTML seja completamente carregado e renderizado antes que o JavaScript seja executado, melhorando o desempenho percebido da página.

**134.**"
O que é a diferença entre usar aspas simples e aspas duplas para definir strings em JavaScript?,"Tecnicamente, não há diferença funcional entre aspas simples e aspas duplas em JavaScript. A escolha é uma questão de estilo pessoal ou convenção da equipe.

**135.**"
Como você comenta uma linha de código em JavaScript?,"Você usa `//` para comentar uma única linha.

**136.**"
Como você comenta um bloco de código em JavaScript?,"Você usa `/* ... */` para comentar um bloco de código.

**137.**"
Por que você minificaria o código JavaScript?,"Para melhorar o desempenho do site, reduzindo o tempo de carregamento dos scripts.

**139.**"
O que são linters em JavaScript?,"Linters são ferramentas que analisam o código JavaScript para identificar erros de sintaxe, problemas de estilo e outras potenciais inconsistências, ajudando a manter a qualidade e consistência do código.

**140.**"
Qual a diferença entre declaração de função e expressão de função em JavaScript?,"Uma declaração de função é definida usando a palavra-chave `function` seguida por um nome, enquanto uma expressão de função é uma função anônima atribuída a uma variável. As declarações de função são ""hoisted"", enquanto as expressões de função não são.

**141.**"
"O que é ""code smell"" em JavaScript?","Um ""code smell"" é um padrão no código que sugere um problema mais profundo. Não é necessariamente um erro, mas indica uma área que pode precisar de"
Como você cria um novo objeto em JavaScript?,"Você pode criar um novo objeto usando a notação literal de objeto (`{}`) ou usando o construtor `new Object()`.

**11.**"
Explique o que é uma função anônima em JavaScript.,"Uma função anônima é uma função que não tem um nome. Geralmente, é usada como um argumento para outra função ou atribuída a uma variável.

**15.**"
O que é o método `map()` em arrays e como ele funciona?,"O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.

**16.**"
Qual a finalidade do método `filter()` em arrays?,"O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.

**17.**"
O que faz o método `reduce()` em arrays?,"O método `reduce()` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.

**18.**"
O que é JSON e como ele é usado em JavaScript?,"JSON (JavaScript Object Notation) é um formato de dados leve usado para troca de dados. Em JavaScript, é usado para serializar e desserializar objetos para transmitir dados através da rede.

**20.**"
"Qual a diferença entre `let`, `const` e `var` na declaração de variáveis?","`var` tem escopo de função ou global. `let` tem escopo de bloco e permite reatribuição. `const` também tem escopo de bloco, mas exige inicialização e não permite reatribuição após a inicialização.

**23.**"
Como você manipula erros em JavaScript?,"Você pode manipular erros usando blocos `try...catch`. O código que pode lançar uma exceção é colocado dentro do bloco `try`, e o código para lidar com a exceção é colocado dentro do bloco `catch`.

**25.**"
O que é o método `padStart()` e `padEnd()` em strings?,"`padStart()` preenche o início de uma string com um caractere especificado até atingir um comprimento determinado. `padEnd()` faz o mesmo, mas preenche o final da string.

**26.**"
O que são promises em JavaScript e como elas são usadas?,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas têm três estados: pendente, cumprida e rejeitada. Elas são usadas para lidar com operações assíncronas de forma mais limpa e legível do que callbacks.

**27.**"
Como você usa `async/await` em JavaScript?,"`async` é usado para declarar uma função assíncrona, e `await` é usado dentro de uma função `async` para pausar a execução até que uma promise seja resolvida.

**28.**"
Como você cria um módulo em JavaScript?,"Em JavaScript moderno (ES Modules), você pode criar um módulo usando as palavras-chave `export` e `import`.

**32.**"
Qual a finalidade do método `forEach()` em arrays?,"O método `forEach()` executa uma função fornecida uma vez para cada elemento no array. Diferente de `map()`, ele não retorna um novo array.

**33.**"
"O que é o conceito de ""immutability"" em JavaScript e como ele é alcançado?","Imutabilidade significa que o estado de um objeto não pode ser alterado após sua criação. Pode ser alcançado evitando mutações diretas, usando métodos que retornam novos objetos (como `map`, `filter`, `slice`) e utilizando bibliotecas que facilitam a imutabilidade.

**34.**"
Explique o que é um iterador em JavaScript.,"Um iterador é um objeto que define uma sequência e retorna um valor por vez ao usar o método `next()`. Ele possui uma propriedade `done` que indica se a iteração está completa.

**36.**"
Como você cria uma classe em JavaScript?,"Você pode criar uma classe usando a palavra-chave `class`. Classes são um modelo para criar objetos.

**37.**"
Como você define propriedades em um protótipo em JavaScript?,"Você pode definir propriedades em um protótipo atribuindo-as a `Objeto.prototype`. Por exemplo, `Array.prototype.minhaPropriedade = 'valor';`

**49.**"
Qual a diferença entre propriedades próprias e propriedades herdadas em JavaScript?,"Propriedades próprias são propriedades que são definidas diretamente no objeto, enquanto propriedades herdadas são propriedades que o objeto herda de seu protótipo.

**51.**"
Como você estende classes nativas em JavaScript?,"Você pode estender classes nativas, como `Array`, `String` ou `Date`, criando uma nova classe que herda da classe nativa e adicionando novas propriedades e métodos ao protótipo da nova classe.

**53.**"
O que é o método `eval()` em JavaScript?,"O método `eval()` avalia uma string como código JavaScript. Seu uso é geralmente desencorajado por questões de segurança e desempenho.

**60.**"
O que são strict mode em JavaScript?,"Strict mode é uma forma de executar JavaScript de forma mais ""segura"". Ele impõe regras mais rigorosas, como proibir o uso de variáveis não declaradas e lançar erros para algumas práticas consideradas ""ruins"".

**61.**"
Como você habilita strict mode em JavaScript?,"Você habilita strict mode adicionando a string `""use strict"";` no início de um script ou função.

**62.**"
Qual a diferença entre `parseInt()` e `parseFloat()` em JavaScript?,"`parseInt()` retorna um número inteiro, enquanto `parseFloat()` retorna um número de ponto flutuante.

**65.**"
O que é o método `substring()` em strings em JavaScript?,"O método `substring()` retorna uma parte de uma string entre os índices inicial e final especificados.

**83.**"
O que é o método `slice()` em strings em JavaScript?,"O método `slice()` retorna uma seção de uma string, começando em um índice especificado e terminando em outro.

**84.**"
Qual a diferença entre `substring()` e `slice()` em strings em JavaScript?,"Ambos `substring()` e `slice()` extraem uma parte de uma string. Uma diferença é que `substring()` troca os argumentos se o índice inicial for maior que o índice final, enquanto `slice()` retorna uma string vazia. `slice()` também aceita índices negativos, que indicam posições a partir do final da string.

**85.**"
O que é o método `toUpperCase()` em strings em JavaScript?,"O método `toUpperCase()` converte uma string para letras maiúsculas.

**86.**"
O que é o método `toLowerCase()` em strings em JavaScript?,"O método `toLowerCase()` converte uma string para letras minúsculas.

**87.**"
O que é o método `trim()` em strings em JavaScript?,"O método `trim()` remove espaços em branco do início e do fim de uma string.

**88.**"
O que é o método `Object.getPrototypeOf()` em JavaScript?,"O método `Object.getPrototypeOf()` retorna o protótipo de um objeto.

**90.**"
O que é o método `Object.setPrototypeOf()` em JavaScript?,"O método `Object.setPrototypeOf()` define o protótipo (ou seja, o objeto interno [[Prototype]]) de um objeto especificado para outro objeto ou `null`.

**91.**"
O que é o método `concat()` em arrays em JavaScript?,"O método `concat()` junta dois ou mais arrays e retorna um novo array.

**95.**"
O que é o método `join()` em arrays em JavaScript?,"O método `join()` junta todos os elementos de um array em uma string.

**96.**"
O que é o método `push()` em arrays em JavaScript?,"O método `push()` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.

**97.**"
O que é o método `pop()` em arrays em JavaScript?,"O método `pop()` remove o último elemento de um array e retorna esse elemento.

**98.**"
O que é o método `shift()` em arrays em JavaScript?,"O método `shift()` remove o primeiro elemento de um array e retorna esse elemento.

**99.**"
O que é o método `unshift()` em arrays em JavaScript?,"O método `unshift()` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.

**100.**"
O que é o método `splice()` em arrays em JavaScript?,"O método `splice()` altera o conteúdo de um array, removendo ou substituindo elementos existentes e/ou adicionando novos elementos no local.

**101.**"
O que é o método `sort()` em arrays em JavaScript?,"O método `sort()` ordena os elementos de um array no local e retorna o array.

**102.**"
O que é o método `reverse()` em arrays em JavaScript?,"O método `reverse()` inverte a ordem dos elementos em um array.

**103.**"
O que é o método `flat()` em arrays em JavaScript?,"O método `flat()` cria um novo array com todos os sub-arrays concatenados recursivamente até a profundidade especificada.

**111.**"
O que é o método `flatMap()` em arrays em JavaScript?,"O método `flatMap()` primeiro mapeia cada elemento usando uma função de mapeamento, então nivela o resultado em um novo array. É idêntico a um `map()` seguido por um `flat()` de profundidade 1, mas `flatMap()` é frequentemente bastante útil, pois é mais eficiente do que simplesmente fazer os dois separadamente.

**112.**"
Como você comenta várias linhas de código em JavaScript?,"Você pode comentar várias linhas de código usando `/*` para iniciar o comentário e `*/` para terminá-lo.

**113.**"
Qual a diferença entre expressões e declarações em JavaScript?,"Uma declaração cria uma nova variável, função ou classe e associa um nome a ela. Uma expressão produz um valor. Expressões podem ser avaliadas para produzir um valor.

**114.**"
O que são operadores de atribuição compostos em JavaScript?,"Operadores de atribuição compostos combinam uma operação com uma atribuição. Por exemplo, `+=`, `-=`, `*=`, `/=`, `%=`.

**115.**"
O que são operadores bitwise em JavaScript?,"Operadores bitwise realizam operações em nível de bit em números inteiros. Exemplos incluem `&` (AND), `|` (OR), `^` (XOR), `~` (NOT), `<<` (left shift), `>>` (right shift), `>>>` (unsigned right shift).

**116.**"
O que são operadores lógicos em JavaScript?,"Operadores lógicos realizam operações lógicas booleanas. Exemplos incluem `&&` (AND lógico), `||` (OR lógico) e `!` (NOT lógico).

**117.**"
Qual a precedência dos operadores em JavaScript?,"A precedência dos operadores define a ordem em que os operadores são avaliados em uma expressão. Operadores com maior precedência são avaliados primeiro.

**118.**"
O que é associatividade de operadores em JavaScript?,"A associatividade define como os operadores da mesma precedência são agrupados em uma expressão. Pode ser da esquerda para a direita ou da direita para a esquerda.

**119.**"
O que é curry em JavaScript?,"Curry é uma técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.

**122.**"
"O que é a estratégia de avaliação ""lazy evaluation"" em JavaScript?","""Lazy evaluation"" (avaliação preguiçosa) é uma estratégia de avaliação que atrasa a avaliação de uma expressão até que seu valor seja necessário. JavaScript não é inerentemente preguiçoso, mas certas técnicas podem simular esse comportamento.

**123.**"
O que é a técnica de memoização em JavaScript?,"Memoização é uma técnica de otimização onde os resultados de chamadas de função caras são armazenados em cache e reutilizados quando a mesma entrada ocorre novamente.

**124.**"
Como você impede que um script JavaScript seja executado até que o DOM seja totalmente carregado?,"Você pode usar o evento `DOMContentLoaded` para garantir que o script seja executado somente após o DOM ser carregado.

**126.**"
Como você adiciona um ouvinte de evento em JavaScript?,"Você pode adicionar um ouvinte de evento usando o método `addEventListener()` no objeto que representa o elemento HTML.

**128.**"
Como você para um `setTimeout()` ou `setInterval()` em JavaScript?,"Você pode parar um `setTimeout()` usando `clearTimeout()` e um `setInterval()` usando `clearInterval()`, passando o ID retornado por `setTimeout()` ou `setInterval()`.

**136.**"
"O que é o conceito de ""debouncing"" em JavaScript?","Debouncing é uma técnica para limitar a taxa na qual uma função é executada. É útil para evitar que uma função seja executada repetidamente em resposta a eventos frequentes, como redimensionamento da janela ou entrada do usuário.

**137.**"
"O que é o conceito de ""throttling"" em JavaScript?","Throttling é uma técnica para limitar a taxa na qual uma função é executada, garantindo que a função seja executada no máximo uma vez em um determinado período de tempo.

**138.**"
O que é o padrão revelador de módulo em JavaScript?,"O padrão revelador de módulo é uma variação do padrão módulo em que as variáveis privadas e as funções internas são mantidas ocultas, enquanto um conjunto selecionado de funções públicas é revelado.

**142.**"
O que é o operador `typeof` e como ele é usado?,"`typeof` é um operador unário que retorna uma string indicando o tipo de dado de um operando. Ele é usado para determinar o tipo de uma variável ou expressão, retornando valores como ""number"", ""string"", ""boolean"", ""object"", ""function"", ""undefined"" ou ""symbol""."
Como declarar uma variável em JavaScript?,"Variáveis são declaradas usando as palavras-chave `var`, `let` ou `const`.  `var` tem escopo de função ou global, `let` tem escopo de bloco, e `const` também tem escopo de bloco e declara uma variável constante cujo valor não pode ser reatribuído."
O que é uma função anônima?,"Uma função anônima é uma função que não tem um nome identificador. Geralmente, são usadas como expressões, como callbacks ou em IIFEs (Immediately Invoked Function Expressions)."
O que é uma IIFE (Immediately Invoked Function Expression)?,Uma IIFE é uma função anônima que é executada imediatamente após ser definida. Sua principal utilidade é criar um escopo privado para evitar conflitos com variáveis globais. Exemplo: `(function() { /* seu código aqui */ })();`
Como passar parâmetros para uma função em JavaScript?,"Os parâmetros são especificados dentro dos parênteses da definição da função e separados por vírgulas. Ao chamar a função, os valores (argumentos) correspondentes são passados na mesma ordem."
Como converter uma string para um número em JavaScript?,"Utilize `parseInt()` para converter para um inteiro, `parseFloat()` para converter para um número de ponto flutuante, ou o operador unário `+`. Exemplo: `parseInt(""10"")`, `parseFloat(""3.14"")`, `+""5""`."
Como adicionar um elemento ao início de um array em JavaScript?,Use o método `unshift()`. Exemplo: `meuArray.unshift(elemento);`
O que é o método `reverse()` em arrays?,`reverse()` inverte a ordem dos elementos do array.
O que é o statement `break` em JavaScript?,"`break` é usado para sair de um loop ( `for`, `while`, `do...while` ) ou de um statement `switch`."
O que é o statement `continue` em JavaScript?,`continue` é usado para pular a iteração atual de um loop e passar para a próxima iteração.
O que é um statement `switch` em JavaScript?,Um `switch` statement executa um bloco de código diferente dependendo do valor de uma expressão.
O que são funções de primeira classe (first-class functions) em JavaScript?,"Funções de primeira classe significa que as funções podem ser tratadas como qualquer outra variável. Elas podem ser atribuídas a variáveis, passadas como argumentos para outras funções e retornadas como valores de outras funções."
Como limpar um timeout ou interval em JavaScript?,Use `clearTimeout()` para limpar um timeout agendado com `setTimeout()` e `clearInterval()` para limpar um interval agendado com `setInterval()`.
O que é o objeto `JSON` em JavaScript?,`JSON` (JavaScript Object Notation) é um formato de dados leve e fácil de ler/escrever para humanos e fácil de interpretar/gerar para máquinas. É usado para transmitir dados entre um servidor e um navegador.
Como selecionar um elemento HTML pelo ID em JavaScript?,"Use o método `document.getElementById(""idDoElemento"")`."
Como selecionar elementos HTML por classe em JavaScript?,"Use o método `document.getElementsByClassName(""nomeDaClasse"")`. Ele retorna um HTMLCollection."
Como selecionar elementos HTML por tag name em JavaScript?,"Use o método `document.getElementsByTagName(""nomeDaTag"")`. Ele retorna um HTMLCollection."
O que é um event listener em JavaScript?,"Um event listener é uma função que é executada em resposta a um evento específico (como um clique do mouse, uma tecla pressionada, etc.)."
Como adicionar um event listener a um elemento HTML em JavaScript?,"Use o método `addEventListener()`. Exemplo: `elemento.addEventListener(""click"", minhaFuncao);`"
O que é o método `getAttribute()` em JavaScript?,`getAttribute()` retorna o valor de um atributo especificado em um elemento HTML.
O que é o método `setAttribute()` em JavaScript?,`setAttribute()` define o valor de um atributo especificado em um elemento HTML.
O que é o atributo `innerHTML` em JavaScript?,`innerHTML` obtém ou define o conteúdo HTML interno de um elemento.
O que é o atributo `textContent` em JavaScript?,"`textContent` obtém ou define o texto contido dentro de um elemento, sem interpretar HTML."
Como redirecionar o navegador para uma nova página usando JavaScript?,"Use `window.location.href = ""URL_da_nova_pagina"";`."
O que é o método `exec()` de uma expressão regular?,`exec()` executa a busca por uma correspondência na string fornecida. Retorna um array com informações sobre a correspondência ou `null` se nenhuma correspondência for encontrada.
O que é o método `search()` de uma string?,`search()` retorna o índice da primeira correspondência de uma string com uma expressão regular. Retorna -1 se nenhuma correspondência for encontrada.
O que é o método `split()` de uma string?,"`split()` divide uma string em um array de substrings, usando um separador especificado."
O que é o método `trim()` de uma string?,`trim()` remove os espaços em branco do início e do fim de uma string.
O que é o método `toUpperCase()` de uma string?,`toUpperCase()` converte uma string para letras maiúsculas.
O que é o método `toLowerCase()` de uma string?,`toLowerCase()` converte uma string para letras minúsculas.
O que é o método `substring()` de uma string?,`substring()` retorna uma parte de uma string entre dois índices especificados.
O que é o método `substr()` de uma string?,"`substr()` retorna uma parte de uma string, começando em um índice especificado e com um comprimento especificado."
O que é o método `charAt()` de uma string?,`charAt()` retorna o caractere em um índice especificado em uma string.
O que é o método `charCodeAt()` de uma string?,`charCodeAt()` retorna o código Unicode do caractere em um índice especificado em uma string.
"Qual é a diferença entre `var`, `let` e `const` em relação ao escopo?","`var` tem escopo de função ou global, enquanto `let` e `const` têm escopo de bloco."
Qual é a diferença entre `let` e `const` em relação à reatribuição?,"Variáveis declaradas com `let` podem ser reatribuídas, enquanto variáveis declaradas com `const` não podem."
O que é o padrão de design Module em JavaScript?,O padrão Module é uma forma de encapsular código em unidades reutilizáveis. Ele usa closures para criar escopos privados e expor apenas as partes necessárias do módulo.
O que é partial application em JavaScript?,Partial application é uma técnica de criar uma nova função pré-configurando alguns dos argumentos de uma função existente.
O que é o operador `for...of` em JavaScript?,"`for...of` cria um loop iterando sobre objetos iteráveis (arrays, strings, maps, sets, etc.), invocando um hook de iteração personalizado com instruções a serem executadas para o valor de cada propriedade distinta."
O que são propriedades acessoras (getters e setters) em JavaScript?,"Propriedades acessoras são métodos que permitem acessar ou modificar o valor de uma propriedade de um objeto de forma controlada. Getters são usados para ler o valor de uma propriedade, e setters são usados para definir o valor de uma propriedade."
O que é o protocolo URL em JavaScript?,"Em JavaScript, o protocolo URL é a primeira parte de uma URL, indicando o método utilizado para acessar o recurso. Exemplos comuns incluem `http://`, `https://`, `ftp://`, e `mailto:`."
Como criar uma função construtora em JavaScript?,Uma função construtora é uma função que é usada com o operador `new` para criar novos objetos. Ela normalmente define propriedades e métodos que serão compartilhados por todas as instâncias do objeto. Exemplo: `function Pessoa(nome) { this.nome = nome; }`
Como herdar propriedades e métodos de outro objeto em JavaScript usando protótipos?,"Você pode definir o protótipo de um objeto para ser outro objeto usando `Object.setPrototypeOf(objetoFilho, objetoPai.prototype)`."
O que é o atributo `length` de uma string?,O atributo `length` retorna o número de caracteres em uma string.
O que é o atributo `prototype` em JavaScript?,Toda função em JavaScript tem uma propriedade `prototype`. Esta propriedade é um objeto cujo protótipo é atribuído ao `__proto__` de cada objeto criado com essa função como construtor (usando `new`).
O que é o método `instanceof` em JavaScript?,O operador `instanceof` testa se a propriedade `prototype` de um construtor aparece em algum lugar na cadeia de protótipos de um objeto.
Como criar uma classe em JavaScript (ES6+)?,Classes são criadas usando a palavra-chave `class`. Elas fornecem uma sintaxe mais clara e orientada a objetos para criar objetos e herdar propriedades e métodos.
O que são construtores em classes JavaScript?,Construtores são métodos especiais dentro de uma classe que são executados quando um novo objeto da classe é criado. Eles são usados para inicializar as propriedades do objeto.
O que é a palavra-chave `super` em classes JavaScript?,`super` é usado dentro de uma classe filha para chamar o construtor da classe pai e acessar propriedades e métodos da classe pai.
Como funciona a herança de classes em JavaScript (ES6+)?,A herança é implementada usando a palavra-chave `extends`. Uma classe filha pode herdar propriedades e métodos de uma classe pai.
O que são módulos ES6 (ES Modules) em JavaScript?,ES Modules são um sistema de módulos nativo do JavaScript que permite organizar o código em arquivos separados e importá-los e exportá-los conforme necessário.
Como exportar um módulo em JavaScript (ES6+)?,"Use a palavra-chave `export` para exportar variáveis, funções ou classes de um módulo."
Como importar um módulo em JavaScript (ES6+)?,"Use a palavra-chave `import` para importar variáveis, funções ou classes de um módulo."
Qual a diferença entre exportações nomeadas e exportações padrão em ES Modules?,"Exportações nomeadas permitem exportar vários valores de um módulo, cada um com um nome específico. Exportações padrão permitem exportar um único valor como o valor padrão do módulo."
O que é o objeto `Proxy` em JavaScript?,"O objeto `Proxy` permite criar um proxy para outro objeto, que pode interceptar e customizar operações como leitura de propriedades, atribuição, enumeração, e chamadas de função."
O que são Reflect API em JavaScript?,Reflect API é um objeto embutido que fornece métodos interceptáveis para operações do JavaScript. Eles são projetados para serem usados em conjunto com o objeto `Proxy`.
O que são Memory Leaks em JavaScript e como evitá-los?,"Memory Leaks ocorrem quando um programa não libera memória que não está mais sendo usada, levando a um aumento gradual no uso de memória. Eles podem ser evitados removendo referências desnecessárias a objetos, fechando event listeners e usando estruturas de dados apropriadas."
O que é a Temporal Dead Zone (TDZ) em JavaScript?,"A Temporal Dead Zone (TDZ) é a área de um bloco de código onde uma variável declarada com `let` ou `const` existe, mas não pode ser acessada até que sua declaração seja alcançada. Acessar uma variável dentro da TDZ resulta em um erro."
O que é o padrão de design Composite em JavaScript?,"O padrão Composite permite tratar objetos individuais e composições de objetos de forma uniforme. Ele cria uma estrutura de árvore onde os nós podem ser objetos individuais ou outros objetos compostos.

Espero que esta lista abrangente seja útil!"
"O que é o ""hoisting"" em JavaScript e como ele afeta variáveis e funções?","Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo de seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com valor `undefined`, enquanto funções declaradas com a palavra-chave `function` são hoisted completamente, permitindo que sejam usadas antes de serem declaradas no código. Variáveis com `let` e `const` são hoisted, mas não inicializadas, resultando em um erro se forem acessadas antes da declaração."
O que é o prototype em JavaScript e como ele é usado para herança?,"Cada objeto em JavaScript tem um prototype. Quando uma propriedade é acessada em um objeto, o JavaScript primeiro procura na própria propriedade do objeto. Se não encontrar, procura no prototype do objeto. Se ainda não encontrar, procura no prototype do prototype, e assim por diante, até atingir o prototype final, que é `null`. Isso permite herança por meio da cadeia de protótipos."
"Explique o conceito de ""event loop"" em JavaScript.","O event loop é um mecanismo que permite que o JavaScript execute tarefas assíncronas sem bloquear o thread principal. Ele monitora a pilha de chamadas e a fila de mensagens, movendo tarefas da fila para a pilha quando a pilha está vazia."
Como você lidaria com erros em JavaScript?,"Usando blocos `try...catch` para capturar exceções. Além disso, pode-se usar o método `.catch()` em Promises para lidar com erros assíncronos."
O que é JSON?,"JSON (JavaScript Object Notation) é um formato de dados leve, usado para transmitir dados entre um servidor e um navegador. É baseado em um subconjunto da linguagem JavaScript."
O que é a cadeia de escopo em JavaScript?,A cadeia de escopo é o conjunto de escopos acessíveis a uma função no momento em que é executada. Ela é determinada pela ordem em que as funções são aninhadas.
O que é o DOM?,"O DOM (Document Object Model) é uma representação em árvore da estrutura de um documento HTML ou XML. Ele permite que o JavaScript acesse e manipule o conteúdo, a estrutura e o estilo do documento."
Quais são alguns eventos comuns do DOM em JavaScript?,"`click`, `mouseover`, `mouseout`, `keydown`, `keyup`, `submit`, `load`, `DOMContentLoaded`, etc."
Como você converte um valor para um booleano em JavaScript?,Usando a função `Boolean()` ou o operador de negação dupla `!!`.
Como você arredonda um número em JavaScript?,"Usando os métodos `Math.round()`, `Math.ceil()` ou `Math.floor()`."
Como você clona um array em JavaScript?,"Usando o operador spread (`...`), o método `slice()`, ou `Array.from()`."
Como você junta elementos de um array em uma string em JavaScript?,Usando o método `join()`.
Como você divide uma string em um array em JavaScript?,Usando o método `split()`.
Como você previne a coerção de tipo indesejada em JavaScript?,Usando o operador de igualdade estrita (`===`) e o operador de desigualdade estrita (`!==`).
"O que é o modo estrito (""strict mode"") em JavaScript?","É uma forma de executar o JavaScript de forma mais ""segura"". Ele impõe regras mais rígidas e ajuda a prevenir erros comuns. É ativado adicionando a string `""use strict"";` no início de um script ou função."
O que é herança em JavaScript (classes)?,É um mecanismo que permite que uma classe (subclasse) herde propriedades e métodos de outra classe (superclasse).
Como você implementa herança em JavaScript usando classes?,Usando a palavra-chave `extends` na declaração da classe.
O que é o método `super()` em JavaScript (classes)?,É usado dentro de uma subclasse para chamar o construtor da superclasse.
O que é a palavra-chave `static` em classes JavaScript?,"É usada para definir métodos e propriedades que pertencem à classe em si, em vez de pertencerem a instâncias da classe."
Como você importa um módulo em JavaScript?,Usando a palavra-chave `import`.
Como você exporta um módulo em JavaScript?,Usando a palavra-chave `export`.
Qual a diferença entre `export default` e `export` nomeado?,`export default` permite exportar um único valor padrão de um módulo. `export` nomeado permite exportar múltiplos valores com nomes específicos.
O que é o método `concat()` em JavaScript?,`concat()` retorna um novo array contendo todos os arrays concatenados com o array no qual foi chamado.
Quais são os perigos da recursão excessiva em JavaScript?,"Pode levar a um estouro da pilha de chamadas (stack overflow), o que causa um erro e interrompe a execução do programa."
O que é a otimização de cauda de recursão (Tail Call Optimization - TCO)?,É uma otimização que alguns engines JavaScript implementam para evitar o estouro da pilha de chamadas em funções recursivas que fazem a chamada recursiva como a última operação. JavaScript não tem garantia de TCO.
O que é a desserialização em JavaScript?,É o processo de converter uma string JSON em um objeto JavaScript.
Como você desserializa uma string JSON em JavaScript?,Usando o método `JSON.parse()`.
O que é a serialização em JavaScript?,É o processo de converter um objeto JavaScript em uma string JSON.
Como você serializa um objeto JavaScript em JSON?,Usando o método `JSON.stringify()`.
O que é o tratamento de erros síncrono em JavaScript?,"É o tratamento de erros que ocorrem durante a execução de código síncrono, normalmente usando blocos `try...catch`."
O que é o tratamento de erros assíncrono em JavaScript?,"É o tratamento de erros que ocorrem durante a execução de código assíncrono, normalmente usando callbacks com um padrão de primeiro argumento como erro, ou usando `Promises` com `.catch()`, ou com `async/await` usando `try...catch`."
"O que é o ""callback hell"" em JavaScript?","É um padrão de código onde múltiplas funções assíncronas são aninhadas umas dentro das outras, tornando o código difícil de ler e manter."
"Como você evita o ""callback hell"" em JavaScript?","Usando `Promises`, `async/await` ou modularizando o código em funções menores."
Qual a diferença entre `async/await` e `Promises`?,"`async/await` é uma sintaxe mais moderna e legível para trabalhar com `Promises`. Na prática, `async/await` simplifica a sintaxe e torna o código assíncrono mais parecido com o código síncrono."
O que é um módulo CommonJS?,É um sistema de módulos usado principalmente no Node.js.  Módulos são carregados usando `require()` e exportados usando `module.exports`.
O que é o sistema de módulos ES (ES Modules)?,"É o sistema de módulos padrão do JavaScript, introduzido no ES6. Módulos são importados usando `import` e exportados usando `export`."
Qual a diferença entre o sistema de módulos CommonJS e o ES Modules?,"CommonJS é síncrono, enquanto ES Modules são assíncronos. ES Modules permitem análise estática para otimizações. CommonJS usa `require()` e `module.exports`, enquanto ES Modules usam `import` e `export`."
O que é um closure com um loop em JavaScript?,"Um erro comum é criar closures dentro de loops, onde cada closure compartilha a mesma variável de contador do loop. Isso pode levar a resultados inesperados. Para corrigir isso, pode-se usar uma IIFE ou `let` (que cria um novo escopo para cada iteração do loop)."
Como você itera sobre os valores de um generator em JavaScript?,Usando um loop `for...of` ou chamando o método `next()` do generator.
O que é imutabilidade em programação funcional?,"É a prática de não modificar dados existentes. Em vez disso, cria-se novas cópias dos dados com as alterações desejadas."
O que é a composição de funções em JavaScript?,É o processo de combinar duas ou mais funções para criar uma nova função.
O que é memorização em JavaScript?,É uma técnica de otimização que armazena em cache os resultados de chamadas de função caras e retorna o resultado em cache quando as mesmas entradas ocorrem novamente.
O que é um promise all?,"O `Promise.all()` recebe um array de Promises como entrada, e retorna uma única Promise que resolve para um array de valores das Promises de entrada que foram resolvidas. Se qualquer uma das Promises de entrada for rejeitada, a Promise retornada por `Promise.all()` será imediatamente rejeitada com o motivo da primeira Promise a ser rejeitada."
Qual a diferença entre `Array.prototype.forEach()` e `Array.prototype.map()`?,"`forEach()` itera sobre os elementos de um array e executa uma função para cada elemento, mas não retorna um novo array. `map()` itera sobre os elementos de um array, aplica uma função a cada elemento e retorna um novo array com os resultados."
O que é desestruturação em JavaScript (destructuring)?,É uma expressão JavaScript que possibilita descompactar valores de arrays ou propriedades de objetos em variáveis distintas.
Como você usa a desestruturação em JavaScript com arrays?,"`const [a, b] = [1, 2]; // a = 1, b = 2`"
Como você usa a desestruturação em JavaScript com objetos?,"`const { name, age } = { name: 'João', age: 30 }; // name = 'João', age = 30`"
Como você usa a desestruturação com valores padrão em JavaScript?,"`const { x = 0, y = 0 } = { y: 5 }; // x = 0, y = 5`"
O que é um set em JavaScript?,É uma coleção de valores únicos. Um valor pode ocorrer apenas uma vez em um Set.
O que é um map em JavaScript?,"É uma coleção de pares chave-valor, onde tanto as chaves quanto os valores podem ser de qualquer tipo de dado."
Qual a diferença entre um objeto e um map em JavaScript?,"As chaves de um objeto devem ser strings ou símbolos, enquanto as chaves de um map podem ser de qualquer tipo de dado. Um map mantém a ordem de inserção das chaves, enquanto a ordem das propriedades de um objeto não é garantida."
O que é uma WeakMap em JavaScript?,"É um tipo especial de Map onde as chaves são objetos e as referências para esses objetos são mantidas de forma ""fraca"". Isso significa que se não houver outras referências para o objeto chave, o objeto pode ser coletado pelo coletor de lixo (garbage collector)."
O que é uma WeakSet em JavaScript?,"É semelhante a um WeakMap, mas armazena coleções de objetos (não valores)."
Qual a utilidade de WeakMap e WeakSet?,São úteis para associar dados a objetos sem impedir que esses objetos sejam coletados pelo coletor de lixo. Isso é especialmente útil em cenários onde você precisa armazenar informações adicionais sobre objetos gerenciados por outras partes do seu código.
Qual a diferença entre `||` (operador OR) e `??` (nullish coalescing operator) em JavaScript?,"`||` retorna o operando do lado direito se o operando do lado esquerdo for ""falsy"" (ex: `0`, `""""`, `false`, `null`, `undefined`, `NaN`), enquanto `??` retorna o operando do lado direito apenas se o operando do lado esquerdo for `null` ou `undefined`."
O que é o operador de encadeamento opcional `?.` (optional chaining operator) em JavaScript?,"Permite acessar propriedades de um objeto, mesmo que uma propriedade intermediária na cadeia seja `null` ou `undefined`, sem lançar um erro. Retorna `undefined` nesses casos."
O que são tags template em JavaScript?,Permitem que você use uma função para analisar template literals. A função recebe o template literal como um array de strings e as expressões interpoladas como argumentos separados.
O que são Proxies em JavaScript?,"Proxies permitem interceptar e personalizar operações fundamentais em objetos (ex: leitura de propriedades, escrita de propriedades, construção de objetos)."
Quais são alguns usos para Proxies?,"Validação de propriedades, registro de acesso a propriedades, virtualização de objetos, etc."
O que é Reflection em JavaScript?,Reflection é um conjunto de APIs que fornecem métodos para interceptar e modificar operações internas da linguagem. Os métodos em `Reflect` correspondem aos operadores da linguagem (ex: `Reflect.get()` corresponde ao operador `.` para acesso a propriedades).
Qual a relação entre Proxies e Reflection?,"Proxies usam Reflection para delegar operações para o objeto alvo.  Um handler de Proxy pode interceptar uma operação e, em seguida, usar um método de `Reflect` para realizar a operação original no objeto alvo."
Como declarar uma variável em JavaScript usando a palavra-chave `const`?,"`const minhaVariavel = ""valor"";`  A palavra-chave `const` declara uma variável cujo valor não pode ser reatribuído após a inicialização.

**3.**"
O que é coerção de tipo (type coercion) em JavaScript?,"É a conversão automática de um tipo de dado para outro durante uma operação. Por exemplo, ao somar uma string com um número, JavaScript pode tentar converter a string em um número.

**4.**"
Como converter uma string em um número em JavaScript?,"Use `parseInt(minhaString)` (para inteiros) ou `parseFloat(minhaString)` (para números de ponto flutuante).

**9.**"
Como acessar uma propriedade de um objeto em JavaScript?,"Use a notação de ponto ( `meuObjeto.chave1` ) ou a notação de colchetes ( `meuObjeto[""chave1""]` ).

**12.**"
O que é o método `shift()` em arrays?,"Remove o primeiro elemento de um array e o retorna.

**18.**"
O que é o método `unshift()` em arrays?,"Adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.

**19.**"
Como clonar um array em JavaScript?,"Use o operador spread: `const novoArray = [...arrayOriginal];` ou o método `slice()`: `const novoArray = arrayOriginal.slice();`

**20.**"
Como criar uma função em JavaScript?,"Use a palavra-chave `function`: `function minhaFuncao(parametro) { // código }` ou a sintaxe de arrow function: `const minhaFuncao = (parametro) => { // código }`.

**25.**"
O que é o objeto `arguments` dentro de uma função?,"É um objeto semelhante a um array que contém todos os argumentos passados para a função, independentemente de quantos parâmetros a função foi definida para receber.  Não disponível em arrow functions.

**27.**"
Como retornar um valor de uma função em JavaScript?,"Use a palavra-chave `return` seguida do valor a ser retornado.

**28.**"
Como encontrar o maior número em um array em JavaScript?,"Use `Math.max(...meuArray)`.

**33.**"
Como obter a data e hora atuais em JavaScript?,"Use `new Date()`.

**35.**"
Como obter o ano de uma data em JavaScript?,"Use `meuObjetoDate.getFullYear()`.

**36.**"
Como obter o mês de uma data em JavaScript?,"Use `meuObjetoDate.getMonth()`.  (Lembre-se que o mês começa em 0, então Janeiro é 0, Fevereiro é 1, etc.)

**37.**"
O que é o objeto `String` em JavaScript?,"É um objeto nativo que representa uma sequência de caracteres.

**38.**"
Como obter o comprimento de uma string em JavaScript?,"Use `minhaString.length`.

**39.**"
Como converter uma string para maiúsculas em JavaScript?,"Use `minhaString.toUpperCase()`.

**40.**"
Como converter uma string para minúsculas em JavaScript?,"Use `minhaString.toLowerCase()`.

**41.**"
Como encontrar a posição de uma substring dentro de uma string em JavaScript?,"Use `minhaString.indexOf(""substring"")`.

**42.**"
Como extrair uma substring de uma string em JavaScript?,"Use `minhaString.substring(inicio, fim)` ou `minhaString.slice(inicio, fim)`.

**43.**"
Como testar se uma string corresponde a uma expressão regular em JavaScript?,"Use o método `test()` da expressão regular: `/padrão/.test(minhaString)`.

**48.**"
O que é o tipo de dado `Symbol` em JavaScript (ES6)?,"É um tipo de dado primitivo que representa um identificador único.

**51.**"
O que é o operador `!` em JavaScript?,"É o operador de negação lógica. Inverte o valor booleano de um operando.

**52.**"
O que são operadores de incremento e decremento em JavaScript?,"São operadores que incrementam ou decrementam o valor de uma variável em 1. Ex: `++`, `--`.

**54.**"
Qual a diferença entre `i++` e `++i` em JavaScript?,"`i++` retorna o valor de `i` antes de incrementá-lo, enquanto `++i` retorna o valor de `i` após incrementá-lo.

**55.**"
O que é o operador `&&` em JavaScript?,"É o operador lógico ""E"" (AND). Retorna `true` se ambos os operandos forem `true`.

**57.**"
O que é o operador `||` em JavaScript?,"É o operador lógico ""OU"" (OR). Retorna `true` se pelo menos um dos operandos for `true`.

**58.**"
O que é a precedência de operadores em JavaScript?,"É a ordem em que os operadores são avaliados em uma expressão.

**59.**"
Como forçar a ordem de avaliação de operadores em JavaScript?,"Use parênteses `()`.

**60.**"
O que é uma instrução `if` em JavaScript?,"Executa um bloco de código se uma condição for verdadeira.

**62.**"
O que é uma instrução `else` em JavaScript?,"Executa um bloco de código se a condição da instrução `if` for falsa.

**63.**"
O que é uma instrução `else if` em JavaScript?,"Permite verificar múltiplas condições em uma sequência de `if` statements.

**64.**"
O que é uma instrução `break` em JavaScript?,"Termina a execução de um loop ou instrução `switch`.

**66.**"
O que é uma instrução `continue` em JavaScript?,"Interrompe a iteração atual de um loop e passa para a próxima iteração.

**67.**"
O que é o loop `for...in` em JavaScript?,"Itera sobre as propriedades enumeráveis de um objeto.

**71.**"
O que é o loop `for...of` em JavaScript (ES6)?,"Itera sobre os valores de um objeto iterável (array, string, Map, Set, etc.).

**72.**"
Como selecionar elementos HTML por nome de classe em JavaScript?,"Use `document.getElementsByClassName(""minhaClasse"")`.

**77.**"
Como selecionar elementos HTML por nome de tag em JavaScript?,"Use `document.getElementsByTagName(""minhaTag"")`.

**78.**"
Como alterar o conteúdo de um elemento HTML em JavaScript?,"Use a propriedade `textContent` ou `innerHTML`.

**79.**"
Como alterar os atributos de um elemento HTML em JavaScript?,"Use o método `setAttribute(""nomeDoAtributo"", ""novoValor"")`.

**80.**"
O que é o objeto `event` passado para um event listener?,"Contém informações sobre o evento que ocorreu (ex: qual elemento foi clicado, qual tecla foi pressionada).

**85.**"
O que é o método `stopPropagation()` em eventos?,"Impede que o evento se propague para elementos pai na árvore DOM.

**87.**"
Como o valor de `this` é determinado em uma função normal?,"Se a função for chamada como um método de um objeto, `this` se refere ao objeto. Se a função for chamada no escopo global, `this` se refere ao objeto global (window no navegador, global no Node.js).

**91.**"
"O que são métodos `call()`, `apply()` e `bind()` em JavaScript?","São métodos que permitem controlar o valor de `this` ao chamar uma função.

**93.**"
O que faz o método `bind()` em JavaScript?,"Cria uma nova função com o valor de `this` já definido, que não pode ser alterado posteriormente.

**95.**"
Como herdar propriedades e métodos de um protótipo em JavaScript?,"Definindo o protótipo de um objeto como o protótipo do objeto pai.

**98.**"
O que é a cadeia de protótipos (prototype chain) em JavaScript?,"É a sequência de protótipos que são percorridos quando se tenta acessar uma propriedade ou método de um objeto.

**99.**"
Como converter um objeto JavaScript em uma string JSON?,"Use `JSON.stringify(meuObjeto)`.

**102.**"
Como converter uma string JSON em um objeto JavaScript?,"Use `JSON.parse(minhaStringJSON)`.

**103.**"
O que são promessas (Promises) em JavaScript?,"São objetos que representam o resultado eventual (completo ou falho) de uma operação assíncrona.

**104.**"
Quais são os três estados possíveis de uma promessa em JavaScript?,"Pending (pendente), Fulfilled (cumprida) e Rejected (rejeitada).

**105.**"
Como criar uma promessa em JavaScript?,"Use o construtor `new Promise((resolve, reject) => { ... });`.

**106.**"
Como lidar com o resultado de uma promessa cumprida em JavaScript?,"Use o método `then(funcaoCallback)`.

**107.**"
Como lidar com o resultado de uma promessa rejeitada em JavaScript?,"Use o método `catch(funcaoCallback)`.

**108.**"
O que é o método `finally()` em promessas JavaScript?,"É executado independentemente da promessa ser cumprida ou rejeitada.

**109.**"
O que são funções `async` em JavaScript?,"São funções que permitem usar a palavra-chave `await` para pausar a execução da função até que uma promessa seja resolvida.

**110.**"
Como lidar com erros em funções `async` em JavaScript?,"Use blocos `try...catch`.

**112.**"
Qual a diferença entre named exports e default export em JavaScript?,"Named exports permitem exportar múltiplos valores de um módulo, enquanto default export permite exportar apenas um valor (geralmente uma função ou classe).

**116.**"
O que é destructuring em JavaScript (ES6)?,"É uma forma de extrair valores de objetos ou arrays e atribuí-los a variáveis.

**117.**"
Como usar destructuring com objetos em JavaScript?,"`const { propriedade1, propriedade2 } = meuObjeto;`

**118.**"
Como usar destructuring com arrays em JavaScript?,"`const [elemento1, elemento2] = meuArray;`

**119.**"
O que são parâmetros padrão em funções JavaScript (ES6)?,"São valores padrão que são atribuídos a parâmetros de função se nenhum valor for fornecido ao chamar a função.

**120.**"
Como definir um parâmetro padrão em uma função JavaScript?,"`function minhaFuncao(parametro = valorPadrao) { ... }`

**121.**"
O que é um Map em JavaScript (ES6)?,"É uma coleção de pares chave-valor, onde as chaves podem ser de qualquer tipo de dado (diferente de objetos, onde as chaves devem ser strings ou Symbols).

**122.**"
Como adicionar um elemento a um Map em JavaScript?,"Use o método `set(chave, valor)`.

**123.**"
Como obter um valor de um Map em JavaScript?,"Use o método `get(chave)`.

**124.**"
O que é um Set em JavaScript (ES6)?,"É uma coleção de valores únicos.

**125.**"
Como adicionar um elemento a um Set em JavaScript?,"Use o método `add(valor)`.

**126.**"
Como verificar se um valor existe em um Set em JavaScript?,"Use o método `has(valor)`.

**127.**"
O que são iterators em JavaScript (ES6)?,"São objetos que definem uma sequência de valores e fornecem um método `next()` para acessar o próximo valor da sequência.

**128.**"
O que são generators em JavaScript (ES6)?,"São funções que podem ser pausadas e retomadas, permitindo produzir uma sequência de valores sob demanda.

**129.**"
O que são WeakMaps em JavaScript (ES6)?,"São Maps onde as chaves devem ser objetos e são mantidas fracamente (weakly referenced). Isso significa que se o objeto chave não for mais referenciado em nenhum outro lugar, ele pode ser coletado pelo garbage collector, e a entrada correspondente no WeakMap será removida.

**132.**"
O que são WeakSets em JavaScript (ES6)?,"São Sets que armazenam objetos fracamente referenciados.

**133.**"
O que é template literal tagged em JavaScript?,"É uma função que recebe um template literal como argumento e permite processar a string e as expressões interpoladas antes de retornar o resultado final.

**134.**"
O que é o operador nullish coalescing (??) em JavaScript?,"Retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo.

**135.**"
O que é o operador optional chaining (?.) em JavaScript?,"Permite acessar propriedades aninhadas de um objeto sem ter que verificar explicitamente se cada nível existe, evitando erros se uma propriedade for `null` ou `undefined`.

**136.**"
Como definir uma classe em JavaScript?,"Use a palavra-chave `class`.

**138.**"
Como usar herança em classes JavaScript?,"Use a palavra-chave `extends`.

**143.**"
Como usar o operador `in` para verificar se uma propriedade existe em um objeto?,"`propriedade in objeto`.

**149.**"
Explique o conceito de protótipos em JavaScript.,"Em JavaScript, cada objeto tem um protótipo. O protótipo é outro objeto do qual o objeto herda propriedades e métodos. Quando tentamos acessar uma propriedade que não existe diretamente no objeto, o JavaScript procura no protótipo do objeto e, recursivamente, nos protótipos dos protótipos."
Como você adiciona um event listener a um elemento HTML?,"Você pode adicionar um event listener a um elemento HTML usando o método `addEventListener()`. Por exemplo: `elemento.addEventListener('click', minhaFuncao);`"
Explique o uso do `map()` em arrays JavaScript.,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
Explique o uso do `filter()` em arrays JavaScript.,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
Explique o uso do `reduce()` em arrays JavaScript.,O método `reduce()` aplica uma função contra um acumulador e cada valor do array (da esquerda para a direita) para reduzi-lo a um único valor.
Qual a diferença entre `async` e `await` em JavaScript?,`async` é uma palavra-chave usada para declarar uma função assíncrona. `await` é usado dentro de uma função `async` para pausar a execução da função até que uma promise seja resolvida ou rejeitada.
O que são arrow functions em JavaScript (ES6)?,Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas têm uma sintaxe mais curta e não possuem seu próprio `this`.
O que é o operador spread (...) em JavaScript (ES6)?,O operador spread permite expandir um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados.
Qual a diferença entre `let` e `const` em JavaScript (ES6)?,`let` declara uma variável que pode ser reatribuída. `const` declara uma variável que não pode ser reatribuída após a inicialização.
Como você converte um objeto JavaScript em JSON?,Você pode usar `JSON.stringify(objeto)` para converter um objeto JavaScript em uma string JSON.
O que é um loop `for...in` em JavaScript?,O loop `for...in` itera sobre as propriedades enumeráveis de um objeto.
O que é um loop `for...of` em JavaScript (ES6)?,"O loop `for...of` itera sobre os valores de um objeto iterável, como um array, string, map, set, etc."
O que é `throw` em JavaScript?,A declaração `throw` lança uma exceção (um erro). Você pode usar `throw` para gerar erros personalizados.
O que é o modelo de eventos de bubbling em JavaScript?,"O bubbling é um modelo de propagação de eventos em que um evento acionado em um elemento dispara os manipuladores de eventos de seus elementos ancestrais (pai, avô, etc.) na árvore DOM."
O que é o modelo de eventos de capturing em JavaScript?,"O capturing é um modelo de propagação de eventos no qual o evento é primeiro capturado pelo elemento mais externo e propagado para dentro, até atingir o elemento de destino."
O que é a diferença entre `setTimeout()` e `setInterval()` em JavaScript?,`setTimeout()` executa uma função uma vez após um determinado atraso. `setInterval()` executa uma função repetidamente em intervalos de tempo regulares.
Como você pode limpar um timeout em JavaScript?,Você pode limpar um timeout usando o método `clearTimeout(idDoTimeout)`.
Como você pode limpar um interval em JavaScript?,Você pode limpar um interval usando o método `clearInterval(idDoInterval)`.
O que são template literals em JavaScript (ES6)?,Template literals são strings que permitem expressões embutidas. Eles são delimitados por backticks (`).
O que é o operador de coalescência nula (??) em JavaScript?,"O operador de coalescência nula (??) retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`, caso contrário, retorna o operando da esquerda."
O que é o encadeamento opcional (?.) em JavaScript?,"O encadeamento opcional (?.) permite acessar propriedades de um objeto que pode ser nulo ou indefinido sem causar um erro. Se a propriedade anterior for nula ou indefinida, a expressão retorna `undefined` em vez de lançar um erro."
O que são iterators e iterables em JavaScript (ES6)?,Um iterable é um objeto que pode ser iterado (usado em um loop `for...of`). Um iterator é um objeto que define como iterar sobre um iterable.
Como você pode copiar um objeto em JavaScript?,"Você pode usar o operador spread (`...`) para fazer uma cópia superficial (shallow copy) de um objeto. Para uma cópia profunda (deep copy), você pode usar `JSON.parse(JSON.stringify(objeto))`, mas isso não funciona para objetos com funções ou outros tipos não serializáveis em JSON.  Para casos complexos, bibliotecas especializadas são recomendadas."
Qual a diferença entre `let` e `var` no contexto de escopo de bloco?,"Variáveis declaradas com `var` têm escopo de função (ou escopo global se declaradas fora de uma função), enquanto variáveis declaradas com `let` têm escopo de bloco (limitado ao bloco de código em que são declaradas)."
Como você pode usar a API `localStorage` em JavaScript?,"A API `localStorage` permite armazenar dados no navegador do usuário de forma persistente. Você pode usar métodos como `localStorage.setItem()`, `localStorage.getItem()`, `localStorage.removeItem()` e `localStorage.clear()`."
Como você pode usar a API `sessionStorage` em JavaScript?,"A API `sessionStorage` é semelhante à `localStorage`, mas os dados são armazenados apenas durante a sessão do navegador e são perdidos quando a guia ou janela é fechada."
O que é o Regex (Expressões Regulares) em JavaScript?,Regex é uma sequência de caracteres que define um padrão de busca. É usada para corresponder e manipular texto.
O que são os métodos `test()` e `exec()` em Regex no JavaScript?,"O método `test()` retorna `true` se a expressão regular encontrar uma correspondência na string, caso contrário, retorna `false`. O método `exec()` retorna um array com a correspondência (e grupos de captura) ou `null` se não houver correspondência."
O que são grupos de captura em Regex no JavaScript?,Grupos de captura são partes da expressão regular delimitadas por parênteses `()`. Eles permitem extrair partes específicas da string que correspondem ao padrão.
O que são quantificadores em Regex no JavaScript?,"Quantificadores especificam quantas ocorrências de um caractere, grupo ou classe de caracteres devem estar presentes para que haja uma correspondência. Exemplos: `*` (zero ou mais), `+` (um ou mais), `?` (zero ou um), `{n}` (exatamente n), `{n,}` (n ou mais), `{n,m}` (entre n e m)."
O que são classes de caracteres em Regex no JavaScript?,"Classes de caracteres definem um conjunto de caracteres que podem corresponder. Exemplos: `[abc]` (qualquer um dos caracteres a, b ou c), `[^abc]` (qualquer caractere que não seja a, b ou c), `[a-z]` (qualquer letra minúscula), `\d` (qualquer dígito), `\w` (qualquer caractere alfanumérico ou underscore)."
O que são âncoras em Regex no JavaScript?,"Âncoras especificam uma posição na string onde a correspondência deve ocorrer. Exemplos: `^` (início da string), `$` (fim da string), `\b` (fronteira de palavra)."
Como você pode substituir partes de uma string usando Regex em JavaScript?,"Você pode usar o método `replace()` de uma string, passando uma expressão regular como primeiro argumento e a string de substituição como segundo argumento."
"O que é a diferença entre correspondência ""greedy"" e ""lazy"" em Regex no JavaScript?","Por padrão, quantificadores são ""greedy"", o que significa que eles tentam corresponder à maior quantidade possível de texto. Quantificadores ""lazy"" (seguidos por um `?`) tentam corresponder à menor quantidade possível de texto."
Como você pode lidar com erros CORS em JavaScript?,"Para lidar com erros CORS, o servidor deve configurar os cabeçalhos HTTP apropriados (especialmente o `Access-Control-Allow-Origin`) para permitir que o domínio de origem faça a requisição."
O que é XSS (Cross-Site Scripting)?,XSS é uma vulnerabilidade de segurança que permite que atacantes injetem scripts maliciosos em páginas web visualizadas por outros usuários.
Como você pode prevenir ataques XSS em JavaScript?,"Para prevenir ataques XSS, você deve escapar a entrada do usuário antes de exibi-la na página, usar Content Security Policy (CSP) e evitar usar `innerHTML` para inserir conteúdo gerado pelo usuário."
O que é um ataque CSRF (Cross-Site Request Forgery)?,CSRF é um ataque que força um usuário autenticado a executar ações indesejadas em um aplicativo web.
Como você pode prevenir ataques CSRF em JavaScript?,"Para prevenir ataques CSRF, você pode usar tokens CSRF (um token único gerado pelo servidor e incluído em cada formulário) ou SameSite cookies."
O que é o padrão de projeto Singleton em JavaScript?,O padrão Singleton garante que uma classe tenha apenas uma instância e fornece um ponto de acesso global a ela.
O que é o padrão de projeto Factory em JavaScript?,O padrão Factory fornece uma interface para criar objetos sem especificar suas classes concretas.
O que é o padrão de projeto Observer em JavaScript?,"O padrão Observer define uma dependência um-para-muitos entre objetos, de modo que, quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
O que é a diferença entre `Array.prototype.forEach()` e um loop `for` tradicional em JavaScript?,"`forEach()` é um método de array que executa uma função para cada elemento do array. Um loop `for` oferece mais controle, permitindo interromper ou continuar o loop, o que não é possível diretamente com `forEach()`."
O que é a diferença entre `Array.prototype.slice()` e `Array.prototype.splice()` em JavaScript?,"`slice()` retorna uma cópia de uma parte do array sem modificar o array original. `splice()` altera o array original, removendo ou substituindo elementos e/ou adicionando novos elementos."
O que é a diferença entre `encodeURI()` e `encodeURIComponent()` em JavaScript?,"`encodeURI()` codifica URIs, mas não codifica certos caracteres como `/`, `?`, `:`, `@`, `&`, `=`, `+`, `$`, e `#`. `encodeURIComponent()` codifica todos esses caracteres, tornando-o adequado para codificar partes de uma URI, como parâmetros de consulta."
O que são descriptors de propriedades em JavaScript?,"Descriptors de propriedades definem as características de uma propriedade de um objeto, como sua capacidade de ser escrita (`writable`), enumerada (`enumerable`) e configurada (`configurable`)."
Como você pode definir um descriptor de propriedade em JavaScript?,Você pode usar o método `Object.defineProperty()` para definir um descriptor de propriedade.
O que é a diferença entre `hasOwnProperty()` e `in` em JavaScript?,`hasOwnProperty()` retorna `true` se o objeto tiver a propriedade especificada como uma propriedade direta (não herdada). `in` retorna `true` se o objeto tiver a propriedade especificada como uma propriedade direta ou herdada.
O que são Symbols em JavaScript (ES6)?,Symbols são um tipo de dado primitivo que representa um identificador único e imutável. Eles são frequentemente usados como chaves de propriedades de objetos para evitar conflitos de nomes.
O que é a diferença entre uma string e um objeto String em JavaScript?,"Uma string é um tipo de dado primitivo. Um objeto String é uma instância da classe String. Embora as strings primitivas tenham acesso a métodos da classe String, elas não são objetos."
O que é o método `Number.isNaN()` em JavaScript (ES6)?,"`Number.isNaN()` determina se um valor é `NaN` (Not-a-Number). Ao contrário da função global `isNaN()`, `Number.isNaN()` não força o argumento a ser um número, tornando-o mais preciso."
O que são tagged template literals em JavaScript (ES6)?,Tagged template literals são uma forma mais avançada de template literals que permitem que você processe o template literal com uma função tag.
O que é a diferença entre `null` e `undefined` em JavaScript? (Repetição proposital para reforçar e variar a formulação),"`null` é uma atribuição, indicando que uma variável intencionalmente não possui valor. `undefined` indica que uma variável foi declarada, mas ainda não foi atribuído nenhum valor."
Qual a importância de usar ponto e vírgula (`;`) no final das declarações em JavaScript?,"Embora o JavaScript tenha ASI (Automatic Semicolon Insertion), a inserção automática de ponto e vírgula, é uma boa prática incluí-los explicitamente para evitar comportamentos inesperados e garantir a consistência do código. Em alguns casos, a falta de ponto e vírgula pode levar a erros sutis e difíceis de depurar."
O que são os metacaracteres em Regex no JavaScript?,"Metacaracteres são caracteres com significados especiais em expressões regulares. Alguns exemplos incluem: `.` (qualquer caractere, exceto nova linha), `^` (início da string), `$` (fim da string), `*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `[]` (conjunto de caracteres), `()` (grupo de captura), `\` (escape)."
Qual a diferença entre `map` e `forEach` ao iterar sobre um array?,"`map` retorna um novo array com os resultados da aplicação de uma função a cada elemento do array original. `forEach`, por outro lado, executa uma função para cada elemento do array, mas não retorna um novo array (retorna `undefined`). `forEach` é geralmente usado para efeitos colaterais (side effects) como modificar o array original ou realizar ações de I/O, enquanto `map` é usado para transformar os elementos do array."
O que significa imutabilidade em JavaScript e como você pode alcançá-la?,"Imutabilidade significa que um objeto ou valor não pode ser modificado após sua criação. Em JavaScript, você pode alcançar imutabilidade usando `const` para variáveis (mas isso impede apenas a reatribuição, não a modificação do objeto), `Object.freeze()`, ou usando bibliotecas como Immutable.js que fornecem estruturas de dados imutáveis."
Explique o conceito de pure functions em JavaScript.,Uma pure function (função pura) é uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais (não modifica o estado externo). Pure functions são mais fáceis de testar e prever.
O que é o princípio DRY (Don't Repeat Yourself) e como ele se aplica ao JavaScript?,"DRY é um princípio de desenvolvimento de software que afirma que ""cada parte do conhecimento deve ter uma representação única, inequívoca e confiável dentro de um sistema."" Em JavaScript, isso significa evitar código duplicado, criar funções reutilizáveis e usar abstrações para reduzir a redundância."
Explique a diferença entre programação imperativa e declarativa e como o JavaScript suporta ambos os paradigmas.,"Programação imperativa se concentra em *como* realizar uma tarefa, especificando cada etapa em detalhes. Programação declarativa se concentra em *o que* deve ser realizado, sem especificar como. JavaScript suporta ambos os paradigmas. Loops `for` e manipulação direta do DOM são exemplos de programação imperativa, enquanto o uso de `map`, `filter`, `reduce` e frameworks como React são exemplos de programação declarativa."
O que é debouncing em JavaScript e qual o seu caso de uso?,"Debouncing é uma técnica para limitar a taxa na qual uma função é executada. Ele agrupa várias chamadas de função em uma única chamada após um período de tempo. Um caso de uso comum é em campos de busca, onde você não quer fazer uma requisição ao servidor a cada tecla digitada, mas apenas após o usuário parar de digitar por um tempo."
O que é throttling em JavaScript e qual o seu caso de uso?,"Throttling é uma técnica para limitar a taxa máxima na qual uma função é executada. Ele garante que a função seja executada no máximo uma vez em um determinado período de tempo. Um caso de uso comum é em eventos de scroll, onde você não quer executar uma função intensiva a cada evento de scroll, mas apenas a cada, digamos, 100 milissegundos."
Como funciona a garbage collection em JavaScript?,"Garbage collection é o processo automático de liberar memória que não está mais sendo usada por um programa. Em JavaScript, o garbage collector geralmente usa o algoritmo de ""marcação e varredura"" (mark-and-sweep), onde ele identifica quais objetos não são mais acessíveis (marcados) e então libera a memória ocupada por esses objetos (varridos)."
O que são web sockets?,WebSockets fornecem canais de comunicação full-duplex sobre uma única conexão TCP. Eles permitem comunicação em tempo real entre um cliente e um servidor.
Explique o conceito de event delegation em JavaScript.,"Event delegation é uma técnica onde, em vez de adicionar event listeners a cada elemento individual, você adiciona um único event listener a um elemento pai. Quando um evento ocorre em um elemento filho, ele ""bolhas"" (bubbles) para cima no DOM e o event listener no pai pode detectar o evento e agir com base no elemento filho que o acionou. Isso pode melhorar o desempenho, especialmente com muitos elementos."
O que é a diferença entre usar `const` para declarar um array ou objeto e usar `Object.freeze()`?,"Usar `const` impede apenas que a *variável* seja reatribuída a um novo array ou objeto. Os elementos dentro do array ou as propriedades do objeto ainda podem ser modificados. `Object.freeze()` impede a modificação do *objeto* em si, tornando-o imutável."
O que é a propriedade `name` de uma função em JavaScript?,"A propriedade `name` de uma função retorna o nome da função, ou uma string vazia se a função for anônima."
"O que é o operador vírgula (`,`) em JavaScript?",O operador vírgula avalia ambos os operandos (da esquerda para a direita) e retorna o valor do último operando. É frequentemente usado em loops `for` ou em expressões onde várias operações precisam ser executadas em uma única linha.
O que é o método `String.prototype.padStart()` e `String.prototype.padEnd()` em JavaScript (ES2017)?,"`padStart()` preenche o início de uma string com um caractere especificado até atingir um comprimento determinado. `padEnd()` faz o mesmo, mas preenche o final da string."
O que são Number Separators (separadores numéricos) em JavaScript?,Number Separators permitem usar underscores (_) para melhorar a legibilidade de números literais. Exemplo: `1_000_000` é equivalente a `1000000`.
O que é o operador ** em JavaScript?,"O operador `**` é o operador de exponenciação. Ele eleva o primeiro operando à potência do segundo operando. Exemplo: `2 ** 3` é equivalente a `Math.pow(2, 3)`."
O que é o método `Array.prototype.flat()` em JavaScript (ES2019)?,O método `flat()` cria um novo array com todos os elementos de sub-arrays concatenados recursivamente até uma profundidade especificada.
O que é o método `Array.prototype.flatMap()` em JavaScript (ES2019)?,"O método `flatMap()` primeiro mapeia cada elemento usando uma função e então achata o resultado em um novo array. Ele é semanticamente equivalente a um `map()` seguido por um `flat()` de profundidade 1, mas é mais eficiente."
O que é `BigInt` em JavaScript (ES2020)?,`BigInt` é um tipo de dado numérico que pode representar inteiros com precisão arbitrária. É usado para representar números maiores que o limite máximo de `Number.MAX_SAFE_INTEGER`.
O que é o método `String.prototype.replaceAll()` em JavaScript (ES2021)?,"O método `replaceAll()` substitui todas as ocorrências de uma substring em uma string por outra substring. Diferente do `replace()`, que só substitui a primeira ocorrência (a menos que usado com uma expressão regular com o flag `g`)."
Qual a utilidade de usar um WeakMap ou WeakSet?,WeakMaps e WeakSets são úteis para armazenar metadados associados a objetos sem impedir que esses objetos sejam coletados pelo garbage collector. Isso é especialmente útil em cenários como armazenar informações de estado sobre elementos DOM.
Explique o conceito de short-circuit evaluation em JavaScript.,"Short-circuit evaluation (avaliação de curto-circuito) é um comportamento em JavaScript onde a avaliação de uma expressão lógica para assim que o resultado final for determinado. Por exemplo, em `A && B`, se `A` for `false`, `B` não será avaliado porque o resultado final será sempre `false`. Em `A || B`, se `A` for `true`, `B` não será avaliado porque o resultado final será sempre `true`."
"O que é ""Temporal Dead Zone"" (TDZ) em JavaScript e como ela se relaciona com `let` e `const`?","A ""Temporal Dead Zone"" (TDZ) é a área de um escopo onde uma variável declarada com `let` ou `const` existe, mas não pode ser acessada antes de sua declaração real no código. Tentar acessar uma variável dentro da TDZ resulta em um `ReferenceError`. Isso ajuda a evitar comportamentos inesperados e promove um código mais claro."
O que são Proxies em JavaScript (ES6)?,"Proxies permitem interceptar e personalizar operações fundamentais em objetos, como leitura, escrita, enumeração e invocação de funções. Eles fornecem uma maneira de criar metadados e comportamentos personalizados para objetos."
O que são Reflect em JavaScript (ES6)?,O objeto `Reflect` fornece métodos para interceptar operações JavaScript. Cada método de `Reflect` corresponde a um operador ou método interno da linguagem. Os métodos de `Reflect` podem ser usados em conjunto com `Proxy` para criar comportamentos personalizados para objetos.
O que é um mock em testes de JavaScript?,Um mock é uma simulação de um objeto ou função real usado em testes. Mocks permitem isolar a unidade que está
Explique o conceito de prototipagem em JavaScript.,"Em JavaScript, cada objeto tem um protótipo, que é outro objeto do qual herda propriedades e métodos. Quando uma propriedade é acessada em um objeto e não é encontrada diretamente, o JavaScript procura no protótipo do objeto e, se necessário, no protótipo do protótipo, e assim por diante, até encontrar a propriedade ou chegar ao protótipo `null`."
O que é o operador rest em JavaScript?,O operador rest (`...`) permite coletar múltiplos argumentos em uma função em um array. Ele também pode ser usado para coletar as propriedades restantes de um objeto durante a desestruturação.
O que é o `use strict` em JavaScript?,"`""use strict"";` é uma diretiva que ativa o modo estrito em JavaScript. O modo estrito impõe regras mais rigorosas e ajuda a evitar erros comuns."
O que é o conceito de event bubbling em JavaScript?,"Event bubbling é o processo em que um evento disparado em um elemento se propaga para seus elementos pai na árvore DOM, disparando o mesmo evento nesses elementos pai."
O que é o conceito de event capturing em JavaScript?,"Event capturing é o processo oposto ao event bubbling, onde o evento é capturado pelo elemento raiz da árvore DOM e se propaga para baixo até o elemento alvo."
Como você para um `setInterval()` em JavaScript?,"Você pode parar um `setInterval()` usando o método `clearInterval()`, passando o ID retornado pelo `setInterval()` como argumento."
Como você acessa e manipula cookies em JavaScript?,Você pode acessar e manipular cookies usando a propriedade `document.cookie`.
O que é o objeto `localStorage` em JavaScript?,"`localStorage` é uma API de armazenamento web que permite armazenar dados no navegador do usuário de forma persistente, mesmo após o fechamento do navegador."
O que é o objeto `sessionStorage` em JavaScript?,`sessionStorage` é uma API de armazenamento web que permite armazenar dados no navegador do usuário apenas durante a sessão atual do navegador. Os dados são perdidos quando o navegador é fechado.
O que é um array associativo em JavaScript?,"JavaScript não possui arrays associativos como em outras linguagens. Em vez disso, você usa objetos para criar estruturas de dados que mapeiam chaves para valores."
Como você ordena um array de números corretamente em JavaScript?,"Você pode ordenar um array de números corretamente usando o método `sort()` com uma função de comparação: `numeros.sort((a, b) => a - b);`"
O que é o método `indexOf()` em JavaScript?,"O método `indexOf()` retorna o primeiro índice em que um determinado elemento pode ser encontrado no array, ou -1 se não estiver presente."
O que é o método `lastIndexOf()` em JavaScript?,"O método `lastIndexOf()` retorna o último índice em que um determinado elemento pode ser encontrado no array, ou -1 se não estiver presente."
Como você gera um número aleatório inteiro dentro de um intervalo específico em JavaScript?,Você pode gerar um número aleatório inteiro dentro de um intervalo específico usando a seguinte fórmula: `Math.floor(Math.random() * (max - min + 1)) + min;`
O que é o encadeamento opcional (`?.`) em JavaScript?,"O operador de encadeamento opcional (`?.`) permite acessar propriedades de objetos que podem ser `null` ou `undefined` sem causar um erro. Se a propriedade existir, ele retorna o valor da propriedade; caso contrário, retorna `undefined`."
O que é o operador de atribuição de coalescência nula (`??=`) em JavaScript?,O operador de atribuição de coalescência nula (`??=`) atribui o valor do lado direito ao lado esquerdo somente se o lado esquerdo for `null` ou `undefined`.
Como você verifica se uma variável foi declarada em JavaScript?,A melhor forma é verificar se `typeof variável !== 'undefined'`. Tentar acessar uma variável não declarada diretamente resultará em um erro.
O que são geradores em JavaScript?,"Geradores são funções especiais que podem ser pausadas e retomadas, permitindo que produzam múltiplos valores ao longo do tempo. Eles são definidos usando a palavra-chave `function*` e a palavra-chave `yield`."
O que é o método `Symbol` em JavaScript?,`Symbol` é um tipo de dado primitivo que representa um identificador único. Símbolos são frequentemente usados como chaves de propriedade para evitar conflitos de nomes.
O que é o atributo `data-*` em HTML e como acessá-lo em JavaScript?,`data-*` são atributos personalizados que podem ser adicionados a elementos HTML para armazenar dados adicionais. Eles podem ser acessados em JavaScript usando a propriedade `dataset` do elemento. Exemplo: `elemento.dataset.meuDado`.
Como se implementa imutabilidade em arrays e objetos em JavaScript?,"Para arrays, usa-se métodos não mutáveis como `slice()`, `concat()`, `filter()`, `map()`, e o spread operator (`...`). Para objetos, usa-se `Object.assign()` ou o spread operator para criar cópias com alterações."
Qual o uso do método `trim()` em JavaScript?,O método `trim()` remove os espaços em branco do início e do final de uma string.
Qual a diferença entre as funções `encodeURI()` e `encodeURIComponent()` em JavaScript?,"`encodeURI()` codifica uma URI completa, enquanto `encodeURIComponent()` codifica um componente da URI. `encodeURIComponent()` codifica mais caracteres do que `encodeURI()`."
Explique o funcionamento do evento `requestAnimationFrame()` em JavaScript.,"`requestAnimationFrame()` agenda uma função para ser chamada antes do próximo repaint do navegador. É usado para animações suaves e eficientes, pois o navegador otimiza as chamadas para corresponder à taxa de atualização da tela."
O que é o objeto Proxy em JavaScript?,"O objeto `Proxy` permite criar um objeto que intercepta e personaliza operações fundamentais (por exemplo, leitura de propriedades, atribuição, enumeração, invocação de função, etc.)."
Qual a finalidade do método `Object.defineProperty()` em JavaScript?,"O método `Object.defineProperty()` define uma nova propriedade diretamente em um objeto ou modifica uma propriedade existente em um objeto, e retorna o objeto. Permite um controle preciso sobre as características da propriedade (configurável, enumerável, gravável, valor)."
O que são closures em JavaScript e qual a sua importância?,"Closures são a capacidade de uma função lembrar e acessar seu escopo léxico mesmo quando executada fora desse escopo. São importantes para encapsulamento de dados, criação de funções privadas e gerenciamento de estado."
O que é o objeto `arguments` em JavaScript e como ele funciona?,"`arguments` é um objeto semelhante a um array que está disponível dentro de funções que não são funções de seta (arrow functions). Ele contém todos os argumentos passados para a função, independentemente dos parâmetros definidos na sua declaração."
Descreva o que são Immediately Invoked Function Expressions (IIFE).,IIFE (Immediately Invoked Function Expression) é uma função JavaScript que é executada assim que é definida. A sintaxe é geralmente `(function() { ... })();` ou `( () => { ... } )();`. São úteis para criar escopos privados e evitar poluição do escopo global.
O que são template literals em JavaScript e qual a sua vantagem?,Template literals são strings delimitadas por crases (``). Permitem a interpolação de variáveis e expressões dentro da string usando `${expressao}`.  A vantagem é a legibilidade e facilidade de uso em comparação com a concatenação tradicional de strings.
O que é a palavra-chave `this` em JavaScript e como ela funciona?,"A palavra-chave `this` refere-se ao contexto de execução da função. Seu valor depende de como a função é chamada. Em funções globais, `this` geralmente se refere ao objeto global (window no navegador, global no Node.js). Em métodos de objetos, `this` se refere ao objeto que chamou o método. O comportamento de `this` pode ser alterado usando `call`, `apply` e `bind`."
"Explique a diferença entre `map`, `filter` e `reduce` em arrays JavaScript.",`map` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. `filter` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. `reduce` aplica uma função contra um acumulador e cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o operador spread (`...`) em JavaScript e para que serve?,"O operador spread (`...`) expande um iterável (como um array ou string) em locais onde múltiplos argumentos (para chamadas de função) ou múltiplos elementos (para literals de array) são esperados. Ele serve para clonar arrays/objetos, combinar arrays/objetos e passar argumentos variáveis para funções."
Explique o que são Promises em JavaScript e como elas são usadas para lidar com operações assíncronas.,"Promises são objetos que representam a eventual conclusão (ou falha) de uma operação assíncrona e seu valor resultante.  Elas têm três estados: pendente, resolvida (fulfilled) ou rejeitada (rejected). Promises usam os métodos `then` (para lidar com a resolução) e `catch` (para lidar com a rejeição) para gerenciar o resultado assíncrono."
O que são async/await em JavaScript e como eles simplificam o tratamento de Promises?,"`async` e `await` são sintaxes que facilitam o trabalho com Promises.  `async` declara uma função assíncrona, permitindo o uso de `await` dentro dela. `await` pausa a execução da função até que a Promise seja resolvida ou rejeitada, retornando o resultado da Promise. Eles tornam o código assíncrono mais legível e semelhante ao código síncrono."
"O que é a diferença entre `var`, `let` e `const` para declarar variáveis em JavaScript?","`var` tem escopo de função ou escopo global, permitindo o hoisting e a redeclaração dentro do mesmo escopo. `let` e `const` têm escopo de bloco, não permitem hoisting (embora sejam ""hoisted"" de maneira diferente), e `const` exige uma inicialização e não permite reatribuição após a inicialização."
Explique o que é o Prototype em JavaScript.,"Em JavaScript, cada objeto possui um Prototype. O Prototype é um outro objeto do qual o objeto herda propriedades e métodos. Isso permite a herança prototípica."
O que são getters e setters em JavaScript e como são usados?,Getters e setters são métodos especiais que permitem controlar o acesso a propriedades de um objeto. Um getter é usado para obter o valor de uma propriedade e um setter é usado para definir o valor de uma propriedade. Eles permitem a validação e o controle sobre o acesso e a modificação de propriedades.
Como você pode clonar um objeto em JavaScript? Quais as diferenças entre shallow copy e deep copy?,"Você pode clonar um objeto usando `Object.assign({}, obj)` (shallow copy) ou o operador spread `{...obj}` (shallow copy).  Shallow copy cria uma nova referência de objeto, mas as propriedades que são objetos ou arrays ainda apontam para os mesmos objetos/arrays originais. Deep copy cria uma nova cópia de todos os objetos e sub-objetos, garantindo que não haja referências compartilhadas. JSON.parse(JSON.stringify(obj)) é uma forma de deep copy, mas tem limitações."
Explique o conceito de event loop em JavaScript.,"O event loop é um mecanismo que permite que o JavaScript execute operações assíncronas sem bloquear o thread principal. Ele monitora a pilha de chamadas e a fila de tarefas, movendo tarefas da fila para a pilha quando a pilha está vazia."
O que são callbacks em JavaScript e qual o problema associado a eles (callback hell)?,"Callbacks são funções passadas como argumentos para outras funções e executadas após a conclusão da operação principal. Callback hell é o problema de aninhamento excessivo de callbacks, tornando o código difícil de ler e manter."
O que é a diferença entre `forEach()` e `map()` em JavaScript?,"Ambos iteram sobre um array, mas `forEach()` executa uma função para cada elemento sem retornar nada (retorna `undefined`), enquanto `map()` cria um novo array com os resultados da aplicação da função a cada elemento do array original."
O que é a diferença entre `substring()` e `slice()` em JavaScript?,"Ambos extraem uma parte de uma string, mas `substring()` trata os argumentos como índices iniciais e finais, enquanto `slice()` pode aceitar índices negativos (contando a partir do final da string). Se o segundo argumento de `substring()` for menor que o primeiro, eles serão trocados. `slice()` retorna uma string vazia se o índice de início for maior que o índice de término."
O que são tagged template literals em JavaScript?,"Tagged template literals são uma forma mais avançada de template literals onde você pode usar uma função (a ""tag"") para processar o template literal antes que ele seja avaliado. A função recebe um array de strings literais e um array de valores interpolados."
O que é o bloco `finally` em uma estrutura `try...catch...finally`?,"O bloco `finally` é executado sempre, independentemente de uma exceção ter sido lançada ou não no bloco `try`. Ele é usado para realizar tarefas de limpeza, como fechar conexões de banco de dados ou liberar recursos."
O que é o objeto `Error` em JavaScript e quais propriedades ele possui?,"`Error` é um objeto JavaScript que representa um erro. Ele tem propriedades como `name` (o nome do erro), `message` (uma mensagem descritiva do erro) e `stack` (o rastreamento da pilha de chamadas que levou ao erro)."
O que são erros do tipo `TypeError` em JavaScript?,"`TypeError` é um tipo de erro que ocorre quando uma operação é executada em um valor de tipo inesperado. Por exemplo, chamar um método em um valor que não é uma função."
O que são erros do tipo `ReferenceError` em JavaScript?,`ReferenceError` é um tipo de erro que ocorre quando você tenta usar uma variável que não foi declarada ou que está fora do escopo.
"O que é o modo estrito (`""use strict""`) em JavaScript e quais benefícios ele oferece?","`""use strict""` é um pragma que habilita o modo estrito em um script ou função. Ele impõe regras mais rigorosas, como proibir o uso de variáveis não declaradas, tornando o código mais seguro e menos propenso a erros."
O que é o método `Object.defineProperty()` em JavaScript e como ele é usado?,"`Object.defineProperty()` permite definir ou modificar uma propriedade diretamente em um objeto e definir suas características (por exemplo, se ela é enumerável, configurável ou gravável)."
O que é o método `valueOf()` em JavaScript?,`valueOf()` é um método que retorna o valor primitivo de um objeto. Ele é usado internamente pelo JavaScript quando um objeto precisa ser convertido em um valor primitivo.
O que é o método `toString()` em JavaScript?,`toString()` é um método que retorna uma representação de string de um objeto. Ele é usado internamente pelo JavaScript quando um objeto precisa ser convertido em uma string.
O que são objetos Blob em JavaScript?,"Um objeto Blob (Binary Large Object) representa dados brutos imutáveis, como imagens, áudio e vídeo. Ele pode ser usado para manipular e transmitir dados binários."
O que são Data URLs em JavaScript?,"Data URLs permitem incorporar dados diretamente em um documento HTML ou CSS usando o esquema `data:`. Por exemplo, você pode incorporar uma imagem diretamente no HTML usando um Data URL."
O que é a API Geolocation em JavaScript?,"A API Geolocation permite que os sites e aplicativos web acessem a localização geográfica do usuário, com a permissão do usuário."
O que são os métodos `every()` e `some()` em arrays JavaScript?,`every()` verifica se todos os elementos em um array passam em um teste fornecido por uma função. `some()` verifica se pelo menos um elemento em um array passa em um teste fornecido por uma função.
O que são default parameters em JavaScript?,Default parameters permitem definir valores padrão para parâmetros de função caso nenhum valor seja passado ou se `undefined` for passado como argumento.
O que é rest parameter em JavaScript?,"Rest parameter permite representar um número indefinido de argumentos como um array. Ele é usado com a sintaxe `...` (por exemplo, `function foo(...args) {}`)."
O que são arrow functions em JavaScript e quais são as diferenças em relação às funções regulares?,"Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas têm algumas diferenças em relação às funções regulares, como o comportamento de `this` (arrow functions não têm seu próprio `this`, herdam o `this` do escopo circundante) e a ausência do objeto `arguments`."
O que são classes em JavaScript e como elas funcionam?,Classes em JavaScript são uma forma de definir moldes para criar objetos. Elas são uma abstração sobre a herança prototípica e fornecem uma sintaxe mais clara para definir propriedades e métodos.
O que é herança em JavaScript e como ela é implementada usando classes?,"Herança é um mecanismo que permite que uma classe herde propriedades e métodos de outra classe (a classe pai). Em JavaScript, a herança é implementada usando a palavra-chave `extends` para indicar a classe pai."
O que é o método `Symbol()` em JavaScript?,`Symbol()` cria um valor único e imutável que pode ser usado como chave de propriedade de objeto. Símbolos são frequentemente usados para criar propriedades privadas ou para evitar colisões de nomes de propriedades.
O que é o tipo de dado `BigInt` em JavaScript?,"`BigInt` é um tipo de dado que permite representar números inteiros com precisão arbitrária, além dos limites do tipo `Number`."
O que são WeakMap e WeakSet em JavaScript?,"`WeakMap` e `WeakSet` são coleções que armazenam referências ""fracas"" a objetos. Isso significa que se um objeto armazenado em um `WeakMap` ou `WeakSet` não for mais referenciado por nenhum outro objeto, ele poderá ser coletado pelo coletor de lixo."
O que é internationalization (i18n) em JavaScript?,Internationalization (i18n) é o processo de projetar e desenvolver aplicativos para que possam ser adaptados a diferentes idiomas e regiões sem a necessidade de engenharia adicional.
O que é localization (l10n) em JavaScript?,"Localization (l10n) é o processo de adaptar um aplicativo internacionalizado para uma localidade específica, traduzindo texto, formatando datas, números e moedas, e ajustando outros aspectos culturais."
O que é a API Intl em JavaScript?,"A API Intl fornece objetos para formatação sensível ao idioma de datas, horas, números e moedas, bem como para comparação de strings sensível ao idioma."
O que é Unicode em JavaScript?,Unicode é um padrão para codificar caracteres que permite representar praticamente todos os caracteres usados em todas as línguas escritas. JavaScript usa Unicode internamente para representar strings.
Como você pode usar expressões regulares em JavaScript?,Você pode usar expressões regulares em JavaScript usando o objeto `RegExp` ou literais de expressão regular (envolvidos em barras `/`). Expressões regulares são usadas para corresponder padrões em strings.
O que são lookahead e lookbehind em expressões regulares em JavaScript?,"Lookahead e lookbehind são asserções que permitem corresponder um padrão com base em outro padrão que o precede ou o segue, sem incluir o padrão de lookahead/lookbehind na correspondência."
O que é a diferença entre `global` e `sticky` flags em expressões regulares em JavaScript?,A flag `global` (`g`) faz com que a expressão regular corresponda todas as ocorrências do padrão na string. A flag `sticky` (`y`) faz com que a expressão regular corresponda apenas a partir da posição atual na string.
Como você pode substituir todas as ocorrências de uma substring em uma string em JavaScript?,Você pode substituir todas as ocorrências de uma substring usando o método `replace()` com uma expressão regular com a flag `global` (`g`).
O que é Dynamic Import em JavaScript?,Dynamic Import (usando `import()`) permite carregar módulos JavaScript de forma assíncrona e sob demanda. Ele retorna uma Promise que é resolvida com o módulo importado.
O que são Reflect objects em JavaScript?,O objeto `Reflect` fornece métodos que são correspondentes às operações básicas da linguagem JavaScript. Eles podem ser usados para personalizar o comportamento padrão das operações.
O que é a diferença entre `setTimeout` e `setInterval` em JavaScript?,"`setTimeout` executa uma função uma vez após um atraso especificado. `setInterval` executa uma função repetidamente em intervalos regulares, até que seja interrompido usando `clearInterval`."
Como você pode cancelar um `setTimeout` em JavaScript?,"Você pode cancelar um `setTimeout` usando a função `clearTimeout()`, passando o ID do timeout como argumento."
Como você pode cancelar um `setInterval` em JavaScript?,"Você pode cancelar um `setInterval` usando a função `clearInterval()`, passando o ID do intervalo como argumento."
O que é requestAnimationFrame em JavaScript?,`requestAnimationFrame` é uma função do navegador que agenda uma função para ser executada antes da próxima repintura do navegador. É usado para animações suaves e eficientes.
O que é a API Canvas em JavaScript?,"A API Canvas fornece uma maneira de desenhar gráficos 2D usando JavaScript. Ela permite criar formas, imagens, texto e animações dinâmicas."
O que é SVG (Scalable Vector Graphics) em JavaScript?,SVG é um formato baseado em XML para descrever gráficos vetoriais. Você pode manipular elementos SVG usando JavaScript para criar gráficos interativos e dinâmicos.
O que são WebSockets em JavaScript?,WebSockets fornecem um canal de comunicação bidirecional full-duplex sobre uma única conexão TCP. Eles permitem a comunicação em tempo real entre um cliente e um servidor.
O que é Server-Sent Events (SSE) em JavaScript?,Server-Sent Events (SSE) permitem que um servidor envie atualizações para um cliente por meio de uma única conexão HTTP. É usado para transmitir dados em tempo real de um servidor para um cliente.
O que são IndexedDB em JavaScript?,IndexedDB é um banco de dados NoSQL orientado a objetos embutido no navegador. Ele permite armazenar grandes quantidades de dados estruturados e realizar consultas complexas.
O que é WebAssembly (Wasm) em JavaScript?,"WebAssembly (Wasm) é um formato binário para código executável que pode ser executado em navegadores web. Ele permite executar código de alto desempenho, como jogos e aplicativos gráficos intensivos, diretamente no navegador."
O que é polyfill em JavaScript?,Polyfill é um código que fornece funcionalidade moderna em navegadores mais antigos que não a suportam nativamente. Ele permite usar recursos mais recentes do JavaScript sem se preocupar com a compatibilidade com navegadores antigos.
O que são Linters em JavaScript?,"Linters são ferramentas que analisam o código JavaScript para identificar erros de sintaxe, erros de estilo e possíveis problemas de qualidade. Eles ajudam a manter o código limpo, consistente e livre de erros."
O que são bundlers em JavaScript?,"Bundlers são ferramentas que combinam vários arquivos JavaScript em um único arquivo (ou em alguns arquivos menores). Eles são usados para otimizar o carregamento de aplicativos web, reduzindo o número de requisições HTTP."
O que é ofuscação em JavaScript?,"Ofuscação é o processo de tornar o código JavaScript mais difícil de entender para proteger contra engenharia reversa. Ele envolve a renomeação de variáveis e funções, a remoção de comentários e a alteração da estrutura do código."
O que são testes unitários em JavaScript?,Testes unitários são testes automatizados que verificam se cada unidade individual de código (como uma função ou classe) funciona corretamente. Eles ajudam a garantir a qualidade e a confiabilidade do código.
O que são testes de integração em JavaScript?,Testes de integração verificam se diferentes partes do aplicativo funcionam corretamente juntas. Eles ajudam a garantir que as diferentes unidades de código se integrem bem e que o aplicativo funcione como um todo.
O que são testes end-to-end (E2E) em JavaScript?,Testes end-to-end (E2E) simulam o comportamento do usuário real para testar o aplicativo do início ao fim. Eles verificam se o aplicativo funciona corretamente em um ambiente real e se atende aos requisitos do usuário.
O que é TDD (Test-Driven Development) em JavaScript?,TDD (Test-Driven Development) é uma metodologia de desenvolvimento de software em que os testes são escritos antes do código. Isso ajuda a garantir que o código atenda aos requisitos e que seja fácil de testar.
O que é BDD (Behavior-Driven Development) em JavaScript?,BDD (Behavior-Driven Development) é uma metodologia de desenvolvimento de software que se concentra em definir o comportamento do aplicativo em termos de casos de uso. Os testes são escritos em uma linguagem natural que descreve o comportamento esperado do aplicativo.
O que é CI/CD (Continuous Integration/Continuous Delivery) em JavaScript?,"CI/CD (Continuous Integration/Continuous Delivery) é um conjunto de práticas de desenvolvimento de software que automatizam o processo de integração, teste e entrega de código. Isso permite que as equipes de desenvolvimento entreguem software de forma mais rápida e confiável."
O que são Git hooks em JavaScript?,"Git hooks são scripts que são executados automaticamente pelo Git antes ou depois de certos eventos, como commit, push ou receive. Eles podem ser usados para automatizar tarefas como verificação de estilo de código, execução de testes ou implantação de código."
O que é a diferença entre stateful e stateless components?,"Componentes stateful mantém o seu próprio estado, que pode mudar ao longo do tempo, enquanto componentes stateless apenas exibem dados recebidos como props e não gerenciam o próprio estado."
Qual é a diferença entre component composition e inheritance?,"Component composition envolve a criação de componentes maiores a partir de componentes menores, combinando sua funcionalidade, enquanto inheritance (herança) permite que uma classe herde propriedades e métodos de outra classe. Composition é geralmente preferível em React."
O que são pure functions?,Pure functions são funções que sempre retornam o mesmo resultado para as mesmas entradas e não têm efeitos colaterais.
O que é immutability?,"Immutability é o conceito de que os dados não devem ser modificados depois de criados. Em vez disso, novas cópias dos dados devem ser criadas com as alterações desejadas."
Qual é a diferença entre um controlled component e um uncontrolled component?,"Em um controlled component, os valores dos elementos de formulário são controlados pelo estado do componente React. Em um uncontrolled component, os valores dos elementos de formulário são armazenados diretamente no DOM e podem ser acessados usando refs."
O que é Higher Order Component (HOC)?,Um Higher Order Component (HOC) é uma função que recebe um componente como argumento e retorna um novo componente com funcionalidades adicionais.
O que são render props?,Render props são uma técnica para compartilhar código entre componentes React usando uma propriedade cujo valor é uma função.
O que é a Context API?,"A Context API permite que os componentes React acessem dados que são compartilhados por muitos componentes, sem precisar passar props manualmente em todos os níveis da árvore de componentes."
O que são Refs em JavaScript?,Refs permitem acessar diretamente um elemento DOM ou uma instância de um componente React em seu código.
O que são Events em JavaScript?,"Events são ações ou ocorrências que acontecem no sistema que você está programando, que o sistema informa para que você possa responder a eles de alguma forma, se desejar."
O que são Event Listeners em JavaScript?,Event Listeners esperam por um evento e respondem a ele.
O que é Event Bubbling e Event Capturing em JavaScript?,"Event Bubbling ocorre quando um evento é disparado em um elemento DOM aninhado, e o evento se propaga para cima na árvore DOM, disparando os manipuladores de eventos nos elementos pais. Event Capturing é o oposto de Event Bubbling."
O que é Event Delegation em JavaScript?,"Event Delegation é uma técnica em que, em vez de anexar ouvintes de evento a cada elemento individual, você anexa um único ouvinte de evento a um elemento pai."
O que é o padrão revealing module?,É um padrão de design em JavaScript que permite a criação de módulos com propriedades e métodos privados e públicos.
O que é Shadow DOM?,O Shadow DOM permite encapsular o código de um componente para que ele seja independente de outros componentes na página.
O que é Custom Elements?,Custom Elements permitem que você crie novos elementos HTML personalizados.
O que é o padrão de design singleton?,O padrão de design singleton é um padrão de design que garante que apenas uma instância de uma classe seja criada.
O que é hoisting em JavaScript e como funciona?,Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do seu escopo antes da execução do código. A declaração da variável (mas não sua inicialização) é movida para o topo.
O que é o conceito de closure em JavaScript?,"Um closure é a combinação de uma função e o ambiente léxico (escopo) em que essa função foi declarada. Isso permite que uma função acesse variáveis do escopo externo, mesmo depois que a função externa já tiver terminado de executar."
"Descreva o que é ""event bubbling"" e ""event capturing"" no DOM.","*Event Bubbling:* Quando um evento é disparado em um elemento, ele sobe pela árvore do DOM, disparando os mesmos eventos em seus elementos pais. *Event Capturing:* O evento desce pela árvore do DOM até chegar no elemento alvo.  É o oposto do bubbling."
"Explique a diferença entre `call`, `apply` e `bind` em JavaScript.","*`call` e `apply`:* Permitem invocar uma função com um determinado valor de `this` e argumentos. `call` recebe argumentos separados por vírgulas, enquanto `apply` recebe um array de argumentos. *`bind`:* Cria uma nova função que, quando chamada, terá o valor de `this` definido para o valor passado para `bind`."
"O que são Promises em JavaScript e como elas resolvem o ""callback hell""?","Promises são objetos que representam o resultado eventual (bem-sucedido ou com falha) de uma operação assíncrona.  Elas resolvem o ""callback hell"" permitindo encadear operações assíncronas de forma mais legível e organizada usando `.then()` e `.catch()`."
O que são async/await em JavaScript e como eles se relacionam com Promises?,`async/await` são açúcar sintático sobre Promises que tornam o código assíncrono mais fácil de ler e escrever. A palavra-chave `async` declara uma função assíncrona e `await` pausa a execução da função até que uma Promise seja resolvida.
O que é o operador `...` (spread operator) em JavaScript e como ele pode ser usado?,"O operador spread expande um iterável (como um array ou string) em elementos individuais. Ele pode ser usado para copiar arrays, combinar arrays, passar argumentos para funções e criar cópias superficiais de objetos."
O que é destructuring em JavaScript e como ele pode ser usado?,Destructuring é uma forma de extrair valores de objetos ou arrays e atribuí-los a variáveis de forma concisa.
"Qual a diferença entre `let`, `const` e `var` para declaração de variáveis?",*`var`:* Tem escopo de função ou global. Sofre hoisting. *`let`:* Tem escopo de bloco. Não sofre hoisting (temporal dead zone). *`const`:* Tem escopo de bloco. Não sofre hoisting. Deve ser inicializada na declaração e não pode ser reatribuída.
O que são arrow functions em JavaScript e qual a principal diferença em relação às funções tradicionais?,Arrow functions são uma sintaxe mais curta para escrever funções. A principal diferença é que arrow functions não têm seu próprio `this`. Eles herdam o `this` do escopo circundante.
Explique o conceito de Currying em JavaScript.,"Currying é uma técnica onde uma função que recebe múltiplos argumentos é transformada em uma sequência de funções que recebem um único argumento cada, retornando a próxima função na sequência até que todos os argumentos tenham sido fornecidos."
O que são Generators em JavaScript e como eles funcionam?,Generators são funções que podem ser pausadas e retomadas durante a execução. Elas usam a palavra-chave `yield` para pausar e retornar um valor.
O que são Iterators em JavaScript e como eles funcionam?,Iterators são objetos que definem uma sequência e um método para acessar cada item na sequência um por vez. Eles possuem um método `next()` que retorna um objeto com as propriedades `value` (o próximo valor na sequência) e `done` (um booleano indicando se a sequência terminou).
O que é o padrão Module em JavaScript e como ele pode ser implementado?,O padrão Module é uma forma de encapsular código para evitar conflitos de nomes e promover a reutilização. Pode ser implementado usando IIFE (Immediately Invoked Function Expression) ou com a sintaxe `import` e `export`.
Explique o que é o Shadow DOM.,"Shadow DOM permite encapsular uma árvore DOM dentro de um componente web, isolando-o do resto do documento. Isso evita conflitos de estilo e script."
O que são Web Components?,"Web Components são um conjunto de tecnologias que permitem criar elementos HTML personalizados e reutilizáveis. Eles incluem Custom Elements, Shadow DOM e HTML Templates."
O que são Custom Elements em Web Components?,Custom Elements permitem definir seus próprios elementos HTML personalizados com comportamentos específicos. Eles são criados estendendo a classe `HTMLElement`.
Como você define atributos personalizados em Web Components?,Definindo uma propriedade `observedAttributes` estática na classe do Custom Element e implementando o método `attributeChangedCallback`.
O que é um Proxy em JavaScript e como ele pode ser usado?,"Um Proxy é um objeto que permite interceptar e customizar operações fundamentais em um objeto alvo (como leitura, escrita, deleção de propriedades). Ele pode ser usado para validação, logging, virtualização e muito mais."
O que é Reflection em JavaScript e como ela se relaciona com Proxies?,"Reflection é uma API que fornece métodos para realizar operações fundamentais em objetos, como `Reflect.get`, `Reflect.set`, `Reflect.apply`, etc. Proxies usam Reflection para delegar as operações interceptadas ao objeto alvo."
O que são WeakMap e WeakSet em JavaScript e qual a diferença para Map e Set?,"WeakMap e WeakSet são versões de Map e Set que armazenam referências ""fracas"" aos seus elementos/chaves. Isso significa que, se não houver outras referências aos objetos armazenados em um WeakMap ou WeakSet, eles podem ser coletados pelo garbage collector, mesmo que ainda estejam presentes no WeakMap/WeakSet."
Como você pode clonar um array em JavaScript?,"Usando o operador spread: `[...array]`, o método `slice()`: `array.slice()` ou `Array.from(array)`."
O que são Expressões Regulares (Regular Expressions) em JavaScript?,"Expressões regulares são padrões usados para combinar combinações de caracteres em strings. Elas são usadas para pesquisa, substituição e validação de texto."
Quais são alguns dos métodos de string comuns que usam expressões regulares?,"`match()`, `replace()`, `search()`, `split()`."
O que é o método `localStorage` em JavaScript?,`localStorage` é uma API do navegador que permite armazenar dados no navegador do usuário de forma persistente (mesmo após o navegador ser fechado e reaberto).
O que é o método `sessionStorage` em JavaScript?,"`sessionStorage` é similar a `localStorage`, mas os dados são armazenados apenas durante a sessão do navegador (são apagados quando o navegador é fechado)."
"O que é o conceito de ""Event Delegation"" em JavaScript?",Event Delegation é uma técnica onde um manipulador de eventos é anexado a um elemento pai em vez de a cada elemento filho individual. Isso é útil quando os elementos filhos são adicionados dinamicamente.
Como você pode cancelar um `setTimeout()` ou `setInterval()`?,Usando `clearTimeout()` para cancelar um `setTimeout()` e `clearInterval()` para cancelar um `setInterval()`.
Como você altera o atributo de um elemento HTML usando JavaScript?,"Usando o método `setAttribute()` ou acessando diretamente a propriedade do elemento (por exemplo, `element.src = ""image.jpg""`)."
Como você adiciona um evento a um elemento HTML usando JavaScript?,Usando o método `addEventListener()`.
O que é o objeto `event` que é passado para um manipulador de eventos?,"O objeto `event` contém informações sobre o evento que foi disparado, como o tipo de evento, o elemento alvo e as coordenadas do mouse."
O que é a técnica de Debouncing em JavaScript?,Debouncing garante que uma função seja executada apenas após um certo período de inatividade. Útil para evitar chamadas excessivas em eventos como `keyup`.
O que é Throttling em JavaScript?,"Throttling garante que uma função seja executada no máximo uma vez dentro de um determinado período. Diferente de Debouncing, Throttling garante a execução em intervalos regulares."
O que é a função `eval()` em JavaScript e por que ela geralmente é evitada?,`eval()` avalia uma string como código JavaScript. Ela é geralmente evitada porque pode ser insegura (pode executar código malicioso) e pode ser mais lenta do que outras abordagens.
O que são strict mode em JavaScript e como habilitá-lo?,"Strict mode é uma forma de executar JavaScript com um conjunto mais restritivo de regras, tornando o código mais seguro e detectando erros potenciais. É habilitado adicionando a string `""use strict"";` no início de um script ou função."
Explique o conceito de prototypes em JavaScript.,"Em JavaScript, os objetos herdam propriedades de um ""protótipo"". Todo objeto tem um protótipo, que é outro objeto. Quando você tenta acessar uma propriedade em um objeto que não existe diretamente nesse objeto, o JavaScript procura no protótipo do objeto, e assim por diante, até chegar ao protótipo `null`."
Como você cria herança em JavaScript usando prototypes?,Definindo o protótipo de um objeto para uma instância de outro objeto ou usando `Object.create()`.
Como você cria herança entre classes em JavaScript?,Usando a palavra-chave `extends`.
Como você define métodos estáticos em classes JavaScript?,Usando a palavra-chave `static` antes da definição do método.
O que é Polimorfismo em JavaScript?,"Polimorfismo é a capacidade de um objeto assumir muitas formas. Em JavaScript, isso é geralmente implementado através de herança ou interfaces (embora JavaScript não tenha interfaces explícitas)."
O que são Generics em TypeScript e como eles podem ser simulados em JavaScript?,"Generics permitem escrever código que pode trabalhar com diferentes tipos sem precisar especificar o tipo exato antecipadamente. Em JavaScript puro, você não tem generics nativos, mas pode usar convenções de nomenclatura ou padrões de design para simular um comportamento similar."
O que são decorators em JavaScript (ainda que não totalmente implementados nativamente)?,"Decorators são uma proposta de sintaxe para modificar ou anotar classes, métodos, propriedades ou parâmetros. Eles são uma forma de adicionar metadados ou alterar o comportamento de uma classe/método/propriedade de forma declarativa. Eles ainda não são nativos em JavaScript, mas estão em estágio de proposta e podem ser transpiled com ferramentas como o Babel."
O que é Type Coercion em JavaScript?,Type Coercion é a conversão automática de um valor de um tipo de dado para outro (como de string para número) pelo JavaScript durante as operações. Isso pode levar a resultados inesperados se não for compreendido.
O que é um Symbol em JavaScript?,Um Symbol é um tipo de dado primitivo que representa um identificador único e imutável. Symbols são frequentemente usados como chaves de propriedade de objeto para evitar conflitos de nomes.
O que é um BigInt em JavaScript?,"BigInt é um tipo de dado primitivo que permite representar inteiros de precisão arbitrária, ou seja, inteiros que são maiores que o limite de `Number.MAX_SAFE_INTEGER`."
O que é Garbage Collection em JavaScript e como funciona?,"Garbage Collection é o processo automático de gerenciamento de memória em JavaScript, onde o motor JavaScript automaticamente libera a memória que não está mais sendo usada pelo programa."
O que é a stack (pilha) e o heap em JavaScript?,A stack é usada para armazenar valores primitivos e referências para objetos. O heap é usado para armazenar objetos (incluindo arrays e funções).
Como você pode cancelar uma requisição Fetch em JavaScript?,"Usando um `AbortController` e um sinal associado à requisição Fetch. Quando você chama `abort()` no `AbortController`, a requisição Fetch é cancelada."
O que é a diferença entre o uso de `map` vs `forEach` em arrays?,"`map` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array que o chamou. `forEach` executa uma dada função uma vez para cada elemento do array, sem retornar um novo array."
Explique o que é o método `Object.entries()` em JavaScript.,"O método `Object.entries()` retorna um array de arrays, onde cada array interno contém o par [chave, valor] de cada propriedade enumerável do objeto."
Como você pode converter um NodeList para um Array em JavaScript?,Usando `Array.from(nodeList)` ou `[...nodeList]` (spread operator).
Qual a diferença entre `querySelector` e `querySelectorAll`?,"`querySelector` retorna o primeiro elemento dentro do documento que corresponde ao seletor especificado, ou `null` se nenhum elemento for encontrado. `querySelectorAll` retorna um NodeList estático contendo todos os elementos que correspondem ao seletor."
"O que são ""named exports"" e ""default exports"" em JavaScript (ES Modules)?","*Named Exports:* Permitem exportar múltiplos valores (variáveis, funções, classes) de um módulo, cada um com seu próprio nome. *Default Exports:* Permitem exportar um único valor de um módulo como o export padrão."
Como você pode criar uma cópia profunda (deep copy) de um objeto em JavaScript?,"Uma forma é usando `JSON.parse(JSON.stringify(object))`. No entanto, isso não funciona para funções ou objetos com referências circulares. Bibliotecas como Lodash também oferecem funções de deep copy."
Explique o que são Template Literals tagged.,"São template literals prefixados por uma função. A função recebe um array com as strings literais e um array com os valores das expressões interpoladas, permitindo manipular a string de forma personalizada."
"O que é a ""Same-Origin Policy"" em JavaScript e por que ela é importante?",É uma restrição de segurança imposta pelos navegadores que impede que um script originário de um domínio acesse recursos de outro domínio. Isso é importante para proteger contra ataques como Cross-Site Scripting (XSS).
Como você pode contornar a Same-Origin Policy em JavaScript (CORS)?,"Usando Cross-Origin Resource Sharing (CORS), que permite que o servidor especifique quais domínios estão autorizados a acessar seus recursos."
O que é o `use strict` mode em JavaScript?,"`use strict` ativa um modo restrito em JavaScript, que impõe regras mais rígidas para o código."
Qual a diferença entre `Function.prototype.bind` e arrow functions em relação ao `this`?,"`Function.prototype.bind` cria uma nova função onde `this` é permanentemente definido para o valor fornecido. Arrow functions não têm seu próprio `this`, elas herdam o `this` do escopo léxico circundante."
Explique o conceito de Closures em JavaScript.,"Um closure é a combinação de uma função e o ambiente léxico (escopo) em que essa função foi declarada. Isso permite que a função acesse variáveis do escopo externo, mesmo depois que a função externa já tiver terminado de executar."
"O que é o conceito de ""Prototype Chain"" em JavaScript?","É o mecanismo pelo qual os objetos herdam propriedades de seus protótipos, que por sua vez também têm protótipos, formando uma cadeia até o protótipo `null`."
O que é o atributo `contentEditable` em HTML e como ele pode ser usado com JavaScript?,O atributo `contentEditable` permite que um elemento HTML seja editável diretamente no navegador. JavaScript pode ser usado para manipular o conteúdo e o comportamento de elementos com `contentEditable`.
O que é o padrão Publish-Subscribe (PubSub) em JavaScript?,Um padrão de design onde os objetos (publishers) emitem eventos (publicações) que são recebidos por outros objetos (subscribers) que se inscreveram para receber esses eventos.
O que é a diferença entre eventos síncronos e assíncronos em JavaScript?,"Eventos síncronos são processados imediatamente na ordem em que ocorrem. Eventos assíncronos são adicionados a uma fila e processados posteriormente, permitindo que o código continue a ser executado sem esperar que o evento seja concluído."
O que são cookies em JavaScript e como eles podem ser usados?,"Cookies são pequenos arquivos de texto que os sites podem armazenar no navegador do usuário. Eles são usados para armazenar informações sobre o usuário, como preferências, informações de login e rastreamento de atividade. JavaScript pode ser usado para ler e escrever cookies."
Como você pode impedir que o envio padrão de um formulário HTML ocorra em JavaScript?,Chamando `event.preventDefault()` no manipulador de eventos do envio do formulário.
O que é a diferença entre `attribute` e `property` no contexto do DOM?,*Attribute:* Definido no HTML. Inicializa as propriedades do DOM. *Property:* Definida no objeto DOM. Pode mudar dinamicamente via JavaScript.
Qual a utilidade do operador `void` em JavaScript?,"`void` avalia uma expressão e retorna `undefined`. É usado principalmente para evitar que uma expressão retorne um valor indesejado, especialmente em funções executadas em manipuladores de eventos."
O que são Web Workers e qual a sua utilidade?,"Web Workers permitem executar scripts JavaScript em threads de segundo plano, sem bloquear a thread principal da interface do usuário. São úteis para realizar tarefas pesadas computacionalmente, como processamento de imagem ou cálculos complexos."
O que é o Service Worker e qual o seu propósito?,"Service Workers são scripts que rodam em background e atuam como proxies entre o navegador e a rede. Eles permitem implementar funcionalidades como notificações push, cache offline e background sync."
Explique o conceito de Code Splitting em JavaScript.,"É uma técnica para dividir o código JavaScript em partes menores (chunks) que podem ser carregadas sob demanda, melhorando o desempenho inicial do site."
O que são as Data Attributes (data-*) em HTML e como acessá-las em JavaScript?,São atributos personalizados que podem ser adicionados a elementos HTML para armazenar dados adicionais. Eles são acessados em JavaScript usando a propriedade `dataset` do elemento.
O que é o atributo `nonce` em tags `<script>` e `<style>` e para que serve?,"O atributo `nonce` (Number Used Once) é um valor criptográfico usado para permitir que um script ou estilo seja executado apenas se corresponder ao valor configurado no servidor, prevenindo ataques XSS."
O que são Intersection Observers e como eles podem ser usados?,"Intersection Observers permitem observar quando um elemento HTML entra ou sai da viewport ou cruza com outro elemento. São úteis para implementar lazy loading, animações baseadas em scroll e rastreamento de visibilidade."
O que é a API WebSockets e para que serve?,"WebSockets fornecem um canal de comunicação full-duplex entre o navegador e o servidor, permitindo a troca de dados em tempo real."
O que é o objeto `Intl` em JavaScript e para que ele serve?,"`Intl` é um objeto nativo do JavaScript que fornece APIs para internacionalização, como formatação de datas, números e moedas de acordo com diferentes localidades."
O que é a API WebAssembly (Wasm) e como ela se relaciona com JavaScript?,"WebAssembly é um formato binário de código de baixo nível para execução em navegadores. Ele permite executar código em alta performance, e pode ser usado em conjunto com JavaScript para otimizar partes críticas de uma aplicação web."
O que é a API Streams em JavaScript?,"A API Streams fornece uma maneira de processar dados de forma assíncrona e eficiente, dividindo-os em pedaços (chunks). Ela é útil para lidar com grandes quantidades de dados, como arquivos ou streams de vídeo."
O que são OffscreenCanvas e qual o seu uso?,"OffscreenCanvas permite renderizar elementos Canvas fora da thread principal, evitando bloqueios na interface do usuário e melhorando o desempenho."
Explique o conceito de Atomics em JavaScript.,Atomics são operações que garantem que a leitura ou escrita de um valor na memória seja atômica (indivisível) e sincronizada entre diferentes threads (como Web Workers). Eles são usados para construir aplicações multithreaded seguras.
O que são WeakRefs e FinalizationRegistry em JavaScript?,"*WeakRefs:* Permitem manter uma referência fraca a um objeto, o que significa que o objeto pode ser coletado pelo garbage collector mesmo que a referência fraca ainda exista. *FinalizationRegistry:* Permite registrar uma função para ser executada quando um objeto referenciado por um WeakRef for coletado pelo garbage collector. São usados para lidar com recursos de forma mais precisa e evitar vazamentos de memória.

Espero que esta lista seja útil! Tentei evitar a repetição e focar em aspectos distintos de JavaScript."
"O que é ""hoisting"" em JavaScript e como ele afeta variáveis e funções?","Hoisting é o comportamento do JavaScript de mover declarações de variáveis (usando `var`) e funções para o topo de seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto funções declaradas com a palavra-chave `function` são hoisted completamente."
Descreva o que são arrow functions e quais são as suas principais diferenças em relação às funções tradicionais?,Arrow functions (funções de seta) são uma sintaxe mais curta para escrever funções. Elas diferem das funções tradicionais no contexto do `this` (arrow functions herdam o `this` do escopo circundante) e não possuem o objeto `arguments`. Também não podem ser usadas como construtoras (não podem ser usadas com `new`).
O que é o operador `typeof` em JavaScript e quais são os valores que ele pode retornar?,"`typeof` é um operador que retorna uma string indicando o tipo de dado de um operando. Os valores possíveis incluem ""undefined"", ""boolean"", ""number"", ""string"", ""symbol"", ""function"" e ""object"".  Note que `typeof null` retorna ""object"", o que é considerado um bug histórico."
O que é o método `preventDefault()` e quando ele é usado?,"`preventDefault()` é um método usado em objetos de evento para impedir o comportamento padrão associado ao evento. Por exemplo, em um evento de envio de formulário, ele pode impedir o envio do formulário."
O que são eventos em JavaScript e como você adiciona um ouvinte de eventos a um elemento?,"Eventos são ações ou ocorrências que acontecem no navegador (por exemplo, clique, mouseover, envio de formulário). Um ouvinte de eventos é uma função que é executada quando um evento específico ocorre em um elemento. Você pode adicionar um ouvinte de eventos usando `addEventListener()` ou atribuindo uma função a uma propriedade `on<event>` do elemento."
"O que são os métodos `then()`, `catch()` e `finally()` em Promises?","* `then()` é usado para lidar com o resultado de uma Promise resolvida.
    * `catch()` é usado para lidar com o resultado de uma Promise rejeitada.
    * `finally()` é executado independentemente de a Promise ser resolvida ou rejeitada."
Explique o que é `async/await` em JavaScript.,`async/await` é uma sintaxe para trabalhar com Promises de forma mais síncrona e legível. Uma função `async` retorna implicitamente uma Promise. `await` dentro de uma função `async` pausa a execução da função até que a Promise seja resolvida.
O que é JSON e como você converte um objeto JavaScript em JSON e vice-versa?,JSON (JavaScript Object Notation) é um formato de dados leve para troca de dados. Você pode converter um objeto JavaScript em JSON usando `JSON.stringify()` e converter JSON em um objeto JavaScript usando `JSON.parse()`.
"Qual a diferença entre `var`, `let` e `const` ao declarar variáveis?","* `var` tem escopo de função ou global.
    * `let` tem escopo de bloco.
    * `const` também tem escopo de bloco e deve ser inicializada na declaração. Variáveis `const` não podem ser reatribuídas, mas se forem objetos ou arrays, seu conteúdo pode ser modificado."
Como você adiciona ou remove classes CSS de um elemento HTML usando JavaScript?,"Você pode adicionar ou remover classes CSS de um elemento HTML usando a propriedade `classList` e seus métodos `add()`, `remove()` e `toggle()`."
Como você importa e exporta módulos em JavaScript?,Você pode exportar módulos usando `export` (named exports ou default exports) e importá-los usando `import`.
Qual a diferença entre `setTimeout()` e `setInterval()`?,"`setTimeout()` executa uma função uma vez após um atraso, enquanto `setInterval()` executa uma função repetidamente em intervalos regulares."
Como você interrompe um `setTimeout()` ou `setInterval()`?,Você pode interromper um `setTimeout()` usando `clearTimeout()` e um `setInterval()` usando `clearInterval()`.
Qual a diferença entre `isNaN()` e `Number.isNaN()`?,"`isNaN()` tenta converter o valor em um número antes de verificar se é `NaN`, enquanto `Number.isNaN()` verifica diretamente se o valor é `NaN` sem conversão."
Qual a diferença entre `encodeURIComponent()` e `encodeURI()`?,"`encodeURIComponent()` codifica mais caracteres do que `encodeURI()`. Ele é usado para codificar componentes individuais de um URI, enquanto `encodeURI()` é usado para codificar um URI completo."
O que é o método `eval()` em JavaScript e por que geralmente é desencorajado?,`eval()` avalia uma string como código JavaScript. É geralmente desencorajado porque pode ser perigoso para a segurança (permitindo a execução de código malicioso) e pode ser lento (porque o interpretador JavaScript precisa compilar o código em tempo de execução).
Explique o conceito de escopo em JavaScript.,"Escopo define a acessibilidade (visibilidade) das variáveis. Em JavaScript, existem escopo global, escopo de função e escopo de bloco (introduzido com `let` e `const`)."
"O que é o ""use strict"" em JavaScript?","""use strict"" é um pragma (diretiva) que habilita o modo estrito no JavaScript. O modo estrito impõe regras mais rígidas e ajuda a prevenir erros comuns."
O que são os métodos `test()` e `exec()` em expressões regulares?,"* `test()` retorna `true` se a expressão regular encontrar uma correspondência na string, e `false` caso contrário.
    * `exec()` retorna um array com informações sobre a correspondência ou `null` se não houver correspondência."
"O que são os métodos `match()`, `replace()` e `search()` em strings?","* `match()` retorna um array contendo as correspondências de uma string com uma expressão regular.
    * `replace()` retorna uma nova string com algumas ou todas as correspondências de um padrão substituídas por uma substituição.
    * `search()` retorna o índice da primeira correspondência de um padrão em uma string."
O que é o padrão de módulo revelador (revealing module pattern) em JavaScript?,"É um padrão de design que permite encapsular variáveis e funções privadas dentro de um módulo, expondo apenas um conjunto de funções públicas através de um objeto retornado."
O que é o método `getTime()` do objeto `Date`?,`getTime()` retorna o número de milissegundos decorridos desde 1º de janeiro de 1970 00:00:00 UTC para uma determinada data.
Como você compara duas datas em JavaScript?,"Você pode comparar duas datas usando seus valores numéricos obtidos com `getTime()` ou usando os operadores de comparação (`>`, `<`, `>=`, `<=`) diretamente nos objetos `Date`."
"O que são os métodos `Math.random()`, `Math.floor()`, `Math.ceil()` e `Math.round()`?","* `Math.random()` retorna um número pseudoaleatório entre 0 (inclusive) e 1 (exclusivo).
    * `Math.floor()` retorna o maior inteiro menor ou igual a um determinado número.
    * `Math.ceil()` retorna o menor inteiro maior ou igual a um determinado número.
    * `Math.round()` retorna o valor de um número arredondado para o inteiro mais próximo."
Como você gera um número inteiro aleatório entre um intervalo específico em JavaScript?,"Você pode usar a seguinte fórmula: `Math.floor(Math.random() * (max - min + 1)) + min`, onde `min` é o valor mínimo e `max` é o valor máximo."
Como você cria um objeto com um prototype específico em JavaScript?,Você pode criar um objeto com um prototype específico usando `Object.create(prototype)`.
O que é o tipo de dado Symbol em JavaScript?,`Symbol` é um tipo de dado primitivo introduzido no ES6 que representa um identificador único e imutável.
Qual é o propósito dos Symbols em JavaScript?,"Symbols são usados para criar propriedades únicas em objetos que não colidem com outras propriedades. Eles também são usados para definir comportamentos internos de objetos (por exemplo, iteradores)."
Como você define um generator em JavaScript?,Você define um generator usando a palavra-chave `function*`.
O que é o método `yield` em generators?,`yield` é usado para pausar a execução de um generator e retornar um valor. A execução do generator pode ser retomada posteriormente com o método `next()`.
Qual a diferença entre o loop `for...of` e o loop `for...in`?,"O loop `for...of` itera sobre os valores de um objeto iterável, enquanto o loop `for...in` itera sobre as chaves de um objeto."
O que são Maps em JavaScript?,Maps são coleções de pares chave-valor onde as chaves podem ser de qualquer tipo de dado (incluindo objetos). Maps lembram a ordem de inserção das chaves.
O que são Sets em JavaScript?,Sets são coleções de valores únicos. Sets lembram a ordem de inserção dos valores.
Como você adiciona um elemento a um Set em JavaScript?,Você adiciona um elemento a um Set usando o método `add()`.
Como você verifica se um elemento está presente em um Set em JavaScript?,Você verifica se um elemento está presente em um Set usando o método `has()`.
Como você remove um elemento de um Set em JavaScript?,Você remove um elemento de um Set usando o método `delete()`.
O que é hoisting de funções (function hoisting) em JavaScript?,Hoisting de funções significa que a declaração de uma função (declarada usando a palavra-chave `function`) é movida para o topo de seu escopo antes da execução do código. Isso permite que você chame a função antes de sua declaração no código.
O que é o spread operator em objetos JavaScript?,"O spread operator permite que você crie cópias rasas (shallow copies) de objetos ou combine múltiplos objetos em um novo objeto. Por exemplo: `const newObj = {...obj1, ...obj2};`"
O que é a propriedade `length` de uma string em JavaScript?,A propriedade `length` retorna o número de caracteres em uma string.
Qual a diferença entre `substring()` e `slice()` em strings JavaScript?,"`slice()` aceita índices negativos (contando a partir do final da string), enquanto `substring()` trata índices negativos como 0."
O que é o método `join()` de um array em JavaScript?,"O método `join()` junta todos os elementos de um array em uma string, usando um separador especificado."
O que é o método `push()` de um array em JavaScript?,O método `push()` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
O que é o método `pop()` de um array em JavaScript?,O método `pop()` remove o último elemento de um array e retorna esse elemento.
O que é o método `shift()` de um array em JavaScript?,O método `shift()` remove o primeiro elemento de um array e retorna esse elemento.
O que é o método `unshift()` de um array em JavaScript?,O método `unshift()` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
O que é o método `splice()` de um array em JavaScript?,O método `splice()` altera o conteúdo de um array removendo ou substituindo elementos existentes e/ou adicionando novos elementos no local.
O que é o método `concat()` de um array em JavaScript?,O método `concat()` retorna um novo array contendo a união de dois ou mais arrays.
O que é o método `reverse()` de um array em JavaScript?,O método `reverse()` inverte a ordem dos elementos em um array no local.
O que é o método `sort()` de um array em JavaScript?,"O método `sort()` ordena os elementos de um array no local e retorna o array ordenado. Por padrão, a ordenação é alfabética e por ordem crescente."
O que é a função `isNaN()` em JavaScript?,A função `isNaN()` determina se um valor é NaN (Not-a-Number). Note que ela tenta converter o argumento para um número antes do teste.
O que é um callback em JavaScript?,"Um callback é uma função passada como argumento para outra função, que é executada após alguma operação ser completada. Callbacks são frequentemente usados em operações assíncronas."
O que é a diferença entre programação síncrona e assíncrona em JavaScript?,"Em programação síncrona, as tarefas são executadas uma após a outra, bloqueando a execução até que cada tarefa seja concluída. Em programação assíncrona, múltiplas tarefas podem ser iniciadas sem esperar que a anterior termine, permitindo que o programa continue executando outras tarefas enquanto as operações assíncronas são processadas em segundo plano."
O que é um evento de propagação (event bubbling) em JavaScript?,"É o processo em que um evento disparado em um elemento do DOM se propaga para seus elementos pais na hierarquia do DOM, permitindo que os manipuladores de eventos associados a esses elementos pais também sejam executados."
"O que é o conceito de ""captura de evento"" (event capturing) em JavaScript?","Captura de evento é o processo oposto ao bubbling. Nesse caso, o evento é primeiro capturado pelo elemento ancestral mais externo e, em seguida, propagado para o elemento alvo."
Como você para a propagação de um evento em JavaScript?,Você pode parar a propagação de um evento chamando o método `stopPropagation()` no objeto de evento dentro do manipulador de eventos.
"O que é um ""memory leak"" (vazamento de memória) em JavaScript e como você pode evitá-los?","Um memory leak ocorre quando a memória que foi alocada por um programa não é liberada corretamente, levando ao consumo crescente de memória ao longo do tempo. Para evitá-los, certifique-se de remover referências desnecessárias a objetos, desalocar manipuladores de eventos, e usar técnicas de gerenciamento de memória eficientes."
"O que é o ""shadow DOM"" em JavaScript?","Shadow DOM é um padrão que fornece encapsulamento para componentes web, permitindo que eles tenham seu próprio DOM, estilos e comportamentos que são isolados do resto do documento."
"O que é o ""template element"" (`<template>`) em HTML e como ele é usado com JavaScript?",O elemento `<template>` permite armazenar trechos de HTML que não são renderizados inicialmente na página. O JavaScript pode ser usado para clonar e inserir o conteúdo do template no DOM quando necessário.
O que é o método `cloneNode()` em JavaScript?,O método `cloneNode()` cria uma cópia de um nó do DOM. Você pode especificar se quer uma cópia superficial (apenas o nó em si) ou uma cópia profunda (o nó e todos os seus descendentes).
"O que são os ""Web Workers"" em JavaScript?","Web Workers permitem que você execute scripts JavaScript em threads de fundo, separados da thread principal da interface do usuário. Isso pode melhorar o desempenho de aplicativos web, evitando o bloqueio da thread principal durante operações intensivas."
Como você se comunica entre o script principal e um Web Worker?,A comunicação entre o script principal e um Web Worker é feita por meio do método `postMessage()` e do evento `message`.
"O que são ""Service Workers"" em JavaScript?","Service Workers são scripts JavaScript que rodam em segundo plano no navegador, permitindo funcionalidades como notificações push, caching offline e sincronização em segundo plano. Eles atuam como um proxy entre o navegador e a rede."
Como funciona o operador `typeof` em JavaScript? Quais tipos ele pode retornar?,"`typeof` retorna uma string indicando o tipo de dado de um operando. Pode retornar: `""undefined""`, `""object""`, `""boolean""`, `""number""`, `""bigint""`, `""string""`, `""symbol""`, e `""function""`."
O que são template literals em JavaScript e como são usados?,Template literals são strings que permitem expressões embutidas. São delimitadas por backticks (`) e podem conter placeholders ( `${expressão}` ). São usados para interpolação de strings e strings multilinha.
Explique o que é o método `filter()` em arrays JavaScript.,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em arrays JavaScript e como ele é usado?,`reduce()` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.
O que são arrow functions em JavaScript e como elas diferem das funções tradicionais?,Arrow functions são uma forma mais concisa de escrever funções. Diferem das funções tradicionais principalmente no que diz respeito ao contexto de `this` (arrow functions herdam o `this` do escopo circundante) e na ausência do objeto `arguments`.
O que é destructuring em JavaScript e como pode ser usado com objetos e arrays?,Destructuring é uma expressão JavaScript que permite desempacotar valores de arrays ou propriedades de objetos em variáveis distintas.
Explique o conceito de `this` em JavaScript e como seu valor é determinado.,"`this` se refere ao objeto ""proprietário"" da função que está sendo executada. Seu valor é determinado de maneiras diferentes dependendo de como a função é chamada: globalmente, como método de um objeto, usando `call`, `apply` ou `bind`, ou como um construtor."
O que são Generators em JavaScript e como eles são usados?,"Generators são funções que podem ser pausadas e retomadas, permitindo que você produza múltiplos valores ao longo do tempo.  Usam a palavra-chave `yield`."
O que é o método `Object.keys()` em JavaScript e o que ele retorna?,`Object.keys()` retorna um array com os nomes das propriedades enumeráveis do próprio objeto (não herdadas).
Explique o que é o método `Object.values()` em JavaScript.,`Object.values()` retorna um array com os valores das propriedades enumeráveis do próprio objeto (não herdadas).
O que é o método `Object.entries()` em JavaScript e o que ele retorna?,"`Object.entries()` retorna um array de arrays, onde cada array interno contém o nome da propriedade e o valor correspondente de um objeto."
O que é o método `concat()` em arrays JavaScript e como ele é usado?,"`concat()` é usado para unir dois ou mais arrays. Este método não altera os arrays existentes, mas retorna um novo array, que contém os valores dos arrays unidos."
O que são objetos literais em JavaScript?,Objetos literais são uma forma de criar objetos em JavaScript usando a sintaxe `{ chave: valor }`.
O que é herança em classes JavaScript e como é implementada?,Herança permite que uma classe (subclasse ou classe filha) herde propriedades e métodos de outra classe (superclasse ou classe pai). É implementada usando a palavra-chave `extends`.
O que é o método `super()` em classes JavaScript e como ele é usado?,`super()` é usado dentro de uma subclasse para chamar o construtor da superclasse ou para acessar métodos da superclasse.
"O que é o conceito de ""modules"" em JavaScript (ES Modules)?",Módulos são arquivos de JavaScript que exportam e importam funcionalidades. Eles ajudam a organizar o código em unidades reutilizáveis e evitam conflitos de nomes.
O que é o objeto `Math` em JavaScript e alguns de seus métodos mais comuns?,"`Math` é um objeto embutido que fornece funções matemáticas e constantes. Métodos comuns incluem `Math.random()`, `Math.round()`, `Math.ceil()`, `Math.floor()`, `Math.max()`, `Math.min()`."
Como você gera um número aleatório entre um intervalo específico em JavaScript?,Você pode usar a seguinte fórmula: `Math.floor(Math.random() * (max - min + 1)) + min;`
O que são expressões regulares (RegEx) em JavaScript e para que são usadas?,"Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings. São usadas para busca, substituição e validação de texto."
Quais são alguns dos metacaracteres mais comuns em expressões regulares?,"Alguns metacaracteres comuns incluem `.` (qualquer caractere), `*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `^` (início da string), `$` (fim da string), `[]` (conjunto de caracteres), `()` (grupo de captura)."
O que é o método `test()` em expressões regulares e como ele é usado?,"`test()` executa uma pesquisa por uma correspondência entre uma expressão regular e uma string. Retorna `true` se a expressão regular encontrar uma correspondência na string, caso contrário, retorna `false`."
O que é o método `exec()` em expressões regulares e como ele é usado?,`exec()` executa uma pesquisa por uma correspondência em uma string especificada. Retorna um array com informações sobre a correspondência ou `null` se nenhuma correspondência for encontrada.
O que é o método `String.prototype.replace()` em JavaScript e como ele pode ser usado com expressões regulares?,`replace()` substitui uma parte de uma string por outra string. Pode usar uma string simples ou uma expressão regular como padrão de busca.
O que é o método `setTimeout()` em JavaScript e como ele funciona?,`setTimeout()` agenda a execução de uma função após um determinado período de tempo (em milissegundos).
O que é o método `setInterval()` em JavaScript e como ele funciona?,`setInterval()` repete a execução de uma função em intervalos regulares (em milissegundos).
Como você limpa um intervalo definido com `setInterval()` em JavaScript?,Você usa o método `clearInterval()` e passa o ID do intervalo retornado por `setInterval()` como argumento.
Como você limpa um timeout definido com `setTimeout()` em JavaScript?,Você usa o método `clearTimeout()` e passa o ID do timeout retornado por `setTimeout()` como argumento.
O que é o modelo de eventos do DOM?,É a forma como os eventos são propagados através da árvore do DOM. Existem duas fases principais: capturing e bubbling.
"Explique a fase de ""capturing"" no modelo de eventos do DOM.","Na fase de capturing, o evento viaja do elemento raiz do documento até o elemento alvo."
"Explique a fase de ""bubbling"" no modelo de eventos do DOM.","Na fase de bubbling, o evento viaja do elemento alvo até o elemento raiz do documento."
O que é o método `addEventListener()` em JavaScript e como ele é usado?,"`addEventListener()` anexa um manipulador de eventos a um elemento.  Ele recebe o tipo de evento, a função manipuladora e uma opção (geralmente para controlar a fase de captura)."
O que é o método `removeEventListener()` em JavaScript e como ele é usado?,"`removeEventListener()` remove um manipulador de eventos anexado com `addEventListener()`.  É importante passar os mesmos argumentos (tipo de evento, função manipuladora e opção) que foram usados para adicionar o evento."
O que é o objeto `event` em JavaScript e quais informações ele contém?,"O objeto `event` é passado para a função manipuladora de eventos e contém informações sobre o evento que ocorreu (por exemplo, o elemento alvo, o tipo de evento, coordenadas do mouse)."
O que é o método `preventDefault()` no objeto `event`?,"`preventDefault()` impede o comportamento padrão de um evento (por exemplo, impedir que um link redirecione para outra página ou que um formulário seja enviado)."
O que é o método `stopPropagation()` no objeto `event`?,`stopPropagation()` impede que o evento se propague para os elementos pai na árvore do DOM (impede o bubbling e o capturing).
O que é o objeto `target` no objeto `event`?,O `target` é uma propriedade do objeto `event` que se refere ao elemento que disparou o evento.
O que é o objeto `currentTarget` no objeto `event`?,O `currentTarget` é uma propriedade do objeto `event` que se refere ao elemento ao qual o manipulador de eventos está anexado.  Pode ser diferente do `target` durante o bubbling ou capturing.
Qual a diferença entre `document.querySelector()` e `document.querySelectorAll()`?,`document.querySelector()` retorna o primeiro elemento que corresponde ao seletor CSS especificado. `document.querySelectorAll()` retorna um NodeList contendo todos os elementos que correspondem ao seletor CSS especificado.
"Qual a diferença entre `textContent`, `innerHTML` e `innerText` ao modificar o conteúdo de um elemento?","`textContent` retorna o texto de um elemento e seus descendentes, incluindo tags `<script>` e `<style>`. `innerHTML` retorna o código HTML interno do elemento. `innerText` retorna o texto renderizado de um elemento, ignorando tags HTML e formatando o texto conforme exibido na tela."
Como você modifica as classes CSS de um elemento HTML usando JavaScript?,"Você pode usar a propriedade `classList` do elemento, que fornece métodos como `add()`, `remove()`, `toggle()` e `contains()` para manipular as classes CSS."
O que é o Local Storage em JavaScript e como ele é usado?,"Local Storage é um mecanismo de armazenamento web que permite armazenar dados no navegador do usuário de forma persistente (ou seja, os dados permanecem mesmo após o fechamento do navegador)."
O que é o Session Storage em JavaScript e como ele é usado?,"Session Storage é semelhante ao Local Storage, mas os dados são armazenados apenas durante a sessão do navegador (ou seja, os dados são perdidos quando o navegador é fechado)."
Quais são os métodos para interagir com o Local Storage e o Session Storage?,"Os métodos são: `setItem()` (para definir um valor), `getItem()` (para obter um valor), `removeItem()` (para remover um valor) e `clear()` (para limpar todo o armazenamento)."
O que é o método `JSON.stringify()` em JavaScript e como ele é usado?,`JSON.stringify()` converte um objeto JavaScript em uma string JSON. É usado para serializar dados antes de enviá-los para um servidor ou armazená-los no Local Storage.
O que é o método `JSON.parse()` em JavaScript e como ele é usado?,`JSON.parse()` converte uma string JSON em um objeto JavaScript. É usado para desserializar dados recebidos de um servidor ou recuperados do Local Storage.
Explique como o bloco `try...catch` funciona em JavaScript.,"O código dentro do bloco `try` é executado. Se um erro ocorrer, a execução é interrompida e o controle é transferido para o bloco `catch`, que manipula o erro."
Quais são alguns dos tipos de erro comuns em JavaScript?,"Alguns tipos de erro comuns incluem `TypeError`, `ReferenceError`, `SyntaxError`, `RangeError`, `URIError`."
"O que é o modo estrito (`""use strict"";`) em JavaScript e quais seus benefícios?","O modo estrito é uma forma de aplicar uma semântica mais restritiva ao JavaScript. Seus benefícios incluem: evita o uso de variáveis não declaradas, impede a atribuição a propriedades somente leitura, torna erros silenciosos em erros explícitos e desativa recursos que são considerados problemáticos."
O que é a diferença entre programação imperativa e programação declarativa?,"A programação imperativa foca em *como* realizar uma tarefa, especificando cada passo. A programação declarativa foca em *o que* realizar, expressando a lógica sem detalhar o fluxo de controle."
Dê um exemplo de programação imperativa e declarativa para filtrar números pares de um array.,"*   **Imperativo:**
    ```javascript
    const numeros = [1, 2, 3, 4, 5, 6];
    const pares = [];
    for (let i = 0; i < numeros.length; i++) {
      if (numeros[i] % 2 === 0) {
        pares.push(numeros[i]);
      }
    }
    ```
*   **Declarativo:**
    ```javascript
    const numeros = [1, 2, 3, 4, 5, 6];
    const pares = numeros.filter(numero => numero % 2 === 0);
    ```"
O que é a API Fetch em JavaScript e para que é utilizada?,A API Fetch fornece uma interface para buscar recursos pela rede. É uma alternativa mais moderna e flexível ao `XMLHttpRequest` para fazer requisições HTTP.
O que é o objeto `URLSearchParams` em JavaScript e como ele é utilizado?,"`URLSearchParams` é uma interface que fornece métodos para trabalhar com a string de consulta de uma URL. Ele permite criar, modificar e acessar facilmente os parâmetros de uma URL."
Como você cria um objeto `URLSearchParams` a partir de uma string de consulta?,"```javascript
const paramsString = 'chave1=valor1&chave2=valor2';
const searchParams = new URLSearchParams(paramsString);
```"
Como você obtém o valor de um parâmetro de consulta usando `URLSearchParams`?,"```javascript
const valor = searchParams.get('chave1'); // Retorna 'valor1'
```"
Como você adiciona um novo parâmetro de consulta usando `URLSearchParams`?,"```javascript
searchParams.append('chave3', 'valor3');
```"
O que é a função `encodeURIComponent()` em JavaScript e quando ela deve ser utilizada?,"A função `encodeURIComponent()` codifica um componente de URI (Uniform Resource Identifier) substituindo cada instância de certos caracteres por uma, duas, três ou quatro sequências de escape representando a codificação UTF-8 do caractere. Deve ser utilizada para garantir que os dados enviados em uma URL sejam válidos e não causem problemas de interpretação."
O que é a função `decodeURIComponent()` em JavaScript?,A função `decodeURIComponent()` decodifica um componente de URI que foi previamente codificado por `encodeURIComponent()`.
"O que são ""service workers"" em JavaScript e qual sua finalidade?","Service workers são scripts que rodam em background, separados da página web, e fornecem funcionalidades como notificações push, cache de conteúdo e suporte para funcionalidades offline. Eles atuam como um proxy entre a aplicação web e a rede."
"O que é o ""event loop"" em JavaScript?","O event loop é um mecanismo que permite ao JavaScript executar operações assíncronas sem bloquear a thread principal. Ele monitora a pilha de chamadas e a fila de tarefas, executando as tarefas da fila quando a pilha está vazia."
"Dê um exemplo de ""currying"" em JavaScript.","```javascript
function somar(a) {
  return function(b) {
    return a + b;
  }
}

const somar5 = somar(5);
console.log(somar5(3)); // Output: 8
```"
"O que é ""memoization"" em JavaScript?",Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras e retorna o resultado armazenado quando as mesmas entradas ocorrem novamente. Isso evita o recálculo desnecessário.
"Dê um exemplo de ""memoization"" em JavaScript.","```javascript
function memoize(fn) {
  const cache = {};
  return function(...args) {
    const argsString = JSON.stringify(args);
    if (cache[argsString]) {
      return cache[argsString];
    } else {
      const result = fn(...args);
      cache[argsString] = result;
      return result;
    }
  }
}

function somarLentamente(a, b) {
  // Simula um cálculo demorado
  for (let i = 0; i < 100000000; i++) {
    // Faz algo para gastar tempo
  }
  return a + b;
}

const memoizedSomarLentamente = memoize(somarLentamente);

console.time('Primeira Chamada');
console.log(memoizedSomarLentamente(2, 3)); // Leva tempo para calcular
console.timeEnd('Primeira Chamada');

console.time('Segunda Chamada');
console.log(memoizedSomarLentamente(2, 3)); // Retorna do cache instantaneamente
console.timeEnd('Segunda Chamada');
```"
"O que é a diferença entre ""shallow copy"" (cópia superficial) e ""deep copy"" (cópia profunda) em JavaScript?","Uma ""shallow copy"" cria uma nova referência para os mesmos objetos aninhados do objeto original. Modificar um objeto aninhado na cópia superficial afetará o objeto original, e vice-versa. Uma ""deep copy"" cria cópias completamente independentes de todos os objetos aninhados, de forma que modificar a cópia não afetará o original."
"Como você pode realizar uma ""deep copy"" de um objeto em JavaScript?","Uma forma comum é usar `JSON.parse(JSON.stringify(objeto))`.  No entanto, isso não funciona para objetos que contêm funções, datas ou instâncias de classes personalizadas.  Para casos mais complexos, pode ser necessário usar bibliotecas externas ou implementar uma função de cópia recursiva."
Dê um exemplo de uso do operador `??` em JavaScript.,"```javascript
const valor = null ?? 'Valor Padrão'; // valor será 'Valor Padrão'
const valor2 = 0 ?? 'Valor Padrão';   // valor2 será 0 (ao contrário de || que retornaria 'Valor Padrão')
```"
Dê um exemplo de uso do operador `?.` em JavaScript.,"```javascript
const objeto = {
  prop1: {
    prop2: 'Valor'
  }
};

const valor = objeto?.prop1?.prop2; // valor será 'Valor'

const objeto2 = null;
const valor2 = objeto2?.prop1?.prop2; // valor2 será undefined, sem causar erro
```"
"O que são ""template string tags"" em JavaScript?",Template string tags são funções que podem ser usadas para processar template literals. Elas permitem personalizar a interpolação de strings e realizar transformações específicas nos valores interpolados.
"Dê um exemplo de uso de ""template string tags"" em JavaScript.","```javascript
function formatarMoeda(strings, valor) {
  const moedaFormatada = new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(valor);
  return `${strings[0]}${moedaFormatada}${strings[1]}`;
}

const valorProduto = 1299.99;
const mensagem = formatarMoeda`O preço é: ${valorProduto}.`;
console.log(mensagem); // Output: O preço é: R$ 1.299,99.
```"
"O que é o ""Proxy object"" em JavaScript e para que é utilizado?","O objeto `Proxy` permite interceptar e customizar operações fundamentais em outros objetos (o ""target""). Ele pode ser usado para validação, log, virtualização e outras tarefas de metaprogramação."
"Dê um exemplo de uso do ""Proxy object"" em JavaScript.","```javascript
const target = {
  nome: 'Original'
};

const handler = {
  get: function(target, prop, receiver) {
    console.log(`Acessando a propriedade: ${prop}`);
    return Reflect.get(...arguments);
  },
  set: function(target, prop, value, receiver) {
    console.log(`Definindo a propriedade: ${prop} com o valor: ${value"
O que é coerção de tipo (type coercion) em JavaScript e dê um exemplo.,"Coerção de tipo é a conversão automática de um tipo de dado para outro (por exemplo, de string para número) durante uma operação. Exemplo: `'5' + 2` resulta em `'52'` devido à coerção do número 2 para string."
O que são template literals e como são usados?,Template literals são strings delimitadas por backticks (``) que permitem a interpolação de expressões JavaScript usando `${expressão}`. Simplificam a concatenação de strings e a incorporação de variáveis.
O que são arrow functions e quais são suas principais diferenças em relação às funções regulares?,"Arrow functions são uma sintaxe mais curta para funções. Diferenças principais: não possuem seu próprio `this`, `arguments`, `super` ou `new.target`. São sempre anônimas e não podem ser usadas como construtoras."
O que são promises em JavaScript e como elas lidam com operações assíncronas?,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas têm três estados: pendente, resolvida (fulfilled) e rejeitada (rejected). Usam `.then()` para lidar com a resolução e `.catch()` para lidar com a rejeição."
O que é a palavra-chave `async` e `await` e como elas se relacionam com promises?,"`async` é usada para declarar uma função assíncrona, que implicitamente retorna uma promise. `await` é usado dentro de uma função `async` para pausar a execução até que uma promise seja resolvida. Tornam o código assíncrono mais legível e semelhante ao código síncrono."
O que são JSON (JavaScript Object Notation) e como são usados em JavaScript?,"JSON é um formato de dados leve e baseado em texto usado para transmitir dados. Em JavaScript, é usado para representar objetos e arrays. Métodos como `JSON.stringify()` (converte um objeto JavaScript para JSON) e `JSON.parse()` (converte JSON para um objeto JavaScript) são usados para manipular JSON."
O que é o método `map()` em JavaScript e como ele é usado?,`map()` é um método de array que cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `filter()` em JavaScript e como ele é usado?,`filter()` é um método de array que cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em JavaScript e como ele é usado?,`reduce()` é um método de array que aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o método `forEach()` em JavaScript e como ele é usado?,"`forEach()` é um método de array que executa uma função fornecida uma vez para cada elemento do array. Diferente de `map()`, não retorna um novo array."
O que são High-Order Functions (Funções de ordem superior) em JavaScript?,"Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam outras funções como resultado. Exemplos: `map()`, `filter()`, `reduce()`."
O que é o modo estrito (`strict mode`) em JavaScript e quais seus benefícios?,"`strict mode` é uma forma de executar o JavaScript com um conjunto mais restrito de regras. Ajuda a evitar erros comuns, tornando o código mais seguro e fácil de manter. É ativado adicionando `""use strict"";` no início de um script ou função."
O que são expressões regulares (RegEx) em JavaScript e como são usadas?,"Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings. São usadas para validação de dados, busca e substituição de texto."
Quais são algumas flags comuns usadas em expressões regulares?,"`g` (global - encontra todas as correspondências), `i` (case-insensitive - ignora maiúsculas e minúsculas), `m` (multiline - permite correspondências em várias linhas)."
Como funciona o operador ternário em JavaScript?,O operador ternário é uma forma concisa de escrever uma instrução `if...else`. A sintaxe é `condição ? expressão_se_verdadeira : expressão_se_falsa`.
Qual a diferença entre `slice()` e `splice()` em JavaScript?,"`slice()` retorna uma cópia de uma parte de um array, sem modificar o array original. `splice()` modifica o array original removendo, substituindo ou adicionando elementos."
Como cancelar um `setTimeout()` ou `setInterval()` em JavaScript?,Usando `clearTimeout()` para cancelar um `setTimeout()` e `clearInterval()` para cancelar um `setInterval()`. Ambos recebem o ID retornado por `setTimeout()` ou `setInterval()` como argumento.
O que é o objeto `console` em JavaScript e quais são alguns de seus métodos?,"`console` é um objeto nativo em JavaScript que fornece acesso ao console de depuração do navegador (ou ambiente de execução). Alguns métodos comuns incluem: `console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`."
O que é o método `console.time()` e `console.timeEnd()` em JavaScript?,"`console.time()` inicia um cronômetro com um nome especificado, e `console.timeEnd()` para o cronômetro e exibe o tempo decorrido no console. São usados para medir o tempo de execução de um bloco de código."
Quais são os tipos de erros comuns em JavaScript?,"`TypeError`, `ReferenceError`, `SyntaxError`, `RangeError`, `URIError`, `EvalError`."
Como lançar um erro manualmente em JavaScript?,"Usando a palavra-chave `throw` seguida por um objeto de erro (por exemplo, `throw new Error('Mensagem de erro');`)."
O que é a fase de bubbling em eventos DOM?,"Na fase de bubbling, um evento que ocorre em um elemento HTML se propaga para cima na árvore DOM, acionando os ouvintes de evento em seus elementos pai."
O que é a fase de capturing em eventos DOM?,"Na fase de capturing, um evento que ocorre em um elemento HTML se propaga para baixo na árvore DOM, acionando os ouvintes de evento em seus elementos pai que foram registrados para capturar o evento."
O que é o objeto `event` em um manipulador de evento (event handler)?,"O objeto `event` contém informações sobre o evento que ocorreu. Ele fornece acesso a propriedades como o tipo de evento, o elemento que disparou o evento e dados específicos do evento."
O que é o método `stopImmediatePropagation()` do objeto `event`?,`stopImmediatePropagation()` impede que o evento se propague para cima na árvore DOM (fase de bubbling) e impede que outros ouvintes de evento no mesmo elemento sejam executados.
O que é delegação de eventos (event delegation)?,Delegação de eventos é uma técnica em que um único ouvinte de evento é anexado a um elemento pai para lidar com eventos que ocorrem em seus elementos filhos. É útil para lidar com muitos elementos filhos ou elementos que são adicionados dinamicamente.
O que são módulos em JavaScript (ESM)?,Módulos são arquivos JavaScript que podem importar e exportar funcionalidades para outros arquivos. Eles ajudam a organizar e reutilizar o código.
Como importar e exportar módulos em JavaScript?,Usando as palavras-chave `import` para importar e `export` para exportar.
Quais são os tipos de exportação em JavaScript?,Exportações nomeadas (named exports) e exportações padrão (default exports).
O que são objetos globais em JavaScript? Dê alguns exemplos.,"Objetos globais são objetos que estão sempre disponíveis em qualquer escopo em um ambiente JavaScript. Exemplos incluem `window` (em navegadores), `global` (em Node.js), `Math`, `JSON`, `console`."
O que é a função `eval()` em JavaScript e por que seu uso é geralmente desaconselhado?,"`eval()` executa uma string como código JavaScript. Seu uso é geralmente desaconselhado porque pode ser inseguro (permitindo a execução de código malicioso), ineficiente e difícil de depurar."
O que são Cookies em JavaScript e como eles são usados?,"Cookies são pequenos arquivos de texto que são armazenados no navegador do usuário por um site. São usados para rastrear informações sobre o usuário, como preferências, informações de login e histórico de navegação."
Como acessar e manipular Cookies em JavaScript?,Usando a propriedade `document.cookie`.
O que é a propriedade `length` de um array em JavaScript?,A propriedade `length` retorna o número de elementos em um array.
Como inverter a ordem dos elementos em um array em JavaScript?,Usando o método `reverse()`.
O que é o método `flat()` em JavaScript?,`flat()` cria um novo array com todos os sub-arrays concatenados recursivamente até a profundidade especificada.
O que é o método `flatMap()` em JavaScript?,"`flatMap()` mapeia cada elemento usando uma função de mapeamento e, em seguida, nivela o resultado em um novo array. É equivalente a `map()` seguido por `flat()` com profundidade 1."
O que é o objeto `WeakMap` em JavaScript e como ele difere de um `Map`?,"`WeakMap` é uma coleção de pares chave-valor onde as chaves devem ser objetos e são fracamente referenciadas. Isso significa que se a chave não for referenciada em nenhum outro lugar, ela pode ser coletada pelo garbage collector, e o par chave-valor será removido do `WeakMap`. Diferentemente de `Map`, `WeakMap` não possui os métodos `size`, `keys`, `values` e `entries`, e não é iterável."
O que é o objeto `WeakSet` em JavaScript e como ele difere de um `Set`?,"`WeakSet` é uma coleção de objetos fracamente referenciados. Similar ao `WeakMap`, se um objeto em um `WeakSet` não for referenciado em nenhum outro lugar, ele pode ser coletado pelo garbage collector e removido do `WeakSet`. Diferentemente de `Set`, `WeakSet` não possui a propriedade `size` e não é iterável."
O que são memory leaks em JavaScript e como evitá-los?,"Memory leaks ocorrem quando a memória que não está mais sendo usada não é liberada pelo garbage collector, resultando em um aumento gradual do uso de memória pelo programa. Para evitá-los, é importante remover referências desnecessárias a objetos, evitar variáveis globais excessivas, gerenciar eventos corretamente e evitar closures que retêm referências a objetos grandes."
O que é immutability em JavaScript e por que é importante?,"Immutability significa que um objeto não pode ser modificado após sua criação. Em vez de modificar um objeto existente, uma nova cópia é criada com as alterações. A imutabilidade torna o código mais previsível, fácil de depurar e testar, e ajuda a evitar efeitos colaterais indesejados."
Como criar objetos imutáveis em JavaScript?,"Usando `Object.freeze()`, `Object.seal()`, ou bibliotecas como Immutable.js. O spread operator (...) também pode ser usado para criar cópias superficiais de objetos imutáveis."
Qual a diferença entre `Object.freeze()` e `Object.seal()` em JavaScript?,"`Object.freeze()` torna um objeto completamente imutável: suas propriedades não podem ser adicionadas, removidas ou modificadas. `Object.seal()` impede que novas propriedades sejam adicionadas ou removidas, mas permite que as propriedades existentes sejam modificadas."
O que é type hinting (ou type annotations) em JavaScript e como pode ser implementado?,"Type hinting, também conhecido como type annotations, é a prática de adicionar informações sobre os tipos de dados esperados para variáveis, parâmetros de funções e valores de retorno em JavaScript. JavaScript não tem type hinting nativo, mas pode ser implementado usando JSDoc, TypeScript ou Flow."
O que são JSDoc annotations e como são usadas para type hinting em JavaScript?,JSDoc annotations são comentários especiais no código JavaScript que são usados para documentar o código e fornecer informações sobre os tipos de dados. Eles são lidos por ferramentas de documentação e editores de código para fornecer informações de tipo e auto-complete.
O que é uma variável privada em JavaScript e como ela pode ser implementada?,"Variáveis privadas são variáveis que só podem ser acessadas de dentro da classe ou função onde são definidas. Em JavaScript, a privacidade é geralmente implementada usando closures (para variáveis com escopo de função) ou símbolos (para propriedades de objetos com escopo de classe)."
O que é o padrão de projeto Module Pattern em JavaScript e como ele é usado para criar módulos com variáveis privadas?,O Module Pattern é um padrão de projeto que usa closures para criar módulos com variáveis privadas e métodos públicos. Ele envolve uma função anônima que é executada imediatamente (IIFE - Immediately Invoked Function Expression). A função retorna um objeto com métodos públicos que têm acesso às variáveis privadas dentro do escopo da função.
O que são Symbols em JavaScript e como eles são usados para criar propriedades privadas em objetos?,"Symbols são um tipo de dado primitivo único e imutável que pode ser usado como chaves de propriedades de objetos. Como os Symbols são únicos, eles podem ser usados para criar propriedades privadas em objetos, pois não podem ser acessados ou sobrescritos acidentalmente por outro código."
O que são proxies em JavaScript e como eles podem ser usados?,"Proxies são objetos que permitem interceptar e personalizar operações fundamentais em outros objetos, como acesso a propriedades, atribuições, chamadas de função e construção de novos objetos. Eles podem ser usados para validação de dados, rastreamento de acesso, virtualização de objetos e muito mais."
O que é o padrão de projeto Observer Pattern em JavaScript e como ele é usado?,"O Observer Pattern é um padrão de projeto que define uma dependência um-para-muitos entre objetos, de forma que quando um objeto (o sujeito) muda de estado, todos os seus dependentes (os observadores) são notificados e atualizados automaticamente. É usado para implementar sistemas de eventos, interfaces de usuário dinâmicas e arquiteturas orientadas a eventos."
O que é o padrão de projeto Factory Pattern em JavaScript e como ele é usado?,"O Factory Pattern é um padrão de projeto que fornece uma interface para criar objetos, mas permite que as subclasses decidam qual classe instanciar. É usado para abstrair o processo de criação de objetos e para criar objetos com base em diferentes condições ou configurações."
O que é o padrão de projeto Singleton Pattern em JavaScript e como ele é usado?,"O Singleton Pattern é um padrão de projeto que garante que uma classe tenha apenas uma instância e fornece um ponto de acesso global a essa instância. É usado para controlar o acesso a recursos compartilhados, como configurações, bancos de dados e caches.

Espero que esta lista de perguntas e respostas exclusivas seja útil!"
O que é hoisting em JavaScript e como ele afeta as variáveis declaradas com `let` e `const`?,"Hoisting é o comportamento do JavaScript de mover declarações para o topo do escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com valor `undefined`, enquanto `let` e `const` são hoisted, mas não inicializadas. A tentativa de acessar `let` ou `const` antes da declaração resulta em um `ReferenceError`, a chamada ""Temporal Dead Zone""."
O que é o operador spread (`...`) e como ele pode ser usado com arrays e objetos?,"O operador spread (`...`) expande um iterável (como um array ou string) em elementos individuais ou um objeto em pares chave-valor individuais. Ele pode ser usado para copiar arrays/objetos, concatenar arrays, passar argumentos para funções e criar novos objetos com propriedades adicionais."
Descreva o que são template literals e seus benefícios em relação às strings tradicionais.,Template literals (usando backticks `) permitem a interpolação de variáveis e expressões dentro de strings.  Elas também suportam strings multi-linha sem a necessidade de concatenação. São mais legíveis e evitam erros ao concatenar strings complexas.
O que é o objeto `arguments` em JavaScript e quando ele é útil?,O objeto `arguments` é um objeto semelhante a um array disponível dentro de funções não-arrow que contém todos os argumentos passados para a função. Ele é útil quando o número de argumentos a serem passados para uma função é desconhecido ou variável.  Note que não é um array verdadeiro e não possui todos os métodos de array nativos.
O que é um construtor em JavaScript?,"Um construtor é uma função usada para criar e inicializar objetos. Quando usado com o operador `new`, ele cria uma nova instância de um objeto, define `this` para referenciar o novo objeto e retorna o novo objeto implicitamente (ou explicitamente, se retornado)."
O que é o método `map()` em arrays e qual seu propósito?,"O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele transforma cada elemento do array em outro valor, mantendo a mesma quantidade de elementos."
Descreva o que é o método `filter()` em arrays e como ele funciona.,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. Ele seleciona os elementos que satisfazem uma condição específica.
O que é o método `reduce()` em arrays e como ele pode ser usado?,"O método `reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor. Ele é usado para realizar cálculos cumulativos, como somar todos os elementos de um array."
Explique o que é o DOM (Document Object Model) e qual sua importância em JavaScript.,"O DOM é uma representação em árvore da estrutura de um documento HTML ou XML. O JavaScript usa o DOM para acessar e manipular os elementos, atributos e conteúdo do documento, permitindo a interação dinâmica com a página web."
Como selecionar elementos no DOM usando JavaScript?,"Existem vários métodos para selecionar elementos no DOM, incluindo: `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`, `document.querySelector()` (seleciona o primeiro elemento que corresponde a um seletor CSS) e `document.querySelectorAll()` (seleciona todos os elementos que correspondem a um seletor CSS)."
Como adicionar ou remover atributos de um elemento HTML usando JavaScript?,"Atributos podem ser adicionados usando `setAttribute(name, value)` e removidos usando `removeAttribute(name)`. Também pode-se acessar atributos diretamente como propriedades do elemento, como `element.id = ""newId""`."
O que é o objeto `event` passado para um manipulador de evento?,"O objeto `event` contém informações sobre o evento que ocorreu, como o elemento que disparou o evento (`event.target`), as coordenadas do mouse (`event.clientX`, `event.clientY`), e o tipo de evento (`event.type`)."
O que é o bubbling de eventos e como ele funciona?,"Bubbling de eventos é o processo em que um evento disparado em um elemento se propaga para seus elementos pais na hierarquia do DOM, acionando os manipuladores de eventos associados a esses elementos pais."
O que é o capturing de eventos e como ele difere do bubbling?,"Capturing de eventos é o processo oposto ao bubbling. O evento é primeiro capturado pelo elemento mais externo e, em seguida, se propaga para os elementos filhos até atingir o elemento alvo. É menos comum que bubbling."
O que é o objeto `console` em JavaScript e como ele é usado?,"O objeto `console` fornece acesso ao console de depuração do navegador. Ele é usado para exibir mensagens de log, erros, avisos e outras informações úteis para o desenvolvimento e depuração de código JavaScript. Métodos comuns incluem `console.log()`, `console.error()`, `console.warn()`, `console.table()`."
O que são funções de callback em JavaScript?,"Funções de callback são funções passadas como argumentos para outras funções, para serem executadas em um momento posterior, geralmente após a conclusão de uma operação assíncrona."
Explique o conceito de funções de ordem superior em JavaScript.,"Funções de ordem superior são funções que podem receber outras funções como argumentos ou retornar funções como resultados. Isso permite criar abstrações poderosas e reutilizar código de forma flexível.  Exemplos incluem `map`, `filter` e `reduce`."
O que são promessas em JavaScript e como elas são usadas para lidar com operações assíncronas?,"Promessas são objetos que representam o resultado eventual de uma operação assíncrona. Elas podem estar em um dos três estados: `pendente`, `cumprida` ou `rejeitada`. As promessas facilitam o encadeamento de operações assíncronas e o tratamento de erros de forma mais elegante que callbacks."
"Como usar os métodos `then()`, `catch()` e `finally()` com promessas?",O método `then()` é usado para lidar com o resultado de uma promessa cumprida. O método `catch()` é usado para lidar com erros ou rejeições de uma promessa. O método `finally()` é executado independentemente de a promessa ser cumprida ou rejeitada.
O que é `async/await` em JavaScript e como ele simplifica o tratamento de promessas?,"`async/await` é uma sintaxe que facilita a escrita de código assíncrono em JavaScript. A palavra-chave `async` transforma uma função em uma função assíncrona, e a palavra-chave `await` pausa a execução da função até que uma promessa seja cumprida, retornando o resultado da promessa. Isso torna o código assíncrono mais legível e semelhante ao código síncrono."
Como lidar com erros em funções `async/await`?,"Erros em funções `async/await` podem ser tratados usando blocos `try...catch`. O código que pode gerar um erro é colocado dentro do bloco `try`, e o código para lidar com o erro é colocado dentro do bloco `catch`."
O que é o `JSON` (JavaScript Object Notation) e como ele é usado em JavaScript?,"JSON é um formato de dados leve e fácil de ler usado para representar estruturas de dados simples e objetos em texto. Em JavaScript, JSON é usado para trocar dados entre o servidor e o cliente, geralmente em APIs web."
Como converter um objeto JavaScript em uma string JSON e vice-versa?,"Para converter um objeto JavaScript em uma string JSON, usa-se o método `JSON.stringify(object)`. Para converter uma string JSON em um objeto JavaScript, usa-se o método `JSON.parse(string)`."
O que é o `localStorage` e `sessionStorage` em JavaScript e qual a diferença entre eles?,"`localStorage` e `sessionStorage` são APIs de armazenamento web que permitem armazenar dados localmente no navegador do usuário. `localStorage` armazena os dados indefinidamente, a menos que sejam explicitamente removidos. `sessionStorage` armazena os dados apenas durante a sessão do navegador, e os dados são removidos quando a janela ou aba é fechada."
Como armazenar e recuperar dados do `localStorage` e `sessionStorage`?,"Para armazenar dados, usa-se o método `localStorage.setItem(key, value)` ou `sessionStorage.setItem(key, value)`. Para recuperar dados, usa-se o método `localStorage.getItem(key)` ou `sessionStorage.getItem(key)`."
Como definir e ler cookies em JavaScript?,"Cookies são definidos usando a propriedade `document.cookie`, atribuindo uma string que contém o nome, o valor e outros atributos do cookie.  Cookies são lidos usando a mesma propriedade, que retorna uma string contendo todos os cookies separados por ponto e vírgula. É necessário analisar essa string para obter os valores individuais."
Qual a diferença entre `setInterval()` e `setTimeout()` em JavaScript?,"`setInterval()` executa uma função repetidamente em intervalos de tempo especificados, enquanto `setTimeout()` executa uma função apenas uma vez após um determinado período de tempo."
O que é uma expressão regular (regex) em JavaScript e para que ela é usada?,"Uma expressão regular é um padrão usado para corresponder a combinações de caracteres em strings. Elas são usadas para validar entradas, pesquisar, substituir e extrair texto de strings."
Quais são alguns metacaracteres comuns usados em expressões regulares e o que eles significam?,"Alguns metacaracteres comuns incluem: `.` (qualquer caractere), `*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `^` (início da string), `$` (fim da string), `[]` (conjunto de caracteres), `\d` (dígito), `\w` (caractere alfanumérico)."
Como usar os métodos `test()` e `exec()` com expressões regulares?,"O método `test()` retorna `true` se a expressão regular encontrar uma correspondência na string, e `false` caso contrário. O método `exec()` retorna um array com informações sobre a correspondência ou `null` se não houver correspondência."
O que são grupos de captura em expressões regulares e como eles são usados?,Grupos de captura são partes de uma expressão regular delimitadas por parênteses `()`. Eles permitem extrair partes específicas de uma string que corresponde ao padrão. O resultado dos grupos de captura é retornado pelo método `exec()` no array de resultados.
O que é o modo global (`g`) em expressões regulares e como ele afeta a busca?,"O modo global (`g`) indica que a expressão regular deve encontrar todas as correspondências na string, em vez de parar na primeira correspondência. Sem o modo global, o método `exec()` retorna apenas a primeira correspondência."
O que é o modo case-insensitive (`i`) em expressões regulares e como ele afeta a busca?,O modo case-insensitive (`i`) indica que a expressão regular deve ignorar a diferença entre letras maiúsculas e minúsculas durante a busca.
O que é o método `String.prototype.replace()` e como ele pode ser usado com expressões regulares?,O método `replace()` substitui uma parte de uma string por outra string ou por um valor retornado por uma função. Ele pode ser usado com uma string literal ou com uma expressão regular para encontrar e substituir correspondências.
Explique o conceito de escopo léxico (static scope) em JavaScript.,"Escopo léxico significa que o escopo de uma variável é determinado pela sua posição no código fonte, e não pelo contexto de execução. Isso permite que as funções acessem variáveis definidas em seus escopos pais, mesmo após o escopo pai ter terminado de ser executado (closures)."
"Qual a diferença entre escopo global, escopo de função e escopo de bloco em JavaScript?","Escopo global se refere às variáveis declaradas fora de qualquer função ou bloco, acessíveis de qualquer lugar no código. Escopo de função se refere às variáveis declaradas dentro de uma função, acessíveis apenas dentro dessa função. Escopo de bloco (introduzido com `let` e `const`) se refere às variáveis declaradas dentro de um bloco (delimitado por chaves `{}`), acessíveis apenas dentro desse bloco."
"O que é o modo estrito (`""use strict""`) em JavaScript e quais seus benefícios?","O modo estrito é um recurso do JavaScript que impõe regras mais rígidas para o código, ajudando a prevenir erros comuns e a tornar o código mais seguro e eficiente. Ele é ativado adicionando a string `""use strict""` no início de um arquivo JavaScript ou de uma função."
O que é uma IIFE (Immediately Invoked Function Expression) em JavaScript e qual seu propósito?,Uma IIFE é uma função anônima que é definida e executada imediatamente. Seu propósito principal é criar um escopo isolado para evitar conflitos de nomes com variáveis globais e proteger o código de interferências externas.
O que é o operador `void` em JavaScript e qual seu propósito?,"O operador `void` avalia uma expressão e retorna `undefined`. Ele é usado para garantir que uma expressão não retorne um valor, por exemplo, ao usar um link que não deve navegar para outra página."
O que são variáveis do tipo Symbol em JavaScript e qual seu propósito?,Symbols são um tipo de dado primitivo que representa um identificador único. Eles são usados para criar propriedades de objeto que são privadas e não podem ser acessadas ou sobrescritas por acidente.
O que são iterators e generators em JavaScript e como eles são usados?,"Iterators são objetos que permitem percorrer uma coleção de dados, um elemento por vez. Generators são funções que podem pausar e retomar sua execução, produzindo uma série de valores ao longo do tempo. Eles são usados para implementar iterators e para lidar com dados assíncronos de forma mais eficiente."
O que é o operador `yield` em JavaScript e como ele é usado em generators?,"O operador `yield` é usado dentro de uma função generator para pausar a execução da função e retornar um valor. Quando a função generator é retomada, a execução continua a partir do ponto onde o `yield` foi encontrado."
O que é um Map em JavaScript e como ele difere de um objeto regular?,"Um Map é uma coleção de pares chave-valor onde as chaves podem ser de qualquer tipo de dado (incluindo objetos e funções), ao contrário de objetos regulares onde as chaves são sempre strings ou Symbols. Maps também mantêm a ordem de inserção das chaves."
O que é um Set em JavaScript e como ele difere de um array?,"Um Set é uma coleção de valores únicos. Ao contrário de um array, um Set não permite valores duplicados. Sets também oferecem métodos mais eficientes para verificar a presença de um valor e para remover valores."
O que é o método `Object.freeze()` em JavaScript e qual seu propósito?,"O método `Object.freeze()` congela um objeto, impedindo que novas propriedades sejam adicionadas, propriedades existentes sejam removidas ou alteradas, e a prototipagem do objeto não pode ser alterada. O objeto congelado permanece imutável."
O que é o método `Object.seal()` em JavaScript e qual seu propósito?,"O método `Object.seal()` sela um objeto, impedindo que novas propriedades sejam adicionadas ou removidas, mas permite que os valores das propriedades existentes sejam alterados, desde que a propriedade seja configurável inicialmente."
O que é o método `Object.assign()` em JavaScript e como ele funciona?,O método `Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto destino. Ele retorna o objeto destino. Ele realiza uma cópia superficial das propriedades.
O que é memoization em JavaScript e como ela pode ser usada para otimizar funções?,"Memoization é uma técnica de otimização em que os resultados de uma função são armazenados em cache para que possam ser reutilizados posteriormente, em vez de serem recalculados. Isso é especialmente útil para funções que são chamadas repetidamente com os mesmos argumentos e que são computacionalmente caras."
O que é o método `Array.isArray()` em JavaScript e como ele é usado?,"O método `Array.isArray()` verifica se um valor é um array. Ele retorna `true` se o valor é um array, e `false` caso contrário. É uma forma mais confiável de verificar se um valor é um array do que usar `typeof`."
O que é o método `String.prototype.trim()` em JavaScript e como ele é usado?,O método `trim()` remove os espaços em branco do início e do final de uma string. Ele retorna uma nova string com os espaços em branco removidos.
O que é o método `String.prototype.toUpperCase()` em JavaScript e como ele é usado?,O método `toUpperCase()` converte todos os caracteres de uma string para maiúsculas. Ele retorna uma nova string com todos os caracteres em maiúsculas.
O que é o método `String.prototype.toLowerCase()` em JavaScript e como ele é usado?,O método `toLowerCase()` converte todos os caracteres de uma string para minúsculas. Ele retorna uma nova string com todos os caracteres em minúsculas.
O que é o método `String.prototype.substring()` em JavaScript e como ele é usado?,O método `substring()` retorna uma parte de uma string entre dois índices especificados. Ele retorna uma nova string contendo os caracteres entre os índices (exclusivo o caractere no índice final).
O que é o método `String.prototype.slice()` em JavaScript e como ele é usado?,"O método `slice()` retorna uma seção de uma string. É semelhante ao `substring`, mas aceita índices negativos (que contam a partir do final da string)."
Qual a diferença entre `String.prototype.substring()` e `String.prototype.slice()` em JavaScript?,"A principal diferença é que `slice` aceita índices negativos para fatiar a string a partir do final, enquanto `substring` não interpreta índices negativos."
O que é o método `String.prototype.split()` em JavaScript e como ele é usado?,"O método `split()` divide uma string em um array de substrings, com base em um separador especificado. O separador pode ser uma string ou uma expressão regular."
O que é o método `Array.prototype.join()` em JavaScript e como ele é usado?,"O método `join()` junta todos os elementos de um array em uma string, usando um separador especificado. O separador pode ser uma string."
O que é o método `Array.prototype.push()` em JavaScript e como ele é usado?,O método `push()` adiciona um ou mais elementos ao final de um array e retorna o novo comprimento do array.
O que é o método `Array.prototype.pop()` em JavaScript e como ele é usado?,O método `pop()` remove o último elemento de um array e retorna esse elemento. Ele modifica o array original.
O que é o método `Array.prototype.shift()` em JavaScript e como ele é usado?,O método `shift()` remove o primeiro elemento de um array e retorna esse elemento. Ele modifica o array original.
O que é o método `Array.prototype.unshift()` em JavaScript e como ele é usado?,O método `unshift()` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array. Ele modifica o array original.
O que é o método `Array.prototype.splice()` em JavaScript e como ele é usado?,O método `splice()` remove ou substitui elementos existentes em um array e/ou adiciona novos elementos no lugar. Ele modifica o array original e retorna um array contendo os elementos removidos.
O que é o método `Array.prototype.concat()` em JavaScript e como ele é usado?,"O método `concat()` cria um novo array contendo os elementos do array no qual foi chamado, seguido pelos elementos de cada um dos outros arrays fornecidos como argumentos. Ele não modifica o array original."
O que é o método `Array.prototype.sort()` em JavaScript e como ele funciona?,"O método `sort()` ordena os elementos de um array no lugar e retorna o array ordenado. Por padrão, ele ordena os elementos como strings, então é necessário fornecer uma função de comparação para ordenar números corretamente."
O que é o método `Array.prototype.reverse()` em JavaScript e como ele é usado?,O método `reverse()` inverte a ordem dos elementos em um array no lugar e retorna o array invertido. Ele modifica o array original.
O que é o método `Array.prototype.indexOf()` em JavaScript e como ele é usado?,"O método `indexOf()` retorna o primeiro índice em que um dado elemento pode ser encontrado no array, ou -1 se ele não estiver presente."
O que é o método `Array.prototype.lastIndexOf()` em JavaScript e como ele é usado?,"O método `lastIndexOf()` retorna o último índice em que um dado elemento pode ser encontrado no array, ou -1 se ele não estiver presente."
O que é o método `Array.prototype.includes()` em JavaScript e como ele é usado?,"O método `includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado."
O que é o método `Math.random()` em JavaScript e como ele é usado?,"O método `Math.random()` retorna um número pseudoaleatório de ponto flutuante, no intervalo de 0 (inclusivo) até, mas não incluindo, 1 (exclusivo)."
O que é o método `Math.floor()` em JavaScript e como ele é usado?,O método `Math.floor()` retorna o maior inteiro que é menor ou igual a um dado número.
O que é o método `Math.ceil()` em JavaScript e como ele é usado?,O método `Math.ceil()` retorna o menor inteiro que é maior ou igual a um dado número.
O que é o método `Math.round()` em JavaScript e como ele é usado?,O método `Math.round()` retorna o valor de um número arredondado para o inteiro mais próximo.
O que é o método `Date.now()` em JavaScript e como ele é usado?,O método `Date.now()` retorna o número de milissegundos decorridos desde 1 de janeiro de 1970 00:00:00 UTC.
Como criar um objeto Date em JavaScript?,"Um objeto Date pode ser criado usando o construtor `new Date()`. Ele pode ser criado sem argumentos (retorna a data e hora atual), com um argumento (um timestamp em milissegundos), ou com múltiplos argumentos (ano, mês, dia, hora, minuto, segundo, milissegundo)."
"Como obter o ano, mês, dia, hora, minuto, segundo e milissegundo de um objeto Date em JavaScript?","Métodos como `getFullYear()`, `getMonth()`, `getDate()`, `getHours()`, `getMinutes()`, `getSeconds()` e `getMilliseconds()` são usados para obter as respectivas partes de um objeto Date."
O que são template strings com tagged templates em JavaScript e como eles são usados?,"Tagged templates são uma forma avançada de template strings onde uma função pode ser usada para processar o template string. A função recebe o array de strings literais e os valores das expressões interpoladas como argumentos, permitindo a manipulação personalizada do template string."
O que são destructuring assignments em JavaScript e como eles são usados?,Destructuring assignments são uma sintaxe que permite extrair valores de objetos ou arrays e atribuí-los a variáveis de forma concisa.
O que são parâmetros default em JavaScript e como eles são usados?,"Parâmetros default permitem especificar um valor padrão para um parâmetro de função, que será usado se o argumento correspondente não for fornecido quando a função for chamada."
O que são computed property names em JavaScript e como eles são usados?,Computed property names permitem usar expressões dentro de colchetes `[]` para definir o nome de uma propriedade de objeto dinamicamente.
O que é uma função generator assíncrona em JavaScript e como ela é usada?,"Uma função generator assíncrona é uma combinação de função assíncrona e função generator. Ela permite produzir valores assíncronos um por um, usando `yield` e `await` dentro da função."
O que é o operador `??` (nullish coalescing operator) em JavaScript e como ele é usado?,"O operador `??` retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`. Ele é diferente do operador `||` que retorna o operando da direita quando o operando da esquerda é falsy (null, undefined, 0, '', false)."
O que é o operador `?.` (optional chaining operator) em JavaScript e como ele é usado?,O operador `?.` permite acessar propriedades de um objeto sem causar um erro se uma propriedade intermediária for `null` ou `undefined`. Ele retorna `undefined` se uma propriedade na cadeia for `null` ou `undefined`.
O que são WeakMaps e WeakSets em JavaScript e como eles diferem de Maps e Sets?,"WeakMaps e WeakSets são versões fracas de Maps e Sets. As chaves de WeakMaps devem ser objetos, e os valores de WeakSets também devem ser objetos. A principal diferença é que as chaves de WeakMaps e os valores de WeakSets não impedem que os objetos sejam coletados pelo coletor de lixo (garbage collector) se não houver outras referências a eles."
O que são Proxies em JavaScript e como eles são usados?,Proxies permitem interceptar e personalizar operações
"O que é ""hoisting"" em JavaScript e como ele funciona?","Hoisting é um comportamento do JavaScript onde declarações de variáveis (com `var`) e funções são movidas para o topo de seu escopo antes da execução do código. No entanto, apenas a declaração é movida, não a inicialização (no caso de `var`)."
Como você impede que um evento padrão do navegador ocorra?,Usando o método `event.preventDefault()` dentro da função que manipula o evento.
O que é o escopo léxico (ou estático) em JavaScript?,O escopo léxico significa que o escopo de uma variável em JavaScript é determinado por sua posição no código fonte.
Qual a finalidade do método `bind()` em JavaScript?,"`bind()` cria uma nova função que, quando chamada, tem sua palavra-chave `this` definida para o valor fornecido."
"O que é a ""cadeia de protótipos"" em JavaScript?","É o mecanismo pelo qual os objetos JavaScript herdam propriedades de outros objetos. Cada objeto tem um protótipo, e quando uma propriedade não é encontrada no objeto, o JavaScript procura no protótipo e assim por diante."
"O que é um ""template literal"" em JavaScript?","São strings que permitem a incorporação de expressões JavaScript dentro delas, usando a sintaxe `${expressao}`.  São delimitadas por crases (` `)."
Qual a finalidade do método `map()` em arrays?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
"O que é uma função ""arrow"" em JavaScript?","É uma forma mais concisa de escrever funções, com sintaxe mais curta e sem a sua própria palavra-chave `this` (herdando o `this` do contexto circundante)."
Como você converte uma string em um número em JavaScript?,"Usando `parseInt()`, `parseFloat()` ou o operador unário `+`."
O que é JSON e como você o usa em JavaScript?,"JSON (JavaScript Object Notation) é um formato de dados leve, usado para transmitir dados entre um servidor e um cliente. Em JavaScript, você usa `JSON.stringify()` para converter um objeto JavaScript em uma string JSON e `JSON.parse()` para converter uma string JSON de volta em um objeto JavaScript."
O que é o evento `DOMContentLoaded`?,"É um evento disparado quando o HTML inicial foi completamente carregado e analisado, sem esperar que as folhas de estilo, imagens e subframes terminem de carregar."
Qual a diferença entre os métodos `push()` e `unshift()` em arrays?,"`push()` adiciona um ou mais elementos ao final de um array, enquanto `unshift()` adiciona um ou mais elementos ao início do array."
Como você remove um elemento de um array em JavaScript?,"Usando o método `splice(indice, numeroDeElementos)` para remover um elemento em um índice específico ou o método `filter()` para criar um novo array sem o elemento que você deseja remover."
O que é uma função recursiva?,Uma função recursiva é uma função que chama a si mesma dentro de sua definição.
Qual a finalidade do operador ternário em JavaScript?,O operador ternário ( `condicao ? valorSeVerdadeiro : valorSeFalso` ) é uma forma concisa de escrever uma instrução `if...else`.
"O que são ""truthy"" e ""falsy"" values em JavaScript?","São valores que são avaliados como `true` ou `false` em um contexto booleano. Falsy values incluem: `false`, `0`, `""""`, `null`, `undefined`, e `NaN`. Todos os outros valores são truthy."
Como você interrompe a execução de um loop em JavaScript?,Usando a instrução `break`.
Qual a finalidade do método `reduce()` em arrays?,`reduce()` aplica uma função a um acumulador e a cada valor de um array (da esquerda para a direita) para reduzi-lo a um único valor.
"O que é o padrão de projeto ""Module"" em JavaScript?","É um padrão para organizar o código, encapsulando variáveis e funções dentro de um escopo privado, expondo apenas uma interface pública."
"O que é o operador ""rest"" em JavaScript?",O operador rest ( `...` ) permite que uma função aceite um número indefinido de argumentos como um array.
"O que é o operador ""spread"" em JavaScript?",O operador spread ( `...` ) permite expandir um iterável (como um array ou string) em locais onde se espera múltiplos argumentos ou elementos.
Como você converte um objeto em uma string em JavaScript?,Usando `JSON.stringify(objeto)` ou `objeto.toString()`.
O que é o método `includes()` em strings e arrays?,"`includes()` determina se um array inclui um determinado elemento, retornando `true` ou `false`. Funciona de forma semelhante para strings, verificando se uma substring está presente."
Qual a diferença entre `slice()` e `splice()` em arrays?,"`slice()` retorna uma cópia de uma parte do array sem modificar o original, enquanto `splice()` modifica o array original removendo ou substituindo elementos."
O que é o método `find()` em arrays?,"`find()` retorna o valor do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna `undefined`."
O que é o método `findIndex()` em arrays?,"`findIndex()` retorna o índice do primeiro elemento no array que satisfaz a função de teste fornecida. Caso contrário, retorna -1."
Como você verifica se uma propriedade existe em um objeto?,"Usando o operador `in` ( `""propriedade"" in objeto` ) ou o método `hasOwnProperty()` ( `objeto.hasOwnProperty(""propriedade"")` )."
"O que é o ""event bubbling"" em JavaScript?",É o processo no qual um evento acionado em um elemento filho se propaga para seus elementos pais na hierarquia do DOM.
"Como você interrompe o ""event bubbling""?",Usando o método `event.stopPropagation()` dentro do manipulador de eventos.
"O que é ""event capturing""?","É o oposto de ""event bubbling"". Em vez de começar no elemento alvo e subir na árvore DOM, o event capturing começa no elemento raiz e desce até o elemento alvo."
Como você obtém a largura e a altura da janela do navegador em JavaScript?,Usando `window.innerWidth` e `window.innerHeight` (para a área visível) ou `document.documentElement.clientWidth` e `document.documentElement.clientHeight`.
Como você redireciona o usuário para outra página em JavaScript?,"Usando `window.location.href = ""url""`."
Como você imprime mensagens no console do navegador em JavaScript?,"Usando `console.log()`, `console.warn()`, `console.error()`, `console.table()`, etc."
"O que são ""cookies"" em JavaScript?",São pequenos arquivos de texto que os sites armazenam no computador do usuário para lembrar informações sobre ele.
O que é o localStorage e sessionStorage?,"São APIs para armazenar dados no navegador do usuário. `localStorage` armazena dados sem data de expiração, enquanto `sessionStorage` armazena dados apenas durante a sessão do navegador."
Como você define um valor no localStorage?,"Usando `localStorage.setItem(""chave"", ""valor"")`."
Como você obtém um valor do localStorage?,"Usando `localStorage.getItem(""chave"")`."
O que é uma expressão regular (regex) em JavaScript?,É um padrão para combinar sequências de caracteres em uma string.
Como você testa se uma string corresponde a uma expressão regular?,"Usando o método `test()` da expressão regular ( `regex.test(""string"")` ) ou o método `search()` da string ( `""string"".search(regex)` )."
"O que são ""capturing groups"" em expressões regulares?","São partes do padrão que são capturadas e podem ser referenciadas posteriormente (por exemplo, para substituição)."
"O que são ""flags"" em expressões regulares?","São modificadores que alteram o comportamento da expressão regular, como `i` (ignorar maiúsculas/minúsculas), `g` (global, encontrar todas as correspondências) e `m` (multiline)."
"O que é ""type coercion"" em JavaScript?",É a conversão automática de um tipo de dado para outro pelo JavaScript.
"O que é o ""strict mode"" em JavaScript?","É um modo que impõe regras mais rígidas ao código JavaScript, ajudando a prevenir erros comuns e melhorar a segurança. Você ativa colocando `""use strict"";` no início do arquivo ou da função."
Como você escreve um comentário de uma linha em JavaScript?,Usando `// Este é um comentário de uma linha`.
Como você escreve um comentário de múltiplas linhas em JavaScript?,Usando `/* Este é um comentário de múltiplas linhas */`.
"O que é ""feature detection"" em JavaScript?",É a prática de verificar se o navegador suporta um determinado recurso antes de usá-lo.
O que é o método `isNaN()`?,É uma função que testa se um valor é `NaN` (Not-a-Number).
Qual a diferença entre usar `+` para concatenar strings e template literals?,"O operador `+` requer concatenação explícita, enquanto template literals permitem a incorporação de variáveis diretamente na string usando `${variavel}`, tornando o código mais legível."
Como você arredonda um número para o inteiro inferior em JavaScript?,Usando `Math.floor(numero)`.
Como você arredonda um número para o inteiro superior em JavaScript?,Usando `Math.ceil(numero)`.
"O que é um ""Symbol"" em JavaScript?",É um tipo de dado primitivo que representa um identificador único e imutável.
"O que são ""Iterators"" e ""Iterables"" em JavaScript?","Um ""Iterable"" é um objeto que pode ser iterado (por exemplo, arrays, strings, maps, sets). Um ""Iterator"" é um objeto que define uma sequência e retorna um valor por vez usando o método `next()`."
"O que são ""Generators"" em JavaScript?","São funções que podem ser pausadas e retomadas, permitindo a criação de iterators personalizados."
Como você declara uma função Generator em JavaScript?,Usando a sintaxe `function* nomeDaFuncao() { yield valor; }`.
O que é o método `yield` em funções Generator?,Pausa a execução da função Generator e retorna um valor.
Como você adiciona um elemento a um Set?,Usando o método `add(valor)`.
Como você obtém um valor de um Map?,Usando o método `get(chave)`.
Como você define um valor em um Map?,"Usando o método `set(chave, valor)`."
Como você remove um elemento de um Set?,Usando o método `delete(valor)`.
Como você verifica se um Set contém um determinado valor?,Usando o método `has(valor)`.
Como você verifica se um Map contém uma determinada chave?,Usando o método `has(chave)`.
Como você faz destructuring de um objeto?,"`const { propriedade1, propriedade2 } = objeto;`."
Como você faz destructuring de um array?,"`const [elemento1, elemento2] = array;`."
"O que são ""default parameters"" em funções JavaScript?",São valores padrão atribuídos a parâmetros de função se nenhum valor for fornecido quando a função é chamada.
Qual a diferença entre o operador `||` (OR) e o operador `??` (Nullish Coalescing)?,"`||` retorna o operando do lado direito se o operando do lado esquerdo for falsy (incluindo `0`, `""""`, `false`), enquanto `??` retorna o operando do lado direito apenas se o operando do lado esquerdo for `null` ou `undefined`."
O que é o operador `?.` (Optional Chaining) em JavaScript?,Permite acessar propriedades de um objeto que podem ser `null` ou `undefined` sem causar um erro. Retorna `undefined` se a propriedade não existir.
O que é o método `padStart()` em strings?,Preenche o início de uma string com um caractere especificado até que atinja um determinado comprimento.
O que é o método `padEnd()` em strings?,Preenche o final de uma string com um caractere especificado até que atinja um determinado comprimento.
Como você formata números em JavaScript?,Usando o método `toLocaleString()` ou `Intl.NumberFormat()`.
O que é o método `requestAnimationFrame()`?,É um método que solicita ao navegador para chamar uma função antes do próximo repaint. Usado para criar animações suaves.
"O que é um ""proxy"" em JavaScript?",Um Proxy é um objeto que permite interceptar e customizar operações fundamentais em outro objeto (o alvo).
Quais são as principais armadilhas (gotchas) em JavaScript que os desenvolvedores devem evitar?,"Algumas armadilhas comuns incluem:  a confusão entre `==` e `===`, o comportamento do `this` em diferentes contextos, o hoisting de variáveis, a falta de tratamento adequado de erros, o uso incorreto de closures,  a mutabilidade de objetos e arrays, e a falta de compreensão de como as Promises funcionam."
"O que é um ""polyfill"" em JavaScript?",Um polyfill é um código que fornece funcionalidade que não está nativamente disponível em navegadores mais antigos. Permite que você use recursos mais modernos mesmo em ambientes que não os suportam.
Como você exporta e importa módulos em JavaScript (usando ES modules)?,"Para exportar: `export { variavel, funcao };` ou `export default funcao;`.  Para importar: `import { variavel, funcao } from './modulo.js';` ou `import funcao from './modulo.js';`."
"O que é ""tree shaking"" e como ele se relaciona com módulos JavaScript?","Tree shaking é um processo usado por bundlers (como Webpack) para remover código não utilizado de seus pacotes JavaScript. Ele se beneficia da estrutura modular do ES modules, onde apenas as partes explicitamente importadas são incluídas no pacote final."
"O que são ""Tagged Templates""?",São uma forma avançada de template literals que permitem que você processe o template literal com uma função.  A função recebe um array com as partes estáticas da string e um array com os valores das expressões.
O que é o método `finally()` em Promises?,"O método `finally()` é chamado quando a promise é resolvida (fulfilled) ou rejeitada. Ele serve para executar código de limpeza, independentemente do resultado da promise."
Como você pode evitar a mutação direta de objetos e arrays em JavaScript (imutabilidade)?,"Usando técnicas como: `Object.assign({}, objeto)`, o operador spread `...` para cópias superficiais, bibliotecas como Immutable.js, ou criando cópias profundas (deep copies).

Espero que esta lista seja útil!  Avise se precisar de mais alguma coisa."
O que são closures em JavaScript e como eles funcionam?,"Closures são a capacidade de uma função interna de acessar e manipular variáveis do escopo da função externa, mesmo após a função externa ter terminado de executar. Isso acontece porque a função interna ""lembra"" o ambiente léxico em que foi criada.

**2.**"
O que é o hoisting em JavaScript?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis (usando `var`) e funções para o topo de seus respectivos escopos (global ou função) durante a fase de compilação.  A declaração é movida, mas a inicialização não.

**5.**"
Como funciona o método `bind()` em JavaScript?,"`bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido como argumento.  Ele também permite predefinir argumentos para a função.

**8.**"
O que é o uso de `this` em JavaScript?,"`this` refere-se ao objeto no qual a função está sendo executada. Seu valor depende de como a função é chamada. Pode se referir ao objeto global (window em navegadores), a um objeto específico, ou ser definido explicitamente com `call`, `apply` ou `bind`.

**10.**"
Como você pode evitar a poluição do escopo global em JavaScript?,"Usando funções auto-invocadas (IIFE - Immediately Invoked Function Expression), ou módulos, que criam um escopo local para as variáveis e funções.

**11.**"
O que é uma promessa (Promise) em JavaScript?,"Uma Promise é um objeto que representa a eventual conclusão (ou falha) de uma operação assíncrona e seu valor resultante. Ela tem três estados: `pending`, `fulfilled` e `rejected`.

**14.**"
Como você lida com erros em Promises usando `try...catch`?,"`try...catch` não captura erros em promises assíncronas. Erros em Promises são geralmente tratados usando os métodos `.catch()` ou `.then(null, errorHandler)`. `async/await` permite usar `try...catch` para promises.

**15.**"
"Qual a diferença entre `let`, `const` e `var` para declarar variáveis?","`var` tem escopo de função ou global. `let` tem escopo de bloco e permite reatribuição. `const` também tem escopo de bloco, mas não permite reatribuição (o valor não pode ser alterado após a atribuição inicial).

**16.**"
Como funciona o método `map()` em JavaScript?,"`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.

**18.**"
Como funciona o método `reduce()` em JavaScript?,"`reduce()` aplica uma função contra um acumulador e cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.

**20.**"
O que é o objeto `event` em um ouvinte de evento?,"O objeto `event` contém informações sobre o evento que ocorreu, como o tipo de evento, o elemento que o disparou e as coordenadas do mouse.

**44.**"
Como você impede o comportamento padrão de um evento em JavaScript?,"Usando o método `event.preventDefault()`.

**45.**"
Como você interrompe a propagação de um evento no DOM usando JavaScript?,"Usando o método `event.stopPropagation()`.

**46.**"
O que são eventos de mouse em JavaScript?,"Eventos de mouse incluem eventos como `click`, `mousedown`, `mouseup`, `mouseover`, `mouseout`, `mousemove`.

**47.**"
O que são eventos de teclado em JavaScript?,"Eventos de teclado incluem eventos como `keydown`, `keyup`, `keypress`.

**48.**"
O que são eventos de formulário em JavaScript?,"Eventos de formulário incluem eventos como `submit`, `change`, `focus`, `blur`.

**49.**"
O que são eventos de janela em JavaScript?,"Eventos de janela incluem eventos como `load`, `resize`, `scroll`, `unload`.

**50.**"
Como você define um temporizador em JavaScript?,"Usando as funções `setTimeout()` e `setInterval()`.

**54.**"
Como você cancela um temporizador em JavaScript?,"Usando as funções `clearTimeout()` e `clearInterval()`.

**56.**"
Como você armazena dados no localStorage?,"Usando o método `localStorage.setItem(key, value)`.

**59.**"
Como você recupera dados do localStorage?,"Usando o método `localStorage.getItem(key)`.

**60.**"
O que é o XMLHttpRequest (XHR) em JavaScript?,"XMLHttpRequest é um objeto que permite fazer requisições HTTP do navegador para um servidor sem recarregar a página.

**64.**"
Como você faz uma requisição GET usando XMLHttpRequest?,"Criando um objeto XMLHttpRequest, configurando-o com o método ""GET"" e a URL, e enviando a requisição.

**65.**"
Como você faz uma requisição POST usando XMLHttpRequest?,"Criando um objeto XMLHttpRequest, configurando-o com o método ""POST"" e a URL, definindo o cabeçalho Content-Type, e enviando a requisição com os dados no corpo da requisição.

**66.**"
O que é o estado `readyState` do objeto XMLHttpRequest?,"`readyState` representa o estado da requisição XMLHttpRequest. Os valores possíveis são: 0 (UNSENT), 1 (OPENED), 2 (HEADERS_RECEIVED), 3 (LOADING), 4 (DONE).

**67.**"
O que é o código de status HTTP retornado por uma requisição XMLHttpRequest?,"O código de status HTTP indica o resultado da requisição. Códigos comuns incluem 200 (OK), 404 (Not Found), 500 (Internal Server Error).

**68.**"
O que são as APIs Fetch em JavaScript?,"A Fetch API fornece uma interface para buscar recursos na rede. É uma alternativa mais moderna e poderosa ao XMLHttpRequest.

**69.**"
Como você faz uma requisição GET usando Fetch API?,"Usando a função `fetch(url)`.

**70.**"
Como você faz uma requisição POST usando Fetch API?,"Usando a função `fetch(url, { method: 'POST', body: data })`.

**71.**"
O que é o objeto `Response` retornado pela Fetch API?,"O objeto `Response` contém informações sobre a resposta do servidor, como o status, os cabeçalhos e o corpo da resposta.

**72.**"
Como você processa o corpo da resposta de uma requisição Fetch API?,"Usando métodos como `response.json()`, `response.text()`, `response.blob()`.

**73.**"
Como você espera a resolução de uma Promise dentro de uma função assíncrona?,"Usando a palavra-chave `await` antes da Promise.

**76.**"
O que é o operador `?.` (optional chaining) em JavaScript?,"O operador optional chaining permite acessar propriedades de um objeto que podem ser nulas ou indefinidas sem causar um erro. Se uma propriedade no caminho for nula ou indefinida, a expressão retorna `undefined` em vez de lançar um erro.

**77.**"
O que é o operador `??` (nullish coalescing) em JavaScript?,"O operador nullish coalescing retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`, caso contrário, retorna o operando do lado esquerdo.

**78.**"
O que são os métodos de array `every()` e `some()` em JavaScript?,"`every()` testa se todos os elementos em um array passam no teste implementado por uma função fornecida. `some()` testa se pelo menos um elemento no array passa no teste implementado por uma função fornecida.

**79.**"
O que são os getters e setters em JavaScript?,"Getters e setters são métodos especiais que permitem controlar o acesso e a modificação das propriedades de um objeto. Getters definem como uma propriedade é lida, e setters definem como uma propriedade é modificada.

**82.**"
Como você define um getter em um objeto JavaScript?,"Usando a palavra-chave `get` seguida do nome da propriedade e um bloco de código.

**83.**"
Como você define um setter em um objeto JavaScript?,"Usando a palavra-chave `set` seguida do nome da propriedade, um parâmetro para o novo valor e um bloco de código.

**84.**"
O que são os iteradores e iteráveis em JavaScript?,"Um iterável é um objeto que pode ser iterado, o que significa que seus elementos podem ser acessados sequencialmente. Um iterador é um objeto que define como iterar sobre um iterável.

**85.**"
Como você cria um iterador personalizado em JavaScript?,"Implementando um método `[Symbol.iterator]()` no objeto que retorna um objeto com um método `next()` que retorna um objeto com as propriedades `value` e `done`.

**86.**"
O que é o laço `for...of` em JavaScript?,"O laço `for...of` itera sobre os valores de um objeto iterável, como um array, string ou Map.

**87.**"
O que é o laço `for...in` em JavaScript?,"O laço `for...in` itera sobre os nomes das propriedades enumeráveis de um objeto.

**88.**"
O que são os objetos Map e Set em JavaScript?,"Map é uma coleção de pares chave-valor onde as chaves podem ser de qualquer tipo de dado. Set é uma coleção de valores únicos.

**89.**"
Qual a diferença entre um objeto Map e um objeto JavaScript regular?,"Map permite chaves de qualquer tipo de dado, mantém a ordem de inserção e tem métodos convenientes para adicionar, remover e verificar a existência de chaves. Objetos JavaScript regulares têm chaves que são strings ou símbolos e não garantem a ordem de inserção.

**90.**"
Como você adiciona um elemento a um objeto Set?,"Usando o método `set.add(value)`.

**91.**"
Como você verifica se um elemento existe em um objeto Set?,"Usando o método `set.has(value)`.

**92.**"
O que são os módulos ES6 em JavaScript?,"Módulos ES6 permitem dividir o código em arquivos separados, tornando-o mais organizado e reutilizável.

**93.**"
Como você importa um módulo ES6 em JavaScript?,"Usando a palavra-chave `import`.

**94.**"
Como você exporta um módulo ES6 em JavaScript?,"Usando a palavra-chave `export`.

**95.**"
Qual a diferença entre `export default` e `export named` em JavaScript?,"`export default` exporta um único valor padrão do módulo. `export named` exporta múltiplos valores com nomes específicos.

**96.**"
O que é o operador rest (`...`) em JavaScript (parâmetros de função)?,"O operador rest permite que uma função receba um número indefinido de argumentos como um array.

**98.**"
Para que são utilizados Symbols em JavaScript?,"São utilizados para criar propriedades de objetos que são únicas e não entram em conflito com outras propriedades.

**103.**"
Qual a principal vantagem de usar WeakMap e WeakSet em relação a Map e Set?,"Previnem vazamentos de memória, pois permitem que o garbage collector recupere a memória ocupada pelos objetos que não estão mais sendo utilizados.

**105.**"
O que é Tail Call Optimization (TCO)?,"Tail Call Optimization é uma otimização que permite que uma função recursiva chame a si mesma sem aumentar o consumo de memória da pilha de chamadas, desde que a chamada recursiva seja a última operação realizada na função (tail call).  Não é amplamente suportado em JavaScript.

**106.**"
Quais são alguns dos benefícios de usar `use strict`?,"Impede o uso de variáveis não declaradas, lança erros para atribuições a propriedades somente leitura, desabilita o uso de `with`, e torna o `this` undefined em funções chamadas como funções regulares.

**108.**"
Como você cria um módulo usando uma Immediately Invoked Function Expression (IIFE)?,"Envolvendo o código do módulo em uma função anônima que é executada imediatamente, criando um escopo privado para as variáveis e funções internas.

**110.**"
Quais são os pilares da programação orientada a objetos?,"Abstração, Encapsulamento, Herança e Polimorfismo.

**112.**"
O que é encapsulamento em OOP?,"É o princípio de ocultar os detalhes internos de um objeto e expor apenas uma interface pública para interagir com ele.

**113.**"
O que é herança em OOP?,"É o mecanismo pelo qual uma classe (subclasse) herda propriedades e métodos de outra classe (superclasse).

**114.**"
O que é polimorfismo em OOP?,"É a capacidade de um objeto de assumir muitas formas. Por exemplo, um método pode ter diferentes implementações em diferentes classes.

**115.**"
Como você herda de uma classe em JavaScript?,"Usando a palavra-chave `extends`.

**118.**"
O que são os Generators em JavaScript?,"Generators são funções que podem ser pausadas e retomadas, permitindo produzir uma sequência de valores ao longo do tempo.

**124.**"
Como você define uma função Generator em JavaScript?,"Usando o asterisco (`*`) após a palavra-chave `function`.

**125.**"
Como você pausa e retoma a execução de uma função Generator?,"Usando a palavra-chave `yield`.

**126.**"
O que é o método `next()` de um Generator?,"Ele retoma a execução do Generator até o próximo `yield` e retorna um objeto com as propriedades `value` (o valor produzido pelo `yield`) e `done` (um booleano que indica se o Generator terminou).

**127.**"
O que é o BigInt em JavaScript?,"`BigInt` é um tipo de dado que permite representar inteiros com precisão arbitrária, além do limite do tipo `Number`.

**129.**"
"O que são os ""traps"" em um Proxy handler?","São métodos definidos no handler do Proxy que interceptam operações específicas no objeto target, permitindo customizar seu comportamento.

**133.**"
O que é a API Internationalization (Intl) em JavaScript?,"A API Intl fornece funcionalidades para formatar datas, números, moedas e strings de acordo com as convenções de diferentes idiomas e regiões.

**134.**"
Como você formata um número usando a API Intl?,"Usando o construtor `Intl.NumberFormat()` com as opções de localidade e formatação desejadas, e o método `format()` para aplicar a formatação.

**135.**"
Como você formata uma data usando a API Intl?,"Usando o construtor `Intl.DateTimeFormat()` com as opções de localidade e formatação desejadas, e o método `format()` para aplicar a formatação.

**136.**"
O que é a API Web Workers em JavaScript?,"A API Web Workers permite executar scripts JavaScript em threads de segundo plano, sem bloquear a thread principal da interface do usuário.

**137.**"
Como você envia mensagens para um Web Worker?,"Usando o método `postMessage()` do objeto Worker.

**139.**"
Como você recebe mensagens de um Web Worker?,"Adicionando um ouvinte de evento para o evento `message` no objeto Worker.

**140.**"
"O que são ReadableStream, WritableStream e TransformStream?","`ReadableStream` representa uma fonte de dados de onde os dados podem ser lidos em chunks. `WritableStream` representa um destino para onde os dados podem ser gravados em chunks. `TransformStream` transforma dados lidos de um `ReadableStream` antes de serem gravados em um `WritableStream`.

**142.**"
Qual é a diferença entre `apply` e `call` em JavaScript?,"Ambos são utilizados para chamar uma função com um valor `this` específico. `apply` recebe os argumentos da função como um array, enquanto `call` recebe os argumentos individualmente.

**145.**"
O que é uma função pura em programação funcional?,"É uma função que sempre retorna o mesmo resultado para as mesmas entradas e não tem efeitos colaterais (não modifica o estado externo).

**150.**"
Como você lida com concorrência em JavaScript?,"JavaScript é inerentemente single-threaded, mas pode simular concorrência usando callbacks, promises, async/await, Web Workers e event loops. Web Workers oferecem paralelismo real, enquanto as outras técnicas permitem realizar operações assíncronas sem bloquear a thread principal."
O que é hoisting em JavaScript e como ele afeta as declarações de variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover as declarações de variáveis e funções para o topo de seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto funções declaradas com a palavra-chave `function` são hoisted com sua definição completa. Variáveis declaradas com `let` e `const` são hoisted, mas não inicializadas, resultando em um erro se forem acessadas antes da declaração."
O que é a closure em JavaScript?,"Uma closure é a capacidade de uma função interna acessar variáveis de seu escopo externo (escopo léxico), mesmo após a função externa ter retornado. A função interna ""lembra"" o ambiente em que foi criada."
Como você pode verificar se um objeto é um array em JavaScript?,Você pode usar `Array.isArray(objeto)` ou `objeto instanceof Array`.
O que é o método `bind()` em JavaScript e qual a sua utilidade?,"O método `bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido. Ele permite definir o contexto (`this`) de uma função explicitamente."
"Explique o conceito de ""event bubbling"" em JavaScript.","Event bubbling é um mecanismo do DOM onde um evento disparado em um elemento filho ""borbulha"" ou propaga para seus elementos pais na árvore DOM."
O que é o objeto `this` em JavaScript e como ele é determinado?,"`this` é uma palavra-chave que se refere ao contexto de execução atual. Seu valor é determinado pela forma como a função é chamada: pode referenciar o objeto global (window/global), o objeto que chamou o método ou um objeto explicitamente definido com `call`, `apply` ou `bind`."
Explique a diferença entre `call()` e `apply()` em JavaScript.,"Ambos `call()` e `apply()` são usados para invocar uma função definindo o valor de `this`. A diferença é que `call()` espera os argumentos individualmente, enquanto `apply()` espera um array de argumentos."
O que é a função `setTimeout()` em JavaScript e como ela funciona?,`setTimeout()` agenda a execução de uma função após um determinado período de tempo (em milissegundos). Ele recebe uma função e um tempo como argumentos.
O que é a função `setInterval()` em JavaScript e como ela funciona?,`setInterval()` executa repetidamente uma função em intervalos de tempo especificados (em milissegundos). Ele recebe uma função e um tempo como argumentos.
Como você pode usar template literals para criar strings multi-linha?,Basta incluir quebras de linha dentro das strings delimitadas por acentos graves.
Como você pode usar destructuring para extrair valores de um array?,"`const [a, b] = [1, 2, 3];`  Neste caso, `a` será 1 e `b` será 2."
Como você pode usar destructuring para extrair propriedades de um objeto?,"`const { nome, idade } = { nome: 'João', idade: 30 };` Neste caso, `nome` será 'João' e `idade` será 30."
Como você pode usar o operador spread para copiar um array?,`const novoArray = [...arrayOriginal];`
Como você pode usar o operador spread para combinar dois objetos?,"`const novoObjeto = {...objeto1, ...objeto2};`"
Como você declara uma arrow function?,`const minhaFuncao = (parametro) => { return parametro * 2; };`
Qual a diferença entre uma função declarada com `function` e uma arrow function no que diz respeito ao `this`?,"Funções declaradas com `function` têm seu próprio `this`, que pode variar dependendo de como a função é chamada. Arrow functions herdam o `this` do contexto léxico onde foram definidas."
Quais os estados possíveis de uma Promise?,"Pendente (pending), Cumprida (fulfilled) e Rejeitada (rejected)."
Como você lida com o sucesso de uma Promise?,Usando o método `.then()`.
Como você lida com a falha de uma Promise?,Usando o método `.catch()`.
O que é a sintaxe `async/await` em JavaScript?,"`async/await` é uma sintaxe mais elegante para trabalhar com Promises. `async` é usado para declarar uma função assíncrona, e `await` é usado para pausar a execução de uma função assíncrona até que uma Promise seja resolvida."
Como você lida com erros em funções `async/await`?,Usando um bloco `try...catch`.
Qual a diferença entre `export default` e `export` (named export)?,"`export default` permite exportar um único valor como padrão do módulo, que pode ser importado com qualquer nome. `export` (named export) permite exportar múltiplos valores com seus nomes específicos, que devem ser importados usando esses mesmos nomes."
O que são atributos de um elemento HTML e como você pode acessá-los e modificá-los usando JavaScript?,Atributos são propriedades que fornecem informações adicionais sobre um elemento HTML. Você pode acessá-los usando métodos como `element.getAttribute()` e `element.setAttribute()`.
"O que são classes CSS e como você pode adicioná-las, removê-las ou verificar sua existência em um elemento HTML usando JavaScript?","Classes CSS são usadas para aplicar estilos a elementos HTML. Você pode manipulá-las usando a propriedade `element.classList` e seus métodos `add()`, `remove()`, `toggle()`, `contains()`."
Como você adiciona um listener de evento a um elemento HTML usando JavaScript?,"Usando o método `element.addEventListener(tipoDeEvento, funcaoDeCallback)`."
O que é a função de callback em um listener de evento?,É a função que será executada quando o evento for disparado.
O que é o objeto `event` que é passado para a função de callback em um listener de evento?,"É um objeto que contém informações sobre o evento que foi disparado, como o elemento que o disparou, as coordenadas do mouse, etc."
Como você pode propagar um evento manualmente em JavaScript?,Usando o método `element.dispatchEvent(event)`.
Quais são os métodos mais comuns do objeto `console`?,"`console.log()`, `console.warn()`, `console.error()`, `console.table()`."
O que é o método `map()` em JavaScript e qual a sua utilidade?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele é usado para transformar os elementos de um array.
O que é o método `filter()` em JavaScript e qual a sua utilidade?,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. Ele é usado para selecionar elementos de um array.
O que é o método `reduce()` em JavaScript e qual a sua utilidade?,`reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o método `forEach()` em JavaScript e qual a sua utilidade?,`forEach()` executa uma função fornecida uma vez para cada elemento de um array. Ele é usado para iterar sobre os elementos de um array.
O que é o método `slice()` em JavaScript e qual a sua utilidade?,`slice()` retorna uma cópia de uma parte de um array em um novo array. Ele recebe dois argumentos opcionais: o índice inicial e o índice final (não incluso).
O que é o método `splice()` em JavaScript e qual a sua utilidade?,`splice()` altera o conteúdo de um array removendo ou substituindo elementos existentes e/ou adicionando novos elementos no local.
O que é o método `concat()` em JavaScript e qual a sua utilidade?,`concat()` retorna um novo array contendo a junção de dois ou mais arrays.
O que é o método `join()` em JavaScript e qual a sua utilidade?,`join()` junta todos os elementos de um array em uma string. Ele recebe um argumento opcional que é o separador usado entre os elementos.
O que é o método `indexOf()` em JavaScript e qual a sua utilidade?,"`indexOf()` retorna o primeiro índice em que um determinado elemento pode ser encontrado no array, ou -1 se não estiver presente."
O que é o método `includes()` em JavaScript e qual a sua utilidade?,"`includes()` determina se um array contém um determinado elemento, retornando `true` ou `false` conforme apropriado."
Como você acessa uma propriedade de um objeto em JavaScript?,Usando a notação de ponto: `meuObjeto.nome` ou usando a notação de colchetes: `meuObjeto['nome']`.
O que é o método `Object.keys()` em JavaScript e qual a sua utilidade?,`Object.keys()` retorna um array com os nomes das propriedades (chaves) de um objeto.
O que é o método `Object.values()` em JavaScript e qual a sua utilidade?,`Object.values()` retorna um array com os valores das propriedades de um objeto.
O que é o método `Object.entries()` em JavaScript e qual a sua utilidade?,"`Object.entries()` retorna um array de arrays, onde cada subarray contém o nome e o valor de uma propriedade de um objeto (como pares [chave, valor])."
O que é o método `Object.assign()` em JavaScript e qual a sua utilidade?,`Object.assign()` copia os valores de todas as propriedades próprias enumeráveis de um ou mais objetos de origem para um objeto de destino. Ele retorna o objeto de destino.  É usado para combinar ou clonar objetos (cópia superficial).
O que é a iteração em JavaScript?,"Iteração é o processo de percorrer os elementos de uma coleção (como um array, string ou objeto) um por um."
Quais são os tipos de loops mais comuns em JavaScript?,"`for`, `while`, `do...while`, `for...in`, `for...of`."
Como você pode interromper um loop em JavaScript?,Usando a declaração `break`.
O que são funções de ordem superior (Higher-Order Functions) em JavaScript?,Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam outras funções como resultados.
Dê exemplos de funções de ordem superior nativas em JavaScript.,"`map()`, `filter()`, `reduce()`, `forEach()`, `sort()`."
Quais são os tipos de erros mais comuns em JavaScript?,"`SyntaxError`, `TypeError`, `ReferenceError`, `RangeError`, `URIError`."
Como você pode criar um erro personalizado em JavaScript?,Criando uma nova classe que herda de `Error`.
Quais são os métodos mais comuns para usar expressões regulares em JavaScript?,"`test()`, `exec()`, `match()`, `search()`, `replace()`, `split()`."
O que são lookaheads e lookbehinds em expressões regulares?,"Lookaheads e lookbehinds são asserções que especificam que um determinado padrão deve (ou não) ocorrer antes ou depois da correspondência, mas não fazem parte da correspondência em si."
O que é o modo global em expressões regulares?,"O modo global (flag `g`) indica que a expressão regular deve encontrar todas as correspondências na string, em vez de parar na primeira."
O que é o modo ignore case em expressões regulares?,O modo ignore case (flag `i`) indica que a expressão regular deve ignorar a diferença entre letras maiúsculas e minúsculas.
O que é o modo multiline em expressões regulares?,"O modo multiline (flag `m`) indica que as âncoras `^` e `$` devem corresponder ao início e ao fim de cada linha na string, em vez de apenas ao início e ao fim da string inteira."
O que é o conceito de coerção de tipo (type coercion) em JavaScript?,Coerção de tipo é o processo de converter automaticamente um valor de um tipo de dado para outro tipo de dado. Isso acontece principalmente durante operações com diferentes tipos de dados (ex: somar um número a uma string).
O que é o que é `use strict` em JavaScript?,`'use strict'` é uma diretiva que ativa o modo estrito do JavaScript.  O modo estrito impõe uma análise mais rigorosa do código e ajuda a evitar erros comuns e comportamentos inseguros.
Quais são alguns dos efeitos de usar o modo estrito em JavaScript?,"Impede o uso de variáveis não declaradas, lança um erro se `this` for indefinido em funções não-método, proíbe a duplicação de nomes de propriedades em objetos literais, entre outros."
Explique como funciona o Garbage Collection (Coleta de Lixo) em JavaScript.,A Coleta de Lixo é um processo automático que o motor JavaScript usa para liberar memória que não está mais sendo usada pelo programa.  Ele identifica objetos que não são mais acessíveis (não têm referências apontando para eles) e libera o espaço de memória que eles ocupavam.
O que é o modelo de eventos de loop (Event Loop) em JavaScript?,"O Event Loop é um mecanismo que permite que o JavaScript execute tarefas assíncronas de forma não bloqueante. Ele monitora a fila de eventos e a pilha de chamadas, transferindo tarefas da fila para a pilha quando a pilha está vazia."
O que é a fila de eventos (Event Queue) em JavaScript?,"A fila de eventos é uma estrutura de dados que armazena os eventos que foram disparados, mas ainda não foram processados. Quando o Event Loop detecta que a pilha de chamadas está vazia, ele pega o próximo evento da fila e o coloca na pilha para ser processado."
O que é o conceito de currying em JavaScript?,Currying é uma técnica que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.  O resultado final é uma função que retorna o mesmo resultado que a função original.
Como você declara uma variável em JavaScript usando `let` e qual a sua principal característica em relação a `var`?,"`let nomeVariavel = valor;`. A principal característica é que `let` tem escopo de bloco, enquanto `var` tem escopo de função ou global."
"O que é hoisting em JavaScript e como ele afeta a declaração de variáveis com `var`, `let` e `const`?","Hoisting é o comportamento do JavaScript de mover declarações para o topo do seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com valor `undefined`, enquanto `let` e `const` são hoisted, mas não inicializadas, resultando em um erro se acessadas antes da declaração."
Explique o que são closures em JavaScript e forneça um exemplo.,"Closures são funções que ""lembram"" o ambiente léxico em que foram criadas, mesmo após esse ambiente ter sido executado. Exemplo:

```javascript
function externa() {
  let valor = 10;
  function interna() {
    console.log(valor);
  }
  return interna;
}

let minhaFuncao = externa();
minhaFuncao(); // Imprime 10, mesmo após externa() ter finalizado.
```"
Como você cria um objeto em JavaScript usando a sintaxe literal?,"`let meuObjeto = { chave1: valor1, chave2: valor2 };`"
O que é o prototype em JavaScript e como ele funciona?,"Prototype é um mecanismo que permite que objetos JavaScript herdem propriedades e métodos de outros objetos. Cada objeto possui um prototype, e quando uma propriedade é acessada e não encontrada no objeto, a busca continua no seu prototype, e assim por diante, até atingir o `null`."
Qual a diferença entre `Array.forEach()` e `Array.map()` em JavaScript?,"`Array.forEach()` itera sobre os elementos de um array e executa uma função para cada elemento, mas não retorna um novo array. `Array.map()` itera sobre os elementos de um array e executa uma função para cada elemento, retornando um novo array com os resultados da função."
O que é o método `Array.filter()` em JavaScript e como ele funciona?,`Array.filter()` cria um novo array com todos os elementos que passam em um teste implementado por uma função fornecida.
Como você concatena dois ou mais arrays em JavaScript?,"Usando o método `Array.concat()`. Exemplo: `let novoArray = array1.concat(array2, array3);`"
O que é o método `Array.reduce()` em JavaScript e como ele funciona?,"`Array.reduce()` executa uma função reducer (fornecida por você) em cada elemento do array, resultando em um único valor de retorno. Ele recebe um acumulador e o elemento atual como argumentos."
O que é o método `Array.slice()` em JavaScript e como ele é usado?,"`Array.slice()` retorna uma cópia de uma parte do array, desde um índice inicial até um índice final (não incluso). Não modifica o array original."
O que é o método `String.substring()` em JavaScript e como ele é usado?,`String.substring()` retorna uma parte de uma string entre os índices inicial e final especificados. Não modifica a string original.
O que é o método `String.slice()` em JavaScript e qual a diferença dele para `String.substring()`?,"`String.slice()` também retorna uma parte de uma string entre os índices inicial e final especificados. A principal diferença é que `String.slice()` aceita índices negativos, que contam a partir do final da string, enquanto `String.substring()` trata índices negativos como 0."
Como você converte uma string em letras maiúsculas em JavaScript?,Usando o método `String.toUpperCase()`.
Como você converte uma string em letras minúsculas em JavaScript?,Usando o método `String.toLowerCase()`.
O que é o método `String.trim()` em JavaScript e como ele é usado?,`String.trim()` remove os espaços em branco do início e do fim de uma string.
Como você encontra o índice de uma substring dentro de uma string em JavaScript?,"Usando o método `String.indexOf()`. Se a substring não for encontrada, retorna -1."
O que é o método `String.replace()` em JavaScript e como ele funciona?,`String.replace()` substitui a primeira ocorrência de uma substring por outra string. Pode usar expressões regulares para substituir padrões.
Como você divide uma string em um array de substrings em JavaScript?,Usando o método `String.split()`.
O que são arrow functions em JavaScript e qual a sua principal diferença em relação às funções tradicionais?,Arrow functions são uma sintaxe mais concisa para escrever funções. A principal diferença é que arrow functions não têm seu próprio `this`; elas herdam o `this` do contexto circundante.
O que é o operador spread em JavaScript e como ele é usado?,"O operador spread permite expandir um iterável (como um array ou uma string) em locais onde são esperados zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array). Exemplo: `let novoArray = [...array1, ...array2];`"
O que é destructuring em JavaScript e como ele é usado?,"Destructuring é uma maneira de extrair valores de objetos ou arrays e atribuí-los a variáveis de forma mais concisa. Exemplo: `let { nome, idade } = pessoa;`"
O que são promises em JavaScript e como elas são usadas para lidar com operações assíncronas?,"Promises são objetos que representam o eventual resultado (ou falha) de uma operação assíncrona. Elas têm três estados: pendente (pending), resolvida (fulfilled) e rejeitada (rejected)."
O que são as palavras-chave `async` e `await` em JavaScript e como elas facilitam o trabalho com promises?,"`async` transforma uma função em uma função assíncrona, permitindo o uso de `await` dentro dela. `await` pausa a execução da função até que a promise seja resolvida, e então retorna o valor da promise."
Como você lida com erros em operações assíncronas usando promises?,Usando o método `.catch()` na promise ou usando um bloco `try...catch` dentro de uma função `async`.
O que é o objeto `Date` em JavaScript e como você o usa para trabalhar com datas e horários?,"`Date` é um objeto embutido que representa uma data e hora. Ele fornece métodos para obter e definir componentes de data e hora (ano, mês, dia, hora, minuto, segundo, milissegundo)."
Como você obtém o timestamp atual em JavaScript (em milissegundos)?,Usando `Date.now()`.
O que são expressões regulares em JavaScript e como elas são usadas?,"Expressões regulares são padrões usados para corresponder a combinações de caracteres em strings. Elas são usadas para pesquisa, substituição e validação de texto."
Quais são alguns metacaracteres comuns usados em expressões regulares?,"`.`, `*`, `+`, `?`, `^`, `$`, `[]`, `()`, `\d`, `\w`, `\s`."
Como você usa expressões regulares para verificar se uma string corresponde a um padrão?,Usando o método `String.test(expressaoRegular)` ou `expressaoRegular.test(string)`.
Como você usa expressões regulares para substituir partes de uma string?,"Usando o método `String.replace(expressaoRegular, novaString)`."
O que é o modo global em expressões regulares e como ele afeta o método `String.replace()`?,"O modo global (marcado com o flag `g`) faz com que a expressão regular encontre todas as correspondências na string, em vez de parar na primeira. Com `String.replace()`, o modo global substitui todas as ocorrências correspondentes."
O que são JSON em JavaScript e como ele é usado?,"JSON (JavaScript Object Notation) é um formato de dados leve e legível por humanos, usado para transmitir dados entre um servidor e um aplicativo web. Ele é baseado em um subconjunto da sintaxe JavaScript."
O que é o objeto `window` em JavaScript e qual a sua função?,"O objeto `window` representa a janela do navegador e é o objeto global no ambiente do navegador. Ele fornece acesso a propriedades e métodos relacionados à janela do navegador, como tamanho da janela, histórico, localização, etc."
O que é o objeto `document` em JavaScript e qual a sua função?,O objeto `document` representa o documento HTML (a página web) carregado na janela do navegador. Ele fornece acesso à estrutura do documento (DOM) e permite manipular o conteúdo e a aparência da página.
Como você seleciona um elemento HTML pelo seu ID em JavaScript?,Usando o método `document.getElementById('idDoElemento')`.
Como você seleciona elementos HTML por sua classe em JavaScript?,Usando o método `document.getElementsByClassName('nomeDaClasse')`. Este método retorna um `HTMLCollection`.
Como você seleciona elementos HTML por sua tag em JavaScript?,Usando o método `document.getElementsByTagName('nomeDaTag')`. Este método retorna um `HTMLCollection`.
Qual a diferença entre `HTMLCollection` e `NodeList` em JavaScript?,"`HTMLCollection` é uma coleção de elementos HTML, geralmente retornada por métodos como `getElementsByClassName()` e `getElementsByTagName()`. `NodeList` é uma coleção de nós (elementos, texto, comentários, etc.), geralmente retornada por métodos como `querySelectorAll()`.  `HTMLCollection` é *live*, ou seja, se o DOM mudar, a coleção é automaticamente atualizada. `NodeList` pode ser *live* ou *static*."
Como você adiciona um novo elemento HTML ao DOM em JavaScript?,"Primeiro, crie o elemento usando `document.createElement('tag')`. Em seguida, adicione atributos e conteúdo ao elemento. Finalmente, adicione o elemento ao DOM usando métodos como `appendChild()` ou `insertBefore()`."
Como você altera os atributos de um elemento HTML em JavaScript?,"Usando os métodos `setAttribute('nomeDoAtributo', 'novoValor')` ou acessando diretamente a propriedade correspondente do elemento (se existir)."
Como você adiciona ou remove classes CSS de um elemento HTML em JavaScript?,"Usando a propriedade `classList` do elemento. Métodos: `classList.add('nomeDaClasse')`, `classList.remove('nomeDaClasse')`, `classList.toggle('nomeDaClasse')`."
Como você define estilos CSS diretamente em um elemento HTML usando JavaScript?,Usando a propriedade `style` do elemento. Exemplo: `elemento.style.color = 'red';`
Como você adiciona um event listener a um elemento HTML em JavaScript?,"Usando o método `addEventListener('tipoDoEvento', funcaoCallback)`."
O que é bubbling de eventos em JavaScript e como ele funciona?,"Bubbling é o processo em que um evento disparado em um elemento se propaga para cima na hierarquia do DOM, acionando os event listeners dos elementos pai."
O que é capturing de eventos em JavaScript e como ele funciona?,"Capturing é o processo oposto ao bubbling. Um evento é primeiro capturado pelo elemento mais externo e então se propaga para baixo na hierarquia do DOM até atingir o elemento alvo. Para usar capturing, você precisa especificar o terceiro argumento de `addEventListener` como `true`."
O que são timers em JavaScript e como eles são usados?,Timers são funções que permitem executar código após um determinado período de tempo ou repetidamente em intervalos regulares.
Como você define um timer que executa uma função uma vez após um determinado atraso em JavaScript?,"Usando a função `setTimeout(funcao, atrasoEmMilissegundos)`."
Como você define um timer que executa uma função repetidamente em intervalos regulares em JavaScript?,"Usando a função `setInterval(funcao, intervaloEmMilissegundos)`."
Como você cancela um timer definido com `setTimeout()` em JavaScript?,Usando a função `clearTimeout(idDoTimer)`.
Como você cancela um timer definido com `setInterval()` em JavaScript?,Usando a função `clearInterval(idDoTimer)`.
O que é strict mode em JavaScript e como ele é ativado?,"Strict mode é um modo restrito de execução do JavaScript que impõe regras mais rigorosas para evitar erros comuns e práticas ruins. Ele é ativado adicionando a diretiva `""use strict"";` no início do script ou da função."
O que são módulos em JavaScript e como eles são usados para organizar o código?,Módulos são unidades de código independentes que encapsulam funcionalidades específicas e podem ser importadas e exportadas para reutilização em outros arquivos.
Como você exporta um valor de um módulo em JavaScript?,Usando a palavra-chave `export`. Existem exports nomeados (`export const nome = valor;`) e exports padrão (`export default valor;`).
Como você importa um valor de um módulo em JavaScript?,Usando a palavra-chave `import`. Exemplo: `import { nome } from './modulo.js';` ou `import valorPadrao from './modulo.js';`.
O que é o objeto `console` em JavaScript e quais são alguns de seus métodos comuns?,"`console` é um objeto que fornece acesso ao console do navegador, usado para exibir mensagens, erros, avisos e outras informações para desenvolvedores. Métodos comuns: `console.log()`, `console.warn()`, `console.error()`, `console.table()`."
Como você exibe um aviso no console do navegador em JavaScript?,Usando o método `console.warn()`.
Como você exibe um erro no console do navegador em JavaScript?,Usando o método `console.error()`.
Como você exibe uma tabela de dados no console do navegador em JavaScript?,Usando o método `console.table()`.
O que é `localStorage` em JavaScript e como ele é usado?,"`localStorage` é um objeto que permite armazenar dados persistentemente no navegador do usuário, mesmo após o fechamento da janela ou aba. Os dados são armazenados como strings."
Como você armazena dados no `localStorage` em JavaScript?,"Usando o método `localStorage.setItem('chave', 'valor')`. O valor deve ser uma string."
Como você recupera dados do `localStorage` em JavaScript?,Usando o método `localStorage.getItem('chave')`. Retorna `null` se a chave não existir.
Como você remove dados do `localStorage` em JavaScript?,Usando o método `localStorage.removeItem('chave')`.
O que é `sessionStorage` em JavaScript e qual a diferença entre ele e `localStorage`?,"`sessionStorage` é semelhante a `localStorage`, mas os dados armazenados são persistentes apenas durante a sessão do navegador (enquanto a janela ou aba está aberta).  Quando a sessão termina (janela ou aba é fechada), os dados são removidos."
Como você armazena dados no `sessionStorage` em JavaScript?,"Usando o método `sessionStorage.setItem('chave', 'valor')`."
Como você recupera dados do `sessionStorage` em JavaScript?,Usando o método `sessionStorage.getItem('chave')`.
Como você remove dados do `sessionStorage` em JavaScript?,Usando o método `sessionStorage.removeItem('chave')`.
Como você limpa todo o `sessionStorage` em JavaScript?,Usando o método `sessionStorage.clear()`.
O que é o método `call()` em JavaScript e como ele é usado?,`call()` chama uma função com um determinado valor `this` e argumentos fornecidos individualmente.
O que é o método `apply()` em JavaScript e como ele é usado?,`apply()` chama uma função com um determinado valor `this` e argumentos fornecidos como um array.
Qual a diferença fundamental entre `call()` e `apply()` em JavaScript?,"Ambos chamam uma função com um `this` específico, mas `call()` aceita argumentos individualmente, enquanto `apply()` aceita argumentos como um array."
Qual a palavra-chave usada dentro de uma função Generator para retornar um valor?,A palavra-chave `yield`.
Como você itera sobre os valores produzidos por uma função Generator?,Usando um loop `for...of` ou chamando o método `next()` do objeto generator.
O que é currying em JavaScript e como ele é usado?,Currying é uma técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.
O que é memoization em JavaScript e como ele é usado para otimizar o desempenho?,"Memoization é uma técnica de otimização que armazena os resultados de chamadas de função caras e retorna o resultado armazenado em cache quando as mesmas entradas ocorrem novamente, em vez de recalcular o resultado."
Como você define métodos em uma classe JavaScript?,Simplesmente definindo a função dentro do corpo da classe.  Não é necessário usar a palavra-chave `function`.
Como você cria uma instância de uma classe JavaScript?,Usando a palavra-chave `new`.  Exemplo: `const meuObjeto = new MinhaClasse();`
O que é herança em JavaScript usando classes e como você a implementa?,Herança permite que uma classe (subclasse) herde propriedades e métodos de outra classe (superclasse). É implementada usando a palavra-chave `extends`.
Como você chama o construtor da superclasse em uma subclasse em JavaScript?,Usando a função `super()` dentro do construtor da subclasse.
Como você acessa métodos da superclasse de dentro de uma subclasse em JavaScript?,Usando a palavra-chave `super`.  Exemplo: `super.meuMetodoDaSuperclasse();`
O que são métodos estáticos em classes JavaScript e como eles são usados?,"Métodos estáticos são métodos que pertencem à classe em si, em vez de instâncias da classe. Eles são definidos usando a palavra-chave `static` e são chamados diretamente na classe. Exemplo: `MinhaClasse.meuMetodoEstatico();`"
O que são getters e setters em classes JavaScript e como eles são usados?,"Getters e setters permitem controlar o acesso a propriedades de um objeto, fornecendo métodos para obter e definir o valor da propriedade. Eles são definidos usando as palavras-chave `get` e `set`."
O que é polimorfismo em programação orientada a objetos e como ele se manifesta em JavaScript?,"Polimorfismo é a capacidade de um objeto assumir muitas formas. Em JavaScript, o polimorfismo pode ser alcançado através de herança e sobrescrita de métodos. Um objeto de uma subclasse pode ser tratado como um objeto de sua superclasse."
O que são weakmaps em JavaScript e como elas diferem dos maps regulares?,"WeakMaps são coleções de pares chave/valor onde as chaves devem ser objetos. Ao contrário dos Maps, as chaves em WeakMaps são mantidas fracamente, o que significa que se não houver outras referências para o objeto chave, ele pode ser coletado pelo garbage collector, e a entrada correspondente no WeakMap será removida. Isso evita vazamentos de memória."
O que são weaksets em JavaScript e como elas diferem dos sets regulares?,"WeakSets são coleções de objetos. Assim como WeakMaps, os objetos em WeakSets são mantidos fracamente, o que significa que se não houver outras referências para o objeto, ele pode ser coletado pelo garbage collector e removido do WeakSet."
O que é tail call optimization (TCO) e como ele funciona em JavaScript (se suportado)?,Tail call optimization (TCO) é uma otimização do compilador que permite que uma chamada de função recursiva no final de outra função seja executada sem adicionar uma nova moldura à pilha de chamadas. Isso pode evitar erros de estouro de pilha para funções recursivas. O suporte para TCO em JavaScript é inconsistente e depende do ambiente de execução.
O que são decorators em JavaScript (proposta em estágio) e como eles são usados?,"Decorators são uma proposta para adicionar metadados e modificar o comportamento de classes, métodos, propriedades e parâmetros em JavaScript. Eles são definidos usando a sintaxe `@decoratorName` e podem ser usados para adicionar funcionalidades como logging, validação e autorização."
O que é o BigInt em JavaScript e qual o seu propósito?,BigInt é um tipo de dado numérico que permite representar inteiros de comprimento arbitrário. Ele é usado para realizar operações com números inteiros que excedem os limites do tipo `Number`.
Quais são algumas limitações ao usar BigInt em JavaScript?,"BigInt não pode ser usado com operadores matemáticos tradicionais com números regulares. Você precisa usar apenas BigInts em operações matemáticas. Além disso, não há suporte para `Math` com BigInts."
O que são Symbols em JavaScript e qual o seu propósito?,Symbols são um tipo de dado primitivo que representa um identificador único. Eles são usados para criar propriedades de objeto que são garantidamente únicas e não entrarão em conflito com outras propriedades.
O que são Symbol.iterator e Symbol.toStringTag em JavaScript?,`Symbol.iterator` é um símbolo bem conhecido que especifica o método padrão para iterar sobre um objeto. `Symbol.toStringTag` é um símbolo bem conhecido que permite personalizar a string retornada pelo método `Object.prototype.toString()` para um objeto.
"O que são os métodos `Object.entries()`, `Object.keys()` e `Object.values()` em JavaScript e como eles são usados?","*   `Object.entries()` retorna um array de pares chave/valor de um objeto.
*   `Object.keys()` retorna um array com as chaves de um objeto.
*   `Object.values()` retorna um array com os valores de um objeto."
Como você faz uma requisição GET usando a Fetch API em JavaScript?,Usando a função `fetch('url')`. Exemplo: `fetch('https://api.exemplo.com/dados').then(response => response.json()).then(data => console.log(data));`
Como você faz uma requisição POST usando a Fetch API em JavaScript?,"Fornecendo um objeto de opções para a função `fetch()`, incluindo o método como `'POST'` e o corpo da requisição como uma string JSON. Exemplo:

```javascript
fetch('https://api.exemplo.com/dados', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({ chave: 'valor' })
}).then(response => response.json()).then(data => console.log(data));
```"
Como você lida com erros ao usar a Fetch API em JavaScript?,Verificando a propriedade `ok` do objeto `response` e lançando um erro se ela for `false`. Você também pode
Como você impede que o padrão de evento aconteça em JavaScript?,Usando o método `event.preventDefault()` dentro da função de tratamento do evento.
Qual a função do método `reduce()` em arrays?,`reduce()` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.
O que é o uso de template literals (template strings) em JavaScript?,Template literals (usando crases ``) permitem a interpolação de strings e multilinhas de forma mais legível.
O que é uma função de ordem superior em JavaScript?,É uma função que recebe outras funções como argumentos ou retorna uma função como resultado.
O que é JSON e como é usado em JavaScript?,"JSON (JavaScript Object Notation) é um formato de dados leve e legível para humanos. Em JavaScript, é usado para transmitir dados entre um servidor e um cliente (geralmente através de APIs)."
Como você exporta funcionalidades de um módulo em JavaScript?,"Usando `export` (pode ser `export default` para exportar um único valor padrão ou `export { nome1, nome2 }` para exportar múltiplos valores)."
Como você importa funcionalidades de um módulo em JavaScript?,"Usando `import` (pode ser `import valorPadrao from './modulo.js'` ou `import { nome1, nome2 } from './modulo.js'`)."
Como você seleciona elementos HTML por classe usando JavaScript?,"Usando `document.getElementsByClassName(""nomeDaClasse"")`."
Como você seleciona elementos HTML por tag name usando JavaScript?,"Usando `document.getElementsByTagName(""nomeDaTag"")`."
Como você adiciona um atributo a um elemento HTML usando JavaScript?,"Usando o método `setAttribute(""nomeDoAtributo"", ""valorDoAtributo"")`."
Como você remove um atributo de um elemento HTML usando JavaScript?,"Usando o método `removeAttribute(""nomeDoAtributo"")`."
Qual a diferença entre funções síncronas e assíncronas?,Funções síncronas bloqueiam a execução do código até que terminem. Funções assíncronas permitem que o código continue a ser executado enquanto esperam que a operação assíncrona seja concluída.
Como você para a execução de um `setInterval()`?,Usando `clearInterval(idDoIntervalo)`.
O que é o método `clearTimeout()` em JavaScript?,`clearTimeout()` cancela um timeout definido com `setTimeout()`.
Qual a diferença entre funções declaradas e expressões de função?,"Funções declaradas são hoisted (elevadas ao topo do escopo), enquanto expressões de função não são hoisted."
Qual é o propósito de um IIFE?,Criar um escopo privado para evitar conflitos de nomes de variáveis com o escopo global.
O que é o modo strict em JavaScript?,"É um modo que aplica regras mais rígidas ao código JavaScript, ajudando a prevenir erros comuns e a otimizar o desempenho."
Como você ativa o modo strict em JavaScript?,"Adicionando a string `""use strict"";` no início de um script ou função."
O que são template literals tagged?,"São template literals precedidas por uma função (a tag), que pode processar o template literal antes de retornar a string final."
Como você cria uma template literal tagged?,`tag\`String com ${variavel}\``
O que é a spread syntax (...) em JavaScript?,A spread syntax permite expandir um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados.
Como você usa a spread syntax para copiar um array?,`const novoArray = [...arrayOriginal]`
Como você usa a spread syntax para juntar dois arrays?,"`const arrayFinal = [...array1, ...array2]`"
O que é o rest parameter em JavaScript?,O rest parameter permite que uma função aceite um número indefinido de argumentos como um array.
Como você usa o rest parameter em uma função?,`function minhaFuncao(...args) { // args é um array com os argumentos passados }`
Como você usa destructuring para extrair valores de um objeto?,"`const { propriedade1, propriedade2 } = objeto`"
Como você usa destructuring para extrair valores de um array?,"`const [elemento1, elemento2] = array`"
O que são object literals enhanced em JavaScript?,"São formas mais concisas de criar objetos, como omitir a propriedade e o valor se tiverem o mesmo nome e usar nomes de métodos mais curtos."
Como você usa shorthand property names em object literals enhanced?,"`const nome = ""João""; const idade = 30; const pessoa = { nome, idade };`"
Como você define um default parameter em uma função?,`function minhaFuncao(parametro = valorPadrao) { // ... }`
Como você declara uma função generator em JavaScript?,`function* minhaFuncaoGenerator() { // ... yield valor; }`
O que é o método `next()` em um objeto generator?,`next()` retoma a execução da função generator até o próximo `yield` ou até o final da função.
Qual o método fundamental para criar um iterator?,O método `next()`.
O que é um símbolo em JavaScript?,"Um símbolo é um tipo de dado primitivo único e imutável, usado principalmente como chaves de propriedade de objeto para evitar colisões de nomes."
Como você cria um símbolo em JavaScript?,"`const meuSimbolo = Symbol(""descrição"")`"
Qual a finalidade de usar símbolos como chaves de propriedades de objeto?,"Criar propriedades privadas, pois elas não são acessíveis por métodos convencionais de iteração."
Qual a principal diferença entre um Map e um WeakMap?,"As chaves de um WeakMap precisam ser objetos, enquanto as chaves de um Map podem ser de qualquer tipo de dado."
Qual a principal diferença entre um Set e um WeakSet?,Um WeakSet só pode conter objetos e não é iterável.
O que é a propriedade `prototype` em JavaScript?,É um objeto associado a cada função que serve como um modelo para outros objetos.
Como você usa o prototype para adicionar métodos a todos os objetos de um determinado tipo?,`TipoDeObjeto.prototype.novoMetodo = function() { // código do método }`
Como você usa `super()` em um construtor de classe?,`super()` chama o construtor da classe pai.
O que é o método `test()` de uma regular expression?,`test()` verifica se uma string corresponde ao padrão da regular expression e retorna `true` ou `false`.
O que é o método `exec()` de uma regular expression?,`exec()` executa uma busca por uma correspondência em uma string e retorna um array com informações sobre a correspondência ou `null` se não houver correspondência.
O que são quantificadores em regular expressions?,"Quantificadores especificam quantas ocorrências de um caractere, grupo ou classe de caracteres devem estar presentes para que haja uma correspondência."
Dê um exemplo de um quantificador em regular expressions.,"`*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `{n}` (exatamente n ocorrências), `{n,}` (n ou mais ocorrências), `{n,m}` (entre n e m ocorrências)."
O que são character classes em regular expressions?,Character classes definem um conjunto de caracteres que podem ser usados para corresponder a um único caractere em uma string.
Dê um exemplo de uma character class em regular expressions.,"`.` (qualquer caractere, exceto quebras de linha), `\d` (dígito), `\w` (caractere alfanumérico ou underscore), `\s` (espaço em branco), `[abc]` (qualquer caractere entre a, b ou c), `[^abc]` (qualquer caractere diferente de a, b ou c)."
O que são capturing groups em regular expressions?,Capturing groups são partes de uma regular expression que são cercadas por parênteses `()` e que capturam a parte da string que corresponde a esse grupo.
Como você acessa os capturing groups em JavaScript?,Os grupos capturados são armazenados em um array retornado pelo método `exec()` ou `match()`.
O que são lookarounds em regular expressions?,"Lookarounds são construções que permitem corresponder a um padrão com base no que vem antes ou depois dele, sem incluir esses caracteres no resultado da correspondência."
O que é um positive lookahead em regular expressions?,Um positive lookahead `(?=...)` corresponde a um padrão somente se for seguido pelo padrão especificado.
O que é um negative lookahead em regular expressions?,Um negative lookahead `(?!...)` corresponde a um padrão somente se não for seguido pelo padrão especificado.
O que é um positive lookbehind em regular expressions?,Um positive lookbehind `(?<=...)` corresponde a um padrão somente se for precedido pelo padrão especificado.
O que é um negative lookbehind em regular expressions?,Um negative lookbehind `(?<!...)` corresponde a um padrão somente se não for precedido pelo padrão especificado.
O que são flags em regular expressions?,Flags são opções que modificam o comportamento de uma regular expression.
Dê exemplos de flags em regular expressions.,"`g` (global), `i` (ignore case), `m` (multiline), `s` (dotall), `u` (unicode), `y` (sticky)."
O que é um Named Capture Group?,"Um Named Capture Group, permite dar um nome para um grupo de captura da Regex."
Como definir e referenciar um Named Capture Group em JavaScript?,"`(?<nomeDoGrupo>...)` para definir e referenciar com `match.groups.nomeDoGrupo`.

Espero que estas perguntas e respostas sejam úteis para aprofundar seu conhecimento em JavaScript!"
O que é o operador `void` em JavaScript e qual sua principal utilidade?,"O operador `void` avalia uma expressão e retorna `undefined`. Sua principal utilidade é evitar que o resultado de uma expressão, como um `<a>` com `href=""javascript:...""`, sobrescreva o conteúdo da página."
Explique o que é o método `bind()` em JavaScript.,"`bind()` cria uma nova função com o `this` definido para um valor específico, permitindo que você defina o contexto de execução da função."
Qual a finalidade dos métodos `call()` e `apply()` em JavaScript?,"`call()` e `apply()` são usados para invocar uma função com um valor `this` específico e argumentos. `call()` recebe argumentos individualmente, enquanto `apply()` recebe um array de argumentos."
Como funciona a herança prototipal em JavaScript?,"A herança prototipal funciona criando uma cadeia de prototypes, onde cada objeto herda propriedades e métodos do prototype do objeto pai. Isso é feito definindo o prototype de um objeto como uma instância de outro objeto."
Qual a diferença entre uma função declarada (`function myFunction() {}`) e uma expressão de função (`var myFunction = function() {}`) em JavaScript?,"Funções declaradas são hoisted, o que significa que podem ser chamadas antes de sua declaração no código. Expressões de função não são hoisted e devem ser definidas antes de serem chamadas."
O que é o objeto `this` em JavaScript e como seu valor é determinado?,"`this` refere-se ao contexto de execução atual. Seu valor é determinado pela forma como a função é chamada. Pode referir-se ao objeto global (em modo não estrito), ao objeto que chamou o método, ou ao objeto especificado com `call()`, `apply()` ou `bind()`."
O que são templates strings (template literals) em JavaScript?,Template strings são strings delimitadas por crases (``) que permitem interpolação de variáveis e expressões dentro da string usando `${...}`.
Explique o operador spread (...) em JavaScript.,O operador spread permite expandir um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados. Também pode ser usado para criar cópias de objetos.
O que são arrow functions em JavaScript e como elas se diferenciam das funções tradicionais?,Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas têm uma sintaxe mais curta e não têm seu próprio `this` (herdam o `this` do contexto circundante). Também não possuem o objeto `arguments`.
Como você lida com operações assíncronas em JavaScript usando Promises?,Usando os métodos `then()` (para lidar com o sucesso) e `catch()` (para lidar com a falha) de uma Promise.
O que é o JSON (JavaScript Object Notation)?,JSON é um formato leve para troca de dados. É baseado em um subconjunto da linguagem JavaScript e é facilmente legível por humanos e máquinas.
Como você converte um objeto JavaScript em uma string JSON e vice-versa?,Usando os métodos `JSON.stringify()` (para converter um objeto em uma string JSON) e `JSON.parse()` (para converter uma string JSON em um objeto JavaScript).
"Como você define, lê e remove cookies usando JavaScript?","Definir: `document.cookie = ""nome=valor; expires=DataExpiracao; path=/"";` Ler: `document.cookie;` Remover: Definir um cookie com a mesma chave e uma data de expiração no passado."
O que é o localStorage e sessionStorage em JavaScript?,"localStorage e sessionStorage são APIs de armazenamento web que permitem armazenar dados localmente no navegador do usuário. localStorage armazena dados persistentemente (até que sejam removidos), enquanto sessionStorage armazena dados apenas durante a sessão do navegador."
Como você seleciona elementos HTML usando JavaScript?,"Usando métodos como `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()`, `document.querySelector()` e `document.querySelectorAll()`."
Como você adiciona e remove classes CSS de um elemento HTML usando JavaScript?,"Usando as propriedades `classList.add()`, `classList.remove()` e `classList.toggle()` do elemento."
O que é o atributo `data-*` em HTML e como você o acessa usando JavaScript?,`data-*` são atributos personalizados que você pode adicionar a elementos HTML para armazenar dados adicionais. Você pode acessá-los usando a propriedade `dataset` do elemento.
O que é o `requestAnimationFrame()` em JavaScript?,`requestAnimationFrame()` agenda uma função para ser executada antes da próxima repintura do navegador. É usado para criar animações suaves e otimizadas.
Como você importa e exporta funcionalidades em módulos JavaScript (ES Modules)?,"Usando as palavras-chave `import` e `export`.  `export` marca as variáveis/funções/classes que devem ser acessíveis de fora do módulo, e `import` importa esses elementos de outros módulos."
Qual a diferença entre `export default` e `export` (named exports) em JavaScript?,`export default` define uma exportação padrão para um módulo. Cada módulo pode ter apenas uma exportação padrão. `export` (named exports) permite exportar vários valores com nomes específicos.
O que é a função `eval()` em JavaScript e quais os seus riscos?,"`eval()` executa uma string como código JavaScript. É considerado perigoso porque pode executar código arbitrário, tornando seu aplicativo vulnerável a ataques de injeção de código."
Como você cancela um `setTimeout()` ou `setInterval()` em JavaScript?,Usando as funções `clearTimeout()` (para cancelar um `setTimeout()`) e `clearInterval()` (para cancelar um `setInterval()`).
Quais são alguns métodos comuns de string que usam expressões regulares em JavaScript?,"`search()`, `match()`, `replace()` e `split()`."
O que são erros `TypeError` em JavaScript?,"Erros `TypeError` ocorrem quando uma operação é realizada em um valor de um tipo inesperado, por exemplo, chamar um método em um valor `undefined` ou `null`."
O que são erros `ReferenceError` em JavaScript?,Erros `ReferenceError` ocorrem quando você tenta usar uma variável que não foi declarada.
O que são erros `SyntaxError` em JavaScript?,"Erros `SyntaxError` ocorrem quando o código JavaScript não está sintaticamente correto, ou seja, viola as regras da linguagem."
Como você pode tratar erros em JavaScript?,"Usando blocos `try...catch`. O código que pode gerar um erro é colocado dentro do bloco `try`, e o código que lida com o erro é colocado dentro do bloco `catch`."
O que é o método `debugger` em JavaScript?,"O método `debugger` insere um ponto de interrupção no código, permitindo que você depure o código usando as ferramentas de desenvolvedor do navegador."
O que é a coerção de tipo em JavaScript?,Coerção de tipo é a conversão automática de um tipo de dado para outro pelo JavaScript.
O que são valores truthy e falsy em JavaScript?,"Valores truthy são valores que são avaliados como `true` em um contexto booleano (por exemplo, `1`, `""hello""`, `[]`, `{}`). Valores falsy são valores que são avaliados como `false` em um contexto booleano (por exemplo, `0`, `""""`, `null`, `undefined`, `NaN`)."
O que é o operador ternário (condicional) em JavaScript?,O operador ternário é uma forma concisa de escrever uma instrução `if...else`. Sua sintaxe é `condição ? expressão1 : expressão2`.
O que é o operador vírgula em JavaScript?,O operador vírgula avalia cada um de seus operandos (da esquerda para a direita) e retorna o valor do último operando.
O que são labels em JavaScript?,Labels são identificadores que podem ser usados com as instruções `break` e `continue` para controlar o fluxo de loops aninhados.
O que é o método `Array.map()` em JavaScript?,`Array.map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
O que é o método `Array.filter()` em JavaScript?,`Array.filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `Array.reduce()` em JavaScript?,`Array.reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
Quais são algumas funções comuns do objeto `Math` em JavaScript?,"`Math.random()`, `Math.floor()`, `Math.ceil()`, `Math.round()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`."
O que é o método `Date` em JavaScript?,O objeto `Date` é usado para trabalhar com datas e horários em JavaScript.
O que é a palavra-chave `yield` em uma função Generator?,A palavra-chave `yield` pausa a execução da função generator e retorna um valor. A execução pode ser retomada posteriormente.
Qual a principal diferença entre WeakMap e Map?,"Em um WeakMap, as chaves devem ser objetos. Em um Map, as chaves podem ser de qualquer tipo de dado.  WeakMaps não são iteráveis e não têm a propriedade `size`."
Qual a principal diferença entre WeakSet e Set?,Um WeakSet pode armazenar apenas objetos. Um Set pode armazenar qualquer tipo de dado. WeakSets não são iteráveis e não tem a propriedade `size`.
Como você cria um Proxy em JavaScript?,"Usando o construtor `new Proxy(target, handler)`, onde `target` é o objeto a ser proxy e `handler` é um objeto que define os comportamentos interceptados."
O que são memory leaks (vazamentos de memória) em JavaScript?,"Memory leaks ocorrem quando a memória alocada por um programa não é liberada, mesmo que não esteja mais sendo usada. Isso pode levar a um desempenho degradado e, eventualmente, ao travamento do aplicativo."
Quais são algumas causas comuns de memory leaks em JavaScript?,"Variáveis globais acidentais, closures que retêm referências a variáveis externas por muito tempo, timers e listeners não removidos."
Como você cria um web worker em JavaScript?,Criando uma nova instância do objeto `Worker`: `new Worker('meu-worker.js')`.
Como você comunica entre a thread principal e um web worker em JavaScript?,Usando o método `postMessage()` para enviar mensagens e o evento `message` para receber mensagens.
O que são metadados de classe (Class Metadata) em JavaScript?,"Metadados de classe são dados adicionais que podem ser associados a classes e seus membros. Eles são usados para fornecer informações adicionais sobre o código, como anotações ou configurações. (Observação: o suporte nativo para metadados de classe em JavaScript está em desenvolvimento e não é amplamente suportado)."
Como funcionam os decorators em JavaScript?,"Decorators são funções que recebem a classe, método, propriedade ou parâmetro como argumento e retornam uma nova versão modificada ou estendida. Eles são aplicados usando a sintaxe `@decorator`."
O que é o método `Intl` em JavaScript?,"O objeto `Intl` é o namespace para a API de Internacionalização do JavaScript, que fornece formatação sensível à linguagem para datas, números, moedas e outras informações específicas da cultura."
O que são TCO (Tail Call Optimization) em JavaScript?,TCO é uma otimização que permite que certas chamadas de função recursivas sejam executadas sem aumentar o tamanho da pilha de chamadas. (Observação: o suporte para TCO em JavaScript é limitado e não está presente em todos os ambientes).
Como você pode promover a imutabilidade em JavaScript?,"Usando `const` para declarar variáveis, evitando modificar arrays diretamente (usando métodos como `map`, `filter`, `reduce`, `concat`), criando cópias de objetos antes de modificá-los (usando spread operator ou `Object.assign`), e usando bibliotecas de imutabilidade."
O que é o Deno?,"Deno é um runtime para JavaScript e TypeScript criado por Ryan Dahl, o mesmo criador do Node.js. Deno tem como foco a segurança e a produtividade e possui TypeScript embutido. (Embora o Deno não seja JavaScript puro, a pergunta é relevante por seu impacto no ecossistema JS)."
O que é um event loop (laço de eventos) em JavaScript?,O event loop é um mecanismo que permite que o JavaScript execute tarefas assíncronas sem bloquear a thread principal. Ele monitora a pilha de chamadas e a fila de tarefas e move tarefas da fila para a pilha quando a pilha está vazia.
O que é um microtask queue em JavaScript?,A microtask queue é uma fila especial usada para enfileirar pequenas tarefas que devem ser executadas antes da próxima renderização da página. As Promises usam a microtask queue para enfileirar seus callbacks `then` e `catch`. As microtasks têm prioridade sobre as tarefas regulares da fila de eventos.
O que é shadow DOM?,"Shadow DOM permite encapsular partes de um componente web. Isso permite que o HTML, CSS e JavaScript de um componente web sejam mantidos separados do resto do documento."
O que é o operador `as` em TypeScript?,"O operador `as` em TypeScript é usado para realizar type assertion, que é uma forma de dizer ao compilador TypeScript para tratar uma expressão como tendo um tipo diferente do que o compilador infere. (Embora o TypeScript não seja JavaScript puro, a pergunta é relevante por seu impacto no ecossistema JS)."
O que é JSDoc?,"JSDoc é um padrão de marcação para documentar código JavaScript. Ele usa comentários especiais no código para gerar documentação API.

Essas perguntas e respostas devem fornecer uma base sólida para testar e aprofundar seus conhecimentos em JavaScript. Lembre-se de que a prática e a experimentação são fundamentais para dominar qualquer linguagem de programação."
O que é hoisting em JavaScript e como ele se aplica a variáveis declaradas com `var` e `let/const`?,"Hoisting é o comportamento do JavaScript de mover declarações para o topo do seu escopo antes da execução do código. Variáveis declaradas com `var` são ""hoisted"" e inicializadas com `undefined`, enquanto variáveis declaradas com `let` e `const` também são ""hoisted"" mas não inicializadas, resultando em um erro de referência se acessadas antes da declaração."
Explique o que são Closures em JavaScript.,"Closures são funções que ""lembram"" do ambiente léxico em que foram criadas. Elas dão acesso ao escopo de uma função externa mesmo após a função externa ter retornado."
Qual é a finalidade da palavra-chave `this` em JavaScript?,"`this` refere-se ao objeto no qual a função está sendo executada. Seu valor é determinado pelo contexto de execução da função, podendo variar dependendo de como a função é chamada."
Como você pode evitar modificar um array original ao usar métodos como `splice` ou `sort`?,"Para evitar modificar o array original, você pode criar uma cópia usando o método `slice()` ou o operador spread (`...`) antes de aplicar `splice` ou `sort`."
O que é um IIFE (Immediately Invoked Function Expression)? Dê um exemplo.,"Um IIFE é uma função que é executada assim que é definida. Exemplo: `(function() { console.log(""IIFE executada!""); })();`"
Explique o conceito de event bubbling em JavaScript.,"Event bubbling é quando um evento acionado em um elemento dispara os manipuladores de eventos dos seus elementos pais na hierarquia DOM.

**Conjunto 2:**"
O que são template literals (template strings) e como eles funcionam?,Template literals são strings delimitadas por crases (` `) que permitem a incorporação de expressões JavaScript usando `${expressao}`. Eles também suportam strings multi-linha.
O que é destructuring em JavaScript? Dê um exemplo.,"Destructuring é uma forma concisa de extrair valores de objetos ou arrays e atribuí-los a variáveis. Exemplo: `const { nome, idade } = pessoa;`"
"Qual a diferença entre `map`, `filter` e `reduce` em arrays?",`map` transforma cada elemento de um array em um novo valor e retorna um novo array. `filter` cria um novo array com todos os elementos que passam em um teste especificado. `reduce` aplica uma função a um acumulador e a cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor.
Como você pode converter um objeto em uma string JSON em JavaScript?,Você pode usar o método `JSON.stringify(objeto)` para converter um objeto em uma string JSON.
Como você pode converter uma string JSON de volta para um objeto JavaScript?,Você pode usar o método `JSON.parse(stringJSON)` para converter uma string JSON de volta para um objeto JavaScript.
Explique o que é o conceito de immutability em JavaScript e como você pode implementá-lo.,"Imutabilidade significa que, após a criação, um objeto não pode ser modificado. Você pode implementá-lo usando métodos como `Object.freeze()`, `const`, ou bibliotecas que fornecem estruturas de dados imutáveis.

**Conjunto 3:**"
O que é o operador spread (`...`) em JavaScript e quais são seus usos comuns?,"O operador spread expande um iterável (como um array ou string) em elementos individuais. É usado para copiar arrays, combinar arrays, passar argumentos para funções e criar objetos com propriedades existentes."
Como você pode criar um objeto sem protótipo em JavaScript?,Você pode usar `Object.create(null)` para criar um objeto sem protótipo.
O que é um Set em JavaScript e qual sua utilidade?,Um Set é uma coleção de valores únicos. É útil para remover duplicatas de arrays e realizar operações de conjunto.
O que é um Map em JavaScript e qual sua utilidade?,"Um Map é uma coleção de pares chave-valor, onde as chaves podem ser de qualquer tipo de dado. Ele oferece maior flexibilidade do que os objetos tradicionais como mapas."
Como você pode iterar sobre as chaves e valores de um Map em JavaScript?,"Você pode usar os métodos `keys()`, `values()` e `entries()` do objeto Map para iterar sobre suas chaves, valores e pares chave-valor, respectivamente."
O que é o método `Object.assign()` em JavaScript e qual sua utilidade?,`Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto destino. É usado para mesclar objetos.
"Explique o conceito de ""debounce"" em JavaScript.","Debounce é uma técnica para limitar a taxa na qual uma função é executada, atrasando a invocação até que um período de inatividade tenha passado desde a última vez que a função foi invocada. É útil para lidar com eventos como digitação em um campo de pesquisa.

**Conjunto 4:**"
"Explique o conceito de ""throttle"" em JavaScript.","Throttling é uma técnica para limitar a taxa na qual uma função é executada, garantindo que a função seja invocada no máximo uma vez dentro de um determinado período."
O que é o método `bind()` em JavaScript e qual sua utilidade?,"`bind()` cria uma nova função com o `this` definido para um valor específico e, opcionalmente, pré-define alguns argumentos."
O que são WeakSets e WeakMaps em JavaScript e como eles diferem de Sets e Maps regulares?,"WeakSets e WeakMaps são semelhantes a Sets e Maps, mas suas chaves devem ser objetos e eles não impedem que esses objetos sejam coletados pelo garbage collector."
O que é o método `Symbol()` em JavaScript e qual sua utilidade?,"`Symbol()` cria um valor primitivo único e imutável. Symbols são frequentemente usados para criar propriedades de objeto ""privadas""."
Como você pode comparar dois objetos em JavaScript para determinar se eles são iguais?,"Comparar objetos diretamente com `==` ou `===` verifica apenas se eles referenciam o mesmo objeto na memória. Para comparar o conteúdo dos objetos, você precisa iterar sobre as propriedades e compará-las individualmente, ou usar uma biblioteca que ofereça uma função de comparação profunda."
O que são async/await em JavaScript e como eles facilitam o trabalho com Promises?,"`async/await` são palavras-chave que tornam o código assíncrono mais fácil de ler e escrever. `async` declara uma função assíncrona, e `await` pausa a execução da função até que uma Promise seja resolvida."
"O que é ""Temporal Dead Zone"" (TDZ) em JavaScript e como ele se relaciona com `let` e `const`?","A TDZ é a área do código onde uma variável declarada com `let` ou `const` existe, mas não pode ser acessada antes de sua declaração ser avaliada. Tentar acessar a variável na TDZ resulta em um erro de referência.

**Conjunto 5:**"
Como você pode clonar um objeto em JavaScript? Quais são as diferenças entre shallow copy e deep copy?,"Você pode clonar um objeto usando o operador spread (`...`) ou `Object.assign()` para shallow copy. Deep copy requer recursão ou serialização/deserialização JSON para copiar objetos aninhados. Shallow copy copia apenas a referência, enquanto deep copy cria cópias independentes dos objetos aninhados."
O que são Mixins em JavaScript e como você pode implementá-los?,"Mixins são uma forma de reutilizar código em múltiplas classes, ""misturando"" as propriedades e métodos de um objeto em outro. Podem ser implementados copiando propriedades de um objeto para outro ou usando herança prototipal."
Explique o conceito de scope chain em JavaScript.,A scope chain é um conjunto de escopos que são pesquisados para encontrar uma variável quando ela é referenciada no código. Ela começa com o escopo local da função atual e sobe pelos escopos das funções pai até o escopo global.
Como você pode usar o `for...of` loop em JavaScript?,"O `for...of` loop é usado para iterar sobre valores de objetos iteráveis como arrays, strings, Maps, Sets, e objetos com um método `Symbol.iterator`."
Como você pode usar o `for...in` loop em JavaScript?,"O `for...in` loop é usado para iterar sobre as chaves enumeráveis de um objeto. Ele percorre todas as propriedades enumeráveis, incluindo aquelas herdadas da cadeia de protótipos."
O que é um Proxy em JavaScript e qual sua utilidade?,"Um Proxy permite interceptar e personalizar operações fundamentais em objetos, como leitura de propriedades, atribuições, enumeração e chamadas de função. Ele é usado para criar comportamentos personalizados para objetos."
O que são WeakRefs em JavaScript?,"WeakRefs permitem manter uma referência a um objeto sem impedir que esse objeto seja coletado pelo garbage collector. Eles são úteis para caches e outras situações em que você precisa de uma referência a um objeto que pode ser descartado a qualquer momento.

**Conjunto 6:**"
O que é um erro `TypeError` em JavaScript e quando ele ocorre?,"Um `TypeError` ocorre quando uma operação é realizada em um valor de um tipo inesperado. Por exemplo, chamar um método em um valor que não é uma função."
O que é um erro `ReferenceError` em JavaScript e quando ele ocorre?,Um `ReferenceError` ocorre quando se tenta usar uma variável que não foi declarada.
O que é um erro `SyntaxError` em JavaScript e quando ele ocorre?,"Um `SyntaxError` ocorre quando o código JavaScript contém um erro de sintaxe, ou seja, está escrito de forma que o interpretador não consegue entender."
"Como você pode evitar o ""callback hell"" em JavaScript?","Você pode evitar o ""callback hell"" usando Promises, async/await, ou modularizando o código em funções menores e mais gerenciáveis."
O que são arrow functions em JavaScript e como elas se comparam às funções regulares?,"Arrow functions são uma forma mais concisa de escrever funções em JavaScript. Elas não têm seu próprio `this`, `arguments`, `super`, ou `new.target`, e são lexicamente ligadas ao `this` do contexto circundante."
O que é o método `Array.from()` em JavaScript e qual sua utilidade?,`Array.from()` cria um novo array a partir de um objeto iterável ou semelhante a um array. É útil para converter NodeLists e arguments em arrays.
"O que é ""use strict"" em JavaScript e qual seu efeito?","`""use strict""` é uma diretiva que habilita o modo estrito no JavaScript. Ele impõe uma sintaxe mais rigorosa e elimina alguns comportamentos ""silenciosos"" da linguagem, tornando o código mais fácil de depurar e menos propenso a erros."
O que é o método `encodeURIComponent()` em JavaScript e qual sua utilidade?,"`encodeURIComponent()` codifica um componente URI (Uniform Resource Identifier) substituindo cada instância de certos caracteres por uma, duas, três ou quatro sequências de escape representando a codificação UTF-8 do caractere."
O que é o método `decodeURIComponent()` em JavaScript e qual sua utilidade?,`decodeURIComponent()` decodifica um componente URI (Uniform Resource Identifier) previamente codificado por `encodeURIComponent()`.
O que é a diferença entre `let` e `const`?,"`let` declara uma variável que pode ser reatribuída, enquanto `const` declara uma variável que não pode ser reatribuída após a inicialização."
O que é a diferença entre usar `var` e `let` dentro de um loop?,"Variáveis declaradas com `var` dentro de um loop têm escopo de função (ou escopo global se o loop estiver fora de uma função), enquanto variáveis declaradas com `let` têm escopo de bloco, o que significa que cada iteração do loop terá uma nova variável com um valor diferente."
O que é o conceito de hoisting de funções em JavaScript?,"Funções declaradas com a palavra-chave `function` são ""hoisted"", o que significa que podem ser chamadas antes de sua declaração no código."
O que é o método `padStart()` e `padEnd()` em JavaScript e qual sua utilidade?,"`padStart()` preenche o início de uma string com outra string (repetida, se necessário) para que a string resultante atinja um determinado comprimento. `padEnd()` faz o mesmo, mas preenche o final da string."
Explique a diferença entre os métodos `forEach()` e `map()` em arrays JavaScript.,"Ambos `forEach()` e `map()` iteram sobre um array. `forEach()` executa uma função para cada elemento, mas não retorna um novo array. `map()` executa uma função para cada elemento e retorna um novo array com os resultados da função."
O que é o método `entries()` em JavaScript e qual sua utilidade quando usado com objetos?,O método `Object.entries()` retorna um array de pares chave-valor de um objeto. É útil para iterar sobre as propriedades de um objeto.
O que é o método `keys()` em JavaScript e qual sua utilidade quando usado com objetos?,O método `Object.keys()` retorna um array com todas as chaves de um objeto. É útil para iterar sobre as chaves de um objeto.
O que é o método `values()` em JavaScript e qual sua utilidade quando usado com objetos?,O método `Object.values()` retorna um array com todos os valores de um objeto.
O que é o operador bitwise NOT (~) em JavaScript?,O operador bitwise NOT (~) inverte todos os bits de um número.
"O que são os operadores bitwise AND (&), OR (|) e XOR (^) em JavaScript?",`&` (AND) retorna 1 se ambos os bits forem 1. `|` (OR) retorna 1 se pelo menos um bit for 1. `^` (XOR) retorna 1 se os bits forem diferentes.
O que é o operador de deslocamento de bits à esquerda (<<) e à direita (>>) em JavaScript?,"`<<` (deslocamento à esquerda) desloca os bits para a esquerda, preenchendo com zeros à direita. `>>` (deslocamento à direita) desloca os bits para a direita, preservando o sinal (deslocamento com sinal)."
O que é o operador de deslocamento de bits à direita sem sinal (>>>) em JavaScript?,"`>>>` (deslocamento à direita sem sinal) desloca os bits para a direita, preenchendo com zeros à esquerda."
O que são DataView e ArrayBuffer em JavaScript?,"Um `ArrayBuffer` é um objeto que representa um buffer de dados binários brutos. Um `DataView` fornece uma interface para ler e escrever múltiplos tipos de dados numéricos no `ArrayBuffer`.

**Conjunto 9:**"
O que é o método `Intl.NumberFormat()` em JavaScript?,"O método `Intl.NumberFormat()` formata números de acordo com uma determinada localidade, fornecendo opções para moeda, decimais, etc."
O que é o método `Intl.DateTimeFormat()` em JavaScript?,"O método `Intl.DateTimeFormat()` formata datas e horários de acordo com uma determinada localidade, fornecendo opções para formatos de data e hora."
Como você pode formatar números como moeda em JavaScript?,"Você pode usar o método `Intl.NumberFormat()` com a opção `style: 'currency'` para formatar números como moeda, especificando a moeda desejada (por exemplo, 'USD', 'EUR', 'BRL')."
O que é o objeto `RegExp` em JavaScript e como ele é usado?,"`RegExp` é um objeto que representa uma expressão regular, usada para correspondência de padrões em strings."
"Quais são alguns modificadores comuns em expressões regulares em JavaScript (por exemplo, `g`, `i`, `m`)?","*   `g` (global): Encontra todas as correspondências em vez de parar após a primeira.
*   `i` (ignore case): Ignora a diferença entre maiúsculas e minúsculas.
*   `m` (multiline): Permite que `^` e `$` correspondam ao início e ao fim de cada linha (separadas por `\n` ou `\r`) em vez de apenas ao início e ao fim da string inteira."
Como você pode criar um temporizador em JavaScript que executa uma função apenas uma vez após um determinado período de tempo?,"Você pode usar a função `setTimeout(funcao, atraso)` para executar uma função apenas uma vez após um determinado período de tempo (em milissegundos)."
Como você pode criar um temporizador em JavaScript que executa uma função repetidamente em intervalos regulares?,"Você pode usar a função `setInterval(funcao, intervalo)` para executar uma função repetidamente em intervalos regulares (em milissegundos)."
Como você pode cancelar um temporizador criado com `setTimeout()` em JavaScript?,"Você pode cancelar um temporizador usando a função `clearTimeout(idDoTemporizador)`, onde `idDoTemporizador` é o valor retornado por `setTimeout()`."
Como você pode cancelar um temporizador criado com `setInterval()` em JavaScript?,"Você pode cancelar um temporizador usando a função `clearInterval(idDoTemporizador)`, onde `idDoTemporizador` é o valor retornado por `setInterval()`."
O que são funções recursivas em JavaScript?,Funções recursivas são funções que chamam a si mesmas.
Quais são os riscos de usar recursão excessiva em JavaScript e como você pode evitá-los?,"Recursão excessiva pode levar a um erro de ""stack overflow"" porque cada chamada de função coloca um novo quadro na pilha de chamadas. Você pode evitar isso usando recursão de cauda (se suportada) ou convertendo a recursão em um loop iterativo."
"O que é ""hoisting"" em JavaScript e como ele afeta as variáveis e funções?","Hoisting é um comportamento do JavaScript onde declarações de variáveis (usando `var`) e funções são movidas para o topo do seu escopo antes da execução do código.  Variáveis `var` são hoisted com o valor `undefined`, enquanto funções são hoisted com sua definição completa."
"Explique o conceito de ""closures"" em JavaScript.","Um closure é uma função que tem acesso ao escopo de outra função, mesmo após a função externa ter retornado. Isso permite que a função interna ""lembre"" das variáveis do escopo externo."
"O que é o ""strict mode"" em JavaScript e como você o ativa?","O ""strict mode"" é uma forma de impor regras mais rígidas no código JavaScript, ajudando a prevenir erros comuns e tornar o código mais seguro. Você o ativa adicionando a string `""use strict"";` no início do seu script ou função."
"Qual é a diferença entre `let`, `const` e `var` na declaração de variáveis?","`var` tem escopo de função ou global, enquanto `let` e `const` têm escopo de bloco. `let` permite reatribuição, enquanto `const` não permite reatribuição após a inicialização."
"O que são ""template literals"" em JavaScript?",São strings que permitem inserir expressões JavaScript diretamente dentro da string usando a sintaxe `${expressão}`. Elas são delimitadas por crases (`).
Qual é a diferença entre os métodos `forEach()` e `map()` em arrays?,"`forEach()` executa uma função em cada elemento do array, mas não retorna um novo array. `map()` executa uma função em cada elemento e retorna um novo array com os resultados."
"O que é um ""callback function"" em JavaScript?","É uma função passada como argumento para outra função, para ser executada em um momento posterior, geralmente após a conclusão de alguma operação."
"O que são ""arrow functions"" em JavaScript?","São uma sintaxe mais curta para escrever funções, com algumas diferenças em relação às funções tradicionais, principalmente no contexto de `this`."
Qual é a diferença entre `slice()` e `splice()` em arrays JavaScript?,"`slice()` retorna uma cópia de uma parte do array, sem modificar o array original. `splice()` modifica o array original removendo, substituindo ou adicionando elementos."
Como você remove espaços em branco do início e do fim de uma string em JavaScript?,"Usando os métodos `trim()`, `trimStart()` (ou `trimLeft()`) e `trimEnd()` (ou `trimRight()`)."
O que é o método `padStart()` e `padEnd()` em strings JavaScript?,"`padStart()` preenche o início de uma string com outra string até atingir um determinado comprimento. `padEnd()` faz o mesmo, mas preenche o final da string."
O que é a função `Object.freeze()` em JavaScript?,"A função `Object.freeze()` congela um objeto. Um objeto congelado não pode mais ser alterado: novas propriedades não podem ser adicionadas, propriedades existentes não podem ser removidas, seus valores não podem ser alterados e sua prototipagem não pode ser alterada. `freeze()` retorna o mesmo objeto."
O que é a função `Object.seal()` em JavaScript?,"A função `Object.seal()` sela um objeto, impedindo que novas propriedades sejam adicionadas a ele e marcando todas as propriedades existentes como não configuráveis. Os valores das propriedades presentes ainda podem ser alterados, desde que sejam graváveis."
Como você troca os valores de duas variáveis em JavaScript sem usar uma terceira variável temporária?,"Usando destructuring: `[a, b] = [b, a];`"
O que é o operador `...` (rest operator) em JavaScript?,O rest operator permite que você represente um número indefinido de argumentos como um array. Ele é usado em parâmetros de função.
Como você para a execução de um `setInterval()` em JavaScript?,Usando a função `clearInterval()` e passando o ID retornado por `setInterval()` como argumento.
O que é JSON e como você trabalha com ele em JavaScript?,"JSON (JavaScript Object Notation) é um formato leve para troca de dados. Em JavaScript, você pode usar as funções `JSON.stringify()` para converter um objeto JavaScript em uma string JSON e `JSON.parse()` para converter uma string JSON em um objeto JavaScript."
"O que são ""promises"" em JavaScript?","Promises representam o eventual resultado (ou falha) de uma operação assíncrona. Elas têm três estados: pendente (pending), cumprida (fulfilled) e rejeitada (rejected)."
Como você lida com promises em JavaScript?,Usando os métodos `.then()` para lidar com o caso de sucesso (fulfilled) e `.catch()` para lidar com o caso de falha (rejected).
"O que é uma ""generator function"" em JavaScript?","Uma função generator é uma função que pode ser interrompida e retomada, permitindo a criação de iteradores personalizados. Elas são definidas usando `function*`."
Como você define um getter e setter em um objeto JavaScript?,"Usando as palavras-chave `get` e `set` dentro da definição de um objeto. Por exemplo:
```javascript
const obj = {
  _valor: 0,
  get valor() { return this._valor; },
  set valor(novoValor) { this._valor = novoValor; }
};
```"
Como você verifica se uma propriedade existe em um objeto JavaScript?,Usando o operador `in` ou o método `hasOwnProperty()`.
Como você implementa herança prototípica em JavaScript?,Definindo o protótipo de um objeto para ser outro objeto. Isso permite que o primeiro objeto herde as propriedades e métodos do segundo objeto.
"O que é a ""queue"" em JavaScript?","A queue (fila) é uma estrutura de dados que armazena callbacks que estão prontos para serem executados, mas que ainda não foram movidos para o call stack."
"O que é o ""event capturing"" em JavaScript?","Event capturing é o processo inverso do event bubbling, onde um evento se propaga do elemento raiz do DOM para o elemento alvo, disparando os event listeners associados a cada elemento no caminho."
Como você evita o comportamento padrão de um evento em JavaScript?,Usando o método `event.preventDefault()` no objeto de evento.
"O que são ""data attributes"" em HTML e como você acessa eles em JavaScript?",Data attributes são atributos HTML que começam com `data-` e permitem armazenar informações personalizadas em elementos HTML. Você pode acessá-los em JavaScript usando a propriedade `dataset` do elemento.
"O que é ""local storage"" em JavaScript?",Local storage é um mecanismo de armazenamento web que permite armazenar dados localmente no navegador do usuário. Os dados armazenados no local storage persistem mesmo após o fechamento do navegador.
"O que é ""session storage"" em JavaScript?","Session storage é semelhante ao local storage, mas os dados armazenados no session storage são excluídos quando o usuário fecha a guia ou janela do navegador."
Como você armazena e recupera dados no local storage e session storage?,"Usando os métodos `setItem()`, `getItem()`, `removeItem()` e `clear()` do objeto `localStorage` ou `sessionStorage`."
Como você lê e define cookies em JavaScript?,Você pode acessar e modificar cookies usando a propriedade `document.cookie`.
"O que é ""caching"" em JavaScript?",Caching é o processo de armazenar dados em um local temporário (cache) para que possam ser acessados mais rapidamente no futuro.
"O que é ""Currying"" em JavaScript?",Currying é uma técnica que transforma uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada vez.
"O que é ""Composição de Funções"" em JavaScript?","Composição de funções é o processo de combinar duas ou mais funções para criar uma nova função. O resultado da primeira função é passado como argumento para a segunda função, e assim por diante."
"O que é ""debounce"" em JavaScript?",Debounce é uma técnica para limitar a taxa em que uma função é executada. Ela garante que uma função só seja executada após um determinado período de inatividade.
"O que é ""throttle"" em JavaScript?",Throttle é uma técnica para limitar a taxa em que uma função é executada. Ela garante que uma função seja executada no máximo uma vez a cada determinado período de tempo.
"O que é ""AJAX"" em JavaScript?","AJAX (Asynchronous JavaScript and XML) é uma técnica que permite que as páginas web atualizem o conteúdo de forma assíncrona, sem a necessidade de recarregar a página inteira."
Como você faz uma requisição AJAX em JavaScript?,Usando o objeto `XMLHttpRequest` ou a API `fetch`.
O que é a API `fetch` em JavaScript?,A API `fetch` é uma interface para fazer requisições HTTP em JavaScript. Ela fornece uma maneira mais moderna e flexível de substituir o objeto `XMLHttpRequest`.
"O que são ""web workers"" em JavaScript?","Web workers são scripts que são executados em segundo plano, separadamente do thread principal do navegador. Eles permitem realizar tarefas computacionalmente intensivas sem bloquear a interface do usuário."
"O que são ""service workers"" em JavaScript?","Service workers são scripts que atuam como um proxy entre o navegador e o servidor. Eles podem ser usados para implementar recursos como caching offline, notificações push e sincronização em segundo plano."
Como você seleciona elementos HTML no DOM usando JavaScript?,"Usando os métodos `getElementById()`, `getElementsByClassName()`, `getElementsByTagName()` ou `querySelector()` e `querySelectorAll()` do objeto `document`."
Como você modifica os atributos de um elemento HTML no DOM usando JavaScript?,Usando os métodos `setAttribute()` e `getAttribute()` do objeto do elemento.
Como você modifica os estilos de um elemento HTML no DOM usando JavaScript?,Acessando a propriedade `style` do objeto do elemento e definindo as propriedades de estilo desejadas.
"O que é ""shadow DOM"" em JavaScript?","Shadow DOM é uma tecnologia que permite encapsular a estrutura, o estilo e o comportamento de um componente web, protegendo-o de interferências externas."
"O que são ""custom elements"" em JavaScript?",Custom elements são elementos HTML personalizados que você pode definir usando a API Web Components. Eles permitem estender a funcionalidade do HTML e criar componentes reutilizáveis.
"O que são ""modules"" em JavaScript?",Modules são unidades de código independentes que podem ser reutilizadas em diferentes partes de um aplicativo. Eles ajudam a organizar o código e a evitar conflitos de nomes.
Como você importa e exporta modules em JavaScript?,Usando as palavras-chave `import` e `export`.
"O que é o ""ES6"" em JavaScript?","ES6 (ECMAScript 2015) é uma versão importante da linguagem JavaScript que introduziu muitas novas funcionalidades, como classes, arrow functions, let e const, template literals, modules e muito mais."
"O que é ""transpilação"" em JavaScript?",Transpilação é o processo de converter código JavaScript escrito em uma versão mais recente da linguagem (como ES6+) para uma versão mais antiga (como ES5) que é compatível com navegadores mais antigos.
"O que é ""bundling"" em JavaScript?","Bundling é o processo de combinar vários arquivos JavaScript em um único arquivo, otimizando o código para desempenho e reduzindo o número de requisições HTTP."
"O que é ""minificação"" em JavaScript?",Minificação é o processo de remover todos os caracteres desnecessários (como espaços em branco e comentários) do código JavaScript para reduzir o tamanho do arquivo.
"O que é ""code splitting"" em JavaScript?","Code splitting é a técnica de dividir o código JavaScript em vários arquivos menores que podem ser carregados sob demanda, melhorando o desempenho do aplicativo."
"O que é ""tree shaking"" em JavaScript?","Tree shaking é uma técnica para remover código não utilizado de um pacote JavaScript, reduzindo o tamanho do arquivo e melhorando o desempenho."
"O que são ""linting tools"" em JavaScript?","Linting tools são ferramentas que analisam o código JavaScript para identificar erros de sintaxe, erros de estilo e outros problemas de qualidade."
"O que são ""testing frameworks"" em JavaScript?","Testing frameworks são ferramentas que ajudam a automatizar o processo de testes de código JavaScript, garantindo que o código funcione corretamente e que as mudanças não introduzam novos erros."
"O que são ""debuggers"" em JavaScript?","Debuggers são ferramentas que permitem inspecionar o código JavaScript durante a execução, permitindo identificar e corrigir erros."
O que é o console em JavaScript?,"O console é uma ferramenta disponível nos navegadores que permite exibir mensagens de log, depurar código e interagir com o ambiente JavaScript."
O que é o método `console.log()` em JavaScript?,O método `console.log()` é usado para exibir mensagens no console do navegador.
O que é o método `console.error()` em JavaScript?,O método `console.error()` é usado para exibir mensagens de erro no console do navegador.
O que é o método `console.warn()` em JavaScript?,O método `console.warn()` é usado para exibir mensagens de aviso no console do navegador.
"O que são ""regular expressions"" em JavaScript?","Regular expressions (regex) são padrões de texto que podem ser usados para pesquisar, substituir e validar texto."
Quais são os principais métodos para trabalhar com regular expressions em JavaScript?,"`test()`, `exec()`, `match()`, `search()`, `replace()` e `split()`."
"O que são ""character classes"" em regular expressions?","Character classes definem um conjunto de caracteres que podem corresponder a um determinado ponto em um padrão. Exemplos: `[abc]` (qualquer um dos caracteres a, b ou c), `[^abc]` (qualquer caractere que não seja a, b ou c), `\d` (qualquer dígito), `\w` (qualquer caractere de palavra), `\s` (qualquer caractere de espaço em branco)."
"O que são ""flags"" em regular expressions?","Flags modificam o comportamento de uma regular expression. Exemplos: `i` (ignorar maiúsculas e minúsculas), `g` (correspondência global), `m` (multilinhas)."
"O que é ""unicode"" em JavaScript?",Unicode é um padrão para codificar caracteres que inclui praticamente todos os caracteres usados em todos os idiomas do mundo.
Como você lida com caracteres Unicode em JavaScript?,JavaScript suporta Unicode por padrão. Você pode usar os mesmos métodos de string para manipular caracteres Unicode como faria com caracteres ASCII.
Como você gera um número aleatório entre dois valores específicos em JavaScript?,`Math.floor(Math.random() * (max - min + 1)) + min;`
Como você obtém o timestamp atual em JavaScript?,Usando o método `Date.now()` ou o método `getTime()` de um objeto `Date`.
Como você calcula a diferença entre duas datas em JavaScript?,Subtraindo os timestamps das duas datas. O resultado estará em milissegundos.
"O que é ""WebAssembly"" e qual sua relação com JavaScript?",WebAssembly (Wasm) é um formato de código binário que pode ser executado em navegadores modernos. Ele foi projetado para ser uma alternativa de alto desempenho ao JavaScript para tarefas computacionalmente intensivas. JavaScript pode interagir com módulos WebAssembly.
Qual a diferença entre programação imperativa e declarativa em Javascript?,"Na programação imperativa, você detalha *como* realizar uma tarefa, passo a passo. Na programação declarativa, você descreve *o que* você quer alcançar, deixando a implementação para o sistema. Javascript suporta ambos os estilos, mas muitas vezes a programação declarativa resulta em código mais conciso e legível."
"O que é ""Object.is()"" em JavaScript?","`Object.is()` determina se dois valores são o mesmo valor. Ele é similar a `===`, mas lida com casos especiais como `NaN` (considerando `NaN` igual a `NaN`) e `-0` e `+0` (considerando-os diferentes)."
O que é a intenção por trás da criação do `BigInt` em Javascript e como ele difere do tipo `Number`?,"`BigInt` foi criado para representar inteiros de precisão arbitrária, permitindo cálculos com números maiores do que o limite seguro do tipo `Number` (Number.MAX_SAFE_INTEGER).  `Number` usa ponto flutuante de dupla precisão (64-bit), o que limita a precisão para números inteiros grandes."
Qual a diferença entre `encodeURI()` e `encodeURIComponent()` em JavaScript?,"`encodeURI()` codifica uma URI, exceto alguns caracteres. `encodeURIComponent()` codifica um componente de URI. `encodeURIComponent()` deve ser usado para codificar partes individuais de um URI, como parâmetros de consulta, enquanto `encodeURI()` deve ser usado para codificar a URI completa."
"Como você pode detectar se o usuário está utilizando o ""modo escuro"" (dark mode) no sistema operacional através de Javascript?","Usando a `window.matchMedia('(prefers-color-scheme: dark)').matches` que retorna `true` se o usuário prefere o modo escuro, e `false` caso contrário."
"O que é o ""Temporal API"" do Javascript (ainda em desenvolvimento) e quais problemas ele pretende resolver em relação ao objeto `Date` atual?","A Temporal API é uma nova API para lidar com datas e horários em JavaScript, projetada para substituir o objeto `Date` existente, que é considerado problemático devido à sua mutabilidade, inconsistências de fuso horário e falta de suporte para calendários não-gregorianos. A Temporal API é mais moderna, imutável e oferece melhor suporte para fuso horários e calendários."
O que é o objeto `arguments` e quando ele é usado?,"`arguments` é um objeto semelhante a um array disponível dentro de funções que contém todos os argumentos passados para a função, mesmo que não tenham sido definidos na assinatura da função. Ele é usado para acessar argumentos adicionais ou para funções que precisam lidar com um número variável de argumentos. Note que em arrow functions, o objeto `arguments` não está disponível."
O que é uma closure em JavaScript e por que ela é importante?,"Uma closure é a capacidade de uma função de ""lembrar"" o ambiente léxico em que foi criada, mesmo depois que a função externa já terminou de executar. Isso é importante para encapsulamento de dados, criação de funções de fábrica e manutenção de estado."
O que é um protótipo em JavaScript e como ele é usado?,"Um protótipo é um objeto do qual outros objetos herdam propriedades e métodos. Cada objeto em JavaScript tem um protótipo, e a herança é feita através da cadeia de protótipos. É usado para implementar herança e reutilização de código."
O que são arrow functions e quais suas vantagens em relação às funções tradicionais?,Arrow functions são uma sintaxe mais concisa para escrever funções em JavaScript. Elas têm um `this` léxico (herdado do contexto circundante) e não têm seu próprio objeto `arguments`. São mais adequadas para funções anônimas e callbacks.
Como você pode criar um objeto em JavaScript usando a notação literal?,"Você pode criar um objeto usando a notação literal com chaves `{}` e definindo pares chave-valor dentro das chaves, como: `let pessoa = { nome: ""João"", idade: 30 };`."
O que é o método `map()` em arrays e como ele é usado?,`map()` é um método de array que cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. É usado para transformar os elementos de um array.
O que é o método `filter()` em arrays e como ele é usado?,`filter()` é um método de array que cria um novo array com todos os elementos que passam no teste implementado pela função fornecida. É usado para selecionar elementos específicos de um array.
O que é o método `reduce()` em arrays e como ele é usado?,"`reduce()` é um método de array que aplica uma função contra um acumulador e cada elemento do array (da esquerda para a direita) para reduzi-lo a um único valor. É usado para realizar operações como somar, multiplicar ou combinar elementos de um array."
O que é o operador ternário e como ele é usado?,O operador ternário é uma forma concisa de escrever uma instrução `if...else`. Sua sintaxe é `condição ? expressão_se_verdadeiro : expressão_se_falso;`.
O que é o `typeof` operador e quais valores ele pode retornar?,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando. Ele pode retornar valores como ""number"", ""string"", ""boolean"", ""object"", ""undefined"", ""function"" e ""symbol""."
O que são template literals e como eles são usados?,Template literals são strings delimitadas por crases (`) que permitem a interpolação de variáveis e expressões dentro da string. Eles são usados para criar strings dinâmicas e multilinhas.
O que é o operador `&&` (AND lógico) e como ele funciona?,"O operador `&&` retorna o primeiro operando ""falsy"" encontrado ou o último operando se todos forem ""truthy"". Ele é usado para realizar operações lógicas AND."
O que é o operador `||` (OR lógico) e como ele funciona?,"O operador `||` retorna o primeiro operando ""truthy"" encontrado ou o último operando se todos forem ""falsy"". Ele é usado para realizar operações lógicas OR."
O que é o operador `!` (NOT lógico) e como ele funciona?,"O operador `!` retorna o inverso booleano do operando. Se o operando for ""truthy"", retorna `false`; se for ""falsy"", retorna `true`."
O que são funções construtoras em JavaScript?,Funções construtoras são funções que são usadas para criar objetos. Elas são chamadas com o operador `new` e geralmente seguem a convenção de iniciar com letra maiúscula.
Explique o conceito de herança prototípica em JavaScript.,"Herança prototípica é um modelo de herança onde objetos herdam propriedades e métodos de seus protótipos. Cada objeto tem um protótipo, e a cadeia de protótipos permite que objetos acessem propriedades e métodos de objetos ancestrais."
O que é o `this` keyword em JavaScript e como seu valor é determinado?,O `this` é uma palavra-chave que se refere ao objeto no qual a função está sendo executada. Seu valor é determinado pelo contexto de chamada da função.
O que é uma função auto-invocável (IIFE)?,Uma IIFE (Immediately Invoked Function Expression) é uma função que é executada assim que é definida. Ela é usada para criar escopos privados e evitar a poluição do escopo global.
Como você pode escrever um comentário de uma linha e um comentário de várias linhas em JavaScript?,"Comentários de uma linha são escritos usando `//`, e comentários de várias linhas são escritos usando `/* ... */`."
O que é o DOM (Document Object Model) e como ele se relaciona com JavaScript?,"O DOM é uma representação em árvore da estrutura de um documento HTML ou XML. JavaScript usa o DOM para interagir com os elementos de uma página web, manipulando seu conteúdo, estilo e comportamento."
O que é o evento bubbling em JavaScript?,"Event bubbling é o processo em que um evento disparado em um elemento do DOM ""borbulha"" para cima na árvore do DOM, disparando os manipuladores de eventos dos elementos pai."
O que é o evento capturing em JavaScript?,"Event capturing é o processo oposto ao bubbling, onde um evento é capturado pelo elemento mais externo na árvore do DOM antes de ser disparado no elemento alvo."
O que é o método `JSON.stringify()` e como ele é usado?,`JSON.stringify()` converte um objeto JavaScript em uma string JSON. Ele é usado para serializar dados para armazenamento ou transmissão.
O que é o método `JSON.parse()` e como ele é usado?,`JSON.parse()` converte uma string JSON em um objeto JavaScript. Ele é usado para desserializar dados recebidos de uma fonte externa ou armazenados anteriormente.
O que é o método `setTimeout()` e como ele é usado?,`setTimeout()` agenda a execução de uma função após um determinado período de tempo (em milissegundos). Ele é usado para executar código assíncrono após um atraso.
O que é o método `setInterval()` e como ele é usado?,`setInterval()` executa repetidamente uma função a cada determinado período de tempo (em milissegundos). Ele é usado para executar código assíncrono em intervalos regulares.
Como você pode interromper a execução de um `setInterval()`?,"Você pode interromper a execução de um `setInterval()` usando a função `clearInterval()`, passando o ID retornado por `setInterval()` como argumento."
O que é o `use strict` em JavaScript e qual seu propósito?,"`use strict` é uma diretiva que habilita o modo estrito em JavaScript. Ele ajuda a escrever código mais seguro e limpo, aplicando regras mais rigorosas e lançando erros para práticas ruins."
O que é o método `forEach()` em arrays e como ele é usado?,`forEach()` é um método de array que executa uma função para cada elemento do array. Ele é usado para iterar sobre os elementos de um array e realizar alguma ação em cada um.
Como você pode ordenar um array de números em JavaScript?,"Você pode usar o método `sort()` com uma função de comparação para ordenar um array de números. Exemplo: `numeros.sort((a, b) => a - b);` para ordenação crescente."
O que é o operador spread (`...`) e como ele é usado?,"O operador spread (`...`) permite expandir um array ou objeto em elementos individuais. Ele é usado para copiar arrays, combinar arrays, passar argumentos para funções e criar cópias de objetos."
O que é o destructuring em JavaScript e como ele é usado?,Destructuring é uma sintaxe que permite extrair valores de arrays ou propriedades de objetos e atribuí-los a variáveis de forma mais concisa.
Como você pode verificar se um número é inteiro em JavaScript?,Você pode usar `Number.isInteger(numero)` para verificar se um número é inteiro.
O que é o método `Object.keys()` e como ele é usado?,`Object.keys()` retorna um array com todas as chaves de um objeto.
O que é o método `Object.values()` e como ele é usado?,`Object.values()` retorna um array com todos os valores de um objeto.
O que é o método `Object.entries()` e como ele é usado?,"`Object.entries()` retorna um array de arrays, onde cada array interno contém um par chave-valor de um objeto."
O que é o operador `??` (nullish coalescing operator) e como ele é usado?,"O operador `??` retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`, caso contrário, retorna o operando da esquerda."
O que é o operador `?.` (optional chaining operator) e como ele é usado?,O operador `?.` permite acessar propriedades de um objeto sem causar um erro se uma propriedade intermediária for `null` ou `undefined`. Ele retorna `undefined` se a propriedade não existir.
O que são promises em JavaScript e como elas são usadas para lidar com código assíncrono?,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas têm três estados: pendente, resolvida e rejeitada. São usadas para simplificar o tratamento de código assíncrono e evitar o ""callback hell""."
O que são as palavras-chave `async` e `await` em JavaScript e como elas são usadas com promises?,"`async` é uma palavra-chave que declara uma função assíncrona, que sempre retorna uma promise. `await` é uma palavra-chave que pausa a execução da função assíncrona até que a promise seja resolvida ou rejeitada. Elas tornam o código assíncrono mais legível e semelhante ao código síncrono."
O que é o método `Promise.all()` e como ele é usado?,`Promise.all()` recebe um array de promises e retorna uma única promise que é resolvida quando todas as promises no array são resolvidas ou rejeitada se alguma promise for rejeitada.
O que é o método `Promise.race()` e como ele é usado?,`Promise.race()` recebe um array de promises e retorna uma promise que é resolvida ou rejeitada assim que a primeira promise no array for resolvida ou rejeitada.
O que é um try...catch statement em JavaScript e para que ele é usado?,"A instrução `try...catch` é usada para lidar com exceções em JavaScript. O código que pode lançar uma exceção é colocado dentro do bloco `try`, e o código que lida com a exceção é colocado dentro do bloco `catch`."
O que é o bloco `finally` em um try...catch...finally statement e quando ele é executado?,"O bloco `finally` é executado sempre após o bloco `try` e o bloco `catch`, independentemente de uma exceção ter sido lançada ou não. Ele é usado para realizar limpeza ou liberar recursos."
Como você pode lançar um erro personalizado em JavaScript?,"Você pode lançar um erro personalizado usando a palavra-chave `throw` seguida por um objeto `Error` ou uma string. Exemplo: `throw new Error(""Mensagem de erro personalizada"");`."
O que é um callback function?,"Uma callback function é uma função passada como um argumento para outra função, que é então invocada (chamada de volta) dentro da função externa para completar alguma ação."
Qual é a diferença entre uma função síncrona e assíncrona?,"Uma função síncrona é executada em ordem e bloqueia a execução de outras funções até que seja concluída. Uma função assíncrona permite que outras funções sejam executadas enquanto espera por uma operação ser concluída, utilizando callbacks, promises ou async/await para lidar com os resultados."
Como você pode evitar o callback hell em JavaScript?,"O callback hell pode ser evitado usando Promises, async/await, ou organizando o código em funções menores e mais gerenciáveis."
O que é o padrão de módulo em JavaScript e por que é importante?,"O padrão de módulo é uma forma de encapsular código JavaScript em módulos reutilizáveis e independentes. Ele ajuda a evitar conflitos de nomes, organizar o código e promover a reutilização."
Como você pode criar um módulo em JavaScript usando IIFE (Immediately Invoked Function Expression)?,Você pode criar um módulo usando IIFE envolvendo o código do módulo em uma função anônima que é executada imediatamente. Isso cria um escopo privado para as variáveis e funções do módulo.
O que são eventos customizados em JavaScript?,Eventos customizados são eventos que você define e dispara manualmente em JavaScript. Eles permitem que você crie interações personalizadas e comunique entre diferentes partes do seu código.
Como você pode criar e disparar um evento customizado em JavaScript?,Você pode criar um evento customizado usando a classe `CustomEvent` e dispará-lo usando o método `dispatchEvent()` em um elemento do DOM.
O que é o padrão Observer (também conhecido como Pub/Sub) em JavaScript?,"O padrão Observer é um padrão de design onde um objeto (o subject) mantém uma lista de seus dependentes (os observers) e notifica-os automaticamente sobre quaisquer mudanças de estado, geralmente chamando um de seus métodos."
Qual é a diferença entre deep copy e shallow copy?,"Uma shallow copy copia as referências dos objetos originais. Se você modificar o objeto copiado, o objeto original também será modificado. Uma deep copy cria uma cópia completamente nova do objeto original, incluindo todos os objetos aninhados, para que as modificações no objeto copiado não afetem o original."
O que é o método `Object.freeze()` e como ele é usado?,"`Object.freeze()` congela um objeto. Um objeto congelado não pode mais ter novas propriedades adicionadas, propriedades existentes não podem ser removidas, e valores de propriedades existentes não podem ser alterados."
O que é o método `Object.seal()` e como ele é usado?,"`Object.seal()` sela um objeto. Um objeto selado não pode ter novas propriedades adicionadas ou removidas, mas os valores das propriedades existentes podem ser alterados."
O que são WeakMaps e WeakSets em JavaScript e em que diferem de Maps e Sets?,"WeakMaps e WeakSets são coleções que mantêm referências ""fracas"" aos seus objetos-chave. Isso significa que se não houver outras referências ao objeto-chave, o garbage collector pode removê-lo da memória, e a entrada correspondente em WeakMap/WeakSet também será removida.  Maps e Sets mantêm referências fortes, o que impede o garbage collection."
O que são Typed Arrays em JavaScript?,Typed Arrays são objetos semelhantes a arrays que fornecem um mecanismo para acessar dados binários brutos na memória. Eles são mais eficientes para lidar com grandes conjuntos de dados numéricos do que arrays regulares.
O que é o Blob (Binary Large Object) em JavaScript?,"Blob é um objeto que representa dados brutos imutáveis, como imagens, áudio ou vídeo. Eles podem ser usados para armazenar dados localmente ou para enviar dados para um servidor."
O que é o FileReader API em JavaScript?,"O FileReader API permite que você leia o conteúdo de arquivos armazenados no computador do usuário. Ele pode ser usado para ler arquivos como strings, arrays de bytes ou URLs de dados."
O que é o Fetch API em JavaScript?,O Fetch API fornece uma interface moderna para fazer requisições de rede em JavaScript. Ele é baseado em Promises e oferece mais flexibilidade e controle do que o antigo XMLHttpRequest.
O que é o Service Worker em JavaScript?,"Service Workers são scripts que são executados em segundo plano e atuam como um proxy entre o navegador e a rede. Eles podem ser usados para implementar funcionalidades como cache offline, notificações push e atualizações em segundo plano."
O que é o Canvas API em JavaScript?,O Canvas API fornece uma forma de desenhar gráficos 2D em tempo real em um elemento `<canvas>` HTML usando JavaScript.
O que é o SVG (Scalable Vector Graphics) em JavaScript?,SVG é um formato de imagem vetorial baseado em XML que pode ser manipulado usando JavaScript. Ele permite que você crie gráficos escaláveis e interativos.
O que é a API de Geolocation em JavaScript?,A API de Geolocation permite que você obtenha a localização geográfica do usuário usando JavaScript.
O que é a API de Web Storage em JavaScript?,A API de Web Storage fornece mecanismos para armazenar dados localmente no navegador do usuário. Inclui `localStorage` para armazenamento persistente e `sessionStorage` para armazenamento temporário.
O que é a API de IndexedDB em JavaScript?,A API de IndexedDB é um sistema de banco de dados NoSQL transacional que permite que você armazene grandes quantidades de dados estruturados localmente no navegador do usuário.
O que é a API de History em JavaScript?,"A API de History permite que você manipule o histórico de navegação do navegador usando JavaScript. Você pode adicionar, remover ou navegar pelas entradas do histórico."
O que é a API de Clipboard em JavaScript?,A API de Clipboard permite que você interaja com a área de transferência do sistema usando JavaScript. Você pode ler dados da área de transferência ou escrever dados para ela.
O que é o Cross-Origin Resource Sharing (CORS) e como ele afeta o JavaScript?,CORS é um mecanismo de segurança que restringe solicitações HTTP de scripts executados em uma origem para recursos em uma origem diferente. Ele é projetado para proteger os usuários contra ataques de script entre sites (XSS). JavaScript é afetado por CORS ao fazer requisições para domínios diferentes do domínio da página atual.
O que são cookie em JavaScript?,"Cookies são pequenos arquivos de texto que os sites armazenam no computador do usuário para lembrar informações sobre ele, como preferências de idioma, informações de login ou itens em um carrinho de compras. JavaScript pode acessar e manipular cookies para personalizar a experiência do usuário."
O que é o Event Loop em JavaScript e qual seu papel na execução de código assíncrono?,O Event Loop é um mecanismo que permite que o JavaScript execute código assíncrono de forma não bloqueante. Ele monitora a fila de tarefas e move tarefas da fila para a pilha de chamadas quando a pilha está vazia. Isso permite que o JavaScript execute código assíncrono sem bloquear a execução do thread principal.
O que são template tags em JavaScript?,Template tags são funções que permitem personalizar a interpolação de template literals. Elas recebem o template literal como um argumento e podem processá-lo antes de retornar a string resultante.
O que é o padrão revealing module em JavaScript?,"O padrão revealing module é uma variação do padrão de módulo que expõe explicitamente apenas as funções e variáveis que devem ser acessíveis externamente, mantendo o restante privado."
O que é o Iterator Protocol em JavaScript?,O Iterator Protocol define uma interface para iteradores em JavaScript. Um objeto é um iterador se tiver um método `next()` que retorna um objeto com propriedades `value` (o próximo valor na sequência) e `done` (um booleano que indica se a iteração foi concluída).
O que é o Iterable Protocol em JavaScript?,O Iterable Protocol define uma interface para objetos iteráveis em JavaScript. Um objeto é iterável se tiver um método `[Symbol.iterator]()` que retorna um objeto iterador.
O que é o operador `for...of` em JavaScript e como ele é usado?,"O operador `for...of` é usado para iterar sobre os valores de um objeto iterável, como um array, string ou NodeList."
O que é o operador `for...in` em JavaScript e como ele é usado?,O operador `for...in` é usado para iterar sobre as propriedades enumeráveis de um objeto.
O que é o globalThis em JavaScript?,"`globalThis` é uma propriedade global que sempre se refere ao objeto global do ambiente de execução atual, seja ele um navegador (window), Node.js (global) ou outro ambiente."
O que são erros `RangeError` em JavaScript?,"Erros `RangeError` são lançados quando você tenta usar um valor que está fora do intervalo permitido, como tentar criar um array com um tamanho negativo."
O que são erros `URIError` em JavaScript?,Erros `URIError` são lançados quando você tenta usar uma função URI com um URI inválido.
O que é um breakpoint em um depurador JavaScript?,"Um breakpoint é um ponto em seu código onde o depurador irá pausar a execução, permitindo que você inspecione o estado do seu programa."
O que são linters JavaScript populares?,Linters JavaScript populares incluem ESLint e JSHint.
O que são os Design Patterns em JavaScript?,Design Patterns são soluções reutilizáveis para problemas comuns de design de software. Eles representam as melhores práticas evoluídas ao longo do tempo.
O que é o operador de coalescência nula (`??`) em JavaScript e como ele difere do operador OR lógico (`||`)?,"O operador de coalescência nula (`??`) retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`. O operador OR lógico (`||`) retorna o operando da direita quando o operando da esquerda é um valor ""falsy"" (como `0`, `""""`, `false`, `null`, `undefined`, `NaN`). A diferença é que `??` considera apenas `null` e `undefined` como valores ""nulos"", enquanto `||` considera todos os valores ""falsy""."
O que é a API de Intersection Observer em JavaScript?,"A API de Intersection Observer permite observar as mudanças na interseção de um elemento com um elemento ancestral ou com a viewport do documento. É útil para implementar carregamento preguiçoso de imagens, detecção de visibilidade de anúncios e outros efeitos baseados na posição do elemento."
Explique o conceito de debounce em JavaScript.,"Debounce é uma técnica para limitar a taxa na qual uma função é executada. Ele garante que a função seja executada apenas após um certo período de inatividade (ou seja, após um período em que o evento que aciona a função não ocorra). É útil para lidar com eventos como rolagem, redimensionamento e digitação, evitando que a função seja executada com muita frequência."
Explique o conceito de throttle em JavaScript.,"Throttling é uma técnica para limitar a taxa na qual uma função é executada. Ele garante que a função seja executada no máximo uma vez em um determinado período de tempo. É útil para lidar com eventos como rolagem, redimensionamento e digitação, garantindo que a função não seja executada com muita frequência, mas que ainda seja executada em intervalos regulares."
"Como você pode detectar o tipo de dispositivo (desktop, mobile, tablet) usando JavaScript puro?","Detectar o tipo de dispositivo com precisão usando apenas JavaScript é desafiador, mas você pode usar a propriedade `navigator.userAgent` para inspecionar a string do agente do usuário e procurar palavras-chave como ""Mobile"", ""Tablet"" ou ""Android"". No entanto, essa abordagem pode ser pouco confiável devido a falsificações do agente do usuário.  A detecção de recursos (feature detection) é geralmente uma abordagem mais robusta."
O que é a Same-Origin Policy (Política da Mesma Origem) em JavaScript?,"A Same-Origin Policy é uma importante medida de segurança dos navegadores que restringe scripts de uma origem (domínio, protocolo e porta) de acessar dados de uma origem diferente. Isso"
Como declarar uma variável em JavaScript que não pode ser reatribuída após a inicialização?,"Utilize a palavra-chave `const`. Exemplo: `const nome = ""João"";`"
O que é hoisting em JavaScript e como ele afeta as variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do seu escopo antes da execução do código. Variáveis declaradas com `var` são hoisted e inicializadas com `undefined`, enquanto funções declaradas com a palavra-chave `function` são completamente hoisted. Variáveis com `let` e `const` também sofrem hoisting, mas não são inicializadas, gerando um erro se acessadas antes da declaração."
Qual a diferença entre `map` e `forEach` em arrays?,"`map` cria um novo array com os resultados da chamada de uma função fornecida para cada elemento no array original. `forEach` executa uma função fornecida uma vez para cada elemento do array, mas não retorna um novo array."
Como você impede que um evento HTML se propague para elementos pai?,Use o método `event.stopPropagation()`.
Como selecionar um elemento HTML pelo seu ID usando JavaScript?,"Use o método `document.getElementById(""idDoElemento"")`."
O que é um evento em JavaScript? Dê exemplos.,"Um evento é uma ação ou ocorrência que acontece no navegador, como um clique do mouse, um pressionamento de tecla, um carregamento de página, etc. Exemplos: `click`, `mouseover`, `keydown`, `load`."
Como adicionar um ouvinte de evento a um elemento HTML usando JavaScript?,"Use o método `addEventListener()`. Exemplo: `elemento.addEventListener(""click"", function() { console.log(""Clicado!""); });`"
Como criar um novo objeto a partir de um protótipo existente?,Usando o método `Object.create()`.
O que são funções de seta (arrow functions) em JavaScript?,São uma forma mais concisa de escrever funções anônimas. Elas também têm um comportamento diferente do `this` em relação às funções tradicionais.
Como usar a palavra-chave `return` em uma função?,"A palavra-chave `return` termina a execução da função e retorna um valor. Se `return` for usado sem um valor, retorna `undefined`."
Como gerar um número aleatório em JavaScript?,"Use o método `Math.random()`, que retorna um número pseudoaleatório entre 0 (inclusive) e 1 (exclusivo)."
O que são strings em JavaScript?,São sequências de caracteres Unicode.
Como concatenar strings em JavaScript?,Usando o operador `+` ou o método `concat()`.
Como extrair uma parte de uma string em JavaScript?,"Use os métodos `slice()`, `substring()` ou `substr()`."
Como verificar se uma string corresponde a uma expressão regular em JavaScript?,Use o método `test()` da expressão regular ou o método `search()` da string.
O que são loops em JavaScript?,São estruturas de controle que permitem executar um bloco de código repetidamente.
Quais são os tipos de loops em JavaScript?,"`for`, `while`, `do...while`, `for...in`, `for...of`."
Como interromper a execução de um loop em JavaScript?,Use a palavra-chave `break`.
O que são condicionais em JavaScript?,São estruturas de controle que permitem executar um bloco de código com base em uma condição.
Quais são os tipos de condicionais em JavaScript?,"`if`, `else if`, `else`, `switch`."
O que é o operador lógico AND (`&&`) em JavaScript?,"Retorna `true` se ambas as expressões forem verdadeiras, caso contrário retorna `false`."
O que é o operador lógico OR (`||`) em JavaScript?,"Retorna `true` se pelo menos uma das expressões for verdadeira, caso contrário retorna `false`."
O que é o operador lógico NOT (`!`) em JavaScript?,Inverte o valor booleano de uma expressão.
O que é o operador de atribuição em JavaScript?,É o operador `=` que atribui um valor a uma variável.
Quais são os operadores de atribuição compostos em JavaScript?,"`+=`, `-=`, `*=`, `/=`, `%=`, `**=`."
O que é o operador de incremento (`++`) em JavaScript?,Incrementa o valor de uma variável em 1.
O que é o operador de decremento (`--`) em JavaScript?,Decrementa o valor de uma variável em 1.
O que é o operador de exponenciação (`**`) em JavaScript?,Eleva uma base a um expoente.
O que é o operador resto/módulo (`%`) em JavaScript?,Retorna o resto da divisão entre dois números.
Como lidar com o resultado de uma Promise?,Use os métodos `then()` (para sucesso) e `catch()` (para erro).
Como obter o tamanho da janela do navegador em JavaScript?,Use as propriedades `window.innerWidth` e `window.innerHeight`.
Como redirecionar o usuário para outra página em JavaScript?,Use a propriedade `window.location.href`.
Como exibir um alerta ao usuário em JavaScript?,Use o método `window.alert()`.
Como exibir um prompt para o usuário em JavaScript?,Use o método `window.prompt()`.
Como obter confirmação do usuário em JavaScript?,Use o método `window.confirm()`.
Como criar um cookie em JavaScript?,Atribuindo um valor à propriedade `document.cookie`.
Como ler um cookie em JavaScript?,Acessando a propriedade `document.cookie`.
O que é o localStorage em JavaScript?,É uma API do navegador que permite armazenar dados no navegador do usuário de forma persistente.
Como armazenar dados no localStorage em JavaScript?,Use o método `localStorage.setItem()`.
Como recuperar dados do localStorage em JavaScript?,Use o método `localStorage.getItem()`.
O que é o sessionStorage em JavaScript?,"É semelhante ao localStorage, mas os dados são armazenados apenas durante a sessão do navegador."
Como remover um item do localStorage em JavaScript?,Use o método `localStorage.removeItem()`.
Como limpar todo o localStorage em JavaScript?,Use o método `localStorage.clear()`.
Como importar um módulo em JavaScript (ES Modules)?,Use a palavra-chave `import`. Exemplo: `import { minhaFuncao } from './meuModulo.js';`
Como exportar um módulo em JavaScript (ES Modules)?,Use a palavra-chave `export`. Exemplo: `export function minhaFuncao() { ... }` ou `export default minhaFuncao;`
Qual a diferença entre `export default` e `export named`?,"`export default` exporta um único valor padrão do módulo, enquanto `export named` exporta múltiplos valores com nomes específicos."
Como criar um objeto `Date` em JavaScript?,Usando o construtor `new Date()`.
Como obter o ano de um objeto `Date` em JavaScript?,Use o método `getFullYear()`.
Como obter o mês de um objeto `Date` em JavaScript?,"Use o método `getMonth()`. (Retorna um valor de 0 a 11, onde 0 é Janeiro)."
Como obter o dia do mês de um objeto `Date` em JavaScript?,Use o método `getDate()`.
Como obter o dia da semana de um objeto `Date` em JavaScript?,"Use o método `getDay()`. (Retorna um valor de 0 a 6, onde 0 é Domingo)."
Qual a diferença entre `map()` e `reduce()` em arrays?,`map()` transforma cada elemento do array e retorna um novo array com os resultados. `reduce()` combina os elementos do array em um único valor.
Como encontrar um elemento em um array que satisfaça uma condição?,Use o método `find()`.
Como obter o índice de um elemento em um array que satisfaça uma condição?,Use o método `findIndex()`.
Como filtrar um array com base em uma condição?,Use o método `filter()`.
Como inverter a ordem de um array em JavaScript?,Use o método `reverse()`.
Como remover elementos duplicados de um array em JavaScript?,Usando `Set` ou `filter()` com `indexOf()`.
Como juntar os elementos de um array em uma string?,Use o método `join()`.
O que são efeitos colaterais em programação?,"São modificações de estado fora do escopo da função, como alterar variáveis globais ou fazer requisições HTTP."
Como criar um objeto imutável em JavaScript?,Usando `Object.freeze()` ou bibliotecas como Immutable.js.
Como fazer uma requisição GET usando a API Fetch?,`fetch('url').then(response => response.json()).then(data => console.log(data));`
Como fazer uma requisição POST usando a API Fetch?,"`fetch('url', { method: 'POST', body: JSON.stringify(data), headers: { 'Content-Type': 'application/json' } }).then(response => response.json()).then(data => console.log(data));`"
Como adicionar uma classe CSS a um elemento usando JavaScript?,Use a propriedade `classList.add('nomeDaClasse')`.
Como remover uma classe CSS de um elemento usando JavaScript?,Use a propriedade `classList.remove('nomeDaClasse')`.
Como verificar se um elemento possui uma classe CSS específica?,Use o método `classList.contains('nomeDaClasse')`.
Como alternar uma classe CSS de um elemento usando JavaScript?,Use o método `classList.toggle('nomeDaClasse')`.
Como modificar o estilo CSS de um elemento usando JavaScript?,Use a propriedade `style`. Exemplo: `elemento.style.backgroundColor = 'red';`
Como obter o valor de um atributo HTML de um elemento usando JavaScript?,Use o método `getAttribute('nomeDoAtributo')`.
Como definir o valor de um atributo HTML de um elemento usando JavaScript?,"Use o método `setAttribute('nomeDoAtributo', 'valor')`."
Como adicionar um elemento HTML a outro elemento usando JavaScript?,Use o método `appendChild()` ou `insertBefore()`.
O que são Data Attributes (atributos `data-*`) em HTML?,São atributos personalizados que permitem armazenar dados adicionais em elementos HTML.
Como acessar um Data Attribute em JavaScript?,Use a propriedade `dataset`. Exemplo: `elemento.dataset.meuDado`.
Quais são os benefícios do event delegation?,"Melhora o desempenho, reduz o consumo de memória e facilita o gerenciamento de eventos em elementos criados dinamicamente."
O que é debouncing em JavaScript?,"É uma técnica para limitar a frequência com que uma função é executada, adiando sua execução até que um determinado período de tempo tenha se passado sem novas invocações."
O que é throttling em JavaScript?,"É uma técnica para limitar a frequência com que uma função é executada, garantindo que ela seja executada no máximo uma vez a cada determinado período de tempo."
O que são iterators e generators em JavaScript?,"Iterators são objetos que definem uma sequência e como acessar seus valores um por vez. Generators são funções que podem ser pausadas e retomadas, permitindo a criação de iterators mais facilmente."
O que é metaprogramação em JavaScript?,"É a capacidade de escrever código que manipula outros códigos, como inspecionar, modificar ou até mesmo gerar código novo em tempo de execução.

Espero que esta lista seja útil e abranja uma variedade de conceitos importantes em JavaScript.  Se precisar de mais, é só pedir!"
O que é um closure em JavaScript e como ele funciona?,"Um closure é a capacidade de uma função interna acessar variáveis da função externa que a envolve, mesmo depois que a função externa já terminou de executar. Ele ""lembra"" o ambiente léxico em que foi criado.

**5.**"
Como você impede que um evento padrão de um elemento HTML ocorra em JavaScript?,"Você pode usar o método `event.preventDefault()` dentro do manipulador de eventos.

**7.**"
Explique o que são template literals em JavaScript e como usá-los.,"Template literals são strings delimitadas por crases (` `) que permitem inserir expressões JavaScript dentro delas usando `${expressao}`. Eles também suportam strings multi-linha.

**8.**"
O que é a `strict mode` em JavaScript e como ativá-la?,"A `strict mode` é uma forma de impor uma análise mais rigorosa do código JavaScript, ajudando a prevenir erros comuns e práticas consideradas ruins. É ativada adicionando `""use strict"";` no início de um script ou função.

**9.**"
O que faz o método `reduce()` em arrays JavaScript?,"`reduce()` executa uma função redutora (fornecida por você) em cada elemento do array, resultando em um único valor de saída.

**16.**"
Como você converte um valor para um número em JavaScript?,"Você pode usar as funções `Number()`, `parseInt()` ou `parseFloat()`.

**17.**"
Explique o conceito de bubbling de eventos em JavaScript.,"Bubbling é quando um evento acionado em um elemento filho ""borbulha"" para cima na árvore do DOM, acionando os manipuladores de evento dos elementos pais.

**23.**"
O que é o método `stopPropagation()` e quando você o usaria?,"`stopPropagation()` impede que um evento ""borbulhe"" para elementos pais no DOM, interrompendo a cadeia de eventos.  Você o usaria quando quiser que um evento seja tratado apenas no elemento atual.

**24.**"
Qual a diferença entre uma declaração de função e uma expressão de função?,"Declarações de função são hoisted, enquanto expressões de função não são (ou seja, a expressão de função é hoist como uma variável, mas não será inicializada com a função).

**26.**"
Como você passa argumentos para uma função em JavaScript?,"Você passa argumentos dentro dos parênteses ao chamar a função: `nomeDaFuncao(argumento1, argumento2)`.

**28.**"
Como você copia um array em JavaScript?,"Você pode usar o método `slice()` sem argumentos (`array.slice()`) ou o operador spread (`...array`).

**39.**"
Como você concatena arrays em JavaScript?,"Você pode usar o método `concat()` ou o operador spread (`...`).

**41.**"
Como você obtém o ano atual usando o objeto `Date` em JavaScript?,"Você pode usar `new Date().getFullYear()`.

**52.**"
Como você obtém o mês atual usando o objeto `Date` em JavaScript?,"Você pode usar `new Date().getMonth()`.  (Lembre-se que os meses são baseados em zero, então janeiro é 0).

**53.**"
Como você obtém o dia do mês atual usando o objeto `Date` em JavaScript?,"Você pode usar `new Date().getDate()`.

**54.**"
Como você exibe um alerta na janela do navegador usando JavaScript?,"Você pode usar `window.alert()` ou simplesmente `alert()`.

**59.**"
Quais são os três estados possíveis de uma Promise?,"Pending (pendente), Fulfilled (cumprida) e Rejected (rejeitada).

**65.**"
Como você lida com o resultado de uma Promise cumprida?,"Você usa o método `.then()`.

**67.**"
Como você lida com o erro de uma Promise rejeitada?,"Você usa o método `.catch()`.

**68.**"
O que é o bloco `finally()` em Promises?,"O bloco `finally()` é executado independentemente de a Promise ser cumprida ou rejeitada. Geralmente é usado para realizar tarefas de limpeza.

**69.**"
Como você lida com erros em funções `async` e `await`?,"Você usa um bloco `try...catch`.

**71.**"
Como você verifica se uma string corresponde a uma expressão regular em JavaScript?,"Você pode usar o método `test()` do objeto `RegExp` ou o método `match()` da string.

**77.**"
"O que são os modificadores de expressões regulares em JavaScript (como `i`, `g`, `m`)?","*   `i`: Insensitive (ignora maiúsculas e minúsculas).
*   `g`: Global (encontra todas as correspondências, não apenas a primeira).
*   `m`: Multiline (permite que `^` e `$` correspondam ao início e ao fim de cada linha).

**78.**"
Como você substitui partes de uma string usando uma expressão regular em JavaScript?,"Você pode usar o método `replace()` da string.

**79.**"
Como você converte uma string para letras maiúsculas em JavaScript?,"Você pode usar o método `toUpperCase()`.

**81.**"
Como você converte uma string para letras minúsculas em JavaScript?,"Você pode usar o método `toLowerCase()`.

**82.**"
Como você encontra o índice de uma substring em uma string em JavaScript?,"Você pode usar o método `indexOf()`.

**83.**"
Como você extrai uma parte de uma string em JavaScript?,"Você pode usar os métodos `slice()`, `substring()` ou `substr()`.

**84.**"
Como você declara um objeto literal em JavaScript?,"`const objeto = { chave1: valor1, chave2: valor2 };`

**93.**"
Como você usa destructuring com objetos em JavaScript?,"`const { chave1, chave2 } = objeto;`

**102.**"
Como você usa destructuring com arrays em JavaScript?,"`const [elemento1, elemento2] = array;`

**103.**"
O que é o operador rest (`...`) em JavaScript (além de spread)?,"Quando usado em parâmetros de função, o operador rest coleta todos os argumentos restantes em um array. Ex: `function minhaFuncao(...args) {}`.

**104.**"
O que é o objeto global `this` em JavaScript?,"O valor de `this` depende de como a função é chamada. No escopo global, `this` se refere ao objeto global (window no navegador). Dentro de uma função, o valor de `this` depende de como a função é chamada.

**105.**"
Como o `this` se comporta dentro de uma função normal em JavaScript?,"Se a função é chamada como um método de um objeto, `this` se refere ao objeto. Se a função é chamada sozinha, `this` se refere ao objeto global (ou `undefined` em strict mode).

**106.**"
Como o `this` se comporta dentro de uma arrow function em JavaScript?,"Arrow functions não têm seu próprio `this`. `this` é lexicamente vinculado ao `this` do contexto circundante.

**107.**"
O que são métodos de array imutáveis?,"São métodos que, ao serem utilizados, não alteram o array original, retornando um novo array modificado. Ex: `map`, `filter`, `slice`.

**108.**"
O que são métodos de array mutáveis?,"São métodos que, ao serem utilizados, alteram o array original. Ex: `push`, `pop`, `splice`, `sort`, `reverse`.

**109.**"
O que é o Garbage Collector (coletor de lixo) em JavaScript?,"É um processo automático que libera a memória que não está mais sendo usada pelo programa.

**110.**"
O que é o escopo léxico?,"O escopo léxico significa que o escopo de uma variável é determinado pela sua posição no código fonte.

**111.**"
Quais são os valores falsy em JavaScript?,"`false`, `0`, `-0`, `0n`, `""""`, `null`, `undefined`, e `NaN`.

**114.**"
O que são comentários em JavaScript?,"Comentários são trechos de texto que são ignorados pelo interpretador JavaScript. Eles são usados para explicar o código.

**117.**"
Como você escreve um comentário de várias linhas em JavaScript?,"Você usa `/* ... */`.

**119.**"
O que são operadores aritméticos em JavaScript?,"São operadores que realizam operações matemáticas, como `+`, `-`, `*`, `/`, `%`, `**`.

**121.**"
O que são operadores de comparação em JavaScript?,"São operadores que comparam dois valores, como `==`, `===`, `!=`, `!==`, `>`, `<`, `>=`, `<=`.

**122.**"
O que é o operador de concatenação de strings em JavaScript?,"É o operador `+` que concatena duas ou mais strings.

**126.**"
O que são declarações condicionais em JavaScript?,"São instruções que permitem executar diferentes blocos de código com base em uma condição, como `if`, `else if`, `else`.

**127.**"
O que é a declaração `switch` em JavaScript?,"É uma declaração que permite executar diferentes blocos de código com base no valor de uma expressão.

**128.**"
O que é o loop `for` em JavaScript?,"É um loop que executa um bloco de código um número específico de vezes.

**130.**"
O que é o loop `while` em JavaScript?,"É um loop que executa um bloco de código enquanto uma condição for verdadeira.

**131.**"
O que é o loop `do...while` em JavaScript?,"É um loop que executa um bloco de código pelo menos uma vez e, em seguida, repete enquanto uma condição for verdadeira.

**132.**"
Quais são alguns tipos de erros comuns em JavaScript?,"`TypeError`, `ReferenceError`, `SyntaxError`, `RangeError`.

**138.**"
O que é o padrão de projeto Module Pattern em JavaScript?,"É um padrão para criar módulos em JavaScript usando closures para encapsular variáveis e funções privadas.

**139.**"
O que é o padrão de projeto Revealing Module Pattern em JavaScript?,"É uma variação do Module Pattern onde todas as variáveis e funções são privadas, e apenas um conjunto selecionado de funções é revelado publicamente.

**140.**"
O que é a Temporal Dead Zone (TDZ)?,"A TDZ é a área no código onde uma variável declarada com `let` ou `const` existe, mas não pode ser acessada antes de sua declaração ser avaliada.

**143.**"
Como você cria um objeto com um protótipo específico em JavaScript?,"Você pode usar `Object.create(prototipo)`.

**147.**"
O que são closures em JavaScript e como elas funcionam?,"Closures são funções que ""lembram"" do ambiente léxico onde foram criadas, mesmo após esse ambiente não estar mais ativo. Isso permite que a função acesse variáveis que estavam em escopo quando ela foi definida, mesmo que a função seja executada em outro contexto."
O que é hoisting em JavaScript e como ele se aplica a variáveis e funções?,"Hoisting é o comportamento do JavaScript de mover declarações de variáveis (com `var`) e funções para o topo do escopo antes da execução do código. Variáveis declaradas com `var` são hoisted com o valor `undefined`, enquanto funções declaradas com `function` são hoisted com a definição completa. `let` e `const` também são hoisted, mas não inicializadas, resultando em um erro se acessadas antes da declaração."
O que é o método `bind()` em JavaScript e qual é a sua utilidade?,"`bind()` cria uma nova função que, quando chamada, tem seu `this` definido para o valor fornecido. Ele também pode predefinir alguns argumentos da função original. É útil para controlar o contexto de `this` em callbacks e outras situações."
Qual a diferença entre uma função declarativa e uma função expressiva em JavaScript?,"Uma função declarativa é definida usando a palavra-chave `function` seguida pelo nome da função. Uma função expressiva é atribuída a uma variável, por exemplo, `const minhaFuncao = function() {};`. Funções declarativas são hoisted, funções expressivas não."
O que é o método `map()` em arrays JavaScript e qual a sua finalidade?,`map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original. Ele não modifica o array original.
O que é o método `filter()` em arrays JavaScript e qual a sua finalidade?,`filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
O que é o método `reduce()` em arrays JavaScript e qual a sua finalidade?,`reduce()` aplica uma função a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
Explique o que é o Spread Operator (...) em JavaScript e como ele é usado.,"O Spread Operator permite que um iterável (como um array ou string) seja expandido em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados.  É usado para copiar arrays, combinar arrays e passar argumentos para funções."
O que é Destructuring em JavaScript e como ele facilita o trabalho com objetos e arrays?,Destructuring permite extrair valores de objetos e arrays e atribuí-los a variáveis de forma concisa.
O que são Promises em JavaScript e qual o problema que elas resolvem?,"Promises são objetos que representam o eventual resultado (completo ou falha) de uma operação assíncrona. Elas resolvem o problema do ""callback hell"" e tornam o código assíncrono mais legível e gerenciável."
"Explique os estados de uma Promise (pending, fulfilled, rejected).","Uma Promise tem três estados: `pending` (estado inicial, nem realizado nem rejeitado), `fulfilled` (operação concluída com sucesso) e `rejected` (operação falhou)."
O que são as palavras-chave `async` e `await` em JavaScript e como elas são usadas com Promises?,"`async` transforma uma função em uma função assíncrona, permitindo o uso de `await`. `await` pausa a execução da função assíncrona até que uma Promise seja resolvida ou rejeitada.  Simplifica a escrita e leitura de código assíncrono."
O que é o objeto `JSON` em JavaScript e como ele é usado?,"`JSON` (JavaScript Object Notation) é um formato de dados leve para trocar informações. Em JavaScript, o objeto `JSON` fornece métodos para converter objetos JavaScript em strings JSON (`JSON.stringify()`) e strings JSON em objetos JavaScript (`JSON.parse()`)."
O que são os métodos `parseInt()` e `parseFloat()` em JavaScript?,`parseInt()` converte uma string em um número inteiro. `parseFloat()` converte uma string em um número de ponto flutuante.
O que é o operador `typeof` em JavaScript e o que ele retorna?,"`typeof` retorna uma string indicando o tipo de dado de um operando.  Retorna strings como ""number"", ""string"", ""boolean"", ""object"", ""undefined"", ""function"", ""symbol"" e ""bigint""."
O que é o método `Object.keys()` em JavaScript e qual a sua finalidade?,`Object.keys()` retorna um array contendo os nomes de todas as propriedades enumeráveis de um objeto.
O que é o método `Object.values()` em JavaScript e qual a sua finalidade?,`Object.values()` retorna um array contendo os valores de todas as propriedades enumeráveis de um objeto.
O que é o método `Object.entries()` em JavaScript e qual a sua finalidade?,"`Object.entries()` retorna um array de arrays, onde cada array interno contém o par chave-valor de uma propriedade enumerável de um objeto."
O que são Set e Map em JavaScript (ES6)?,"`Set` é uma coleção de valores únicos. `Map` é uma coleção de pares chave-valor, onde chaves podem ser de qualquer tipo de dado."
O que é o iterador em JavaScript e como ele se relaciona com os Generators?,"Um iterador é um objeto que define uma sequência e retorna um valor por vez quando chamado. Generators implementam o protocolo iterador, permitindo que sejam usados em loops `for...of`."
O que é um WeakSet em JavaScript e qual a sua principal característica?,"`WeakSet` é uma coleção de objetos. A principal característica é que os objetos em um `WeakSet` são fracos, ou seja, se um objeto não tiver outras referências a ele, ele pode ser coletado pelo coletor de lixo, mesmo que esteja em um `WeakSet`."
O que é um WeakMap em JavaScript e qual a sua principal característica?,"`WeakMap` é uma coleção de pares chave-valor, onde as chaves devem ser objetos. As chaves são fracas, ou seja, se um objeto-chave não tiver outras referências a ele, ele pode ser coletado pelo coletor de lixo, mesmo que esteja em um `WeakMap`."
O que é a API de Reflection em JavaScript (Reflect)?,"A API `Reflect` fornece métodos para interceptar e personalizar operações fundamentais da linguagem JavaScript, como acesso a propriedades, criação de objetos e chamadas de função."
O que é o Proxy Object em JavaScript?,"Um `Proxy` object permite interceptar e personalizar operações em um objeto alvo (target). Você pode definir manipuladores para interceptar operações como leitura de propriedades, escrita de propriedades e chamadas de função."
Qual é o propósito do `use strict` em JavaScript?,"`""use strict""` ativa o modo estrito no JavaScript, que impõe regras mais rígidas e ajuda a evitar erros comuns. Por exemplo, proíbe o uso de variáveis não declaradas e atribuições a propriedades somente leitura."
Explique o que são Higher-Order Functions em JavaScript.,"Higher-order functions são funções que podem receber outras funções como argumentos ou retornar funções como seus resultados.  Exemplos comuns são `map`, `filter` e `reduce`."
O que é programação declarativa em JavaScript?,"Programação declarativa é um paradigma de programação que se concentra em *o que* o programa deve realizar, em vez de *como* ele deve realizar.  O código é expresso em termos de lógica e funções, em vez de instruções passo a passo."
O que é programação imperativa em JavaScript?,Programação imperativa é um paradigma de programação que descreve *como* o programa deve realizar uma tarefa.  O código é expresso em termos de instruções passo a passo que modificam o estado do programa.
O que é o objeto `Math` em JavaScript e quais são algumas de suas funções?,"O objeto `Math` fornece propriedades e métodos para constantes e funções matemáticas. Exemplos de funções incluem `Math.random()`, `Math.floor()`, `Math.ceil()`, `Math.round()`, `Math.max()`, `Math.min()`."
Como você cria um timer em JavaScript?,"Você pode usar as funções `setTimeout()` para executar um código uma vez após um atraso especificado, ou `setInterval()` para executar um código repetidamente em intervalos regulares."
Como você limpa um timer em JavaScript?,"Você pode usar `clearTimeout()` para cancelar um timer definido com `setTimeout()`, ou `clearInterval()` para cancelar um timer definido com `setInterval()`."
"Como você adiciona, remove ou modifica atributos de elementos HTML usando JavaScript?","Você pode usar os métodos `setAttribute()`, `getAttribute()`, `removeAttribute()` para manipular atributos."
Como você cria novos elementos HTML usando JavaScript?,Você pode usar o método `document.createElement()` para criar novos elementos HTML.
Como você adiciona elementos HTML ao DOM usando JavaScript?,"Você pode usar os métodos `appendChild()`, `insertBefore()` para adicionar elementos ao DOM."
Como você remove elementos HTML do DOM usando JavaScript?,Você pode usar o método `removeChild()` para remover elementos do DOM.
Como você altera o estilo de elementos HTML usando JavaScript?,Você pode acessar e modificar as propriedades do objeto `style` de um elemento para alterar seu estilo.
O que é herança em JavaScript e como ela funciona com classes?,"Herança é um mecanismo que permite que uma classe (subclasse ou classe derivada) herde propriedades e métodos de outra classe (superclasse ou classe base). Em JavaScript, você usa a palavra-chave `extends` para implementar herança entre classes."
O que é encapsulamento em programação orientada a objetos? JavaScript suporta encapsulamento?,"Encapsulamento é o princípio de agrupar dados (atributos) e os métodos que operam sobre esses dados em uma unidade (classe) e restringir o acesso direto aos dados de fora da unidade. JavaScript tem suporte limitado para encapsulamento, mas usa convenções (como usar `_` prefixado aos nomes das propriedades para indicar que são privadas) para simular esse comportamento."
O que é polimorfismo em programação orientada a objetos? JavaScript suporta polimorfismo?,"Polimorfismo é a capacidade de um objeto assumir muitas formas. Em JavaScript, polimorfismo é tipicamente alcançado através de herança e duck typing (se parece com um pato e grasna como um pato, então é um pato)."
"O que são os diferentes tipos de operadores em JavaScript (aritméticos, atribuição, comparação, lógicos, bitwise, etc.)?","JavaScript possui diversos tipos de operadores:
    *   Aritméticos: `+`, `-`, `*`, `/`, `%`, `**`
    *   Atribuição: `=`, `+=`, `-=`, `*=`, `/=`, `%=`, `**=`
    *   Comparação: `==`, `===`, `!=`, `!==`, `>`, `<`, `>=`, `<=`
    *   Lógicos: `&&`, `||`, `!`
    *   Bitwise: `&`, `|`, `^`, `~`, `<<`, `>>`, `>>>`
    *   Ternário: `? :`
    *   Outros: `typeof`, `instanceof`, `in`, `delete`, `void`"
O que são as funções Arrow (=>) em JavaScript?,"Arrow functions (funções de seta) são uma forma mais concisa de escrever funções em JavaScript. Elas têm uma sintaxe mais curta e não vinculam seu próprio `this`, `arguments`, `super` ou `new.target`."
O que é o conceito de 'this' em JavaScript e como ele se comporta em diferentes contextos?,"O `this` é uma palavra-chave que se refere ao objeto que está executando o código atual. Seu valor depende de como a função é chamada. Em uma função global, `this` se refere ao objeto global (window no navegador). Em um método de objeto, `this` se refere ao objeto. Com `call`, `apply`, `bind`, você pode definir explicitamente o valor de `this`."
Qual é a diferença entre `call` e `apply` em JavaScript?,"Ambos `call` e `apply` são usados para invocar uma função com um valor específico para `this`. A diferença é como os argumentos são passados: `call` recebe os argumentos individualmente, enquanto `apply` recebe um array de argumentos."
O que são closures e qual a sua relação com o conceito de escopo léxico?,"Closures são funções que ""lembram"" do ambiente léxico em que foram criadas, mesmo após o ambiente não estar mais ativo. Isso significa que a função interna tem acesso às variáveis declaradas na função externa, mesmo depois que a função externa foi executada. O escopo léxico define a visibilidade das variáveis com base em sua posição no código-fonte."
O que é o padrão Módulo em JavaScript e como ele é implementado?,O padrão módulo é uma forma de encapsular código JavaScript para evitar conflitos de nomes e fornecer privacidade. Ele é implementado usando funções de auto-execução (IIFE) para criar um escopo privado para variáveis e funções.
O que são funções puras em programação funcional?,"Funções puras são funções que sempre retornam o mesmo resultado para as mesmas entradas, e não têm efeitos colaterais (não modificam o estado externo)."
Quais são os riscos de usar recursão em JavaScript e como você pode evitá-los?,"O principal risco da recursão é o estouro da pilha (stack overflow) se a função recursiva não tiver uma condição de parada adequada. Para evitar isso, certifique-se de que a função tenha uma condição de parada clara e que o problema seja reduzido a cada chamada recursiva.  Em alguns casos, a iteração pode ser uma alternativa mais eficiente."
O que é o tratamento de exceções em JavaScript e como ele é implementado?,"Tratamento de exceções é um mecanismo para lidar com erros e situações inesperadas que ocorrem durante a execução de um programa. Em JavaScript, ele é implementado usando os blocos `try`, `catch` e `finally`."
Como você lança uma exceção personalizada em JavaScript?,Você pode usar a palavra-chave `throw` seguida por um objeto de erro ou qualquer outro valor para lançar uma exceção personalizada.
"O que são os diferentes tipos de erros em JavaScript (SyntaxError, TypeError, ReferenceError, etc.)?","JavaScript tem vários tipos de erros integrados:
    *   `SyntaxError`: Ocorre quando há um erro de sintaxe no código.
    *   `TypeError`: Ocorre quando um valor não é do tipo esperado.
    *   `ReferenceError`: Ocorre quando uma variável não foi declarada.
    *   `RangeError`: Ocorre quando um valor está fora do intervalo permitido.
    *   `URIError`: Ocorre quando há um problema com o uso de funções URI.
    *   `EvalError`: (Obsoleto) Ocorre quando há um problema com o uso da função `eval()`."
O que é a função `eval()` em JavaScript e por que seu uso é geralmente desencorajado?,`eval()` executa uma string como código JavaScript. Seu uso é geralmente desencorajado porque pode ser perigoso (risco de segurança) e lento (afeta o desempenho). É preferível usar alternativas mais seguras e eficientes.
"O que é o conceito de ""AJAX"" em JavaScript? (Sem mencionar a palavra ""XMLHttpRequest"")","AJAX é uma técnica que permite que páginas web atualizem conteúdo de forma assíncrona, sem recarregar a página inteira. Isso envolve enviar e receber dados do servidor em segundo plano e atualizar partes específicas da página com os novos dados."
Como você faz uma requisição HTTP em JavaScript usando a API `fetch`?,A API `fetch` fornece uma interface para fazer requisições HTTP. Você pode usar `fetch()` para enviar uma requisição para um servidor e receber uma resposta.
Como você lida com respostas de requisições HTTP em JavaScript usando a API `fetch`?,"A API `fetch` retorna uma Promise que resolve com um objeto `Response`. Você pode usar os métodos `response.json()`, `response.text()`, `response.blob()` para extrair o corpo da resposta em diferentes formatos."
O que são os códigos de status HTTP e como eles são usados em JavaScript?,"Códigos de status HTTP são códigos numéricos que indicam o resultado de uma requisição HTTP. Eles são usados para informar o cliente se a requisição foi bem-sucedida, redirecionada ou encontrou um erro. (Ex: 200 OK, 404 Not Found, 500 Internal Server Error)"
O que é CORS (Cross-Origin Resource Sharing) e como ele afeta as requisições HTTP em JavaScript?,"CORS (Cross-Origin Resource Sharing) é um mecanismo de segurança que restringe requisições HTTP entre origens diferentes (domínio, protocolo, porta). Se CORS estiver habilitado, o navegador bloqueará requisições de origem cruzada, a menos que o servidor de destino envie cabeçalhos de resposta que permitam a requisição."
Como você lida com erros em requisições HTTP em JavaScript usando a API `fetch`?,"A API `fetch` lança um erro apenas para erros de rede. Para lidar com erros de status HTTP (como 404 ou 500), você precisa verificar a propriedade `response.ok` da resposta e lançar um erro manualmente se não for bem-sucedida."
Qual a diferença entre Local Storage e Session Storage em JavaScript?,"A principal diferença é a persistência dos dados. Local Storage armazena dados permanentemente (a menos que sejam excluídos explicitamente), enquanto Session Storage armazena dados apenas durante a sessão atual do navegador."
Como você armazena dados no Local Storage e Session Storage em JavaScript?,"Você pode usar os métodos `localStorage.setItem()` e `sessionStorage.setItem()` para armazenar dados, e os métodos `localStorage.getItem()` e `sessionStorage.getItem()` para recuperar dados."
Como você remove dados do Local Storage e Session Storage em JavaScript?,"Você pode usar os métodos `localStorage.removeItem()` e `sessionStorage.removeItem()` para remover dados, e os métodos `localStorage.clear()` e `sessionStorage.clear()` para remover todos os dados."
Como você define um Cookie em JavaScript?,"Você pode definir um cookie atribuindo uma string ao `document.cookie`. A string deve conter o nome do cookie, o valor e outras opções, como a data de expiração."
Como você lê um Cookie em JavaScript?,Você pode ler todos os cookies atribuídos ao domínio atual acessando a propriedade `document.cookie`. A string retornada contém todos os cookies separados por ponto e vírgula.
Como você exclui um Cookie em JavaScript?,"Para excluir um cookie, você precisa defini-lo novamente com a mesma chave e um valor vazio, e definir a data de expiração para um tempo passado."
Como você cria e usa um Web Worker em JavaScript?,Você cria um Web Worker instanciando um novo objeto `Worker` e passando o caminho para um arquivo JavaScript que contém o código a ser executado em segundo plano. Você pode se comunicar com o Web Worker usando os métodos `postMessage()` e `onmessage`.
O que são Service Workers em JavaScript?,"Service Workers são scripts que atuam como proxies entre o navegador e o servidor. Eles podem interceptar requisições de rede, armazenar em cache recursos e fornecer notificações push. Eles são usados para criar aplicativos web progressivos (PWAs) que funcionam offline."
O que é um objeto em JavaScript e como você o cria?,Um objeto é uma coleção de pares chave-valor. Você pode criar objetos usando a notação literal de objeto `{}` ou usando o construtor `new Object()`.
Explique o método `map()` em JavaScript.,O método `map()` cria um novo array com os resultados da chamada de uma função fornecida em cada elemento do array original.
Explique o método `filter()` em JavaScript.,O método `filter()` cria um novo array com todos os elementos que passam no teste implementado pela função fornecida.
Explique o método `reduce()` em JavaScript.,O método `reduce()` aplica uma função (reducer) a um acumulador e a cada elemento de um array (da esquerda para a direita) para reduzi-lo a um único valor.
Como você pode converter o objeto `arguments` em um array real?,Você pode usar `Array.from(arguments)` ou o operador spread `[...arguments]` para converter o objeto `arguments` em um array.
O que são funções `async/await` em JavaScript?,"`async/await` são uma sintaxe para trabalhar com Promises de forma mais legível e concisa.  A palavra-chave `async` declara uma função assíncrona, e a palavra-chave `await` espera que uma Promise seja resolvida."
O que são os métodos `test()` e `exec()` para expressões regulares em JavaScript?,`test()` retorna `true` se a expressão regular encontrar uma correspondência na string e `false` caso contrário. `exec()` retorna um array com informações sobre a correspondência ou `null` se não houver correspondência.
O que é o conceito de truthy e falsy em JavaScript?,"Valores ""truthy"" são valores que são avaliados como `true` em um contexto booleano (por exemplo, dentro de uma condição `if`). Valores ""falsy"" são valores que são avaliados como `false` em um contexto booleano."
O que é deep copy (cópia profunda) e shallow copy (cópia superficial) em JavaScript?,"Uma shallow copy cria uma nova referência a um objeto, então as mudanças em um objeto refletirão no outro. Uma deep copy cria um novo objeto e copia todos os valores do objeto original recursivamente, então as mudanças em um não afetam o outro."
Como você pode realizar uma deep copy de um objeto em JavaScript?,"Você pode usar `JSON.parse(JSON.stringify(objeto))` (com limitações, como a perda de funções) ou bibliotecas especializadas."
O que é o conceito de eventos em JavaScript?,"Eventos são ações ou ocorrências que acontecem no navegador (por exemplo, um clique de mouse, uma tecla pressionada, uma página carregada)."
Como você adiciona um ouvinte de evento (event listener) a um elemento em JavaScript?,Você pode usar o método `addEventListener()` para anexar um manipulador de eventos a um elemento.
O que é o conceito de bubbling e capturing em eventos em JavaScript?,"Bubbling é quando um evento é disparado em um elemento e, em seguida, ""borbulha"" para cima na árvore do DOM, acionando manipuladores de eventos em elementos pais. Capturing é o oposto: o evento desce pela árvore do DOM antes de chegar ao elemento alvo."
Como você pode impedir a propagação de um evento (event propagation) em JavaScript?,Você pode usar o método `stopPropagation()` do objeto `event`.
Como você seleciona elementos no DOM usando JavaScript?,"Você pode usar métodos como `getElementById()`, `getElementsByClassName()`, `getElementsByTagName()`, `querySelector()` e `querySelectorAll()`."
Como você modifica o conteúdo de um elemento no DOM usando JavaScript?,"Você pode usar as propriedades `innerHTML`, `textContent` ou `innerText`."
Como você adiciona um novo elemento ao DOM usando JavaScript?,"Você pode criar um novo elemento usando `document.createElement()`, definir suas propriedades e, em seguida, adicioná-lo ao DOM usando métodos como `appendChild()`, `insertBefore()`."
Como você modifica os atributos de um elemento no DOM usando JavaScript?,Você pode usar os métodos `setAttribute()` e `getAttribute()`.
Como você adiciona ou remove classes CSS de um elemento usando JavaScript?,"Você pode usar a propriedade `classList` do elemento, que fornece métodos como `add()`, `remove()`, `toggle()` e `contains()`."
Quais são os métodos comuns do objeto `console` em JavaScript?,"Os métodos comuns são `console.log()`, `console.warn()`, `console.error()`, `console.table()`, `console.time()` e `console.timeEnd()`."
Quais são os métodos para interagir com `localStorage` e `sessionStorage` em JavaScript?,"Os métodos são `setItem()`, `getItem()`, `removeItem()` e `clear()`."
O que é o encadeamento opcional (optional chaining - `?.`) em JavaScript?,O operador de encadeamento opcional (`?.`) permite acessar propriedades de um objeto que podem ser `null` ou `undefined` sem causar um erro. Ele retorna `undefined` se uma propriedade na cadeia for `null` ou `undefined`.
Qual a diferença entre arrow functions e funções tradicionais em JavaScript em relação ao `this`?,"Em funções tradicionais, o valor de `this` é determinado por como a função é chamada. Em arrow functions, `this` herda o valor do escopo circundante."
O que é o método `yield` em generators em JavaScript?,O método `yield` é usado dentro de uma função generator para pausar a execução da função e retornar um valor.  A execução pode ser retomada posteriormente.
O que é o conceito de WeakMap e WeakSet em JavaScript?,"`WeakMap` e `WeakSet` são coleções que armazenam referências ""fracas"" aos seus elementos. Isso significa que, se não houver outras referências ao objeto além das mantidas pelo `WeakMap` ou `WeakSet`, o garbage collector pode liberar a memória ocupada pelo objeto."
O que é reflection (Reflect API) em JavaScript?,A API Reflect fornece métodos para operações que interceptam e personalizam o comportamento fundamental de objetos JavaScript.
O que são modules em JavaScript (ES Modules)?,"ES Modules são uma forma de organizar e modularizar o código JavaScript. Eles permitem importar e exportar funções, objetos e valores entre diferentes arquivos."
Qual a diferença entre `export default` e `export` nomeado em JavaScript?,"`export default` exporta um único valor padrão do module.  `export` (nomeado) exporta vários valores, cada um com um nome específico."
O que é IIFE (Immediately Invoked Function Expression) em JavaScript?,Uma IIFE é uma função JavaScript que é executada assim que é definida. É usada para criar um escopo privado para variáveis e funções.
Como você ativa o strict mode em JavaScript?,"Você ativa o strict mode adicionando a string `""use strict"";` no início de um script ou função."
"O que são ""side effects"" (efeitos colaterais) em JavaScript?","Side effects são alterações no estado do programa que não são diretamente relacionadas ao valor retornado por uma função.  Exemplos incluem modificar variáveis globais, alterar o DOM ou fazer chamadas de rede."
"O que é o princípio de ""Least Astonishment"" (menor surpresa) em JavaScript?","O princípio de ""Least Astonishment"" sugere que o comportamento de um programa deve ser o menos surpreendente possível para o usuário (ou desenvolvedor). Isso significa que o código deve se comportar de forma intuitiva e previsível."
O que é a diferença entre uma função declarada e uma função expressa em Javascript?,"Uma função declarada é definida usando a palavra-chave `function` seguida por um nome.  Uma função expressa é definida como parte de uma expressão, geralmente atribuída a uma variável. Funções declaradas são hoisted, enquanto funções expressas não são."
"O que significa dizer que JavaScript é uma linguagem ""single-threaded""?",Significa que JavaScript tem apenas uma pilha de chamadas e um loop de eventos.  Ele só pode executar uma tarefa de cada vez.
"Como JavaScript lida com operações assíncronas, dado que é single-threaded?","JavaScript usa um loop de eventos (event loop) e funções de callback para lidar com operações assíncronas. Operações demoradas são delegadas a APIs do navegador, e callbacks são executados quando a operação é concluída."
O que é um callback hell em JavaScript?,Callback hell é uma situação onde múltiplas operações assíncronas aninhadas criam um código difícil de ler e manter devido ao excesso de callbacks aninhados.
Como Promises ajudam a evitar o callback hell?,"Promises permitem encadear operações assíncronas usando `.then()`, tornando o código mais linear e legível."
Qual a importância de evitar o uso de `eval()` em JavaScript?,"O uso de `eval()` pode ser perigoso porque permite a execução de código arbitrário, o que pode levar a vulnerabilidades de segurança e problemas de desempenho."
O que é JSONP (JSON with Padding) e quando é usado?,JSONP é uma técnica para contornar a política de mesma origem (same-origin policy) em navegadores antigos. Ele usa a tag `<script>` para carregar dados de um domínio diferente. É uma alternativa menos segura aos CORS.
O que é CORS (Cross-Origin Resource Sharing) e como ele funciona?,CORS é um mecanismo de segurança do navegador que permite que uma página web faça requisições para um domínio diferente do qual a página se originou. Ele usa cabeçalhos HTTP para controlar quais domínios têm permissão para acessar recursos.
O que é a política de mesma origem (same-origin policy) em navegadores?,"A política de mesma origem é uma restrição de segurança que impede que scripts de uma origem acessem recursos de outra origem. Uma origem é definida pelo protocolo, domínio e porta."
"O que é ""scope"" em JavaScript?",Scope define a visibilidade e acessibilidade de variáveis e funções em diferentes partes do código.
Quais são os tipos de scope em JavaScript?,"Os tipos de scope são: global scope, function scope (ou local scope, para `var`), e block scope (para `let` e `const`)."
O que são variáveis globais em JavaScript e como elas devem ser usadas?,"Variáveis globais são declaradas fora de qualquer função e são acessíveis de qualquer parte do código. Elas devem ser usadas com moderação, pois podem causar conflitos de nomes e dificultar a manutenção do código."
"O que é ""memory leak"" (vazamento de memória) em JavaScript?","Um memory leak ocorre quando a memória que não está mais sendo usada não é liberada pelo garbage collector, resultando em um aumento contínuo do uso de memória e, potencialmente, em problemas de desempenho."
O que são shims em JavaScript?,"Shims são similares a polyfills, mas geralmente são mais amplos e podem incluir correções para comportamentos inconsistentes em diferentes navegadores."
"O que é a diferença entre eventos ""load"" e ""DOMContentLoaded"" em JavaScript?","O evento `DOMContentLoaded` é disparado quando o HTML inicial do documento é completamente carregado e analisado, sem esperar por stylesheets, imagens ou subframes. O evento `load` é disparado quando todos os recursos (imagens, stylesheets, etc.) foram carregados."
O que são mixins em JavaScript?,Mixins são uma forma de reutilizar código em múltiplas classes ou objetos. Eles permitem adicionar propriedades e métodos a uma classe ou objeto sem usar herança.
"O que é ""code smell"" (cheiro de código) em JavaScript?","Um ""code smell"" é um padrão no código que pode indicar um problema mais profundo. Exemplos incluem código duplicado, classes grandes demais, e nomes de variáveis pouco descritivos."
O que é refatoração de código em JavaScript?,"Refatoração de código é o processo de melhorar a estrutura interna do código sem alterar seu comportamento externo. É feito para tornar o código mais legível, manutenível e extensível."
Quais são algumas bibliotecas ou frameworks comuns para testes unitários em JavaScript?,Jest e Mocha são bibliotecas populares para testes unitários em JavaScript.
O que é a diferença entre programação imperativa e programação declarativa em Javascript?,"A programação imperativa envolve descrever *como* realizar uma tarefa, passo a passo. A programação declarativa envolve descrever *o que* se quer realizar, sem especificar os passos."
O que é composição de funções em programação funcional?,Composição de funções é o processo de combinar duas ou mais funções para criar uma nova função.
"O que é o conceito de ""currying"" (currificação) em programação funcional?",Currying é a técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.
"O que são ""monads"" em programação funcional?",Monads são um padrão de projeto que permite encadear operações que podem falhar ou ter efeitos colaterais de forma controlada.
"Explique o que é o conceito de ""promises"" e como eles são usados para lidar com operações assíncronas.","Promises são objetos que representam o resultado eventual de uma operação assíncrona. Eles são usados para evitar callback hell e tornar o código assíncrono mais legível e manutenível. Eles têm três estados: pendente, cumprido e rejeitado."
"O que é o objeto global ""this"" em JavaScript quando o código é executado fora de qualquer função?","Em um ambiente de navegador, o objeto global ""this"" refere-se ao objeto ""window"". Em Node.js, ele se refere ao objeto global."
Explique o padrão de módulo revelador (revealing module pattern) em Javascript.,"O padrão de módulo revelador é um design pattern em Javascript que permite definir um conjunto de funções e variáveis privadas dentro de um módulo, revelando apenas algumas funções públicas para o exterior."
O que são template strings com tags em JavaScript?,"Template strings com tags são uma forma avançada de usar template literals. Uma tag é uma função que é chamada com o template string como argumento, permitindo personalizar o processo de interpolação."
O que é a API Web Storage e quais são suas principais características?,"A API Web Storage fornece mecanismos para navegadores armazenarem pares chave/valor localmente, de forma mais intuitiva que o uso de cookies. As principais características são localStorage (armazenamento persistente) e sessionStorage (armazenamento para a sessão atual)."
Explique o conceito de “debounce” e “throttle” em JavaScript.,Debounce e throttle são técnicas para limitar a frequência com que uma função é chamada. Debounce espera um certo tempo após a última chamada para executar a função. Throttle executa a função no máximo uma vez dentro de um determinado período.
O que são generators assíncronos e como eles se diferenciam dos generators síncronos?,Generators assíncronos permitem gerar valores assíncronos (promises) usando `yield`. Eles usam a palavra-chave `async` na definição da função e `await` dentro do corpo para esperar pela resolução das promises. Generators síncronos geram valores síncronos.
O que são os Service Workers e qual a sua utilidade?,"Service Workers são scripts que rodam em background, separados da página web, e permitem funcionalidades como notificações push, cache offline e sincronização em background."
Como você pode converter um valor para booleano em JavaScript de forma explícita?,Você pode usar a função `Boolean()` ou o operador de negação dupla `!!` (ex: `!!valor`).
"O que é ""tree shaking"" e como ele beneficia o desenvolvimento web?","Tree shaking é um processo de otimização que remove o código não utilizado (dead code) de um projeto JavaScript durante o processo de build. Ele reduz o tamanho do bundle final, melhorando o tempo de carregamento da página.

Espero que essa lista seja útil!  Tentei garantir que as perguntas fossem diferentes e cobrissem uma ampla gama de tópicos fundamentais em JavaScript."
Como você impediria a propagação de um evento no DOM?,Usando o método `event.stopPropagation()` no objeto do evento.
Qual a finalidade do método `preventDefault()` em JavaScript?,"Impede a ação padrão associada a um evento, como o envio de um formulário ou a navegação em um link."
O que é a coerção de tipo em JavaScript? Dê um exemplo.,"É a conversão automática de um tipo de dado para outro. Exemplo: `1 + ""2""` resulta em `""12""` (conversão do número para string)."
O que são arrow functions e qual a sua principal diferença em relação às funções tradicionais?,"São funções com uma sintaxe mais concisa. A principal diferença é que elas não possuem seu próprio `this`, herdando o `this` do contexto circundante."
Qual a função do operador spread (`...`) em JavaScript?,Pode ser usado para expandir um array ou objeto em seus elementos individuais.
Explique o que são as palavras-chave `async` e `await` em JavaScript.,"`async` define uma função assíncrona, que sempre retorna uma promise. `await` pausa a execução da função até que a promise seja resolvida ou rejeitada."
O que são event listeners em JavaScript?,"São funções que ""escutam"" eventos (como cliques, mudanças, etc.) em elementos HTML e executam um código quando o evento ocorre."
Como você remove um event listener de um elemento HTML?,Usando o método `removeEventListener()`.
O que é bubbling e capturing em eventos do DOM?,"Bubbling é a ordem em que os eventos se propagam do elemento alvo para seus ancestrais. Capturing é o oposto, eventos propagando do documento para o elemento alvo."
Qual a diferença entre `getAttribute()` e `property` ao acessar atributos de um elemento HTML?,"`getAttribute()` retorna o valor do atributo definido no HTML. `property` retorna o valor da propriedade do objeto DOM, que pode ser diferente do atributo HTML devido a manipulações via JavaScript."
Qual a finalidade dos métodos `test()` e `exec()` em expressões regulares?,"`test()` verifica se a expressão regular corresponde à string, retornando `true` ou `false`. `exec()` executa a pesquisa na string e retorna um array com os resultados ou `null`."
Explique o que são grupos de captura em expressões regulares.,São partes da expressão regular delimitadas por parênteses `(...)` que permitem extrair subcadeias correspondentes àqueles padrões.
"Qual a diferença entre declarar uma variável com `var`, `let` e `const`?","`var` tem escopo de função ou global e é hoisted. `let` e `const` têm escopo de bloco e não são hoisted (há uma ""zona morta temporal""). `const` declara uma variável que não pode ser reatribuída após a inicialização."
Explique o que é o operador ternário em JavaScript.,É uma forma concisa de escrever uma declaração `if...else`: `condição ? valor_se_verdadeiro : valor_se_falso`.
Como você inverte a ordem dos elementos em um array JavaScript?,Usando o método `reverse()`.
Como você ordena os elementos de um array JavaScript?,"Usando o método `sort()`. Por padrão, ele ordena como strings. Você pode fornecer uma função de comparação para ordenação numérica ou de outros tipos."
Como você acessa o valor de uma propriedade em um objeto JavaScript?,Usando a notação de ponto ( `objeto.propriedade` ) ou a notação de colchetes ( `objeto['propriedade']` ).
Como você adiciona uma nova propriedade a um objeto JavaScript?,Atribuindo um valor a um nome de propriedade que ainda não existe no objeto: `objeto.novaPropriedade = valor;` ou `objeto['novaPropriedade'] = valor;`.
Como você remove uma propriedade de um objeto JavaScript?,Usando o operador `delete`: `delete objeto.propriedade;`.
O que são métodos em objetos JavaScript?,São funções que são propriedades de um objeto.
O que são getters e setters em objetos JavaScript?,Getters são métodos que permitem acessar o valor de uma propriedade de forma controlada. Setters são métodos que permitem modificar o valor de uma propriedade de forma controlada.
Como você cria um getter em um objeto JavaScript?,Usando a palavra-chave `get` antes do nome do método dentro da definição do objeto.
Como você cria um setter em um objeto JavaScript?,Usando a palavra-chave `set` antes do nome do método dentro da definição do objeto.
Como você cria uma instância de uma classe em JavaScript?,Usando o operador `new`: `const objeto = new MinhaClasse();`.
Como você define um método em uma classe JavaScript?,Simplesmente definindo uma função dentro do corpo da classe.
Como você implementa herança em classes JavaScript?,Usando a palavra-chave `extends`: `class Subclasse extends Superclasse { ... }`.
Quais são os tipos de módulos em JavaScript?,"Antigamente, eram comuns CommonJS (Node.js) e AMD. Atualmente, o padrão é ECMAScript Modules (ES Modules)."
Qual a diferença entre `export` e `export default` em ES Modules?,"`export` permite exportar vários valores nomeados. `export default` exporta um único valor como padrão, permitindo que seja importado com qualquer nome."
Como você cria um novo objeto `Date` em JavaScript?,Usando o construtor `new Date()`.
Como você obtém o ano de um objeto `Date` em JavaScript?,Usando o método `getFullYear()`.
Como você obtém o mês de um objeto `Date` em JavaScript?,Usando o método `getMonth()`. (Note que os meses são indexados de 0 a 11).
Como você obtém o dia do mês de um objeto `Date` em JavaScript?,Usando o método `getDate()`.
Como você obtém a hora de um objeto `Date` em JavaScript?,Usando o método `getHours()`.
Como você obtém os minutos de um objeto `Date` em JavaScript?,Usando o método `getMinutes()`.
Como você obtém os segundos de um objeto `Date` em JavaScript?,Usando o método `getSeconds()`.
Como você obtém os milissegundos de um objeto `Date` em JavaScript?,Usando o método `getMilliseconds()`.
O que é o método `getTime()` em objetos `Date` JavaScript?,Retorna o número de milissegundos desde 1 de janeiro de 1970 00:00:00 UTC.
O que é o objeto `window` em JavaScript (em navegadores)?,É o objeto que representa a janela do navegador. É o objeto global no contexto do navegador.
Como você exibe um alerta na tela usando JavaScript?,Usando o método `window.alert()`.
Como você exibe um prompt para o usuário inserir um valor usando JavaScript?,Usando o método `window.prompt()`.
O que é o objeto `document` em JavaScript (em navegadores)?,É uma propriedade do objeto `window` que representa o documento HTML carregado na janela do navegador.
O que é o Local Storage em JavaScript?,É uma forma de armazenar dados no navegador do usuário de forma persistente (os dados permanecem mesmo após o navegador ser fechado).
Como você armazena dados no Local Storage usando JavaScript?,"Usando o método `localStorage.setItem(chave, valor)`."
Como você recupera dados do Local Storage usando JavaScript?,Usando o método `localStorage.getItem(chave)`.
Como você remove dados do Local Storage usando JavaScript?,Usando o método `localStorage.removeItem(chave)`.
O que é o Session Storage em JavaScript?,"É semelhante ao Local Storage, mas os dados são armazenados apenas durante a sessão do navegador (são removidos quando o navegador é fechado)."
Como você armazena dados no Session Storage usando JavaScript?,"Usando o método `sessionStorage.setItem(chave, valor)`."
Como você recupera dados do Session Storage usando JavaScript?,Usando o método `sessionStorage.getItem(chave)`.
O que é o tratamento de erros em JavaScript?,"É o processo de lidar com erros que ocorrem durante a execução do código, prevenindo que o programa pare de funcionar abruptamente."
Como você implementa o tratamento de erros em JavaScript?,Usando o bloco `try...catch...finally`.
O que é o bloco `try` em JavaScript?,Contém o código que pode gerar uma exceção.
O que é o bloco `catch` em JavaScript?,Contém o código que será executado se uma exceção for lançada no bloco `try`.
Como você lança uma exceção manualmente em JavaScript?,Usando a palavra-chave `throw`.
Quais são os principais princípios da POO?,"Encapsulamento, Herança, Polimorfismo e Abstração."
O que é encapsulamento em POO?,É a prática de ocultar os detalhes internos de um objeto e expor apenas uma interface para interagir com ele.
O que é polimorfismo em POO?,É a capacidade de um objeto assumir várias formas.
O que é abstração em POO?,"É o processo de simplificar a representação de um objeto, mostrando apenas os detalhes relevantes e ocultando os detalhes complexos."
Quais são os métodos de array que retornam um novo array ao invés de modificar o original?,"`map()`, `filter()`, `slice()`, `concat()`."
Quais são os cuidados que devemos ter ao usar recursão?,Garantir que haja uma condição de parada para evitar loops infinitos e estouro da pilha de chamadas.
O que é o método `next()` em iterators?,Retorna um objeto com as propriedades `value` (o próximo valor na sequência) e `done` (um booleano indicando se a sequência terminou).
"O que é o padrão de projeto ""Module Pattern"" em JavaScript?","É uma forma de encapsular código JavaScript em um objeto, criando um escopo privado para variáveis e funções e expondo apenas uma interface pública."
"O que é o padrão de projeto ""Singleton"" em JavaScript?",É um padrão que garante que apenas uma instância de uma classe seja criada e fornece um ponto de acesso global a essa instância.
"O que é o padrão de projeto ""Observer"" em JavaScript?","É um padrão que define uma dependência um-para-muitos entre objetos, de forma que quando um objeto muda de estado, todos os seus dependentes são notificados e atualizados automaticamente."
"O que é o padrão de projeto ""Factory"" em JavaScript?",É um padrão que fornece uma interface para criar objetos sem especificar suas classes concretas.
O que é o conceito de higher-order functions (funções de ordem superior) em JavaScript?,São funções que recebem outras funções como argumentos ou retornam outras funções como resultado.
Dê exemplos de higher-order functions nativas do JavaScript.,"`map()`, `filter()`, `reduce()`, `forEach()`, `sort()`."
Dê exemplos de programação declarativa em JavaScript.,"Usar `map()`, `filter()` e `reduce()` para manipular arrays ao invés de usar loops `for` tradicionais."
Onde as funções anônimas são comumente usadas?,"Como callbacks em event listeners, argumentos para higher-order functions ou como funções imediatamente invocadas (IIFEs)."
Qual a finalidade das IIFEs?,Criar um escopo isolado para evitar conflitos de nomes e encapsular variáveis.
Quais são as vantagens de usar event delegation?,"Melhor desempenho (menos listeners), facilita o gerenciamento de eventos em elementos criados dinamicamente."
Como você declara uma variável em JavaScript usando a palavra-chave `const`?,"`const minhaVariavel = ""valor"";`  Variáveis declaradas com `const` devem ser inicializadas e não podem ser reatribuídas."
Como você pode verificar o tipo de dado de uma variável em JavaScript?,Usando o operador `typeof`.  Por exemplo: `typeof minhaVariavel;`
Como você cria uma função anônima em JavaScript?,`function() { // Código da função }`. Funções anônimas não têm nome.
O que é uma Immediately Invoked Function Expression (IIFE)?,É uma função anônima que é executada imediatamente após sua criação. Exemplo: `(function() { // Código })();` Usada para criar escopos isolados.
Como você pode clonar um objeto em JavaScript (cópia superficial)?,"Usando `Object.assign({}, objetoOriginal)` ou o spread operator `...` (ex: `{...objetoOriginal}`)."
Como você pode encontrar a posição de uma substring dentro de uma string em JavaScript?,Usando o método `indexOf()`. Retorna -1 se a substring não for encontrada.
Como você pode dividir uma string em um array de substrings em JavaScript?,Usando o método `split()`.
Explique o conceito de template literals em JavaScript.,"São strings delimitadas por backticks (`), que permitem a interpolação de expressões dentro da string usando `${}`."
Quais são os estados de uma promise em JavaScript?,"Pendente (pending), Cumprida (fulfilled) e Rejeitada (rejected)."
Como você define o dia de um objeto `Date` em JavaScript?,Usando o método `setDate()`.
Como você armazena dados no localStorage em JavaScript?,"Usando o método `localStorage.setItem('chave', 'valor')`."
Como você recupera dados do localStorage em JavaScript?,Usando o método `localStorage.getItem('chave')`.
Como você altera o texto de um elemento HTML em JavaScript?,Acessando a propriedade `textContent` ou `innerText` do elemento.
Como você altera o HTML interno de um elemento HTML em JavaScript?,Acessando a propriedade `innerHTML` do elemento.
Como você adiciona um novo elemento HTML a outro elemento no DOM em JavaScript?,"Usando os métodos `appendChild()`, `insertBefore()` ou `insertAdjacentElement()`."
Como você exibe um alerta ao usuário em JavaScript?,Usando o método `window.alert('mensagem')`.
Como você solicita uma confirmação ao usuário em JavaScript?,Usando o método `window.confirm('pergunta')`.
Como você solicita uma entrada de dados ao usuário em JavaScript?,"Usando o método `window.prompt('pergunta', 'valorPadrao')`."
Como você abre uma nova janela do navegador em JavaScript?,"Usando o método `window.open('url', 'nomeDaJanela', 'opcoes')`."
Como você exibe uma mensagem no console do navegador em JavaScript?,Usando o método `console.log('mensagem')`.
O que é um getter e setter em JavaScript?,"São métodos especiais que permitem acessar e modificar propriedades de um objeto como se fossem propriedades normais, mas com lógica adicional.  Definidos usando `get` e `set` dentro de um objeto."
O que é prototype em JavaScript?,Todo objeto em JavaScript herda propriedades e métodos de seu prototype.  É um mecanismo de herança prototipal.
O que são efeitos colaterais em programação funcional?,"São alterações no estado fora do escopo da função, como modificar variáveis globais, interagir com o DOM ou realizar operações de entrada/saída. Programação funcional busca minimizar efeitos colaterais."
O que é Recursão em JavaScript?,Uma função recursiva é uma função que chama a si mesma dentro de sua própria definição. É usada para resolver problemas que podem ser divididos em subproblemas menores do mesmo tipo.
O que é o Stack Overflow em JavaScript?,"Ocorre quando uma função recursiva chama a si mesma um número excessivo de vezes sem atingir um caso base, levando ao preenchimento da pilha de chamadas (call stack) e ao travamento do programa."
O que é um Iterator em JavaScript?,É um objeto que permite percorrer uma coleção de dados (como um array ou objeto) um elemento por vez.  Possui um método `next()` que retorna um objeto com as propriedades `value` (o valor do próximo elemento) e `done` (um booleano indicando se a iteração terminou).
O que é um Generator em JavaScript?,"É um tipo especial de função que pode ser pausada e retomada durante a execução, permitindo a criação de iteradores personalizados de forma mais fácil.  Declarada usando `function*`."
O que é o método `yield` em Generators?,Pausa a execução do generator e retorna um valor. A execução pode ser retomada posteriormente.
O que são collections em JavaScript? Dê exemplos.,"São estruturas de dados que armazenam grupos de dados relacionados. Exemplos: Arrays, Sets, Maps e WeakMaps."
O que são iterables e iterators em JavaScript e como eles se relacionam?,"Um iterable é um objeto que pode ser iterado sobre (ex: array, string, Map, Set). Ele possui um método `[Symbol.iterator]()` que retorna um iterator. O iterator é um objeto que define como os valores do iterable serão acessados sequencialmente, através do método `next()`."
Como você previne a extensão de um objeto em JavaScript?,Usando `Object.preventExtensions(objeto)`. Impede que novas propriedades sejam adicionadas ao objeto.
Como você sela um objeto em JavaScript?,Usando `Object.seal(objeto)`. Impede que novas propriedades sejam adicionadas e que as propriedades existentes sejam removidas.
Como você congela um objeto em JavaScript?,"Usando `Object.freeze(objeto)`. Impede que novas propriedades sejam adicionadas, que as propriedades existentes sejam removidas e que os valores das propriedades existentes sejam alterados."
O que é a Strict Mode em JavaScript?,"É um modo restrito de execução que impõe regras mais rígidas ao código JavaScript, ajudando a prevenir erros comuns e a melhorar a segurança. Ativado adicionando `""use strict"";` no início do script ou função."
Quais são alguns dos benefícios de usar Strict Mode em JavaScript?,"Impede o uso de variáveis não declaradas, proíbe a atribuição a propriedades somente leitura, lança erros em atribuições silenciosamente falhas, etc."
Como você define uma propriedade não enumerável em um objeto JavaScript?,"Usando `Object.defineProperty(objeto, 'propriedade', {enumerable: false, ...})`. Propriedades não enumeráveis não aparecem em loops `for...in` ou `Object.keys()`."
O que é Debouncing em JavaScript?,É uma técnica para limitar a taxa na qual uma função é executada. Garante que uma função não seja executada com frequência superior a um determinado intervalo. Útil para lidar com eventos como redimensionamento de janela ou entrada de texto em um campo de pesquisa.
O que é Object Composition em JavaScript?,"É uma técnica para construir objetos combinando outros objetos menores (ou funções), em vez de usar herança de classe. Favorece a reutilização de código por meio da delegação."
O que é um Proxy em JavaScript?,"É um objeto que intercepta e personaliza operações fundamentais de outros objetos (como leitura de propriedades, atribuição, criação de objetos, etc.). Permite adicionar comportamentos como validação, logging ou virtualização."
O que é Garbage Collection em JavaScript?,É um processo automático que libera a memória que não está mais sendo usada por um programa. O coletor de lixo identifica e remove objetos que não são mais acessíveis.
O que é Event Loop em JavaScript?,É um mecanismo que permite ao JavaScript executar operações assíncronas sem bloquear o thread principal. Ele monitora a pilha de chamadas (call stack) e a fila de tarefas (task queue) e move as tarefas da fila para a pilha quando a pilha está vazia.
O que é o Call Stack (Pilha de Chamadas) em JavaScript?,"É uma estrutura de dados que armazena informações sobre as funções que estão sendo executadas no momento. Quando uma função é chamada, ela é adicionada ao topo da pilha. Quando a função retorna, ela é removida da pilha."
O que é a Task Queue (Fila de Tarefas) em JavaScript?,É uma fila que contém tarefas assíncronas que estão prontas para serem executadas. Essas tarefas são adicionadas à pilha de chamadas quando a pilha está vazia.
O que são Microtasks em JavaScript e como se diferenciam das Tasks?,"Microtasks são tarefas de alta prioridade que devem ser executadas o mais rápido possível após a tarefa atual ser concluída, antes do navegador renderizar ou lidar com outros eventos. Promises e `MutationObserver` usam a fila de microtasks. Tasks, por outro lado, têm uma prioridade menor e são enfileiradas na fila de tarefas."
O que é Object.is() em JavaScript?,"Determina se dois valores são o mesmo valor. É semelhante ao operador `===`, mas trata `NaN` como igual a `NaN` e `-0` como diferente de `+0`."
O que são Named Export e Default Export em ES Modules?,"Named exports permitem exportar múltiplos valores de um módulo usando seus nomes. Default export permite exportar um único valor (pode ser uma função, classe, objeto, etc.) como o valor padrão do módulo."
Como você importa módulos em JavaScript usando ES Modules?,"Usando a palavra-chave `import`. Exemplo: `import { nomeDaFuncao } from './meuModulo.js';` ou `import valorPadrao from './meuModulo.js';`

Espero que estas perguntas e respostas sejam úteis para aprofundar seu conhecimento em JavaScript!"
O que é o operador `typeof` e quais valores ele pode retornar?,"`typeof` é um operador que retorna uma string indicando o tipo de um operando. Pode retornar: `""undefined""`, `""boolean""`, `""number""`, `""string""`, `""bigint""`, `""symbol""`, `""function""` e `""object""`.  `typeof null` retorna `""object""` (uma peculiaridade histórica)."
"O que é o método `call()`, `apply()` e `bind()` em JavaScript?","`call()` e `apply()` invocam uma função com um determinado valor `this` e argumentos.  `call()` recebe argumentos individualmente, enquanto `apply()` recebe os argumentos como um array.  `bind()` cria uma nova função que, quando chamada, tem seu valor `this` definido como o valor fornecido."
O que é o objeto `Math` e cite alguns de seus métodos úteis.,"`Math` é um objeto embutido que possui propriedades e métodos para constantes e funções matemáticas. Métodos úteis incluem: `Math.random()`, `Math.floor()`, `Math.ceil()`, `Math.round()`, `Math.max()`, `Math.min()`, `Math.pow()`, `Math.sqrt()`."
O que são arrow functions e como elas diferem das funções regulares em JavaScript?,"Arrow functions são uma sintaxe mais curta para escrever funções. Elas não têm seu próprio `this` (herdam o `this` do contexto envolvente), não podem ser usadas como construtoras (não podem ser instanciadas com `new`), e não têm o objeto `arguments`."
O que são template literals em JavaScript e como usá-los?,Template literals são strings delimitadas por backticks (`). Elas permitem a interpolação de variáveis usando `${}` e podem conter strings de várias linhas sem a necessidade de concatenação ou caracteres de escape.
Explique o conceito de desestruturação em JavaScript.,Desestruturação é uma forma de extrair valores de objetos ou arrays e atribuí-los a variáveis de forma concisa.
O que é o operador `spread` e como ele pode ser usado?,O operador `spread` ( `...` ) expande um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados. Útil para clonar arrays/objetos e passar argumentos para funções.
O que são Promises em JavaScript e como elas lidam com operações assíncronas?,"Promises são objetos que representam o resultado eventual de uma operação assíncrona. Elas podem estar em um dos três estados: pending, fulfilled ou rejected.  Permitem encadear operações assíncronas usando `.then()` (para sucesso) e `.catch()` (para erros)."
O que é `async/await` em JavaScript e como se relaciona com Promises?,`async/await` é um açúcar sintático sobre Promises que torna o código assíncrono mais fácil de ler e escrever. `async` declara uma função assíncrona que retorna implicitamente uma Promise. `await` pausa a execução da função até que uma Promise seja resolvida.
O que é um Set em JavaScript e qual sua principal característica?,Um `Set` é uma coleção de valores únicos. Sua principal característica é que ele não permite valores duplicados.
O que é um Map em JavaScript e como ele difere de um objeto JavaScript comum?,"Um `Map` é uma coleção de pares chave-valor onde chaves podem ser de qualquer tipo de dado (ao contrário de objetos JavaScript, onde as chaves são sempre strings ou Symbols). Maps também mantêm a ordem de inserção das chaves."
Explique o conceito de eventos em JavaScript.,"Eventos são ações ou ocorrências que acontecem em um navegador (por exemplo, um clique do mouse, o carregamento de uma página). JavaScript permite responder a esses eventos executando código."
Como você adiciona e remove ouvintes de eventos em JavaScript?,Você usa os métodos `addEventListener()` para adicionar um ouvinte de evento e `removeEventListener()` para removê-lo.
"Como você adiciona, remove ou modifica classes CSS de um elemento usando JavaScript?","Você pode usar a propriedade `classList` de um elemento, que possui métodos como `add()`, `remove()`, `toggle()` e `contains()`."
O que são cookies em JavaScript e como você os usa?,"Cookies são pequenos arquivos de texto que os sites armazenam no computador do usuário para lembrar informações sobre ele, como preferências ou dados de login. Em JavaScript, você pode acessar e manipular cookies usando a propriedade `document.cookie`."
O que é Session Storage em JavaScript e como ele difere do Local Storage?,"O Session Storage é semelhante ao Local Storage, mas os dados armazenados são excluídos quando a sessão do navegador termina (quando o navegador é fechado)."
O que é o objeto `location` em JavaScript e como você o usa?,O objeto `location` contém informações sobre a URL atual do documento e fornece métodos para redirecionar o usuário para uma nova URL.
O que é hoisting de funções em JavaScript?,"A declaração de uma função é ""hoisted"" para o topo do seu escopo, o que significa que você pode chamar a função antes de ela ser definida no código.  Isso se aplica a declarações de função, mas não a expressões de função atribuídas a variáveis."
O que é um objeto literal em JavaScript?,"Um objeto literal é uma forma de criar um objeto em JavaScript usando a sintaxe de chave-valor: `{ chave1: valor1, chave2: valor2 }`."
O que é o método `Object.assign()` e como ele é usado?,O método `Object.assign()` copia os valores de todas as propriedades enumeráveis de um ou mais objetos de origem para um objeto de destino.
O que é o método `Object.create()` e como ele é usado?,O método `Object.create()` cria um novo objeto com o protótipo especificado.
O que são classes em JavaScript (introduzidas no ES6)?,Classes em JavaScript são um açúcar sintático sobre o sistema de prototipagem existente. Elas fornecem uma maneira mais clara e concisa de criar objetos e definir herança.
Como você chama o construtor da classe pai em uma classe filha?,Você usa a palavra-chave `super()` dentro do construtor da classe filha.
Como você exporta um valor de um módulo JavaScript?,Você usa a palavra-chave `export`. Você pode usar `export default` para exportar um único valor padrão ou `export` para exportar vários valores nomeados.
Como você importa um valor para um módulo JavaScript?,"Você usa a palavra-chave `import`. Você pode usar `import NomeDoValor from './caminho/do/modulo'` para importar um valor padrão ou `import { NomeDoValor1, NomeDoValor2 } from './caminho/do/modulo'` para importar valores nomeados."
O que são flags em expressões regulares e cite alguns exemplos.,"Flags modificam o comportamento da expressão regular. Exemplos: `g` (global, encontra todas as ocorrências), `i` (case-insensitive, ignora maiúsculas e minúsculas), `m` (multiline, permite que `^` e `$` correspondam ao início e ao fim de cada linha)."
O que é o método `test()` do objeto `RegExp`?,O método `test()` verifica se uma string corresponde a um padrão de expressão regular e retorna `true` ou `false`.
O que é o método `exec()` do objeto `RegExp`?,O método `exec()` executa uma pesquisa por uma correspondência em uma string e retorna um array com informações sobre a correspondência ou `null` se nenhuma correspondência for encontrada.
O que é o método `match()` da string?,O método `match()` da string procura por uma correspondência de uma expressão regular em uma string e retorna um array com os resultados ou `null` se nenhuma correspondência for encontrada.
O que é o método `replace()` da string?,O método `replace()` substitui uma parte de uma string por outra string ou por o resultado de uma função.
O que é o método `search()` da string?,O método `search()` procura por uma correspondência de uma expressão regular em uma string e retorna o índice da primeira correspondência ou -1 se nenhuma correspondência for encontrada.
O que é o método `split()` da string?,"O método `split()` divide uma string em um array de substrings, usando um separador especificado."
"Como você obtém o ano, mês, dia, hora, minutos, segundos e milissegundos de um objeto `Date`?","Você pode usar métodos como `getFullYear()`, `getMonth()`, `getDate()`, `getHours()`, `getMinutes()`, `getSeconds()` e `getMilliseconds()`."
O que é UTC (Tempo Universal Coordenado)?,UTC é o padrão de tempo primário pelo qual o mundo regula relógios e tempo. É usado como base para todos os fusos horários.
Como você obtém a hora UTC de um objeto `Date`?,"Você pode usar métodos como `getUTCDate()`, `getUTCHours()`, `getUTCMinutes()`, `getUTCSeconds()`, `getUTCMilliseconds()`."
Quais são algumas restrições impostas pelo modo estrito?,"Algumas restrições incluem: variáveis devem ser declaradas antes de serem usadas, a atribuição a propriedades somente leitura lança um erro, a atribuição a variáveis não declaradas lança um erro, `this` dentro de uma função é `undefined` se a função não for chamada como um método de objeto."
O que são memory leaks em JavaScript e como você pode evitá-los?,"Memory leaks ocorrem quando a memória alocada para objetos não é liberada, mesmo que esses objetos não sejam mais usados. Isso pode levar a problemas de desempenho e, eventualmente, ao travamento do navegador. Para evitar memory leaks, é importante liberar referências desnecessárias a objetos e evitar ciclos de referência."
O que são Generators no Javascript e qual o caso de uso deles?,"Generators são funções que podem pausar e retomar a execução, permitindo gerar uma sequência de valores sob demanda sem precisar armazená-los todos na memória de uma vez. São úteis para lidar com grandes conjuntos de dados, operações assíncronas e para criar iteradores personalizados."
Qual a diferença entre `Array.map()` e `Array.forEach()`?,"`Array.map()` cria um novo array com os resultados da aplicação de uma função a cada elemento do array original. `Array.forEach()` executa uma função para cada elemento do array, mas não retorna um novo array.  `map` retorna um novo array, enquanto `forEach` não retorna nada (undefined)."
Qual a diferença entre `Array.filter()` e `Array.find()`?,"`Array.filter()` cria um novo array com todos os elementos que passam em um teste fornecido por uma função. `Array.find()` retorna o *primeiro* elemento do array que satisfaz uma função de teste fornecida.  `filter` retorna um novo array, `find` retorna um único elemento ou `undefined`."
O que é o operador `??` (nullish coalescing operator) e como ele funciona?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Caso contrário, retorna o operando do lado esquerdo. É útil para fornecer valores padrão para variáveis que podem ser nulas ou indefinidas."
O que é o operador `?.` (optional chaining operator) e como ele funciona?,"O operador `?.` permite acessar propriedades de um objeto sem ter que verificar explicitamente se cada propriedade intermediária existe. Se uma propriedade na cadeia for `null` ou `undefined`, o operador retorna `undefined` em vez de lançar um erro."
O que são WeakMap e WeakSet em JavaScript e quais são suas características?,"`WeakMap` e `WeakSet` são variações de `Map` e `Set` que mantêm referências ""fracas"" aos seus objetos. Isso significa que, se um objeto referenciado por um `WeakMap` ou `WeakSet` não tiver outras referências fortes, ele poderá ser coletado pelo garbage collector, e a entrada correspondente no `WeakMap` ou `WeakSet` será removida automaticamente. Úteis para evitar memory leaks em cenários onde a vida útil das chaves/valores deve ser independente do mapa/set."
O que são generator functions em JavaScript?,"Generator functions são funções especiais que podem ser pausadas e retomadas. Elas retornam um objeto generator, que é um tipo de iterator.  Usam a palavra-chave `yield` para pausar a execução e retornar um valor."
O que é uma tagged template literal?,"Uma tagged template literal é uma forma avançada de usar template literals. Você precede o template literal com o nome de uma função (a ""tag""). Essa função recebe o array de strings literais e os valores interpolados como argumentos, permitindo que você personalize o processamento do template literal."
O que é Reflect API em JavaScript?,"O Reflect API fornece métodos que correspondem aos operadores e instruções do JavaScript, permitindo que você manipule o comportamento padrão da linguagem de forma mais programática. É frequentemente usado em conjunto com Proxies."
O que é destructuring com aliases?,Destructuring com aliases permite renomear as variáveis extraídas durante a desestruturação de objetos ou arrays.  Por exemplo: `const { propriedade: novoNome } = objeto;`.
O que são Dynamic Imports?,"Dynamic Imports permitem importar módulos JavaScript de forma assíncrona usando a função `import()`. Isso é útil para carregar módulos sob demanda, o que pode melhorar o desempenho da página."
Qual a diferença entre event delegation e event bubbling?,"Event bubbling é o processo onde um evento disparado em um elemento se propaga para seus elementos pais na árvore DOM. Event delegation é uma técnica que utiliza o event bubbling para adicionar um único event listener a um elemento pai, em vez de adicionar listeners individuais a cada elemento filho. Isso é especialmente útil quando você tem muitos elementos filhos ou quando os elementos filhos são adicionados dinamicamente."
Como você pode contornar problemas de CORS em JavaScript?,"As opções incluem: configurar corretamente os cabeçalhos CORS no servidor, usar um proxy no servidor, ou usar JSONP (uma técnica mais antiga com limitações)."
Explique o conceito de debouncing em JavaScript.,"Debouncing é uma técnica para limitar a taxa em que uma função é executada. Ela garante que a função seja executada apenas após um certo período de inatividade. É útil para lidar com eventos que são disparados com frequência, como eventos de redimensionamento da janela ou eventos de digitação em um campo de texto."
Explique o conceito de throttling em JavaScript.,"Throttling é uma técnica para limitar a taxa em que uma função é executada, mas, ao contrário do debouncing, ela garante que a função seja executada em intervalos regulares, mesmo que o evento continue a ser disparado com frequência."
O que é o IndexedDB em JavaScript?,IndexedDB é um sistema de banco de dados NoSQL transacional embutido no navegador. Permite armazenar grandes quantidades de dados estruturados e realizar consultas complexas.
O que é o Cache API em JavaScript?,"O Cache API permite armazenar e recuperar recursos da web, como arquivos HTML, CSS, JavaScript e imagens. É usado para implementar caches offline e melhorar o desempenho de sites e aplicativos web."
Qual a diferença entre `clientWidth/clientHeight` e `offsetWidth/offsetHeight` de um elemento?,"`clientWidth/clientHeight` retorna a largura/altura *interna* visível de um elemento (incluindo o padding, mas excluindo bordas, barras de rolagem e margin). `offsetWidth/offsetHeight` retorna a largura/altura *total* de um elemento (incluindo padding, bordas e barra de rolagem, mas excluindo margin)."
Como funciona a otimização de tail call (Tail Call Optimization - TCO) em JavaScript (se suportada)?,"Tail Call Optimization é uma otimização do compilador que permite que chamadas recursivas de funções no final de outra função sejam executadas sem adicionar um novo frame à pilha de chamadas. Isso evita o estouro da pilha em funções recursivas profundas. No entanto, o suporte para TCO em JavaScript é inconsistente e dependente do motor JavaScript.  O modo estrito é normalmente necessário para habilitar o TCO onde suportado."
Explique a diferença entre deep copy e shallow copy e porque isso é importante no JavaScript.,"Uma *shallow copy* cria um novo objeto que compartilha as mesmas referências dos objetos originais. Mudanças nos objetos originais refletem no shallow copy. Uma *deep copy* cria um novo objeto e copia recursivamente todos os objetos referenciados, criando objetos totalmente independentes. É importante entender a diferença para evitar efeitos colaterais inesperados ao modificar objetos."
O que é o SharedArrayBuffer e como ele é usado para a computação paralela no JavaScript?,"`SharedArrayBuffer` permite que múltiplos Web Workers acessem e manipulem a mesma área da memória. Isso permite realizar computação paralela em JavaScript, onde diferentes workers podem trabalhar em diferentes partes dos dados simultaneamente. Requer cuidados com a sincronização e a utilização de Atomics para evitar condições de corrida."
O que é o Temporal API e como ele visa melhorar o tratamento de datas e horários em JavaScript?,"A Temporal API é uma nova API JavaScript proposta para substituir o objeto `Date`. Ele visa fornecer uma API mais moderna, consistente e fácil de usar para trabalhar com datas, horários, fusos horários e durações."
O que é um Resizable ArrayBuffer e como ele difere de um ArrayBuffer normal?,Um `Resizable ArrayBuffer` permite redimensionar o tamanho do buffer de memória alocado após a sua criação. ArrayBuffers normais têm um tamanho fixo que não pode ser alterado. Isso pode ser útil em situações onde a quantidade de dados a serem armazenados é desconhecida no momento da criação do buffer.
O que é o BigInt em JavaScript e quando você o usaria?,`BigInt` é um tipo de dado numérico que permite representar inteiros de
"Explique o conceito de ""closure"" em JavaScript.","Um closure é a capacidade de uma função em JavaScript de acessar variáveis de seu escopo léxico circundante, mesmo depois que a função externa já terminou de ser executada. Isso permite que a função interna ""lembre"" as variáveis do ambiente onde foi criada."
"Explique o que é ""event delegation"" em JavaScript.","Event delegation é uma técnica para lidar com eventos em que, em vez de adicionar ouvintes de eventos a elementos individuais, você adiciona um único ouvinte a um elemento pai. O evento ""bolha"" para o elemento pai, e o ouvinte determina qual elemento filho disparou o evento."
Qual a função do operador `typeof` em JavaScript?,"O operador `typeof` retorna uma string indicando o tipo de dado de um operando. Exemplos: `typeof 42` retorna ""number"", `typeof ""hello""` retorna ""string"", `typeof null` retorna ""object"" (uma peculiaridade histórica)."
"Explique o que é ""strict mode"" em JavaScript e como habilitá-lo.","""Strict mode"" é uma forma de impor uma análise mais rigorosa do código JavaScript, ajudando a prevenir erros comuns e tornando o código mais seguro. É habilitado adicionando `""use strict"";` no início de um script ou função."
O que é o método `reduce()` em arrays JavaScript e qual seu propósito?,"O método `reduce()` executa uma função redutora (fornecida) em cada elemento do array, resultando em um único valor de saída. É usado para acumular valores de um array em um único resultado."
"Qual a diferença entre `var`, `let` e `const` na declaração de variáveis em JavaScript?","`var` tem escopo de função ou global, e pode ser redeclarada e reatribuída. `let` tem escopo de bloco e pode ser reatribuída. `const` também tem escopo de bloco e não pode ser reatribuída após a inicialização."
Como você pode interromper a execução de um loop em JavaScript?,Você pode usar a palavra-chave `break` para interromper a execução de um loop.
O que é o objeto `window` em JavaScript e qual sua importância?,"O objeto `window` é o objeto global no ambiente do navegador, representando a janela do navegador. Ele fornece acesso a várias propriedades e métodos relacionados à janela, como `document`, `alert`, `console`, `location`, etc."
Como você pode adicionar um novo elemento ao final de um array em JavaScript?,Você pode usar o método `push()` para adicionar um ou mais elementos ao final de um array.
O que é o método `slice()` em arrays JavaScript e como ele é usado?,O método `slice()` retorna uma cópia rasa de uma porção de um array em um novo array. Ele recebe dois argumentos opcionais: o índice inicial e o índice final (não incluso) da porção a ser extraída.
O que é uma função de callback em JavaScript?,Uma função de callback é uma função que é passada como um argumento para outra função e é executada após a conclusão de alguma operação ou evento.
O que é JSON e qual sua utilidade em JavaScript?,"JSON (JavaScript Object Notation) é um formato de dados leve e fácil de ler e escrever. É usado para transmitir dados entre um servidor e uma aplicação web. Em JavaScript, você pode usar `JSON.stringify()` para converter um objeto JavaScript em uma string JSON e `JSON.parse()` para converter uma string JSON de volta em um objeto JavaScript."
O que é o método `padStart()` em strings JavaScript e como ele funciona?,"O método `padStart()` preenche o início de uma string com um caractere especificado (ou espaço em branco, por padrão) até atingir um comprimento especificado."
O que é o método `padEnd()` em strings JavaScript e como ele funciona?,"O método `padEnd()` preenche o final de uma string com um caractere especificado (ou espaço em branco, por padrão) até atingir um comprimento especificado."
Qual é a finalidade do `use strict`?,"O `use strict` habilita o modo estrito no JavaScript, tornando o código mais seguro e robusto ao impor regras mais rigorosas para a sintaxe e o comportamento da linguagem. Isso ajuda a detectar erros comuns mais cedo e impede o uso de funcionalidades problemáticas."
Como você pode encontrar o índice de um elemento em um array?,Use o método `indexOf()`. Ele retorna o primeiro índice no qual o elemento pode ser encontrado no array ou -1 se ele não estiver presente.
Qual é a diferença entre `shift()` e `unshift()`?,`shift()` remove o primeiro elemento de um array e retorna esse elemento. `unshift()` adiciona um ou mais elementos ao início de um array e retorna o novo comprimento do array.
Como verificar se um objeto tem uma propriedade específica?,Use o método `hasOwnProperty('nomeDaPropriedade')`. Ele retorna `true` se o objeto tem a propriedade especificada e `false` caso contrário.
Explique como funciona o método `Object.keys()`.,O método `Object.keys()` retorna um array com os nomes de todas as propriedades enumeráveis de um determinado objeto.
O que é o operador spread (`...`) e para que serve?,"O operador spread (`...`) permite expandir um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados. Ele é usado para copiar arrays, combinar arrays e passar argumentos para funções."
Qual é o propósito do método `Array.from()`?,O método `Array.from()` cria uma nova instância de Array a partir de um objeto semelhante a um array ou iterável.
Como você pode remover elementos duplicados de um array?,Você pode usar o objeto `Set`. Exemplo: `[...new Set(arrayComDuplicados)]`.  Sets armazenam apenas valores únicos.
O que é o método `trim()` e qual sua utilidade?,O método `trim()` remove espaços em branco do início e do final de uma string. É útil para limpar dados de entrada do usuário.
Como você pode verificar se uma variável é do tipo `Number`?,Você pode usar `typeof variavel === 'number'` ou `Number.isFinite(variavel)`. `Number.isFinite()` é mais robusto porque distingue entre números finitos e `NaN` ou `Infinity`.
O que é o método `Object.freeze()` e qual seu propósito?,"O método `Object.freeze()` congela um objeto. Um objeto congelado não pode mais ter suas propriedades alteradas: novas propriedades não podem ser adicionadas, propriedades existentes não podem ser removidas, seus valores não podem ser alterados e a reconfigurabilidade de suas propriedades não pode ser alterada. Ele retorna o objeto congelado."
O que é o método `Object.seal()` e qual seu propósito?,"O método `Object.seal()` sela um objeto, impedindo que novas propriedades sejam adicionadas a ele e marcando todas as propriedades existentes como não configuráveis. Os valores das propriedades presentes ainda podem ser alterados, desde que sejam graváveis."
Qual é a diferença entre `Object.freeze()` e `Object.seal()`?,"`Object.freeze()` impede qualquer alteração no objeto, incluindo a alteração dos valores das propriedades existentes. `Object.seal()` impede a adição ou remoção de propriedades, mas permite a modificação dos valores das propriedades existentes."
O que são WeakSets e qual a sua utilidade?,"WeakSets são coleções de objetos (apenas objetos, não valores primitivos) nas quais cada objeto ocorre apenas uma vez e que não impede o objeto de ser coletado pelo coletor de lixo, se não houver outras referências a ele."
O que são WeakMaps e qual a sua utilidade?,"WeakMaps são coleções de pares chave/valor em que as chaves são objetos (apenas objetos, não valores primitivos) e os valores podem ser de qualquer tipo. Assim como no WeakSet, a presença de uma chave no WeakMap não impede que o objeto seja coletado pelo coletor de lixo se não houver outras referências a ele."
O que é o método `toLocaleString()` e como ele é usado?,"O método `toLocaleString()` retorna uma string com uma representação sensível à localidade deste número. Ele permite formatar números, datas e moedas de acordo com as convenções de uma determinada localidade."
O que é BigInt em JavaScript?,"BigInt é um tipo de dado numérico que permite representar inteiros com precisão arbitrária, além do limite de `Number.MAX_SAFE_INTEGER`. Ele é criado adicionando `n` ao final de um número literal (ex: `123n`) ou usando a função `BigInt()`."
O que são funções de ordem superior (Higher-Order Functions)?,Funções de ordem superior são funções que recebem outras funções como argumentos ou retornam funções como resultados.
Explique o que é programação assíncrona em JavaScript.,"Programação assíncrona permite que um programa execute várias tarefas simultaneamente sem bloquear a thread principal. Isso é importante para realizar operações de longa duração, como solicitações de rede, sem congelar a interface do usuário."
O que são `async/await` em JavaScript e como eles simplificam a programação assíncrona?,"`async/await` são palavras-chave que simplificam a escrita de código assíncrono. `async` define uma função assíncrona, e `await` pausa a execução da função até que uma Promise seja resolvida. Isso torna o código assíncrono mais fácil de ler e escrever, parecendo código síncrono."
Qual é a função do método `Promise.all()`?,"O método `Promise.all()` recebe um array de Promises e retorna uma nova Promise que é cumprida quando todas as Promises no array são cumpridas, ou rejeitada se qualquer uma das Promises no array for rejeitada."
O que são symbols em JavaScript e qual a sua utilidade?,Symbols são um tipo de dado primitivo que representa um identificador único. Eles são usados para criar propriedades de objeto que são privadas e não podem ser acessadas ou modificadas por outros códigos.
O que é o método `Proxy` em JavaScript e para que serve?,"O objeto `Proxy` permite interceptar e personalizar operações fundamentais em objetos (por exemplo, leitura de propriedade, atribuição, enumeração, invocação de função, etc.). É usado para criar comportamentos personalizados para objetos, como validação de acesso, logging, ou virtualização."
Qual a diferença entre `map` e `forEach` em JavaScript?,"`map` retorna um novo array com os resultados da aplicação de uma função a cada elemento do array original. `forEach` executa uma função para cada elemento do array, mas não retorna um novo array (retorna `undefined`).  `forEach` é usado para iterar e realizar ações, enquanto `map` é usado para transformar os elementos de um array."
O que é o método `Array.prototype.flat()` e para que serve?,"O método `Array.prototype.flat()` cria um novo array com todos os elementos sub-array concatenados nele recursivamente até a profundidade especificada. Ele é útil para ""achatar"" arrays aninhados."
O que é o método `Array.prototype.flatMap()` e para que serve?,"O método `Array.prototype.flatMap()` é idêntico ao método `map()` seguido pelo método `flat()` de profundidade 1. Ele é útil para mapear cada elemento para um novo array e, em seguida, achatar o resultado em um novo array."
Como você herda propriedades e métodos de uma classe pai em JavaScript?,"Você usa a palavra-chave `extends` para indicar que uma classe herda de outra. Dentro da classe filha, você pode usar a palavra-chave `super()` para chamar o construtor da classe pai e acessar suas propriedades e métodos."
O que é o modificador `static` em classes JavaScript?,O modificador `static` define um método estático para a classe. Métodos estáticos são chamados diretamente na classe (em vez de em instâncias da classe) e geralmente são usados para funções utilitárias relacionadas à classe.
O que é o escopo global em JavaScript?,O escopo global é o escopo mais externo em um programa JavaScript. Variáveis declaradas fora de qualquer função ou bloco têm escopo global e podem ser acessadas de qualquer lugar no código.
O que é o escopo de função em JavaScript?,O escopo de função é o escopo criado dentro de uma função. Variáveis declaradas dentro de uma função têm escopo de função e só podem ser acessadas dentro dessa função.
O que é o escopo de bloco em JavaScript?,O escopo de bloco é o escopo criado dentro de um bloco de código (delimitado por chaves `{}`). Variáveis declaradas com `let` ou `const` dentro de um bloco têm escopo de bloco e só podem ser acessadas dentro desse bloco.
Qual a importância de evitar efeitos colaterais em funções JavaScript?,"Evitar efeitos colaterais torna o código mais previsível, fácil de testar e depurar. Funções sem efeitos colaterais são mais fáceis de raciocinar e podem ser reutilizadas em diferentes partes do programa sem causar problemas inesperados."
O que são web workers?,Web Workers permitem executar scripts em threads de fundo separadas do thread principal do navegador. Isso permite realizar tarefas computacionalmente intensivas sem bloquear a interface do usuário.
Como você pode se comunicar com um web worker?,Você pode usar o método `postMessage()` para enviar mensagens para o web worker e o evento `onmessage` para receber mensagens do web worker.
O que são service workers?,"Service workers são scripts que são executados em segundo plano e atuam como um proxy entre o navegador e a rede. Eles podem ser usados para implementar recursos como cache offline, notificações push e sincronização em segundo plano."
Como você pode selecionar um elemento HTML usando JavaScript?,"Você pode usar os métodos `document.getElementById()`, `document.getElementsByClassName()`, `document.getElementsByTagName()` e `document.querySelector()`/`document.querySelectorAll()` para selecionar elementos HTML."
Como você pode adicionar um novo elemento HTML a uma página usando JavaScript?,"Você pode usar os métodos `document.createElement()` para criar um novo elemento, `document.createTextNode()` para criar um nó de texto e `appendChild()` para adicionar o novo elemento ao DOM."
Como você pode remover um elemento HTML de uma página usando JavaScript?,Você pode usar o método `removeChild()` do elemento pai para remover um elemento filho do DOM.
Como você pode adicionar um ouvinte de evento a um elemento HTML usando JavaScript?,"Você pode usar o método `addEventListener()` para adicionar um ouvinte de evento a um elemento HTML. O método `addEventListener()` recebe o nome do evento (por exemplo, ""click"", ""mouseover"") e uma função de callback que será executada quando o evento ocorrer."
Como você pode remover um ouvinte de evento de um elemento HTML usando JavaScript?,Você pode usar o método `removeEventListener()` para remover um ouvinte de evento de um elemento HTML.
O que é a propagação de eventos (event bubbling) em JavaScript?,A propagação de eventos (event bubbling) é o processo pelo qual um evento disparado em um elemento filho se propaga para seus elementos pais na árvore do DOM. Isso significa que os ouvintes de evento anexados aos elementos pais também serão executados quando o evento for disparado no elemento filho.
Como você pode impedir a propagação de eventos em JavaScript?,Você pode usar o método `stopPropagation()` do objeto de evento para impedir a propagação de eventos.
O que são Formulários em HTML e como interagir com eles via JavaScript?,"Formulários são elementos HTML usados para coletar dados do usuário. Interagimos com eles via JavaScript capturando o evento `submit` do formulário, acessando os valores dos campos usando `document.getElementById()` ou `document.querySelector()` e suas propriedades `value`. Podemos também validar os dados antes de enviar."
O que é o método `JSON.stringify()` e qual sua finalidade?,`JSON.stringify()` converte um objeto JavaScript em uma string JSON. É usado para transmitir dados entre um servidor e uma aplicação web ou para armazenar dados em formatos como `localStorage`.
O que é o método `JSON.parse()` e qual sua finalidade?,`JSON.parse()` analisa uma string JSON e a converte em um objeto JavaScript. É usado para receber dados formatados como JSON e convertê-los em objetos manipuláveis em JavaScript.
Como você pode ler e escrever cookies em JavaScript?,"Você pode acessar os cookies usando a propriedade `document.cookie`. Para escrever um cookie, você atribui uma string com o nome, valor e opções do cookie (como tempo de expiração) a `document.cookie`. Para ler, você parseia a string `document.cookie` para encontrar o cookie desejado."
Quais são alguns métodos de string que usam expressões regulares em JavaScript?,"Métodos como `search()`, `replace()`, `match()` e `split()` podem usar expressões regulares para realizar operações de pesquisa e manipulação de strings."
O que são caracteres de escape em expressões regulares e por que são usados?,"Caracteres de escape são usados para corresponder a caracteres especiais (como `.` , `*` , `+` , `?` , `\` , `[`, `]`, `(`, `)`, `{`, `}`, `^`, `$`, `|`) que têm um significado especial nas expressões regulares. Você usa uma barra invertida `\` antes do caractere para ""escapar"" seu significado especial e fazê-lo corresponder ao próprio caractere literal. Ex: `\.` corresponde ao caractere ponto."
O que são lookarounds (positive/negative lookahead/lookbehind) em expressões regulares?,"Lookarounds são asserções que verificam se um padrão está presente antes ou depois de outro padrão, sem incluir o padrão lookaround na correspondência final.
   * **Lookahead:** `(?=pattern)` (positive), `(?!pattern)` (negative) - Verifica se o padrão segue ou não.
   * **Lookbehind:** `(?<=pattern)` (positive), `(?<!pattern)` (negative) - Verifica se o padrão precede ou não."
Como você pode validar um endereço de e-mail usando uma expressão regular em JavaScript?,"Um exemplo (simplificado) de expressão regular para validar um e-mail é: `/^[^\s@]+@[^\s@]+\.[^\s@]+$/`. Esta regex verifica se há pelo menos um caractere não espaço ou `@` antes do `@`, seguido por pelo menos um caractere não espaço ou `@` depois do `@`, seguido por um ponto e, finalmente, pelo menos um caractere não espaço ou `@` após o ponto. Lembre-se que validações de e-mail complexas exigem regex mais robustas."
O que é a função `eval()` em JavaScript e quais são os riscos de usá-la?,"A função `eval()` avalia uma string como código JavaScript. No entanto, o uso de `eval()` é geralmente desencorajado, pois pode apresentar sérios riscos de segurança, como a execução de código malicioso se a string a ser avaliada for derivada de entrada do"
O que é a função `parseInt()` e qual sua finalidade?,"`parseInt()` converte uma string em um número inteiro. Opcionalmente, aceita um segundo argumento que especifica a base numérica (radix) a ser usada na conversão."
Qual é o método `reduce()` em arrays JavaScript e para que serve?,"`reduce()` executa uma função ""redutora"" (fornecida por você) em cada elemento do array, resultando em um único valor de saída. Ele pode ser usado para somar elementos, concatenar strings, etc."
O que é o operador `spread` (...) em JavaScript?,"O operador spread expande um array ou objeto em elementos individuais. Ele pode ser usado para criar cópias de arrays e objetos, concatenar arrays e passar argumentos para funções."
Como você clona um objeto em JavaScript? Quais os tipos de cópia existentes?,"Você pode usar `Object.assign({}, objetoOriginal)` para fazer uma cópia superficial (shallow copy) ou o operador spread `{...objetoOriginal}` para o mesmo efeito. Para uma cópia profunda (deep copy), você pode usar `JSON.parse(JSON.stringify(objetoOriginal))`, mas isso não funciona para objetos com funções."
"O que é o ""strict mode"" em JavaScript e como habilitá-lo?","""Strict mode"" é um modo restritivo de JavaScript que impõe regras mais rigorosas, ajudando a detectar erros e evitar práticas ruins. Ele é habilitado adicionando a string `""use strict"";` no início do arquivo ou da função."
Como você cria um objeto em JavaScript usando a palavra-chave `new` e uma função construtora?,"Definindo uma função com a primeira letra maiúscula (por convenção) e usando a palavra-chave `new` para criar uma instância do objeto, como por exemplo: `function Pessoa(nome, idade) { this.nome = nome; this.idade = idade; } let pessoa1 = new Pessoa(""João"", 25);`"
O que são funções de alta ordem (Higher-Order Functions) em JavaScript?,"São funções que recebem outras funções como argumentos ou retornam outras funções como resultados. Exemplos comuns são `map`, `filter` e `reduce`."
"Como você adiciona um ""event listener"" a um elemento HTML usando JavaScript?",Você pode usar o método `addEventListener()`.
"O que é ""event delegation"" em JavaScript?","É uma técnica em que você adiciona um ""event listener"" a um elemento pai e usa a propriedade `event.target` para determinar qual elemento filho disparou o evento. Isso pode melhorar o desempenho, especialmente quando você tem muitos elementos filhos."
Como você cria um cookie em JavaScript?,Você pode usar a propriedade `document.cookie` para definir o valor de um cookie.
Como você limpa todo o Local Storage usando JavaScript?,Você pode usar o método `localStorage.clear()`.
O que é o operador de coalescência nula (Nullish Coalescing Operator - `??`) em JavaScript?,"O operador `??` retorna o operando do lado direito quando o operando do lado esquerdo é `null` ou `undefined`. Caso contrário, retorna o operando do lado esquerdo.  É diferente do operador `||` que considera valores falsy (como 0 ou """") como equivalentes a `null` ou `undefined`."
O que é o encadeamento opcional (Optional Chaining - `?.`) em JavaScript?,"O operador `?.` permite acessar propriedades de um objeto que pode ser `null` ou `undefined` sem causar um erro. Se o objeto for `null` ou `undefined`, o operador retorna `undefined`."
Qual a diferença entre Map e um objeto literal em JavaScript?,"As chaves em um `Map` podem ser de qualquer tipo de dado (incluindo objetos), enquanto em um objeto literal, as chaves são sempre strings ou símbolos. A ordem das chaves é preservada em um `Map`, mas não é garantida em um objeto literal.  Map tem métodos específicos para gerenciar seus elementos (set, get, delete, has)."
Qual a diferença entre Set e um array em JavaScript?,"Um `Set` armazena apenas valores únicos, enquanto um array pode conter valores duplicados. A ordem dos elementos não é garantida em um `Set`.  Set tem métodos otimizados para verificar a existência de um elemento (has)."
Como você importa um módulo em JavaScript usando a sintaxe `import`?,`import { nomeDaFuncao } from './caminho/para/o/modulo.js';`
Como você exporta um módulo em JavaScript usando a sintaxe `export`?,`export function nomeDaFuncao() { /* código */ }` ou `export default nomeDaFuncao;`
Quais são alguns metacaracteres comuns em expressões regulares?,"`.` (qualquer caractere), `*` (zero ou mais ocorrências), `+` (uma ou mais ocorrências), `?` (zero ou uma ocorrência), `[]` (conjunto de caracteres), `^` (início da string), `$` (fim da string)."
Como você testa se uma string corresponde a uma expressão regular em JavaScript?,Você pode usar o método `test()` da expressão regular ou o método `match()` da string.
O que são os métodos `toUpperCase()` e `toLowerCase()` em strings JavaScript?,`toUpperCase()` converte uma string para letras maiúsculas. `toLowerCase()` converte uma string para letras minúsculas.
O que é o método `slice()` em strings JavaScript?,"Semelhante a `substring()`, mas também aceita índices negativos, que indicam posições a partir do final da string."
O que são WeakSet e WeakMap em JavaScript?,"`WeakSet` e `WeakMap` são coleções que armazenam objetos fracamente. Isso significa que, se um objeto armazenado em um `WeakSet` ou `WeakMap` não for mais referenciado em nenhum outro lugar, ele pode ser coletado pelo coletor de lixo (garbage collector), e a entrada correspondente no `WeakSet` ou `WeakMap` será removida automaticamente. Eles não permitem iteração. As chaves dos WeakMap só podem ser objetos."
Dê um exemplo de destructuring de um objeto.,"`const { nome, idade } = pessoa;` (onde `pessoa` é um objeto com propriedades `nome` e `idade`)."
Dê um exemplo de destructuring de um array.,"`const [primeiro, segundo] = numeros;` (onde `numeros` é um array)."
O que é a palavra-chave `this` dentro de uma classe em JavaScript?,Refere-se à instância do objeto que está sendo criada.
O que é herança em JavaScript (usando classes)?,É a capacidade de uma classe (subclasse) herdar propriedades e métodos de outra classe (superclasse).
Como você define um getter em JavaScript?,Usando a palavra-chave `get` antes do nome do método.
Como você define um setter em JavaScript?,Usando a palavra-chave `set` antes do nome do método.
O que são Symbol em JavaScript?,Symbols são um tipo de dado primitivo que representa um identificador único. Eles são usados para criar propriedades privadas em objetos e para evitar conflitos de nomes.
O que é o spread operator com objetos?,"Permite criar cópias de objetos ou combinar múltiplos objetos em um só, de forma concisa. `const novoObjeto = { ...objeto1, ...objeto2 };`"
O que são tagged templates?,"Permitem processar template literals com uma função tag, oferecendo controle sobre a interpolação e formatação da string final."
O que são os handlers de um proxy em JavaScript?,"São funções que definem o comportamento do proxy para diferentes operações. Exemplos: `get`, `set`, `apply`, `construct`."
O que é Reflect em JavaScript?,`Reflect` é um objeto embutido que fornece métodos para interceptar e personalizar operações JavaScript. Ele é usado em conjunto com Proxies.
O que é o operador `globalThis` em JavaScript?,"`globalThis` é uma propriedade que sempre se refere ao objeto global, independentemente do ambiente de execução (navegador, Node.js, etc.)."
Qual a diferença entre `Function.prototype.apply()` e `Reflect.apply()`?,"`Function.prototype.apply()` invoca uma função com um dado valor `this` e argumentos fornecidos como um array (o que pode ser complicado se o array for muito grande). `Reflect.apply()` executa a mesma tarefa, mas de uma forma mais elegante e eficiente, principalmente ao lidar com arrays de argumentos grandes."
O que é o método `Object.hasOwn()` em JavaScript?,"Retorna um booleano indicando se o objeto possui a propriedade especificada como uma propriedade direta (não herdada da cadeia de protótipos). Substitui `Object.prototype.hasOwnProperty()`, sendo uma forma mais segura e recomendada."
Qual é o papel do Garbage Collector em JavaScript?,O Garbage Collector é um processo automático que libera a memória que não está mais sendo usada pelo programa. Ele identifica os objetos que não são mais referenciados e os remove da memória. Isso ajuda a evitar vazamentos de memória e a manter o desempenho do programa.
Explique a diferença entre os operadores `==` e `===` em JavaScript.,"`==` (igualdade abstrata) compara apenas o valor, realizando conversão de tipo se necessário. `===` (igualdade estrita) compara valor e tipo, sem conversão de tipo."
Qual o resultado de `typeof null` em JavaScript e por que isso acontece?,"O resultado é `""object""`. Isso é um bug histórico do JavaScript que nunca foi corrigido para evitar quebrar a compatibilidade com versões antigas."
Qual é a diferença entre `let` e `var` em termos de escopo?,"`let` tem escopo de bloco (limitado a um bloco de código, como um loop `for` ou um bloco `if`), enquanto `var` tem escopo de função."
Como você pode prevenir que uma variável seja globalmente acessível em JavaScript?,Declare a variável dentro de uma função ou bloco usando `let` ou `const`.
O que acontece se você tentar usar uma variável `const` antes de sua declaração?,"Isso resultará em um `ReferenceError`, pois variáveis `const` não são inicializadas com um valor padrão como `undefined`."
Qual é o tipo de dado de um array em JavaScript?,"`object`. Arrays são um tipo especial de objeto em JavaScript.

**Conjunto 2: Funções**"
O que é uma função de ordem superior (higher-order function)?,Uma função de ordem superior é uma função que aceita outra função como um argumento ou retorna uma função como seu resultado.
Qual é a diferença entre uma função declarada e uma função expressa em JavaScript?,"Uma função declarada é definida usando a palavra-chave `function` seguida por um nome, enquanto uma função expressa é uma função anônima atribuída a uma variável. Funções declaradas são hoisted, enquanto funções expressas não."
O que é uma função Immediately Invoked Function Expression (IIFE)?,Uma IIFE é uma função que é definida e executada imediatamente após a sua criação. É comumente usada para criar um escopo privado para variáveis.
Como você chama uma função recursivamente em JavaScript?,A função chama a si mesma dentro de seu próprio corpo. É importante ter uma condição de parada para evitar um loop infinito.
Como você pode acessar o contexto `this` dentro de uma função em JavaScript?,"O valor de `this` depende de como a função é chamada.  Em uma função normal, `this` se refere ao objeto global (window em navegadores) ou é `undefined` em modo estrito. Em métodos de objetos, `this` se refere ao objeto.

**Conjunto 3: Objetos e Arrays**"
Como você formata um número para um número fixo de casas decimais em JavaScript?,Usando o método `toFixed(numeroDeCasasDecimais)`.
Qual é a diferença entre `Number.parseInt()` e o operador unário `+` ao converter strings em números?,"`Number.parseInt()` tenta analisar a string e retorna o primeiro número inteiro que encontra, ignorando caracteres não numéricos após o número inicial.  O operador `+` tenta converter toda a string em um número e retorna `NaN` se a string não puder ser convertida em um número válido."
O que são template literals (string templates) em JavaScript e qual a sua vantagem?,"Template literals são strings delimitadas por crases (``). Eles permitem a interpolação de variáveis diretamente na string, tornando a concatenação mais legível e simples."
Como você verifica se uma string contém uma determinada substring em JavaScript?,"Usando o método `String.includes()`.

**Conjunto 5: Operadores e Expressões**"
Qual é a precedência de operadores em JavaScript?,A precedência de operadores define a ordem em que os operadores são avaliados em uma expressão. Parênteses podem ser usados para forçar uma ordem de avaliação diferente.
Qual é a diferença entre uma expressão e um statement em JavaScript?,"Uma expressão avalia para um valor, enquanto um statement realiza uma ação. Statements geralmente contêm expressões."
Qual o resultado da expressão `0 == false` e por quê?,"O resultado é `true` porque o operador `==` realiza a conversão de tipo. `false` é convertido para 0, e 0 é igual a 0.

**Conjunto 6: Estruturas de Controle de Fluxo**"
Qual é a sintaxe da estrutura de controle `if/else` em JavaScript?,"```javascript
if (condicao) {
  // Código a ser executado se a condição for verdadeira
} else {
  // Código a ser executado se a condição for falsa
}
```"
Qual é a sintaxe da estrutura de controle `switch` em JavaScript?,"```javascript
switch (expressao) {
  case valor1:
    // Código a ser executado se expressao === valor1
    break;
  case valor2:
    // Código a ser executado se expressao === valor2
    break;
  default:
    // Código a ser executado se nenhum dos casos corresponder
}
```"
O que é a palavra-chave `break` em um loop ou estrutura `switch` em JavaScript?,`break` sai imediatamente do loop ou estrutura `switch`.
O que é a palavra-chave `continue` em um loop em JavaScript?,`continue` pula a iteração atual do loop e passa para a próxima iteração.
Qual é a sintaxe do loop `for` em JavaScript?,`for (inicialização; condição; incremento/decremento) { // Código a ser executado }`
Qual é a sintaxe do loop `while` em JavaScript?,`while (condicao) { // Código a ser executado enquanto a condição for verdadeira }`
Qual é a sintaxe do loop `do...while` em JavaScript?,`do { // Código a ser executado pelo menos uma vez } while (condicao);`
Qual é a diferença entre os loops `while` e `do...while` em JavaScript?,"O loop `while` verifica a condição antes de executar o código, enquanto o loop `do...while` executa o código pelo menos uma vez antes de verificar a condição."
Como você itera sobre as propriedades de um objeto usando um loop `for...in` em JavaScript?,`for (const propriedade in objeto) { // Código para acessar objeto[propriedade] }`
Como você itera sobre os elementos de um array usando um loop `for...of` em JavaScript?,"`for (const elemento of array) { // Código para acessar elemento }`

**Conjunto 7: Manipulação de Arrays (Avançado)**"
Qual a diferença entre os métodos `push()` e `unshift()` em arrays JavaScript?,"`push()` adiciona um ou mais elementos ao final do array, enquanto `unshift()` adiciona um ou mais elementos ao início do array."
Qual a diferença entre os métodos `pop()` e `shift()` em arrays JavaScript?,"`pop()` remove o último elemento do array, enquanto `shift()` remove o primeiro elemento do array."
O que o método `splice()` faz em um array JavaScript?,"`splice()` altera o conteúdo de um array removendo, substituindo ou adicionando elementos."
Como você pode concatenar dois arrays em JavaScript?,"Usando o método `concat()` ou o operador spread (`...`). Exemplo: `array1.concat(array2)` ou `[...array1, ...array2]`."
Como você pode inverter a ordem dos elementos em um array JavaScript?,Usando o método `reverse()`.
O que o método `join()` faz em um array JavaScript?,"Retorna uma string concatenando todos os elementos do array, separados por um separador especificado (por padrão, uma vírgula)."
Como você encontra o índice de um elemento em um array JavaScript?,"Usando o método `indexOf()`.  Se o elemento não for encontrado, retorna -1."
Como você verifica se um elemento existe em um array JavaScript (retornando um booleano)?,Usando o método `includes()`.
Explique o conceito de imutabilidade ao trabalhar com arrays em JavaScript e como implementá-lo.,"Imutabilidade significa que você não modifica o array original, mas cria um novo array com as alterações. Métodos como `map()`, `filter()`, `slice()` e o operador spread ajudam a manter a imutabilidade."
Qual é a estrutura `try...catch...finally` em JavaScript e qual a sua finalidade?,"`try` contém o código que pode lançar uma exceção. `catch` captura a exceção e executa o código para lidar com o erro. `finally` executa o código sempre, independentemente de ocorrer uma exceção ou não."
O que é um `TypeError` em JavaScript?,Um `TypeError` é um erro que ocorre quando uma operação ou função é usada em um valor de um tipo inesperado.
O que é um `ReferenceError` em JavaScript?,Um `ReferenceError` é um erro que ocorre quando você tenta usar uma variável que não foi declarada.
O que é um `SyntaxError` em JavaScript?,Um `SyntaxError` é um erro que ocorre quando o código JavaScript não segue a sintaxe correta da linguagem.
Qual é a diferença entre erros de tempo de compilação e erros de tempo de execução em JavaScript?,"JavaScript é uma linguagem interpretada, então não existe um passo de compilação tradicional. Erros de sintaxe são detectados antes da execução (durante a análise do código), enquanto erros de tempo de execução ocorrem durante a execução do código."
Como você pode usar o bloco `finally` em um `try...catch`?,"O bloco `finally` é executado sempre após o `try` e o `catch`, independentemente de uma exceção ter sido lançada ou capturada. É útil para limpar recursos, como fechar arquivos ou conexões de banco de dados."
O que acontece se uma exceção não for capturada em um bloco `try...catch`?,"A exceção se propaga para o escopo superior. Se não for capturada em nenhum escopo, o programa pode ser interrompido."
Como você pode criar um objeto de erro personalizado em JavaScript?,Criando uma classe que herda de `Error` e definindo suas próprias propriedades e métodos.
"O que é o modo estrito (`""use strict""`) em JavaScript e como ele afeta o tratamento de erros?","O modo estrito é uma forma de executar o JavaScript de forma mais ""segura"". Ele impõe regras mais rigorosas, como proibir o uso de variáveis não declaradas, e torna alguns erros silenciosos em erros explícitos, facilitando a detecção de bugs.

**Conjunto 9: Manipulação de Datas e Horários**"
Como você obtém o dia da semana de um objeto `Date` em JavaScript?,"Usando o método `getDay()`.  Domingo é 0, Segunda é 1, etc."
Como você formata uma data em JavaScript para uma string legível?,"Usando métodos como `toLocaleDateString()`, `toLocaleTimeString()`, `toLocaleString()`, ou bibliotecas de formatação de data."
Como você adiciona dias a uma data em JavaScript?,"Obtendo o valor numérico da data usando `getTime()`, adicionando o número de milissegundos correspondente ao número de dias e criando um novo objeto `Date` com o novo valor."
O que é o Epoch Time (Tempo Unix) em JavaScript?,"É o número de milissegundos que se passaram desde 1º de janeiro de 1970, 00:00:00 UTC."
Como você define a hora e os minutos de um objeto `Date` em JavaScript?,"Usando os métodos `setHours()` e `setMinutes()`.

**Conjunto 10: Funções Avançadas e Escopo**"
Como você pode criar um escopo privado em JavaScript antes da introdução de `let` e `const`?,Usando uma IIFE (Immediately Invoked Function Expression). Isso cria um escopo de função isolado onde as variáveis declaradas não são acessíveis fora da função.
Qual é a diferença entre `call()` e `apply()` em JavaScript?,"Ambos os métodos chamam uma função com um valor `this` especificado. A principal diferença é como os argumentos são passados: `call()` recebe argumentos separados por vírgulas, enquanto `apply()` recebe um array de argumentos."
Explique o padrão de módulo em JavaScript.,O padrão de módulo é uma forma de organizar o código JavaScript em unidades reutilizáveis e encapsuladas. Ele usa closures para criar escopos privados e expor apenas as partes do módulo que devem ser acessíveis externamente.
Explique o que é uma closure em JavaScript.,"Uma closure é uma função que tem acesso ao escopo de outra função, mesmo depois que a função externa já terminou de executar. Isso permite que a função interna ""lembre"" das variáveis e do ambiente da função externa."
Como você impede que um evento HTML se propague para elementos pais?,Usando o método `event.stopPropagation()` dentro do manipulador de eventos.
O que é o objeto `arguments` em uma função JavaScript?,"É um objeto similar a um array que contém todos os argumentos passados para uma função, mesmo que a função não os declare explicitamente nos seus parâmetros."
Como criar um novo objeto em JavaScript utilizando a notação literal?,"Usando chaves `{}` e definindo as propriedades dentro, como: `const objeto = { propriedade1: valor1, propriedade2: valor2 };`"
Como verificar se uma variável é um array em JavaScript?,Usando `Array.isArray(variavel)`.
O que é JSON e como você converte um objeto JavaScript para JSON?,"JSON (JavaScript Object Notation) é um formato de dados leve e legível por humanos. Para converter um objeto JavaScript para JSON, usa-se o método `JSON.stringify(objeto)`."
Como converter uma string JSON de volta para um objeto JavaScript?,Usando o método `JSON.parse(stringJSON)`.
Como você adiciona um ouvinte de eventos (event listener) a um elemento HTML em JavaScript?,"Usando o método `addEventListener()` no elemento HTML, especificando o tipo de evento e a função a ser executada quando o evento ocorrer.  Exemplo: `elemento.addEventListener('click', minhaFuncao);`"
Como alterar o texto dentro de um elemento HTML usando JavaScript?,Atribuindo um novo valor à propriedade `textContent` ou `innerText` do elemento.
"O que são loops `for`, `while` e `do...while` em JavaScript?","São estruturas de controle que permitem repetir um bloco de código várias vezes. `for` é usado quando o número de repetições é conhecido, `while` repete enquanto uma condição for verdadeira, e `do...while` executa o bloco de código pelo menos uma vez antes de verificar a condição."
Como você sai de um loop `for` ou `while` antes do tempo em JavaScript?,Usando a palavra-chave `break`.
Como pular para a próxima iteração em um loop `for` ou `while` em JavaScript?,Usando a palavra-chave `continue`.
O que é uma função auto-invocável (IIFE) em JavaScript?,É uma função que é executada imediatamente após ser definida.  Usada para criar escopos isolados e evitar conflitos de nomes. Exemplo: `(function() { /* código */ })();`
"Qual a diferença entre `var`, `let` e `const` para declarar variáveis em JavaScript?","`var` tem escopo de função ou global, `let` tem escopo de bloco, e `const` também tem escopo de bloco e declara uma variável constante (seu valor não pode ser reatribuído)."
Como criar uma cópia superficial (shallow copy) de um objeto em JavaScript?,Usando o operador spread (`...`) ou o método `Object.assign()`.
Quais são os estados possíveis de uma Promise?,"Pendente (pending), Cumprida (fulfilled) e Rejeitada (rejected)."
Qual a diferença entre `map()` e `forEach()` em arrays JavaScript?,"`map()` retorna um novo array com os resultados da função, enquanto `forEach()` simplesmente executa a função para cada elemento e não retorna nada."
Como você adiciona um elemento no final de um array em JavaScript?,Usando o método `push()`.
Como você adiciona um elemento no início de um array em JavaScript?,Usando o método `unshift()`.
Como você junta todos os elementos de um array em uma string em JavaScript?,Usando o método `join()`.
Como comparar dois objetos em JavaScript para ver se eles são iguais?,"Objetos são comparados por referência. Para comparar os valores dentro dos objetos, é necessário iterar sobre as propriedades e compará-las individualmente, ou converter ambos para JSON e comparar as strings JSON."
Como arredondar um número para o inteiro mais próximo para cima em JavaScript?,Usando o método `Math.ceil()`.
Como arredondar um número para o inteiro mais próximo para baixo em JavaScript?,Usando o método `Math.floor()`.
Como obter o ano atual usando o objeto `Date`?,Usando o método `getFullYear()`.
Como obter o mês atual usando o objeto `Date`?,"Usando o método `getMonth()`. (Retorna um valor de 0 a 11, onde 0 é Janeiro)."
Como obter o dia do mês atual usando o objeto `Date`?,Usando o método `getDate()`.
Como encontrar todas as ocorrências de uma expressão regular em uma string em JavaScript?,Usando o método `match()` com a flag `g` (global) na expressão regular.
Como substituir partes de uma string que correspondem a uma expressão regular em JavaScript?,Usando o método `replace()` com a expressão regular como primeiro argumento.
O que são atributos HTML?,"São propriedades que fornecem informações adicionais sobre os elementos HTML, como `id`, `class`, `src`, `href`, etc."
Como obter o valor de um atributo de um elemento HTML usando JavaScript?,Usando o método `getAttribute('nomeDoAtributo')` do elemento.
Como definir o valor de um atributo de um elemento HTML usando JavaScript?,"Usando o método `setAttribute('nomeDoAtributo', 'novoValor')` do elemento."
O que são atributos de dados (data attributes) em HTML?,São atributos personalizados que permitem armazenar dados privados específicos para o elemento.  Eles começam com o prefixo `data-`.
Como acessar um atributo de dados de um elemento HTML usando JavaScript?,"Usando a propriedade `dataset` do elemento, como `elemento.dataset.nomeDoAtributo`. (O atributo ""data-nome-do-atributo"" é acessado como ""nomeDoAtributo"")."
Como obter a largura da janela do navegador em JavaScript?,Usando `window.innerWidth`.
Como obter a altura da janela do navegador em JavaScript?,Usando `window.innerHeight`.
Como exibir um alerta na tela do usuário usando JavaScript?,Usando a função `alert('mensagem')`.
Como exibir um prompt para o usuário inserir dados usando JavaScript?,"Usando a função `prompt('mensagem', 'valorPadrao')`."
Como exibir uma caixa de confirmação para o usuário usando JavaScript?,Usando a função `confirm('mensagem')`.
Como imprimir uma mensagem no console usando JavaScript?,Usando `console.log('mensagem')`.
Como imprimir um aviso (warning) no console usando JavaScript?,Usando `console.warn('mensagem')`.
Como imprimir um erro no console usando JavaScript?,Usando `console.error('mensagem')`.
Como armazenar dados no Local Storage usando JavaScript?,"Usando o método `localStorage.setItem('chave', 'valor')`.  Os valores são armazenados como strings."
Como recuperar dados do Local Storage usando JavaScript?,Usando o método `localStorage.getItem('chave')`.
Como remover um item do Local Storage usando JavaScript?,Usando o método `localStorage.removeItem('chave')`.
Como armazenar dados no Session Storage usando JavaScript?,"Usando o método `sessionStorage.setItem('chave', 'valor')`."
Como recuperar dados do Session Storage usando JavaScript?,Usando o método `sessionStorage.getItem('chave')`.
Qual a principal diferença entre Local Storage e Session Storage?,"Local Storage armazena os dados permanentemente, enquanto Session Storage armazena os dados apenas durante a sessão do navegador."
Como importar um módulo em JavaScript?,Usando a declaração `import` (se estiver usando módulos ES) ou a função `require()` (se estiver usando CommonJS).
Como exportar um módulo em JavaScript?,Usando a declaração `export` (se estiver usando módulos ES) ou o objeto `module.exports` (se estiver usando CommonJS).
Como fazer destructuring de um objeto em JavaScript?,"Usando a sintaxe `{ propriedade1, propriedade2 } = objeto;`"
Como fazer destructuring de um array em JavaScript?,"Usando a sintaxe `[elemento1, elemento2] = array;`"
Qual a sintaxe de uma arrow function em JavaScript?,`(parametros) => expressao;` ou `(parametros) => { // bloco de código }`
Como o `this` se comporta em arrow functions em JavaScript?,"Em arrow functions, `this` é lexicamente vinculado, ou seja, herda o valor de `this` do contexto circundante."
Como verificar se uma string termina com uma determinada substring em JavaScript?,Usando o método `endsWith('substring')`.
O que é o método `includes()` em strings JavaScript?,"Retorna `true` se uma string contém uma determinada substring, caso contrário, retorna `false`."
Para que serve o tipo de dado `Symbol` em JavaScript?,É frequentemente usado para criar propriedades privadas em objetos ou para evitar colisões de nomes em bibliotecas.
Qual a principal vantagem de usar WeakMaps e WeakSets?,"Ajudam a evitar vazamentos de memória, pois não impedem que os objetos sejam coletados pelo garbage collector."
Explique o conceito de programação orientada a objetos (POO) em JavaScript.,"JavaScript suporta POO através de protótipos. Permite criar objetos com propriedades (dados) e métodos (funções), herança de propriedades e métodos de outros objetos (protótipos), encapsulamento (ocultar detalhes de implementação) e polimorfismo (objetos de diferentes classes podem responder ao mesmo método de maneiras diferentes)."
Como criar um objeto com um protótipo específico em JavaScript?,Usando o método `Object.create(prototipo)`.
Como declarar um generator em JavaScript?,"Usando o asterisco (`*`) após a palavra-chave `function`, como `function* minhaFuncaoGeradora() { ... }`."
Como tornar um objeto iterável em JavaScript?,"Implementando o método `Symbol.iterator` no objeto, que deve retornar um iterador."
Como o garbage collector funciona em JavaScript?,Ele monitora os objetos em memória e identifica aqueles que não são mais acessíveis (não têm referências a eles). Esses objetos são então marcados como elegíveis para coleta e a memória que eles ocupam é liberada.
O que são vazamentos de memória em JavaScript?,"Ocorrem quando um programa aloca memória, mas não a libera quando ela não é mais necessária, resultando em um consumo crescente de memória ao longo do tempo."
Como evitar vazamentos de memória em JavaScript?,"Evitando referências circulares, removendo listeners de eventos quando não forem mais necessários, liberando referências a objetos grandes quando não forem mais usados e utilizando WeakMaps/WeakSets."
Qual a principal vantagem de usar Web Workers?,"Melhoram a capacidade de resposta da interface do usuário, especialmente para tarefas computacionalmente intensivas."
Como comunicar dados entre a thread principal e um Web Worker?,Usando o método `postMessage()`.
O que é o CORS (Cross-Origin Resource Sharing)?,É um mecanismo de segurança do navegador que restringe requisições HTTP de scripts originados de um domínio para outro domínio diferente.
Como lidar com erros de CORS em JavaScript?,Configurando o cabeçalho `Access-Control-Allow-Origin` no servidor que está fornecendo o recurso.
Como se proteger contra ataques XSS em JavaScript?,"Escapando ou codificando a entrada do usuário antes de exibi-la em uma página da web, usando Content Security Policy (CSP) e evitando o uso de `eval()`."
O que é CSRF (Cross-Site Request Forgery)?,É um ataque que força um usuário autenticado a executar ações não intencionais em uma aplicação web.
Como se proteger contra ataques CSRF em JavaScript?,"Usando tokens CSRF, validando o cabeçalho `Origin` ou `Referer` nas requisições e usando o atributo `SameSite` em cookies."
O que são Observables em programação reativa com JavaScript?,São fluxos de dados que emitem valores ao longo do tempo e podem ser observados por assinantes.
O que são streams em JavaScript?,Streams são uma forma de lidar com dados sequenciais de forma assíncrona. Permitem processar grandes quantidades de dados sem precisar carregá-los completamente na memória.
Como criar e disparar um evento personalizado em JavaScript?,"Usando o construtor `new Event('nomeDoEvento')` para criar o evento e o método `dispatchEvent(evento)` no elemento para dispará-lo.

Espero que esta lista expandida de perguntas e respostas seja útil!"
Como se declara uma variável em JavaScript?,"Utiliza-se as palavras-chave `var`, `let` ou `const`, seguidas pelo nome da variável. Ex: `let nome = ""João"";`"
O que é Hoisting em JavaScript?,"É o comportamento do JavaScript de mover declarações de variáveis e funções para o topo do seu escopo antes da execução do código. No entanto, apenas a declaração é movida, não a inicialização."
Como criar uma função anônima em JavaScript?,"`(function() { console.log(""Função anônima""); })();` ou `() => { console.log(""Função anônima arrow""); }`"
O que é uma template literal em JavaScript?,É uma string que permite a incorporação de expressões dentro dela usando `${}`. Delimitada por backticks (``).
Qual a utilidade das template literals?,"Facilitam a interpolação de variáveis e expressões dentro de strings, tornando o código mais legível."
Como acessar um elemento em um array JavaScript?,"Utilizando o índice do elemento, começando em 0. Ex: `meuArray[0]` acessa o primeiro elemento."
O que é o método `indexOf()` em arrays JavaScript?,"Retorna o primeiro índice em que um determinado elemento pode ser encontrado no array, ou -1 se não estiver presente."
O que é o método `lastIndexOf()` em arrays JavaScript?,"Retorna o último índice em que um determinado elemento pode ser encontrado no array, ou -1 se não estiver presente."
Como criar uma nova data em JavaScript?,"Utilize `new Date()`. Pode ser criado sem argumentos (data e hora atuais), com uma string de data ou com valores de ano, mês, dia, etc."
Como obter o dia do mês de uma data em JavaScript?,Utilize o método `getDate()`.
Como obter o dia da semana de uma data em JavaScript?,Utilize o método `getDay()`. Retorna um valor entre 0 (Domingo) e 6 (Sábado).
Como selecionar um elemento HTML pelo ID usando JavaScript?,"Utilize o método `document.getElementById(""idDoElemento"")`."
Como selecionar um elemento HTML pela classe usando JavaScript?,"Utilize o método `document.getElementsByClassName(""nomeDaClasse"")`. Retorna uma HTMLCollection."
Como selecionar elementos HTML pela tag name usando JavaScript?,"Utilize o método `document.getElementsByTagName(""nomeDaTag"")`. Retorna uma HTMLCollection."
Como alterar o texto de um elemento HTML usando JavaScript?,Utilize a propriedade `textContent` ou `innerText` do elemento.
Como alterar o HTML interno de um elemento usando JavaScript?,Utilize a propriedade `innerHTML` do elemento.
Como adicionar um atributo a um elemento HTML usando JavaScript?,"Utilize o método `setAttribute(""nomeDoAtributo"", ""valorDoAtributo"")`."
Como remover um atributo de um elemento HTML usando JavaScript?,"Utilize o método `removeAttribute(""nomeDoAtributo"")`."
O que é o objeto `event` em um manipulador de eventos?,É um objeto que contém informações sobre o evento que ocorreu.
Qual a sintaxe básica de um loop `for` em JavaScript?,`for (inicialização; condição; incremento) { // código a ser executado }`
Qual a sintaxe básica de um loop `while` em JavaScript?,`while (condição) { // código a ser executado }`
Qual a sintaxe básica de um loop `do...while` em JavaScript?,`do { // código a ser executado } while (condição);`
O que é a instrução `break` em JavaScript?,"Interrompe a execução de um loop (for, while, do...while) ou de uma instrução `switch`."
O que é a instrução `continue` em JavaScript?,Interrompe a iteração atual de um loop e continua com a próxima iteração.
Como adicionar uma propriedade ou método ao protótipo de um objeto em JavaScript?,"`Objeto.prototype.novaPropriedade = ""valor"";` ou `Objeto.prototype.novoMetodo = function() { ... };`"
"O que é o modo estrito (`""use strict"";`) em JavaScript?","É uma forma de introduzir uma semântica mais restrita ao JavaScript, ajudando a evitar erros comuns e a escrever código mais seguro."
O que são exceções em JavaScript?,São erros que ocorrem durante a execução do código.
Como lançar uma exceção em JavaScript?,"Utilize a palavra-chave `throw`. Ex: `throw new Error(""Mensagem de erro"");`"
Como tratar exceções em JavaScript?,Utilize o bloco `try...catch`.
Qual a finalidade do bloco `finally` em um bloco `try...catch`?,"O bloco `finally` é executado sempre, independentemente de uma exceção ser lançada ou não no bloco `try`."
Quais são os estados possíveis de uma promise?,"`pending` (pendente), `fulfilled` (cumprida) e `rejected` (rejeitada)."
Como criar uma promise em JavaScript?,"`new Promise((resolve, reject) => { ... });`"
Como lidar com o sucesso de uma promise?,Utilize o método `then()`.
Como lidar com a falha de uma promise?,Utilize o método `catch()`.
O que é o método `finally()` em promises?,Define um callback a ser executado quando a promise é resolvida (cumprida ou rejeitada).
Como declarar uma função assíncrona em JavaScript?,Utilize a palavra-chave `async` antes da declaração da função. Ex: `async function minhaFuncao() { ... }`
Como exportar um módulo em JavaScript? (ES Modules),Utilize as palavras-chave `export` (nomeado) ou `export default` (padrão).
Como importar um módulo em JavaScript? (ES Modules),"Utilize a palavra-chave `import`. Ex: `import { funcao } from ""./modulo.js"";` ou `import moduloPadrao from ""./modulo.js"";`"
Como imprimir uma mensagem no console do navegador usando JavaScript?,"Utilize `console.log(""Mensagem"");`."
Quais são outros métodos úteis do objeto `console` além de `console.log()`?,"`console.warn()`, `console.error()`, `console.table()`, `console.time()`, `console.timeEnd()`."
Qual a sintaxe básica do método `setTimeout()` em JavaScript?,"`setTimeout(funcaoCallback, atrasoEmMilissegundos);`"
Qual a sintaxe básica do método `setInterval()` em JavaScript?,"`setInterval(funcaoCallback, intervaloEmMilissegundos);`"
Como parar um `setTimeout()` ou `setInterval()` em JavaScript?,"Utilize as funções `clearTimeout()` e `clearInterval()`, respectivamente, passando o ID retornado por `setTimeout()` ou `setInterval()` como argumento."
Quais são os usos comuns do operador spread em JavaScript?,"Clonar arrays, combinar arrays, passar argumentos para funções e criar objetos com base em outros objetos."
Como realizar destructuring de um objeto em JavaScript?,"`const { propriedade1, propriedade2 } = objeto;`"
Como realizar destructuring de um array em JavaScript?,"`const [elemento1, elemento2] = array;`"
O que são Generators em Javascript?,"Funções que podem ser pausadas e retomadas, permitindo retornar múltiplos valores ao longo do tempo. São definidas com `function*` e usam a palavra-chave `yield`."
O que é o método `Symbol` em Javascript?,"Cria um valor único e imutável, usado como chave de propriedade de objeto para evitar colisões de nomes."
Qual a diferença entre `map` e `object` em Javascript?,"`Map` permite chaves de qualquer tipo (incluindo objetos), mantém a ordem de inserção e tem métodos mais convenientes para manipular pares chave-valor. Objetos Javascript convertem chaves para strings e não mantêm a ordem de inserção garantida."
O que são WeakMaps e WeakSets em Javascript?,"São coleções que mantêm referências ""fracas"" a objetos. Isso significa que, se não houver outras referências a um objeto armazenado em um WeakMap ou WeakSet, o objeto pode ser coletado pelo garbage collector, e a entrada correspondente no WeakMap/WeakSet será removida."
O que são Proxies em Javascript?,"Permitem interceptar e customizar operações fundamentais em objetos, como leitura, escrita e deleção de propriedades."
O que é Currying em Javascript?,É uma técnica de transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada.
O que é Composição de Funções em Javascript?,É o processo de combinar duas ou mais funções para produzir uma nova função. O resultado de uma função é passado como argumento para a próxima.
Explique a diferença entre programação imperativa e declarativa em Javascript.,"Programação imperativa detalha *como* realizar uma tarefa (passo a passo), enquanto programação declarativa descreve *o que* deve ser feito, sem especificar os passos."
O que são Higher-Order Functions em Javascript?,São funções que recebem outras funções como argumentos ou retornam funções como resultado.
O que é Memoization em Javascript?,É uma técnica de otimização que armazena os resultados de chamadas de funções caras e retorna o resultado armazenado quando as mesmas entradas ocorrem novamente.
O que é recursão em Javascript?,"É quando uma função chama a si mesma para resolver um problema, dividindo-o em subproblemas menores até atingir um caso base."
O que é TCO (Tail Call Optimization) em Javascript?,É uma otimização que permite que uma função recursiva que faz uma chamada recursiva no final de sua execução seja executada sem aumentar o tamanho da pilha de chamadas. Javascript não tem suporte universal para TCO.
O que é o padrão Módulo Revelador (Revealing Module Pattern) em JavaScript?,É um padrão de projeto que usa closures para criar módulos com propriedades e métodos privados e públicos.
O que é uma String Tagged Template Literal?,"Permite customizar a forma como template literals são processadas, passando a string e as expressões interpoladas para uma função."
O que é o operador Nullish Coalescing (??) em Javascript?,"Retorna o operando da direita quando o operando da esquerda é `null` ou `undefined`, caso contrário, retorna o operando da esquerda."
O que é Optional Chaining (?.) em Javascript?,"Permite acessar propriedades aninhadas de um objeto sem precisar verificar explicitamente se cada nível da propriedade existe, evitando erros quando uma propriedade é `null` ou `undefined`."
Qual a finalidade do `delete` operator em Javascript?,Remove uma propriedade de um objeto.
O que é NaN em JavaScript? Como verificar se um valor é NaN?,NaN (Not a Number) é um valor que representa o resultado de uma operação numérica inválida. Utilize `Number.isNaN()` para verificar se um valor é NaN (é mais confiável que `isNaN()`).
O que são side effects (efeitos colaterais) em Javascript?,"Modificações no estado de um programa que não estão diretamente relacionadas ao valor retornado por uma função. Funções com side effects podem alterar variáveis externas, modificar o DOM ou realizar operações de I/O.

Espero que esta lista seja útil!"
O que é o operador `void` em JavaScript e qual sua utilidade?,"O operador `void` avalia uma expressão e retorna `undefined`. É útil para prevenir que uma função retorne um valor, especialmente em URLs como `javascript:void(0)`."
O que é um closure em JavaScript e por que ele é útil?,"Um closure é a combinação de uma função e o ambiente léxico em que essa função foi declarada. Ele permite que uma função acesse variáveis do escopo externo, mesmo após a função externa ter retornado. É útil para encapsulamento e criação de funções persistentes."
Explique o que é event bubbling em JavaScript.,"Event bubbling é o processo em que um evento disparado em um elemento do DOM ""borbulha"" ou se propaga para cima na árvore do DOM, disparando os manipuladores de evento dos elementos pai."
Como você pode copiar um objeto em JavaScript? Quais as diferenças entre shallow copy e deep copy?,"Você pode usar `Object.assign({}, obj)` ou o operador spread `{...obj}` para uma shallow copy. Para uma deep copy, você pode usar `JSON.parse(JSON.stringify(obj))` ou uma função recursiva. Shallow copy copia apenas as referências, enquanto deep copy cria um novo objeto com todos os valores copiados."
O que é a função `parseInt()` em JavaScript e como ela funciona?,"`parseInt()` converte uma string em um número inteiro. Ele analisa a string até encontrar um caractere que não pode ser convertido em número, e retorna o inteiro resultante. Ele recebe um segundo argumento opcional, a base numérica (radix)."
O que é um Immediately Invoked Function Expression (IIFE) em JavaScript?,Um IIFE é uma função que é definida e executada imediatamente. É frequentemente usado para criar um escopo privado e evitar a poluição do escopo global.
Qual a diferença entre `setAttribute()` e `.property` ao manipular atributos de elementos HTML com JavaScript?,"`setAttribute()` define o atributo no HTML, que é sempre uma string. `.property` define a propriedade do objeto DOM correspondente, que pode ser de diferentes tipos (string, number, boolean, object)."
O que é um template literal tagged em JavaScript?,"Um template literal tagged é um template literal precedido por uma função (a ""tag""). A função tag recebe o array de strings e os valores interpolados como argumentos e pode processá-los de forma personalizada."
"Explique o conceito de ""rest parameters"" em JavaScript.",Rest parameters permitem que uma função receba um número indefinido de argumentos como um array. Eles são representados por `...nomeDoArray`.
"Explique o conceito de ""spread syntax"" em JavaScript.",Spread syntax permite expandir um iterável (como um array ou string) em locais onde zero ou mais argumentos (para chamadas de função) ou elementos (para literais de array) são esperados.
Qual a diferença entre usar `querySelector()` e `querySelectorAll()` em JavaScript?,`querySelector()` retorna o primeiro elemento dentro do documento que corresponde ao seletor especificado. `querySelectorAll()` retorna uma lista de nós estática (NodeList) representando todos os elementos que correspondem ao seletor especificado.
O que é um event listener passivo em JavaScript?,"Um event listener passivo indica ao navegador que o manipulador de eventos não chamará `preventDefault()`. Isso permite que o navegador otimize o desempenho da rolagem, por exemplo. É especificado usando a opção `{ passive: true }` em `addEventListener`."
Qual a diferença entre usar `innerHTML` e `textContent` em JavaScript?,"`innerHTML` obtém ou define o conteúdo HTML de um elemento, enquanto `textContent` obtém ou define o conteúdo textual de um elemento. `textContent` é geralmente preferível por ser mais seguro (evita ataques XSS) e mais rápido."
O que são flags em expressões regulares JavaScript? Dê exemplos.,"Flags modificam o comportamento da expressão regular. Exemplos incluem:
*   `g`: global (encontra todas as correspondências, não apenas a primeira)
*   `i`: ignore case (ignora maiúsculas e minúsculas)
*   `m`: multiline (permite que `^` e `$` correspondam ao início e fim de cada linha)"
O que é o método `test()` de um objeto `RegExp` em JavaScript?,O método `test()` testa se uma string corresponde à expressão regular. Retorna `true` se houver uma correspondência e `false` caso contrário.
O que é o método `exec()` de um objeto `RegExp` em JavaScript?,O método `exec()` procura uma correspondência em uma string para a expressão regular especificada. Retorna um array com informações sobre a correspondência ou `null` se não houver correspondência.
Quais são os principais tipos de erros em JavaScript?,"Alguns tipos comuns de erros incluem: `SyntaxError`, `TypeError`, `ReferenceError`, `RangeError`, `URIError`."
O que é o modo estrito em JavaScript? Como habilitá-lo?,"O modo estrito é uma forma de aplicar uma semântica mais rigorosa ao JavaScript. Ele ajuda a evitar erros comuns e torna o código mais seguro. É habilitado adicionando `""use strict"";` no início de um script ou função."
O que é um prototype em JavaScript?,"Em JavaScript, cada objeto tem um prototype. O prototype é outro objeto do qual o objeto herda propriedades e métodos."
Como você pode acessar o prototype de um objeto em JavaScript?,Você pode usar `Object.getPrototypeOf(obj)` ou `obj.__proto__`.
Como você pode criar um objeto usando um construtor em JavaScript?,Você pode usar a palavra-chave `new` seguida do nome do construtor. Ex: `const obj = new MyConstructor();`
Qual é o valor de `this` em uma função chamada como um método de um objeto?,O valor de `this` é o objeto que possui o método.
Qual é o valor de `this` em uma função chamada no escopo global (fora de um objeto)?,"No modo não estrito, o valor de `this` é o objeto global (window no navegador). No modo estrito, o valor de `this` é `undefined`."
Como você pode selecionar um elemento HTML pelo seu ID usando JavaScript?,Você pode usar o método `document.getElementById('idDoElemento')`.
Como você pode selecionar elementos HTML por sua classe usando JavaScript?,Você pode usar o método `document.getElementsByClassName('nomeDaClasse')`. Isso retorna um HTMLCollection.
Como você pode selecionar elementos HTML por sua tag name usando JavaScript?,Você pode usar o método `document.getElementsByTagName('nomeDaTag')`. Isso retorna um HTMLCollection.
Como você pode modificar o conteúdo textual de um elemento HTML usando JavaScript?,Você pode usar a propriedade `element.textContent = 'novoTexto'`.
Como você pode modificar os atributos de um elemento HTML usando JavaScript?,"Você pode usar o método `element.setAttribute('nomeDoAtributo', 'valorDoAtributo')`."
Como você pode modificar o estilo CSS de um elemento HTML usando JavaScript?,Você pode usar a propriedade `element.style.propriedadeCSS = 'valor'`.
Como você pode navegar na árvore do DOM usando JavaScript?,"Você pode usar propriedades como `parentNode`, `childNodes`, `firstChild`, `lastChild`, `nextSibling` e `previousSibling`."
Como você pode anexar um manipulador de evento a um elemento HTML usando JavaScript?,"Você pode usar o método `element.addEventListener('nomeDoEvento', function)`."
O que é o objeto `event` em um manipulador de eventos JavaScript?,"O objeto `event` contém informações sobre o evento que ocorreu, como o elemento que disparou o evento, as coordenadas do mouse e a tecla pressionada."
Qual a diferença entre `stopPropagation()` e `stopImmediatePropagation()`?,`stopPropagation()` impede que o evento se propague para elementos pais. `stopImmediatePropagation()` impede que o evento se propague para elementos pais e também impede que outros manipuladores de evento no mesmo elemento sejam executados.
Como você pode criar um Web Worker em JavaScript?,Você pode criar um Web Worker instanciando o objeto `Worker` com o caminho para um arquivo JavaScript que contém o código a ser executado no thread de fundo. Ex: `const worker = new Worker('worker.js');`
Como você pode armazenar dados no Local Storage usando JavaScript?,"Você pode usar o método `localStorage.setItem('chave', 'valor')`."
Como você declara um generator em JavaScript?,Você declara um generator usando a sintaxe `function* nomeDoGenerator() { ... }`.
Como você itera sobre um generator em JavaScript?,Você pode iterar sobre um generator usando um loop `for...of` ou chamando o método `next()` do generator.
Como você pode criar um iterator personalizado em JavaScript?,Você pode criar um iterator personalizado definindo um objeto com um método `next()` que retorna um objeto com as propriedades `value` e `done`.
Como você cria um Map em JavaScript?,Você pode criar um Map usando a sintaxe `const meuMap = new Map();`.
Como você recupera um valor de um Map em JavaScript?,Você pode usar o método `meuMap.get('chave');`.
Como você verifica se um Map tem uma chave em JavaScript?,Você pode usar o método `meuMap.has('chave');`.
Como você cria um Set em JavaScript?,Você pode criar um Set usando a sintaxe `const meuSet = new Set();`.
Como você verifica se um Set tem um valor em JavaScript?,Você pode usar o método `meuSet.has('valor');`.
O que é a diferença entre um Map e um Object em JavaScript?,"Maps permitem chaves de qualquer tipo de dado, enquanto Objects normalmente usam strings como chaves. Maps também preservam a ordem de inserção, enquanto a ordem das propriedades de um objeto não é garantida. Maps também têm métodos integrados para obter o tamanho e iterar sobre os elementos."
O que é a diferença entre um Set e um Array em JavaScript?,"Sets armazenam apenas valores únicos, enquanto Arrays podem conter elementos duplicados. Sets não têm uma ordem específica, enquanto Arrays são ordenados."
O que são funções assíncronas geradoras (async generator functions) em JavaScript?,"São funções geradoras que permitem usar `await` dentro delas. Elas retornam um objeto que conforma com o protocolo AsyncIterator, permitindo iterar sobre valores assíncronos."
Como se declara uma função assíncrona geradora em JavaScript?,Usando a sintaxe `async function* nomeDaFuncao() { ... }`.
O que são os módulos ES (ES Modules) em JavaScript?,"ES Modules são o sistema de módulos padrão no JavaScript, introduzido no ECMAScript 2015 (ES6). Eles permitem organizar o código em arquivos separados e importar e exportar funcionalidades entre eles."
Como você exporta uma função ou variável de um módulo ES em JavaScript?,Você pode usar a palavra-chave `export` antes da declaração da função ou variável. Ex: `export function minhaFuncao() { ... }` ou `export const minhaVariavel = 10;`.
Como você importa uma função ou variável de um módulo ES em JavaScript?,Você pode usar a palavra-chave `import` seguida do nome da função ou variável e o caminho para o módulo. Ex: `import { minhaFuncao } from './meuModulo.js';`.
Qual a diferença entre exportações nomeadas (named exports) e exportações padrão (default exports) em módulos ES?,"Exportações nomeadas permitem exportar vários valores de um módulo, e você precisa importar os nomes exatos exportados. Exportações padrão permitem exportar um único valor de um módulo, e você pode escolher qualquer nome ao importar."
Como você importa uma exportação padrão de um módulo ES em JavaScript?,Você pode usar a sintaxe `import nomeDaVariavel from './meuModulo.js';`.
Explique o que é uma WeakMap em JavaScript.,"Uma WeakMap é uma coleção de pares chave-valor onde as chaves devem ser objetos e não são enumeráveis. A principal diferença entre WeakMap e Map é que as chaves de uma WeakMap são fracamente referenciadas, o que significa que, se não houver outras referências para a chave (o objeto), o coletor de lixo pode liberar a memória ocupada por esse objeto e sua entrada correspondente na WeakMap. Isso evita vazamentos de memória."
Explique o que é uma WeakSet em JavaScript.,"Uma WeakSet é uma coleção de objetos únicos, semelhante a um Set, mas com a restrição de que só pode conter objetos e as referências aos objetos são fracas.  Se não houver outras referências para um objeto em um WeakSet, ele pode ser coletado pelo garbage collector."
Qual a principal diferença entre WeakMap/WeakSet e Map/Set em relação ao garbage collection?,"WeakMap e WeakSet não impedem que suas chaves (objetos) sejam coletados pelo garbage collector se não houver outras referências a eles, enquanto Map e Set mantêm referências fortes, impedindo a coleta do garbage collector."
O que são Symbols globais em JavaScript?,"Symbols globais são Symbols que são registrados em um registro global, permitindo que eles sejam acessados de diferentes partes do código. Você pode criar um Symbol global usando `Symbol.for('chave')`, que retorna o Symbol existente com essa chave ou cria um novo se não existir."
O que é o método `Symbol.keyFor()` em JavaScript?,"O método `Symbol.keyFor()` retorna a chave associada a um Symbol global. Se o Symbol não for global, ele retorna `undefined`."
Quais operações aritméticas são suportadas com BigInts?,"BigInts suportam operações aritméticas como adição (+), subtração (-), multiplicação (*), divisão (/), resto (%), e exponenciação (**). No entanto, BigInts não podem ser misturados com Numbers em"
Como depurar problemas com variáveis?,"variáveis é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Cypress. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar spread operator no JavaScript?,"spread operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo import e export. Seu uso adequado melhora a performance e a legibilidade do código."
Explique Web Components de forma simples.,"Web Components é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar Currying no JavaScript?,"Currying é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
Explique Objeto Date de forma simples.,"Objeto Date é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar operadores de comparação?,"operadores de comparação é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo estruturas de controle. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no constantes nas versões mais recentes do JavaScript?,"constantes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Automação de testes. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de rest operator.,"rest operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JSON. Seu uso adequado melhora a performance e a legibilidade do código."
Como Vue.js se compara a tecnologias similares?,"Vue.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Deno. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar rest operator?,"rest operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo sessionStorage. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para programação assíncrona?,"programação assíncrona é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebAssembly. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com localStorage?,"localStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Jest. Seu uso adequado melhora a performance e a legibilidade do código."
Explique tipos de dados de forma simples.,"tipos de dados é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Cypress. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de this em JavaScript?,"this em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções. Seu uso adequado melhora a performance e a legibilidade do código."
O que é AJAX?,"AJAX é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo cookies. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona JSON?,"JSON é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Deno. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona rest operator?,"rest operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de Cypress?,"Cypress é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo bind, call e apply. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com closures?,"closures é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo sessionStorage. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar Vue.js?,"Vue.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para funções?,"funções é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo closures. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre Bun.js e loops?,"Bun.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo loops. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de let vs var?,"let vs var é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Map, Filter e Reduce. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com manipulação de DOM?,"manipulação de DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Objeto Date. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de Testes unitários em JavaScript?,"Testes unitários em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo módulos ES6. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com sessionStorage?,"sessionStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo closures. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Datas e horas é importante?,"Datas e horas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Automação de testes. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de bubbling e capturing?,"bubbling e capturing é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores de comparação. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar import e export?,"import e export é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para hoisting?,"hoisting é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo IndexedDB. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para JSON?,"JSON é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo sessionStorage. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar XMLHttpRequest?,"XMLHttpRequest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo IndexedDB. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com this em JavaScript?,"this em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipos de dados. Seu uso adequado melhora a performance e a legibilidade do código."
Como localStorage se compara a tecnologias similares?,"localStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo estruturas de controle. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para template literals?,"template literals é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para spread operator?,"spread operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo IndexedDB. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com AJAX?,"AJAX é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Deno. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com AJAX?,"AJAX é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo arrow functions. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no bubbling e capturing nas versões mais recentes do JavaScript?,"bubbling e capturing é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre this em JavaScript e AJAX?,"this em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo AJAX. Seu uso adequado melhora a performance e a legibilidade do código."
O que é event listeners?,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipos de dados. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com Automação de testes?,"Automação de testes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo módulos ES6. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre async/await e funções anônimas?,"async/await é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções anônimas. Seu uso adequado melhora a performance e a legibilidade do código."
Como import e export se compara a tecnologias similares?,"import e export é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipagem dinâmica. Seu uso adequado melhora a performance e a legibilidade do código."
Por que AJAX é importante?,"AJAX é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções anônimas. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para React.js?,"React.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Deno. Seu uso adequado melhora a performance e a legibilidade do código."
Como closures se compara a tecnologias similares?,"closures é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo callbacks. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com IndexedDB?,"IndexedDB é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo React.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar manipulação de DOM no JavaScript?,"manipulação de DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Bun.js. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de Datas e horas.,"Datas e horas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Bun.js. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre ESLint e Express.js?,"ESLint é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Express.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de Shadow DOM?,"Shadow DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Mocha e Chai. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de fetch API?,"fetch API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo rest operator. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com NPM?,"NPM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Node.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona callbacks?,"callbacks é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo callbacks. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre arrow functions e ESLint?,"arrow functions é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo ESLint. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de AJAX?,"AJAX é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo React.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com API?,"API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo fetch API. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre Automação de testes e IndexedDB?,"Automação de testes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo IndexedDB. Seu uso adequado melhora a performance e a legibilidade do código."
Como sessionStorage se relaciona com GraphQL?,"sessionStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo GraphQL. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de debounce e throttle?,"debounce e throttle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo estruturas de controle. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar manipulação de DOM?,"manipulação de DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo estruturas de controle. Seu uso adequado melhora a performance e a legibilidade do código."
Como Deno se compara a tecnologias similares?,"Deno é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Explique módulos ES6 de forma simples.,"módulos ES6 é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com XMLHttpRequest?,"XMLHttpRequest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo localStorage. Seu uso adequado melhora a performance e a legibilidade do código."
Explique SetTimeout e SetInterval de forma simples.,"SetTimeout e SetInterval é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar Memoization?,"Memoization é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Promises. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar WebPack?,"WebPack é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Objeto Date. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar template literals?,"template literals é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre fetch API e API?,"fetch API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo API. Seu uso adequado melhora a performance e a legibilidade do código."
O que é TypeScript?,"TypeScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Map, Filter e Reduce. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de tipagem dinâmica?,"tipagem dinâmica é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Datas e horas. Seu uso adequado melhora a performance e a legibilidade do código."
O que é callbacks?,"callbacks é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo XMLHttpRequest. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar destructuring?,"destructuring é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo AJAX. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no XMLHttpRequest nas versões mais recentes do JavaScript?,"XMLHttpRequest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo let vs var. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de Bun.js?,"Bun.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo bind, call e apply. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar Datas e horas?,"Datas e horas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Bun.js. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no hoisting nas versões mais recentes do JavaScript?,"hoisting é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo fetch API. Seu uso adequado melhora a performance e a legibilidade do código."
O que é async/await?,"async/await é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Mocha e Chai. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para this em JavaScript?,"this em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Angular. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de manipulação de DOM.,"manipulação de DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores lógicos. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre funções e JSON?,"funções é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JSON. Seu uso adequado melhora a performance e a legibilidade do código."
Por que hoisting é importante?,"hoisting é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
Explique tipagem dinâmica de forma simples.,"tipagem dinâmica é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo callbacks. Seu uso adequado melhora a performance e a legibilidade do código."
Como API se relaciona com this em JavaScript?,"API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo this em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no event listeners nas versões mais recentes do JavaScript?,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Express.js. Seu uso adequado melhora a performance e a legibilidade do código."
Por que WebAssembly é importante?,"WebAssembly é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo template literals. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de tipagem dinâmica?,"tipagem dinâmica é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo NPM. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com closures?,"closures é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Jest. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Angular?,"Angular é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo GraphQL. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de WebAssembly.,"WebAssembly é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para constantes?,"constantes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo XMLHttpRequest. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Shadow DOM?,"Shadow DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo this em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para WebPack?,"WebPack é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Objeto Date. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no Automação de testes nas versões mais recentes do JavaScript?,"Automação de testes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo loops. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com GraphQL?,"GraphQL é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo fetch API. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar Web Components no JavaScript?,"Web Components é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar Memoization no JavaScript?,"Memoization é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre eventos e Angular?,"eventos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Angular. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com let vs var?,"let vs var é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para IndexedDB?,"IndexedDB é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Service Workers. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona constantes?,"constantes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Deno. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com bubbling e capturing?,"bubbling e capturing é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores aritméticos. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com callbacks?,"callbacks é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores aritméticos. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre Objeto Date e Angular?,"Objeto Date é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Angular. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para Bun.js?,"Bun.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Angular. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para Service Workers?,"Service Workers é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Web Components. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar programação assíncrona?,"programação assíncrona é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona Automação de testes?,"Automação de testes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com Herança prototípica?,"Herança prototípica é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Shadow DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar async/await?,"async/await é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Bun.js. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar arrow functions?,"arrow functions é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo estruturas de controle. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de callbacks?,"callbacks é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores lógicos. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar async/await no JavaScript?,"async/await é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Como callbacks se relaciona com IndexedDB?,"callbacks é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo IndexedDB. Seu uso adequado melhora a performance e a legibilidade do código."
O que é funções anônimas?,"funções anônimas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebPack. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de TypeScript?,"TypeScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo template literals. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona operadores lógicos?,"operadores lógicos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo XMLHttpRequest. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com localStorage?,"localStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo this em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como Regex em JavaScript se compara a tecnologias similares?,"Regex em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo SetTimeout e SetInterval. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para operadores aritméticos?,"operadores aritméticos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com API?,"API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo variáveis. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com debounce e throttle?,"debounce e throttle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Cypress. Seu uso adequado melhora a performance e a legibilidade do código."
O que é localStorage?,"localStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo import e export. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar Regex em JavaScript no JavaScript?,"Regex em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo sessionStorage. Seu uso adequado melhora a performance e a legibilidade do código."
"Explique Map, Filter e Reduce de forma simples.","Map, Filter e Reduce é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Objeto Date. Seu uso adequado melhora a performance e a legibilidade do código."
Por que operadores lógicos é importante?,"operadores lógicos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre AJAX e GraphQL?,"AJAX é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo GraphQL. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar WebAssembly no JavaScript?,"WebAssembly é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Cypress. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no módulos ES6 nas versões mais recentes do JavaScript?,"módulos ES6 é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona módulos ES6?,"módulos ES6 é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções. Seu uso adequado melhora a performance e a legibilidade do código."
Por que WebSockets é importante?,"WebSockets é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Cypress. Seu uso adequado melhora a performance e a legibilidade do código."
Como rest operator se compara a tecnologias similares?,"rest operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JSON. Seu uso adequado melhora a performance e a legibilidade do código."
"Como Map, Filter e Reduce se compara a tecnologias similares?","Map, Filter e Reduce é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores lógicos. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona Angular?,"Angular é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções. Seu uso adequado melhora a performance e a legibilidade do código."
Por que fetch API é importante?,"fetch API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo cookies. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre Herança prototípica e Regex em JavaScript?,"Herança prototípica é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Regex em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de GraphQL.,"GraphQL é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Mocha e Chai. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar Regex em JavaScript?,"Regex em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo API. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para fetch API?,"fetch API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo hoisting. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar Angular?,"Angular é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Objeto Date. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para Web Components?,"Web Components é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Node.js. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de Math em JavaScript?,"Math em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona JavaScript?,"JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Herança prototípica. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de import e export?,"import e export é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona IndexedDB?,"IndexedDB é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo rest operator. Seu uso adequado melhora a performance e a legibilidade do código."
Por que ESLint é importante?,"ESLint é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo loops. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de Currying.,"Currying é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo variáveis. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar operadores aritméticos?,"operadores aritméticos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo IndexedDB. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar callbacks?,"callbacks é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Datas e horas. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Node.js?,"Node.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Jest. Seu uso adequado melhora a performance e a legibilidade do código."
Como callbacks se relaciona com tipos de dados?,"callbacks é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipos de dados. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de Datas e horas?,"Datas e horas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Angular. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com Deno?,"Deno é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Herança prototípica. Seu uso adequado melhora a performance e a legibilidade do código."
Explique Express.js de forma simples.,"Express.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo SetTimeout e SetInterval. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona GraphQL?,"GraphQL é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo debounce e throttle. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para bubbling e capturing?,"bubbling e capturing é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo rest operator. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar XMLHttpRequest?,"XMLHttpRequest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Explique debounce e throttle de forma simples.,"debounce e throttle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo bind, call e apply. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no Service Workers nas versões mais recentes do JavaScript?,"Service Workers é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo variáveis. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona Jest?,"Jest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo cookies. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona Bun.js?,"Bun.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções anônimas. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar React.js?,"React.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre arrow functions e async/await?,"arrow functions é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de cookies?,"cookies é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Node.js. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar event listeners?,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Mocha e Chai. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com import e export?,"import e export é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo variáveis. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de import e export?,"import e export é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Testes unitários em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre API e closures?,"API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo closures. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre event listeners e React.js?,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo React.js. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar Objeto Date?,"Objeto Date é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com variáveis?,"variáveis é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Herança prototípica. Seu uso adequado melhora a performance e a legibilidade do código."
O que é Regex em JavaScript?,"Regex em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipagem dinâmica. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com TypeScript?,"TypeScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Promises. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no Node.js nas versões mais recentes do JavaScript?,"Node.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo sessionStorage. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar funções?,"funções é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo localStorage. Seu uso adequado melhora a performance e a legibilidade do código."
Explique Memoization de forma simples.,"Memoization é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo SetTimeout e SetInterval. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar localStorage no JavaScript?,"localStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Mocha e Chai. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar funções no JavaScript?,"funções é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Deno. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no SetTimeout e SetInterval nas versões mais recentes do JavaScript?,"SetTimeout e SetInterval é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Web Components. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de arrow functions?,"arrow functions é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Datas e horas. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no WebAssembly nas versões mais recentes do JavaScript?,"WebAssembly é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo constantes. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona event listeners?,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipos de dados. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com Automação de testes?,"Automação de testes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo import e export. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para operadores aritméticos?,"operadores aritméticos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de GraphQL?,"GraphQL é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo API. Seu uso adequado melhora a performance e a legibilidade do código."
Explique IndexedDB de forma simples.,"IndexedDB é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo import e export. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com operadores de comparação?,"operadores de comparação é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo hoisting. Seu uso adequado melhora a performance e a legibilidade do código."
Como operadores aritméticos se compara a tecnologias similares?,"operadores aritméticos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo arrow functions. Seu uso adequado melhora a performance e a legibilidade do código."
Como template literals se compara a tecnologias similares?,"template literals é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo AJAX. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre sessionStorage e Web Components?,"sessionStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Web Components. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com spread operator?,"spread operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Angular. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar Prototypes?,"Prototypes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo cookies. Seu uso adequado melhora a performance e a legibilidade do código."
Como Memoization se relaciona com Mocha e Chai?,"Memoization é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Mocha e Chai. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar spread operator?,"spread operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre AJAX e Deno?,"AJAX é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Deno. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar event listeners?,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo spread operator. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre manipulação de DOM e Vue.js?,"manipulação de DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Vue.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como Datas e horas se compara a tecnologias similares?,"Datas e horas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo debounce e throttle. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de Promises.,"Promises é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Node.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com Jest?,"Jest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo loops. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de TypeScript?,"TypeScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com template literals?,"template literals é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de eventos.,"eventos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo ESLint. Seu uso adequado melhora a performance e a legibilidade do código."
Como NPM se compara a tecnologias similares?,"NPM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo API. Seu uso adequado melhora a performance e a legibilidade do código."
O que é GraphQL?,"GraphQL é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo cookies. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no async/await nas versões mais recentes do JavaScript?,"async/await é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo let vs var. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar hoisting?,"hoisting é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo IndexedDB. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona sessionStorage?,"sessionStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo módulos ES6. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com Promises?,"Promises é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Objeto Date. Seu uso adequado melhora a performance e a legibilidade do código."
"O que mudou no bind, call e apply nas versões mais recentes do JavaScript?","bind, call e apply é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Cypress. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre funções anônimas e Vue.js?,"funções anônimas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Vue.js. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre Math em JavaScript e arrow functions?,"Math em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo arrow functions. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no Regex em JavaScript nas versões mais recentes do JavaScript?,"Regex em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Herança prototípica. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para Testes unitários em JavaScript?,"Testes unitários em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo callbacks. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar ESLint?,"ESLint é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo this em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de hoisting.,"hoisting é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebSockets. Seu uso adequado melhora a performance e a legibilidade do código."
Como this em JavaScript se compara a tecnologias similares?,"this em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Currying. Seu uso adequado melhora a performance e a legibilidade do código."
Como Angular se compara a tecnologias similares?,"Angular é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Currying. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para módulos ES6?,"módulos ES6 é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona hoisting?,"hoisting é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo bubbling e capturing. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para Jest?,"Jest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo hoisting. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para spread operator?,"spread operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Automação de testes. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para Cypress?,"Cypress é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Shadow DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Como spread operator se relaciona com Node.js?,"spread operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Node.js. Seu uso adequado melhora a performance e a legibilidade do código."
Explique Datas e horas de forma simples.,"Datas e horas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Regex em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de loops?,"loops é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Testes unitários em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona AJAX?,"AJAX é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Currying. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de Angular?,"Angular é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo arrow functions. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar Node.js?,"Node.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Shadow DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Web Components?,"Web Components é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo event listeners. Seu uso adequado melhora a performance e a legibilidade do código."
Como arrow functions se relaciona com programação assíncrona?,"arrow functions é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
O que é Prototypes?,"Prototypes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipagem dinâmica. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre tipos de dados e destructuring?,"tipos de dados é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo destructuring. Seu uso adequado melhora a performance e a legibilidade do código."
Como React.js se relaciona com funções?,"React.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com fetch API?,"fetch API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo bubbling e capturing. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de Deno.,"Deno é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo fetch API. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de Mocha e Chai.,"Mocha e Chai é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo loops. Seu uso adequado melhora a performance e a legibilidade do código."
Explique loops de forma simples.,"loops é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo debounce e throttle. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de Deno?,"Deno é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Express.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de sessionStorage?,"sessionStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para Bun.js?,"Bun.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para Automação de testes?,"Automação de testes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Currying. Seu uso adequado melhora a performance e a legibilidade do código."
Explique callbacks de forma simples.,"callbacks é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo let vs var. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar loops?,"loops é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Testes unitários em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar Jest?,"Jest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo GraphQL. Seu uso adequado melhora a performance e a legibilidade do código."
Por que debounce e throttle é importante?,"debounce e throttle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Map, Filter e Reduce. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar Service Workers?,"Service Workers é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo constantes. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de Express.js?,"Express.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo rest operator. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no Cypress nas versões mais recentes do JavaScript?,"Cypress é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo loops. Seu uso adequado melhora a performance e a legibilidade do código."
O que é let vs var?,"let vs var é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo variáveis. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre React.js e JavaScript?,"React.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona debounce e throttle?,"debounce e throttle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo import e export. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com operadores de comparação?,"operadores de comparação é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Cypress. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar IndexedDB?,"IndexedDB é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Regex em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar TypeScript?,"TypeScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo import e export. Seu uso adequado melhora a performance e a legibilidade do código."
Como variáveis se relaciona com eventos?,"variáveis é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar Currying?,"Currying é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo SetTimeout e SetInterval. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar sessionStorage?,"sessionStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo ESLint. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de Shadow DOM.,"Shadow DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Regex em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como WebSockets se compara a tecnologias similares?,"WebSockets é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Datas e horas. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de operadores lógicos?,"operadores lógicos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Express.js. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de sessionStorage.,"sessionStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Testes unitários em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de IndexedDB?,"IndexedDB é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com Regex em JavaScript?,"Regex em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores lógicos. Seu uso adequado melhora a performance e a legibilidade do código."
"Quando usar bind, call e apply?","bind, call e apply é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
"Como evitar erros ao trabalhar com bind, call e apply?","bind, call e apply é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
Como tipagem dinâmica se relaciona com Deno?,"tipagem dinâmica é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Deno. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para Regex em JavaScript?,"Regex em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Prototypes. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Automação de testes é importante?,"Automação de testes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de Objeto Date?,"Objeto Date é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo closures. Seu uso adequado melhora a performance e a legibilidade do código."
Como tipagem dinâmica se relaciona com Objeto Date?,"tipagem dinâmica é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Objeto Date. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de Express.js.,"Express.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para WebAssembly?,"WebAssembly é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebSockets. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar Math em JavaScript?,"Math em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo sessionStorage. Seu uso adequado melhora a performance e a legibilidade do código."
Explique programação assíncrona de forma simples.,"programação assíncrona é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de constantes.,"constantes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores de comparação. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar Promises?,"Promises é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com rest operator?,"rest operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo SetTimeout e SetInterval. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Prototypes é importante?,"Prototypes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipos de dados. Seu uso adequado melhora a performance e a legibilidade do código."
Por que funções é importante?,"funções é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com Prototypes?,"Prototypes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Currying. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com Cypress?,"Cypress é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar loops?,"loops é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de IndexedDB.,"IndexedDB é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar destructuring?,"destructuring é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de import e export.,"import e export é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo bubbling e capturing. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar let vs var?,"let vs var é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo constantes. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar event listeners no JavaScript?,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo XMLHttpRequest. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar fetch API no JavaScript?,"fetch API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Regex em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como Memoization se relaciona com Shadow DOM?,"Memoization é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Shadow DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Como Cypress se compara a tecnologias similares?,"Cypress é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Explique operadores aritméticos de forma simples.,"operadores aritméticos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Testes unitários em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona Deno?,"Deno é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Herança prototípica. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para callbacks?,"callbacks é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Prototypes. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no NPM nas versões mais recentes do JavaScript?,"NPM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Service Workers. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar this em JavaScript no JavaScript?,"this em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Deno. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre loops e Automação de testes?,"loops é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Automação de testes. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar loops?,"loops é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo event listeners. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com SetTimeout e SetInterval?,"SetTimeout e SetInterval é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo módulos ES6. Seu uso adequado melhora a performance e a legibilidade do código."
Por que template literals é importante?,"template literals é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo debounce e throttle. Seu uso adequado melhora a performance e a legibilidade do código."
Como Bun.js se compara a tecnologias similares?,"Bun.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo sessionStorage. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para async/await?,"async/await é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Express.js. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar Web Components?,"Web Components é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Map, Filter e Reduce. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar import e export?,"import e export é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com callbacks?,"callbacks é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar programação assíncrona?,"programação assíncrona é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de funções.,"funções é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Jest. Seu uso adequado melhora a performance e a legibilidade do código."
Como Automação de testes se compara a tecnologias similares?,"Automação de testes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo AJAX. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar destructuring no JavaScript?,"destructuring é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Regex em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para funções?,"funções é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo cookies. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com Memoization?,"Memoization é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Datas e horas. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de AJAX.,"AJAX é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo React.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como closures se relaciona com debounce e throttle?,"closures é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo debounce e throttle. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Vue.js?,"Vue.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo API. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com programação assíncrona?,"programação assíncrona é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo localStorage. Seu uso adequado melhora a performance e a legibilidade do código."
Como AJAX se relaciona com Shadow DOM?,"AJAX é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Shadow DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de NPM?,"NPM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores de comparação. Seu uso adequado melhora a performance e a legibilidade do código."
Como GraphQL se compara a tecnologias similares?,"GraphQL é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Angular. Seu uso adequado melhora a performance e a legibilidade do código."
Explique Herança prototípica de forma simples.,"Herança prototípica é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo API. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar SetTimeout e SetInterval no JavaScript?,"SetTimeout e SetInterval é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo estruturas de controle. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com Angular?,"Angular é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Mocha e Chai é importante?,"Mocha e Chai é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com Math em JavaScript?,"Math em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Promises. Seu uso adequado melhora a performance e a legibilidade do código."
O que é Objeto Date?,"Objeto Date é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo ESLint. Seu uso adequado melhora a performance e a legibilidade do código."
Como manipulação de DOM se compara a tecnologias similares?,"manipulação de DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo XMLHttpRequest. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com Bun.js?,"Bun.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Datas e horas. Seu uso adequado melhora a performance e a legibilidade do código."
O que é Datas e horas?,"Datas e horas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebAssembly. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar eventos?,"eventos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre JSON e NPM?,"JSON é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo NPM. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar Automação de testes?,"Automação de testes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo IndexedDB. Seu uso adequado melhora a performance e a legibilidade do código."
Como API se compara a tecnologias similares?,"API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo SetTimeout e SetInterval. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Mocha e Chai?,"Mocha e Chai é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores lógicos. Seu uso adequado melhora a performance e a legibilidade do código."
Como funções anônimas se relaciona com React.js?,"funções anônimas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo React.js. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para operadores de comparação?,"operadores de comparação é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Herança prototípica. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com JSON?,"JSON é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo constantes. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no operadores de comparação nas versões mais recentes do JavaScript?,"operadores de comparação é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo ESLint. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar import e export?,"import e export é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para debounce e throttle?,"debounce e throttle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo SetTimeout e SetInterval. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona Objeto Date?,"Objeto Date é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo constantes. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar Bun.js no JavaScript?,"Bun.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo ESLint. Seu uso adequado melhora a performance e a legibilidade do código."
Como Jest se relaciona com let vs var?,"Jest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo let vs var. Seu uso adequado melhora a performance e a legibilidade do código."
Como Jest se relaciona com Herança prototípica?,"Jest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Herança prototípica. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Service Workers é importante?,"Service Workers é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Herança prototípica. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre Web Components e Testes unitários em JavaScript?,"Web Components é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Testes unitários em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar Promises?,"Promises é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Como operadores lógicos se relaciona com let vs var?,"operadores lógicos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo let vs var. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de Prototypes?,"Prototypes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipos de dados. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de módulos ES6?,"módulos ES6 é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Shadow DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar tipos de dados?,"tipos de dados é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores de comparação. Seu uso adequado melhora a performance e a legibilidade do código."
Como tipagem dinâmica se compara a tecnologias similares?,"tipagem dinâmica é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Prototypes. Seu uso adequado melhora a performance e a legibilidade do código."
O que é Mocha e Chai?,"Mocha e Chai é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Automação de testes. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona operadores aritméticos?,"operadores aritméticos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Express.js. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com operadores aritméticos?,"operadores aritméticos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Prototypes. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de event listeners.,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo bind, call e apply. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de localStorage?,"localStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo constantes. Seu uso adequado melhora a performance e a legibilidade do código."
Por que manipulação de DOM é importante?,"manipulação de DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar AJAX?,"AJAX é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Datas e horas. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de Node.js?,"Node.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo módulos ES6. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona let vs var?,"let vs var é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo arrow functions. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com Deno?,"Deno é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo cookies. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar Math em JavaScript no JavaScript?,"Math em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipos de dados. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para callbacks?,"callbacks é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como Angular se relaciona com JavaScript?,"Angular é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de localStorage.,"localStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
O que é hoisting?,"hoisting é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Mocha e Chai. Seu uso adequado melhora a performance e a legibilidade do código."
Como WebAssembly se relaciona com GraphQL?,"WebAssembly é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo GraphQL. Seu uso adequado melhora a performance e a legibilidade do código."
"Como evitar erros ao trabalhar com Map, Filter e Reduce?","Map, Filter e Reduce é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipos de dados. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar Automação de testes no JavaScript?,"Automação de testes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
"Qual a diferença entre bind, call e apply e this em JavaScript?","bind, call e apply é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo this em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar Vue.js no JavaScript?,"Vue.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebPack. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona eventos?,"eventos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo arrow functions. Seu uso adequado melhora a performance e a legibilidade do código."
"Quais os principais problemas ao usar Map, Filter e Reduce?","Map, Filter e Reduce é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo template literals. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de API.,"API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com estruturas de controle?,"estruturas de controle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções anônimas. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar GraphQL?,"GraphQL é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo callbacks. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para rest operator?,"rest operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo this em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar funções anônimas?,"funções anônimas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo debounce e throttle. Seu uso adequado melhora a performance e a legibilidade do código."
Como WebAssembly se relaciona com WebSockets?,"WebAssembly é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebSockets. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre TypeScript e Node.js?,"TypeScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Node.js. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para localStorage?,"localStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como loops se relaciona com AJAX?,"loops é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo AJAX. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar fetch API?,"fetch API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Vue.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona WebAssembly?,"WebAssembly é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo spread operator. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para funções anônimas?,"funções anônimas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo GraphQL. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar debounce e throttle?,"debounce e throttle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Angular. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar funções anônimas?,"funções anônimas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebAssembly. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar operadores lógicos?,"operadores lógicos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Promises. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com Vue.js?,"Vue.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Objeto Date. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para AJAX?,"AJAX é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Cypress. Seu uso adequado melhora a performance e a legibilidade do código."
Como Currying se relaciona com closures?,"Currying é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo closures. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para loops?,"loops é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo fetch API. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona Node.js?,"Node.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Vue.js é importante?,"Vue.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Currying. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para Prototypes?,"Prototypes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo closures. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar GraphQL?,"GraphQL é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo debounce e throttle. Seu uso adequado melhora a performance e a legibilidade do código."
Como let vs var se compara a tecnologias similares?,"let vs var é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar tipagem dinâmica?,"tipagem dinâmica é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona Shadow DOM?,"Shadow DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo cookies. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar funções anônimas no JavaScript?,"funções anônimas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com JSON?,"JSON é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores aritméticos. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com constantes?,"constantes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar WebAssembly?,"WebAssembly é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
Por que import e export é importante?,"import e export é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipagem dinâmica. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de cookies.,"cookies é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções anônimas. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona spread operator?,"spread operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo hoisting. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para Promises?,"Promises é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores aritméticos. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no GraphQL nas versões mais recentes do JavaScript?,"GraphQL é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JSON. Seu uso adequado melhora a performance e a legibilidade do código."
Explique funções anônimas de forma simples.,"funções anônimas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar callbacks?,"callbacks é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Express.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Memoization?,"Memoization é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções anônimas. Seu uso adequado melhora a performance e a legibilidade do código."
Como destructuring se compara a tecnologias similares?,"destructuring é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo loops. Seu uso adequado melhora a performance e a legibilidade do código."
O que é Memoization?,"Memoization é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com WebSockets?,"WebSockets é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Express.js. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar JavaScript?,"JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo estruturas de controle. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de fetch API?,"fetch API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo cookies. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona XMLHttpRequest?,"XMLHttpRequest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo event listeners. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com Jest?,"Jest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Datas e horas. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de Angular.,"Angular é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo template literals. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar template literals?,"template literals é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Bun.js. Seu uso adequado melhora a performance e a legibilidade do código."
"Quais são as alternativas para Map, Filter e Reduce?","Map, Filter e Reduce é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Jest. Seu uso adequado melhora a performance e a legibilidade do código."
O que é WebAssembly?,"WebAssembly é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
Como async/await se relaciona com Currying?,"async/await é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Currying. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de programação assíncrona.,"programação assíncrona é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebPack. Seu uso adequado melhora a performance e a legibilidade do código."
O que é Vue.js?,"Vue.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo constantes. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar estruturas de controle?,"estruturas de controle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo bubbling e capturing. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre tipos de dados e async/await?,"tipos de dados é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para Mocha e Chai?,"Mocha e Chai é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Jest. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para NPM?,"NPM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo bind, call e apply. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar Express.js?,"Express.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo IndexedDB. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no Herança prototípica nas versões mais recentes do JavaScript?,"Herança prototípica é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Deno. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no Currying nas versões mais recentes do JavaScript?,"Currying é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo ESLint. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona Mocha e Chai?,"Mocha e Chai é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no React.js nas versões mais recentes do JavaScript?,"React.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo template literals. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com bubbling e capturing?,"bubbling e capturing é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Shadow DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar JSON?,"JSON é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Promises. Seu uso adequado melhora a performance e a legibilidade do código."
"Como otimizar o uso de bind, call e apply?","bind, call e apply é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo template literals. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre operadores aritméticos e Cypress?,"operadores aritméticos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Cypress. Seu uso adequado melhora a performance e a legibilidade do código."
"Como Regex em JavaScript se relaciona com Map, Filter e Reduce?","Regex em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Map, Filter e Reduce. Seu uso adequado melhora a performance e a legibilidade do código."
Como Angular se relaciona com callbacks?,"Angular é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo callbacks. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar NPM no JavaScript?,"NPM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo GraphQL. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar Regex em JavaScript?,"Regex em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo cookies. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar funções?,"funções é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Web Components. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar Angular?,"Angular é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebPack. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre ESLint e GraphQL?,"ESLint é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo GraphQL. Seu uso adequado melhora a performance e a legibilidade do código."
"Como depurar problemas com Map, Filter e Reduce?","Map, Filter e Reduce é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar Vue.js?,"Vue.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo cookies. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com JavaScript?,"JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo bubbling e capturing. Seu uso adequado melhora a performance e a legibilidade do código."
Como operadores lógicos se compara a tecnologias similares?,"operadores lógicos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
Como IndexedDB se relaciona com let vs var?,"IndexedDB é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo let vs var. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com AJAX?,"AJAX é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo AJAX. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com WebPack?,"WebPack é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo constantes. Seu uso adequado melhora a performance e a legibilidade do código."
Como Objeto Date se compara a tecnologias similares?,"Objeto Date é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo template literals. Seu uso adequado melhora a performance e a legibilidade do código."
Por que API é importante?,"API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Currying. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para Math em JavaScript?,"Math em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Node.js. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre Prototypes e Automação de testes?,"Prototypes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Automação de testes. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com template literals?,"template literals é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com ESLint?,"ESLint é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo constantes. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar Cypress?,"Cypress é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de event listeners?,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo IndexedDB. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de React.js.,"React.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Service Workers. Seu uso adequado melhora a performance e a legibilidade do código."
"Qual a diferença entre Map, Filter e Reduce e Map, Filter e Reduce?","Map, Filter e Reduce é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Map, Filter e Reduce. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar tipagem dinâmica?,"tipagem dinâmica é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo IndexedDB. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com funções?,"funções é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Express.js. Seu uso adequado melhora a performance e a legibilidade do código."
Explique Jest de forma simples.,"Jest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo constantes. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar Mocha e Chai?,"Mocha e Chai é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como sessionStorage se relaciona com TypeScript?,"sessionStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar JavaScript?,"JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipagem dinâmica. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar tipagem dinâmica?,"tipagem dinâmica é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo callbacks. Seu uso adequado melhora a performance e a legibilidade do código."
Por que destructuring é importante?,"destructuring é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Service Workers. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com Web Components?,"Web Components é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo closures. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de TypeScript.,"TypeScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
"Que ferramentas ajudam a trabalhar com Map, Filter e Reduce?","Map, Filter e Reduce é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo estruturas de controle. Seu uso adequado melhora a performance e a legibilidade do código."
Explique operadores lógicos de forma simples.,"operadores lógicos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Como Automação de testes se relaciona com manipulação de DOM?,"Automação de testes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de template literals?,"template literals é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo sessionStorage. Seu uso adequado melhora a performance e a legibilidade do código."
Como async/await se compara a tecnologias similares?,"async/await é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipos de dados. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de Regex em JavaScript?,"Regex em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Map, Filter e Reduce. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de debounce e throttle.,"debounce e throttle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Prototypes. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de event listeners?,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com localStorage?,"localStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo variáveis. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de Math em JavaScript.,"Math em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Automação de testes. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona Cypress?,"Cypress é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo destructuring. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Node.js é importante?,"Node.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Currying. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre operadores lógicos e IndexedDB?,"operadores lógicos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo IndexedDB. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com spread operator?,"spread operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Map, Filter e Reduce. Seu uso adequado melhora a performance e a legibilidade do código."
Como constantes se compara a tecnologias similares?,"constantes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo event listeners. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Testes unitários em JavaScript é importante?,"Testes unitários em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebPack. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com operadores aritméticos?,"operadores aritméticos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo loops. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar eventos?,"eventos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Node.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como eventos se compara a tecnologias similares?,"eventos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo módulos ES6. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para Automação de testes?,"Automação de testes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Automação de testes. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Deno é importante?,"Deno é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo sessionStorage. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com funções anônimas?,"funções anônimas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipagem dinâmica. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no rest operator nas versões mais recentes do JavaScript?,"rest operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo sessionStorage. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de closures?,"closures é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Testes unitários em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como Prototypes se compara a tecnologias similares?,"Prototypes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo módulos ES6. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com GraphQL?,"GraphQL é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Regex em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de WebAssembly?,"WebAssembly é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar Math em JavaScript?,"Math em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo destructuring. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre Node.js e Jest?,"Node.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Jest. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar Objeto Date?,"Objeto Date é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Web Components. Seu uso adequado melhora a performance e a legibilidade do código."
Por que this em JavaScript é importante?,"this em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipos de dados. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre React.js e ESLint?,"React.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo ESLint. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de operadores lógicos.,"operadores lógicos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores lógicos. Seu uso adequado melhora a performance e a legibilidade do código."
O que é loops?,"loops é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo cookies. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com JavaScript?,"JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo XMLHttpRequest. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para import e export?,"import e export é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo XMLHttpRequest. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar TypeScript no JavaScript?,"TypeScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de Testes unitários em JavaScript?,"Testes unitários em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Jest. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no Bun.js nas versões mais recentes do JavaScript?,"Bun.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo callbacks. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Math em JavaScript é importante?,"Math em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo hoisting. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com WebAssembly?,"WebAssembly é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo closures. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com import e export?,"import e export é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo ESLint. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para TypeScript?,"TypeScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Bun.js. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com constantes?,"constantes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Prototypes. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar callbacks no JavaScript?,"callbacks é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo XMLHttpRequest. Seu uso adequado melhora a performance e a legibilidade do código."
Explique async/await de forma simples.,"async/await é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo variáveis. Seu uso adequado melhora a performance e a legibilidade do código."
Como API se relaciona com bubbling e capturing?,"API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo bubbling e capturing. Seu uso adequado melhora a performance e a legibilidade do código."
Como módulos ES6 se relaciona com eventos?,"módulos ES6 é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para WebPack?,"WebPack é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores de comparação. Seu uso adequado melhora a performance e a legibilidade do código."
Como JSON se compara a tecnologias similares?,"JSON é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo estruturas de controle. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Angular é importante?,"Angular é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo módulos ES6. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre Service Workers e fetch API?,"Service Workers é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo fetch API. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar let vs var no JavaScript?,"let vs var é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo this em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como funções se compara a tecnologias similares?,"funções é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Shadow DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Explique funções de forma simples.,"funções é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de Service Workers?,"Service Workers é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
Como TypeScript se compara a tecnologias similares?,"TypeScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo hoisting. Seu uso adequado melhora a performance e a legibilidade do código."
Como eventos se relaciona com Service Workers?,"eventos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Service Workers. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre manipulação de DOM e Bun.js?,"manipulação de DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Bun.js. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no Express.js nas versões mais recentes do JavaScript?,"Express.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo constantes. Seu uso adequado melhora a performance e a legibilidade do código."
O que é template literals?,"template literals é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo GraphQL. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Jest?,"Jest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo destructuring. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar Shadow DOM no JavaScript?,"Shadow DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Express.js. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar hoisting?,"hoisting é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo spread operator. Seu uso adequado melhora a performance e a legibilidade do código."
Por que React.js é importante?,"React.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo spread operator. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de funções anônimas.,"funções anônimas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebSockets. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com destructuring?,"destructuring é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo AJAX. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com funções anônimas?,"funções anônimas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
O que é Math em JavaScript?,"Math em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no sessionStorage nas versões mais recentes do JavaScript?,"sessionStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo React.js. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre Objeto Date e IndexedDB?,"Objeto Date é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo IndexedDB. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar operadores aritméticos?,"operadores aritméticos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo destructuring. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Express.js?,"Express.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Map, Filter e Reduce. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de let vs var.,"let vs var é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Currying?,"Currying é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebPack. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar Objeto Date?,"Objeto Date é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo React.js. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar constantes?,"constantes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo React.js. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de callbacks.,"callbacks é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar API?,"API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo localStorage. Seu uso adequado melhora a performance e a legibilidade do código."
"Qual é a sintaxe de bind, call e apply?","bind, call e apply é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo constantes. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para Jest?,"Jest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JSON. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Objeto Date?,"Objeto Date é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de Currying?,"Currying é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de Mocha e Chai?,"Mocha e Chai é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Shadow DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar sessionStorage no JavaScript?,"sessionStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona bubbling e capturing?,"bubbling e capturing é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo destructuring. Seu uso adequado melhora a performance e a legibilidade do código."
O que é Currying?,"Currying é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo localStorage. Seu uso adequado melhora a performance e a legibilidade do código."
"Como Angular se relaciona com bind, call e apply?","Angular é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo bind, call e apply. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar Node.js?,"Node.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Objeto Date. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no Objeto Date nas versões mais recentes do JavaScript?,"Objeto Date é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebPack. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com NPM?,"NPM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo XMLHttpRequest. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Promises é importante?,"Promises é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Vue.js. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar WebSockets?,"WebSockets é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo debounce e throttle. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de operadores aritméticos?,"operadores aritméticos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebSockets. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Service Workers?,"Service Workers é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Explique WebPack de forma simples.,"WebPack é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo template literals. Seu uso adequado melhora a performance e a legibilidade do código."
Por que let vs var é importante?,"let vs var é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Datas e horas. Seu uso adequado melhora a performance e a legibilidade do código."
Explique constantes de forma simples.,"constantes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores aritméticos. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para IndexedDB?,"IndexedDB é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Currying. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com Vue.js?,"Vue.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções anônimas. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Objeto Date é importante?,"Objeto Date é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Datas e horas. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com TypeScript?,"TypeScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo closures. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre event listeners e GraphQL?,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo GraphQL. Seu uso adequado melhora a performance e a legibilidade do código."
Como Mocha e Chai se compara a tecnologias similares?,"Mocha e Chai é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Bun.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com Shadow DOM?,"Shadow DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo loops. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de Memoization.,"Memoization é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo ESLint. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar this em JavaScript?,"this em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo closures. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de template literals.,"template literals é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Regex em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar template literals no JavaScript?,"template literals é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo estruturas de controle. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar IndexedDB no JavaScript?,"IndexedDB é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Objeto Date. Seu uso adequado melhora a performance e a legibilidade do código."
Como fetch API se relaciona com XMLHttpRequest?,"fetch API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo XMLHttpRequest. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de loops.,"loops é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores aritméticos. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar variáveis?,"variáveis é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Prototypes. Seu uso adequado melhora a performance e a legibilidade do código."
Como arrow functions se relaciona com operadores de comparação?,"arrow functions é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores de comparação. Seu uso adequado melhora a performance e a legibilidade do código."
Como debounce e throttle se compara a tecnologias similares?,"debounce e throttle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Objeto Date. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar cookies no JavaScript?,"cookies é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo debounce e throttle. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Regex em JavaScript é importante?,"Regex em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de React.js?,"React.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo React.js. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Web Components é importante?,"Web Components é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo AJAX. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona SetTimeout e SetInterval?,"SetTimeout e SetInterval é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Testes unitários em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com Service Workers?,"Service Workers é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebAssembly. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de Currying?,"Currying é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JSON. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de React.js?,"React.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebSockets. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de variáveis?,"variáveis é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo NPM. Seu uso adequado melhora a performance e a legibilidade do código."
Explique GraphQL de forma simples.,"GraphQL é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo variáveis. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar Testes unitários em JavaScript?,"Testes unitários em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo API. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre Web Components e JavaScript?,"Web Components é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com programação assíncrona?,"programação assíncrona é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo React.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de SetTimeout e SetInterval?,"SetTimeout e SetInterval é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo fetch API. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para destructuring?,"destructuring é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo IndexedDB. Seu uso adequado melhora a performance e a legibilidade do código."
Explique destructuring de forma simples.,"destructuring é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores aritméticos. Seu uso adequado melhora a performance e a legibilidade do código."
"Quais os principais problemas ao usar bind, call e apply?","bind, call e apply é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Express.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com manipulação de DOM?,"manipulação de DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Prototypes. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de funções anônimas?,"funções anônimas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Como sessionStorage se relaciona com tipos de dados?,"sessionStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipos de dados. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona programação assíncrona?,"programação assíncrona é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo ESLint. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar Prototypes?,"Prototypes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebAssembly. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para variáveis?,"variáveis é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo debounce e throttle. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de ESLint?,"ESLint é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo estruturas de controle. Seu uso adequado melhora a performance e a legibilidade do código."
Explique event listeners de forma simples.,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar Node.js no JavaScript?,"Node.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Testes unitários em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no localStorage nas versões mais recentes do JavaScript?,"localStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo callbacks. Seu uso adequado melhora a performance e a legibilidade do código."
Como Math em JavaScript se compara a tecnologias similares?,"Math em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo hoisting. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre React.js e operadores lógicos?,"React.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores lógicos. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona closures?,"closures é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Mocha e Chai. Seu uso adequado melhora a performance e a legibilidade do código."
Explique sessionStorage de forma simples.,"sessionStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre Jest e estruturas de controle?,"Jest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo estruturas de controle. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Deno?,"Deno é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar funções anônimas?,"funções anônimas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo let vs var. Seu uso adequado melhora a performance e a legibilidade do código."
Como ESLint se relaciona com programação assíncrona?,"ESLint é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar constantes?,"constantes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo manipulação de DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Bun.js?,"Bun.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no Vue.js nas versões mais recentes do JavaScript?,"Vue.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo WebSockets. Seu uso adequado melhora a performance e a legibilidade do código."
Como sessionStorage se relaciona com closures?,"sessionStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo closures. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com fetch API?,"fetch API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo módulos ES6. Seu uso adequado melhora a performance e a legibilidade do código."
Por que arrow functions é importante?,"arrow functions é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo this em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para import e export?,"import e export é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Shadow DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre async/await e Regex em JavaScript?,"async/await é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Regex em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar tipos de dados?,"tipos de dados é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Herança prototípica. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com Cypress?,"Cypress é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Deno. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar destructuring?,"destructuring é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de tipos de dados?,"tipos de dados é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona loops?,"loops é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções anônimas. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona template literals?,"template literals é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
Como Web Components se compara a tecnologias similares?,"Web Components é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo variáveis. Seu uso adequado melhora a performance e a legibilidade do código."
"Qual a diferença entre Map, Filter e Reduce e Service Workers?","Map, Filter e Reduce é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Service Workers. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para Datas e horas?,"Datas e horas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo event listeners. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre constantes e Web Components?,"constantes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Web Components. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de constantes?,"constantes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo SetTimeout e SetInterval. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre GraphQL e Memoization?,"GraphQL é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para GraphQL?,"GraphQL é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Regex em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar closures?,"closures é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Jest. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona cookies?,"cookies é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de async/await.,"async/await é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo API. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de módulos ES6.,"módulos ES6 é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Express.js. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar ESLint?,"ESLint é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para sessionStorage?,"sessionStorage é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Herança prototípica. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com eventos?,"eventos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Currying. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com Node.js?,"Node.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Prototypes. Seu uso adequado melhora a performance e a legibilidade do código."
Explique Bun.js de forma simples.,"Bun.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Angular. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para fetch API?,"fetch API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo hoisting. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de Objeto Date.,"Objeto Date é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo hoisting. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com Testes unitários em JavaScript?,"Testes unitários em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo NPM. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona tipos de dados?,"tipos de dados é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JSON. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de template literals?,"template literals é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo AJAX. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar Herança prototípica?,"Herança prototípica é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo loops. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para variáveis?,"variáveis é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo import e export. Seu uso adequado melhora a performance e a legibilidade do código."
Por que estruturas de controle é importante?,"estruturas de controle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo rest operator. Seu uso adequado melhora a performance e a legibilidade do código."
"Como Map, Filter e Reduce se relaciona com módulos ES6?","Map, Filter e Reduce é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo módulos ES6. Seu uso adequado melhora a performance e a legibilidade do código."
Como Datas e horas se relaciona com Automação de testes?,"Datas e horas é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Automação de testes. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com módulos ES6?,"módulos ES6 é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo template literals. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com IndexedDB?,"IndexedDB é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores aritméticos. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar eventos no JavaScript?,"eventos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com hoisting?,"hoisting é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo sessionStorage. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar GraphQL no JavaScript?,"GraphQL é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo let vs var. Seu uso adequado melhora a performance e a legibilidade do código."
Dê um exemplo de NPM.,"NPM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo bubbling e capturing. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de Memoization?,"Memoization é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo callbacks. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre event listeners e destructuring?,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo destructuring. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com WebPack?,"WebPack é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Promises. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as melhores práticas para manipulação de DOM?,"manipulação de DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Express.js. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no tipos de dados nas versões mais recentes do JavaScript?,"tipos de dados é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipagem dinâmica. Seu uso adequado melhora a performance e a legibilidade do código."
Quando usar operadores de comparação?,"operadores de comparação é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Herança prototípica. Seu uso adequado melhora a performance e a legibilidade do código."
Por que constantes é importante?,"constantes é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Shadow DOM. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar Service Workers no JavaScript?,"Service Workers é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Herança prototípica. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com tipos de dados?,"tipos de dados é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no JSON nas versões mais recentes do JavaScript?,"JSON é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo bind, call e apply. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona Currying?,"Currying é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo módulos ES6. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar debounce e throttle?,"debounce e throttle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores de comparação. Seu uso adequado melhora a performance e a legibilidade do código."
O que é fetch API?,"fetch API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo API. Seu uso adequado melhora a performance e a legibilidade do código."
Explique this em JavaScript de forma simples.,"this em JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Regex em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Explique operadores de comparação de forma simples.,"operadores de comparação é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções anônimas. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar event listeners?,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como manipulação de DOM se relaciona com debounce e throttle?,"manipulação de DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo debounce e throttle. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no programação assíncrona nas versões mais recentes do JavaScript?,"programação assíncrona é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Bun.js. Seu uso adequado melhora a performance e a legibilidade do código."
O que é variáveis?,"variáveis é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo NPM. Seu uso adequado melhora a performance e a legibilidade do código."
Como Vue.js se relaciona com cookies?,"Vue.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo cookies. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar rest operator?,"rest operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo módulos ES6. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para arrow functions?,"arrow functions é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo hoisting. Seu uso adequado melhora a performance e a legibilidade do código."
Explique WebSockets de forma simples.,"WebSockets é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Deno. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de spread operator?,"spread operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar operadores de comparação no JavaScript?,"operadores de comparação é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Jest. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para rest operator?,"rest operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo loops. Seu uso adequado melhora a performance e a legibilidade do código."
Como closures se relaciona com Math em JavaScript?,"closures é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são as alternativas para XMLHttpRequest?,"XMLHttpRequest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo ESLint. Seu uso adequado melhora a performance e a legibilidade do código."
"Quais são as melhores práticas para Map, Filter e Reduce?","Map, Filter e Reduce é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipagem dinâmica. Seu uso adequado melhora a performance e a legibilidade do código."
Por que Cypress é importante?,"Cypress é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo AJAX. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com event listeners?,"event listeners é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Cypress. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com eventos?,"eventos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores de comparação. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de Bun.js?,"Bun.js é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo callbacks. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre Mocha e Chai e SetTimeout e SetInterval?,"Mocha e Chai é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo SetTimeout e SetInterval. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no operadores lógicos nas versões mais recentes do JavaScript?,"operadores lógicos é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar WebSockets?,"WebSockets é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Node.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como variáveis se relaciona com SetTimeout e SetInterval?,"variáveis é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo SetTimeout e SetInterval. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com estruturas de controle?,"estruturas de controle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo GraphQL. Seu uso adequado melhora a performance e a legibilidade do código."
Como otimizar o uso de Jest?,"Jest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo import e export. Seu uso adequado melhora a performance e a legibilidade do código."
O que é módulos ES6?,"módulos ES6 é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Math em JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como fetch API se compara a tecnologias similares?,"fetch API é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo debounce e throttle. Seu uso adequado melhora a performance e a legibilidade do código."
Como import e export se relaciona com Vue.js?,"import e export é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Vue.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com variáveis?,"variáveis é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo funções anônimas. Seu uso adequado melhora a performance e a legibilidade do código."
Qual a diferença entre Service Workers e eventos?,"Service Workers é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com Cypress?,"Cypress é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
Quais são os benefícios de usar JSON?,"JSON é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo TypeScript. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar hoisting no JavaScript?,"hoisting é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Jest. Seu uso adequado melhora a performance e a legibilidade do código."
Por que XMLHttpRequest é importante?,"XMLHttpRequest é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo tipos de dados. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com JavaScript?,"JavaScript é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo let vs var. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de loops?,"loops é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
Qual é a sintaxe de Shadow DOM?,"Shadow DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
O que mudou no manipulação de DOM nas versões mais recentes do JavaScript?,"manipulação de DOM é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo eventos. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com ESLint?,"ESLint é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo async/await. Seu uso adequado melhora a performance e a legibilidade do código."
Quais os principais problemas ao usar WebAssembly?,"WebAssembly é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo JavaScript. Seu uso adequado melhora a performance e a legibilidade do código."
Que ferramentas ajudam a trabalhar com cookies?,"cookies é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Vue.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como arrow functions se compara a tecnologias similares?,"arrow functions é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo API. Seu uso adequado melhora a performance e a legibilidade do código."
Como testar JSON no JavaScript?,"JSON é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Node.js. Seu uso adequado melhora a performance e a legibilidade do código."
Como depurar problemas com spread operator?,"spread operator é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo programação assíncrona. Seu uso adequado melhora a performance e a legibilidade do código."
Por que closures é importante?,"closures é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo closures. Seu uso adequado melhora a performance e a legibilidade do código."
Como funciona estruturas de controle?,"estruturas de controle é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo Memoization. Seu uso adequado melhora a performance e a legibilidade do código."
Como evitar erros ao trabalhar com módulos ES6?,"módulos ES6 é um conceito importante em JavaScript. Ele é utilizado para diversas operações, incluindo operadores lógicos. Seu uso adequado melhora a performance e a legibilidade do código."
